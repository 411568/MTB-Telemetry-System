
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004750  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb0  08004eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000070  08004f28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08004f28  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001185b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  000318fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000344a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00035190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019adc  00000000  00000000  00035d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d1d  00000000  00000000  0004f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099446  00000000  00000000  00062509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb94f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003658  00000000  00000000  000fb9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048d8 	.word	0x080048d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080048d8 	.word	0x080048d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d113      	bne.n	80005b4 <Brake_Sensor_Read+0x3c>
	{
		if(HAL_ADC_PollForConversion(&handler_1_brakes, 10) == HAL_OK)
 800058c:	210a      	movs	r1, #10
 800058e:	4815      	ldr	r0, [pc, #84]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 8000590:	f001 f95c 	bl	800184c <HAL_ADC_PollForConversion>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d11f      	bne.n	80005da <Brake_Sensor_Read+0x62>
		{
			ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 800059a:	4812      	ldr	r0, [pc, #72]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 800059c:	f001 f9e1 	bl	8001962 <HAL_ADC_GetValue>
 80005a0:	4603      	mov	r3, r0
 80005a2:	81fb      	strh	r3, [r7, #14]
		    ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 80005a4:	2101      	movs	r1, #1
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005a8:	f000 f854 	bl	8000654 <ADC_SetActiveChannel>
		    HAL_ADC_Start(&handler_1_brakes);
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005ae:	f001 f899 	bl	80016e4 <HAL_ADC_Start>
 80005b2:	e012      	b.n	80005da <Brake_Sensor_Read+0x62>
		}
	}
	else
	{
		if(HAL_ADC_PollForConversion(&handler_1_brakes, 10) == HAL_OK)
 80005b4:	210a      	movs	r1, #10
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005b8:	f001 f948 	bl	800184c <HAL_ADC_PollForConversion>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d10b      	bne.n	80005da <Brake_Sensor_Read+0x62>
		{
			ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005c4:	f001 f9cd 	bl	8001962 <HAL_ADC_GetValue>
 80005c8:	4603      	mov	r3, r0
 80005ca:	81fb      	strh	r3, [r7, #14]
			ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 80005cc:	2102      	movs	r1, #2
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005d0:	f000 f840 	bl	8000654 <ADC_SetActiveChannel>
			HAL_ADC_Start(&handler_1_brakes);
 80005d4:	4803      	ldr	r0, [pc, #12]	; (80005e4 <Brake_Sensor_Read+0x6c>)
 80005d6:	f001 f885 	bl	80016e4 <HAL_ADC_Start>
		}
	}

	return ADC_reading;
 80005da:	89fb      	ldrh	r3, [r7, #14]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000049c 	.word	0x2000049c

080005e8 <HMC5883L_get_X>:
	HAL_I2C_Mem_Write(&hi2c3, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
	HAL_I2C_Mem_Write(&hi2c3, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
}

uint16_t HMC5883L_get_X(uint8_t sensor)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af04      	add	r7, sp, #16
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
	uint8_t DataX[2];
	uint16_t Xaxis = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	81fb      	strh	r3, [r7, #14]

	// Read the register
	if(sensor == 0)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d10d      	bne.n	8000618 <HMC5883L_get_X+0x30>
		HAL_I2C_Mem_Read(&handler_1_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	2302      	movs	r3, #2
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2301      	movs	r3, #1
 800060c:	2283      	movs	r2, #131	; 0x83
 800060e:	213c      	movs	r1, #60	; 0x3c
 8000610:	480e      	ldr	r0, [pc, #56]	; (800064c <HMC5883L_get_X+0x64>)
 8000612:	f001 ffb3 	bl	800257c <HAL_I2C_Mem_Read>
 8000616:	e00c      	b.n	8000632 <HMC5883L_get_X+0x4a>
	else
		HAL_I2C_Mem_Read(&handler_2_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2302      	movs	r3, #2
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	2283      	movs	r2, #131	; 0x83
 800062a:	213c      	movs	r1, #60	; 0x3c
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <HMC5883L_get_X+0x68>)
 800062e:	f001 ffa5 	bl	800257c <HAL_I2C_Mem_Read>

	Xaxis = ((DataX[1]<<8) | DataX[0]);
 8000632:	7b7b      	ldrb	r3, [r7, #13]
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	b21a      	sxth	r2, r3
 8000638:	7b3b      	ldrb	r3, [r7, #12]
 800063a:	b21b      	sxth	r3, r3
 800063c:	4313      	orrs	r3, r2
 800063e:	b21b      	sxth	r3, r3
 8000640:	81fb      	strh	r3, [r7, #14]
	return Xaxis;
 8000642:	89fb      	ldrh	r3, [r7, #14]
}
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200004e4 	.word	0x200004e4
 8000650:	20000538 	.word	0x20000538

08000654 <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000670:	2301      	movs	r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4619      	mov	r1, r3
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f001 f97c 	bl	800197c <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 800068a:	f000 fd49 	bl	8001120 <Error_Handler>
	}
}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	82fb      	strh	r3, [r7, #22]
	float battery_voltage = 0.0;
 80006a2:	f04f 0300 	mov.w	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
	const float voltage_divider = 0.5;
 80006a8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80006ac:	60fb      	str	r3, [r7, #12]
	const float adc_voltage = 3.3;
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <Read_Battery_Voltage+0x88>)
 80006b0:	60bb      	str	r3, [r7, #8]

	// Get the ADC reading
	if(HAL_ADC_PollForConversion(&handler_batt_adc, 10) == HAL_OK)
 80006b2:	210a      	movs	r1, #10
 80006b4:	481b      	ldr	r0, [pc, #108]	; (8000724 <Read_Battery_Voltage+0x8c>)
 80006b6:	f001 f8c9 	bl	800184c <HAL_ADC_PollForConversion>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d10b      	bne.n	80006d8 <Read_Battery_Voltage+0x40>
	{
		ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 80006c0:	4818      	ldr	r0, [pc, #96]	; (8000724 <Read_Battery_Voltage+0x8c>)
 80006c2:	f001 f94e 	bl	8001962 <HAL_ADC_GetValue>
 80006c6:	4603      	mov	r3, r0
 80006c8:	82fb      	strh	r3, [r7, #22]
		ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 80006ca:	2103      	movs	r1, #3
 80006cc:	4815      	ldr	r0, [pc, #84]	; (8000724 <Read_Battery_Voltage+0x8c>)
 80006ce:	f7ff ffc1 	bl	8000654 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_batt_adc);
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <Read_Battery_Voltage+0x8c>)
 80006d4:	f001 f806 	bl	80016e4 <HAL_ADC_Start>
	}

	// Convert to voltage
	battery_voltage = 10 * ADC_reading / 4096 * adc_voltage * voltage_divider;
 80006d8:	8afa      	ldrh	r2, [r7, #22]
 80006da:	4613      	mov	r3, r2
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da01      	bge.n	80006ea <Read_Battery_Voltage+0x52>
 80006e6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006ea:	131b      	asrs	r3, r3, #12
 80006ec:	ee07 3a90 	vmov	s15, r3
 80006f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80006f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8000700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000704:	edc7 7a04 	vstr	s15, [r7, #16]

	return (uint8_t)(battery_voltage);
 8000708:	edd7 7a04 	vldr	s15, [r7, #16]
 800070c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000710:	edc7 7a01 	vstr	s15, [r7, #4]
 8000714:	793b      	ldrb	r3, [r7, #4]
 8000716:	b2db      	uxtb	r3, r3
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40533333 	.word	0x40533333
 8000724:	2000049c 	.word	0x2000049c

08000728 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 8000728:	b490      	push	{r4, r7}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	4604      	mov	r4, r0
 8000730:	4608      	mov	r0, r1
 8000732:	4611      	mov	r1, r2
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	71fb      	strb	r3, [r7, #7]
 800073a:	4603      	mov	r3, r0
 800073c:	71bb      	strb	r3, [r7, #6]
 800073e:	460b      	mov	r3, r1
 8000740:	717b      	strb	r3, [r7, #5]
 8000742:	4613      	mov	r3, r2
 8000744:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <ST7565_updateBoundingBox+0x68>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	429a      	cmp	r2, r3
 800074e:	d202      	bcs.n	8000756 <ST7565_updateBoundingBox+0x2e>
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <ST7565_updateBoundingBox+0x68>)
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <ST7565_updateBoundingBox+0x6c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	797a      	ldrb	r2, [r7, #5]
 800075c:	429a      	cmp	r2, r3
 800075e:	d902      	bls.n	8000766 <ST7565_updateBoundingBox+0x3e>
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <ST7565_updateBoundingBox+0x6c>)
 8000762:	797b      	ldrb	r3, [r7, #5]
 8000764:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <ST7565_updateBoundingBox+0x70>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	79ba      	ldrb	r2, [r7, #6]
 800076c:	429a      	cmp	r2, r3
 800076e:	d202      	bcs.n	8000776 <ST7565_updateBoundingBox+0x4e>
 8000770:	4a09      	ldr	r2, [pc, #36]	; (8000798 <ST7565_updateBoundingBox+0x70>)
 8000772:	79bb      	ldrb	r3, [r7, #6]
 8000774:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <ST7565_updateBoundingBox+0x74>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	793a      	ldrb	r2, [r7, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	d902      	bls.n	8000786 <ST7565_updateBoundingBox+0x5e>
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <ST7565_updateBoundingBox+0x74>)
 8000782:	793b      	ldrb	r3, [r7, #4]
 8000784:	7013      	strb	r3, [r2, #0]
	#endif
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bc90      	pop	{r4, r7}
 800078e:	4770      	bx	lr
 8000790:	2000048c 	.word	0x2000048c
 8000794:	2000048d 	.word	0x2000048d
 8000798:	2000048e 	.word	0x2000048e
 800079c:	2000048f 	.word	0x2000048f

080007a0 <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	603a      	str	r2, [r7, #0]
 80007aa:	71fb      	strb	r3, [r7, #7]
 80007ac:	460b      	mov	r3, r1
 80007ae:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 80007b0:	e017      	b.n	80007e2 <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	781a      	ldrb	r2, [r3, #0]
 80007b6:	79b9      	ldrb	r1, [r7, #6]
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f81a 	bl	80007f4 <ST7565_drawchar>
		c++;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	3306      	adds	r3, #6
 80007ca:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b79      	cmp	r3, #121	; 0x79
 80007d0:	d904      	bls.n	80007dc <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
			line++;
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	3301      	adds	r3, #1
 80007da:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d804      	bhi.n	80007ec <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1e3      	bne.n	80007b2 <ST7565_drawstring+0x12>
 80007ea:	e000      	b.n	80007ee <ST7565_drawstring+0x4e>
			return;  // ran out of space
 80007ec:	bf00      	nop
	}
}
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 80007fe:	460b      	mov	r3, r1
 8000800:	71bb      	strb	r3, [r7, #6]
 8000802:	4613      	mov	r3, r2
 8000804:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 8000806:	2300      	movs	r3, #0
 8000808:	73fb      	strb	r3, [r7, #15]
 800080a:	e013      	b.n	8000834 <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 800080c:	797a      	ldrb	r2, [r7, #5]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	441a      	add	r2, r3
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	441a      	add	r2, r3
 8000818:	79f9      	ldrb	r1, [r7, #7]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	01db      	lsls	r3, r3, #7
 800081e:	440b      	add	r3, r1
 8000820:	4910      	ldr	r1, [pc, #64]	; (8000864 <ST7565_drawchar+0x70>)
 8000822:	5c89      	ldrb	r1, [r1, r2]
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <ST7565_drawchar+0x74>)
 8000826:	54d1      	strb	r1, [r2, r3]
		x++;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	3301      	adds	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b04      	cmp	r3, #4
 8000838:	d9e8      	bls.n	800080c <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3b05      	subs	r3, #5
 800083e:	b2d8      	uxtb	r0, r3
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	b2d9      	uxtb	r1, r3
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	3b01      	subs	r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	3301      	adds	r3, #1
 8000850:	b2db      	uxtb	r3, r3
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f7ff ff67 	bl	8000728 <ST7565_updateBoundingBox>
}
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	08004960 	.word	0x08004960
 8000868:	2000008c 	.word	0x2000008c

0800086c <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 8000876:	f000 f80f 	bl	8000898 <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 800087a:	20af      	movs	r0, #175	; 0xaf
 800087c:	f000 f866 	bl	800094c <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 8000880:	20a4      	movs	r0, #164	; 0xa4
 8000882:	f000 f863 	bl	800094c <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f887 	bl	800099c <ST7565_st7565_set_brightness>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <ST7565_st7565_init+0x7c>)
 80008a2:	f001 fcf3 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	481a      	ldr	r0, [pc, #104]	; (8000914 <ST7565_st7565_init+0x7c>)
 80008ac:	f001 fcee 	bl	800228c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80008b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b4:	f000 feae 	bl	8001614 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2108      	movs	r1, #8
 80008bc:	4815      	ldr	r0, [pc, #84]	; (8000914 <ST7565_st7565_init+0x7c>)
 80008be:	f001 fce5 	bl	800228c <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 80008c2:	20a3      	movs	r0, #163	; 0xa3
 80008c4:	f000 f842 	bl	800094c <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 80008c8:	20a0      	movs	r0, #160	; 0xa0
 80008ca:	f000 f83f 	bl	800094c <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 80008ce:	20c0      	movs	r0, #192	; 0xc0
 80008d0:	f000 f83c 	bl	800094c <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 80008d4:	2040      	movs	r0, #64	; 0x40
 80008d6:	f000 f839 	bl	800094c <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 80008da:	202c      	movs	r0, #44	; 0x2c
 80008dc:	f000 f836 	bl	800094c <ST7565_st7565_command>
	HAL_Delay(50);
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f000 fe97 	bl	8001614 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 80008e6:	202e      	movs	r0, #46	; 0x2e
 80008e8:	f000 f830 	bl	800094c <ST7565_st7565_command>
	HAL_Delay(50);
 80008ec:	2032      	movs	r0, #50	; 0x32
 80008ee:	f000 fe91 	bl	8001614 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 80008f2:	202f      	movs	r0, #47	; 0x2f
 80008f4:	f000 f82a 	bl	800094c <ST7565_st7565_command>
	HAL_Delay(10);
 80008f8:	200a      	movs	r0, #10
 80008fa:	f000 fe8b 	bl	8001614 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 80008fe:	2026      	movs	r0, #38	; 0x26
 8000900:	f000 f824 	bl	800094c <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 8000904:	233f      	movs	r3, #63	; 0x3f
 8000906:	227f      	movs	r2, #127	; 0x7f
 8000908:	2100      	movs	r1, #0
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff0c 	bl	8000728 <ST7565_updateBoundingBox>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020000 	.word	0x40020000

08000918 <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 8000922:	1df9      	adds	r1, r7, #7
 8000924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000928:	2201      	movs	r2, #1
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <ST7565_spiwrite+0x30>)
 800092c:	f003 f960 	bl	8003bf0 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 8000930:	bf00      	nop
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <ST7565_spiwrite+0x30>)
 8000934:	f003 fa98 	bl	8003e68 <HAL_SPI_GetState>
 8000938:	4603      	mov	r3, r0
 800093a:	2b01      	cmp	r3, #1
 800093c:	d1f9      	bne.n	8000932 <ST7565_spiwrite+0x1a>
}
 800093e:	bf00      	nop
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000058c 	.word	0x2000058c

0800094c <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <ST7565_st7565_command+0x24>)
 800095c:	f001 fc96 	bl	800228c <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ffd8 	bl	8000918 <ST7565_spiwrite>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40020000 	.word	0x40020000

08000974 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <ST7565_st7565_data+0x24>)
 8000984:	f001 fc82 	bl	800228c <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffc4 	bl	8000918 <ST7565_spiwrite>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020000 	.word	0x40020000

0800099c <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 80009a6:	2081      	movs	r0, #129	; 0x81
 80009a8:	f7ff ffd0 	bl	800094c <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ffc9 	bl	800094c <ST7565_st7565_command>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <ST7565_display>:

void ST7565_display(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	71bb      	strb	r3, [r7, #6]
 80009ce:	e055      	b.n	8000a7c <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <ST7565_display+0xe4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	3301      	adds	r3, #1
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	429a      	cmp	r2, r3
 80009de:	da49      	bge.n	8000a74 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <ST7565_display+0xe8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	429a      	cmp	r2, r3
 80009ec:	db4a      	blt.n	8000a84 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fe10 	bl	8001614 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <ST7565_display+0xec>)
 80009f8:	5cd3      	ldrb	r3, [r2, r3]
 80009fa:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ffa3 	bl	800094c <ST7565_st7565_command>
		HAL_Delay(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 fe04 	bl	8001614 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <ST7565_display+0xf0>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <ST7565_display+0xf4>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff93 	bl	800094c <ST7565_st7565_command>
		HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fdf4 	bl	8001614 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	091b      	lsrs	r3, r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff87 	bl	800094c <ST7565_st7565_command>
		HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fde8 	bl	8001614 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 8000a44:	20e0      	movs	r0, #224	; 0xe0
 8000a46:	f7ff ff81 	bl	800094c <ST7565_st7565_command>
		HAL_Delay(1);
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	f000 fde2 	bl	8001614 <HAL_Delay>

		for (; col < maxcol; col++)
 8000a50:	e00b      	b.n	8000a6a <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 8000a52:	79bb      	ldrb	r3, [r7, #6]
 8000a54:	01da      	lsls	r2, r3, #7
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <ST7565_display+0xf8>)
 8000a5c:	5cd3      	ldrb	r3, [r2, r3]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff88 	bl	8000974 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3301      	adds	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d3ef      	bcc.n	8000a52 <ST7565_display+0x8e>
 8000a72:	e000      	b.n	8000a76 <ST7565_display+0xb2>
				continue;   // nope, skip it!
 8000a74:	bf00      	nop
	for (p = 0; p < 8; p++)
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	71bb      	strb	r3, [r7, #6]
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b07      	cmp	r3, #7
 8000a80:	d9a6      	bls.n	80009d0 <ST7565_display+0xc>
 8000a82:	e000      	b.n	8000a86 <ST7565_display+0xc2>
					break;
 8000a84:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <ST7565_display+0xf0>)
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <ST7565_display+0xf4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <ST7565_display+0xe4>)
 8000a94:	2240      	movs	r2, #64	; 0x40
 8000a96:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 8000a98:	4b04      	ldr	r3, [pc, #16]	; (8000aac <ST7565_display+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	#endif
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000048e 	.word	0x2000048e
 8000aac:	2000048f 	.word	0x2000048f
 8000ab0:	08004958 	.word	0x08004958
 8000ab4:	2000048c 	.word	0x2000048c
 8000ab8:	2000048d 	.word	0x2000048d
 8000abc:	2000008c 	.word	0x2000008c

08000ac0 <ST7565_clear>:

void ST7565_clear(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8000ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <ST7565_clear+0x20>)
 8000acc:	f003 face 	bl	800406c <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fe26 	bl	8000728 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000008c 	.word	0x2000008c

08000ae4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <MX_ADC1_Init+0x9c>)
 8000afa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <MX_ADC1_Init+0xa0>)
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b42:	480e      	ldr	r0, [pc, #56]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b44:	f000 fd8a 	bl	800165c <HAL_ADC_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b4e:	f000 fae7 	bl	8001120 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4619      	mov	r1, r3
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <MX_ADC1_Init+0x98>)
 8000b64:	f000 ff0a 	bl	800197c <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b6e:	f000 fad7 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000049c 	.word	0x2000049c
 8000b80:	40012000 	.word	0x40012000
 8000b84:	0f000001 	.word	0x0f000001

08000b88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_ADC_MspInit+0x7c>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d127      	bne.n	8000bfa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_ADC_MspInit+0x80>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 8000be2:	2307      	movs	r3, #7
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be6:	2303      	movs	r3, #3
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_ADC_MspInit+0x84>)
 8000bf6:	f001 f9c5 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40012000 	.word	0x40012000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a3c      	ldr	r2, [pc, #240]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c30:	f043 0304 	orr.w	r3, r3, #4
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <MX_GPIO_Init+0x110>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2158      	movs	r1, #88	; 0x58
 8000c9a:	4822      	ldr	r0, [pc, #136]	; (8000d24 <MX_GPIO_Init+0x114>)
 8000c9c:	f001 faf6 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca6:	4820      	ldr	r0, [pc, #128]	; (8000d28 <MX_GPIO_Init+0x118>)
 8000ca8:	f001 faf0 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8000cac:	2358      	movs	r3, #88	; 0x58
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4818      	ldr	r0, [pc, #96]	; (8000d24 <MX_GPIO_Init+0x114>)
 8000cc4:	f001 f95e 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_GPIO_Init+0x118>)
 8000ce2:	f001 f94f 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8000ce6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <MX_GPIO_Init+0x114>)
 8000cfc:	f001 f942 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8000d00:	23e0      	movs	r3, #224	; 0xe0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_GPIO_Init+0x118>)
 8000d14:	f001 f936 	bl	8001f84 <HAL_GPIO_Init>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400

08000d2c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d32:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <MX_I2C1_Init+0x54>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d38:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <MX_I2C1_Init+0x50>)
 8000d6a:	f001 fac3 	bl	80022f4 <HAL_I2C_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d74:	f000 f9d4 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200005e4 	.word	0x200005e4
 8000d80:	40005400 	.word	0x40005400
 8000d84:	000186a0 	.word	0x000186a0

08000d88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <MX_I2C2_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <MX_I2C2_Init+0x58>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000da6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000daa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_I2C2_Init+0x50>)
 8000dc6:	f001 fa95 	bl	80022f4 <HAL_I2C_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dd0:	f000 f9a6 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000538 	.word	0x20000538
 8000ddc:	40005800 	.word	0x40005800
 8000de0:	000186a0 	.word	0x000186a0

08000de4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <HAL_I2C_MspInit+0x10c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d12d      	bne.n	8000e62 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a39      	ldr	r2, [pc, #228]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e30:	2303      	movs	r3, #3
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e34:	2304      	movs	r3, #4
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482e      	ldr	r0, [pc, #184]	; (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000e40:	f001 f8a0 	bl	8001f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	4b2a      	ldr	r3, [pc, #168]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a29      	ldr	r2, [pc, #164]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b27      	ldr	r3, [pc, #156]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e60:	e041      	b.n	8000ee6 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_I2C_MspInit+0x118>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d13c      	bne.n	8000ee6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8e:	2312      	movs	r3, #18
 8000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	2303      	movs	r3, #3
 8000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ea6:	f001 f86d 	bl	8001f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	2312      	movs	r3, #18
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000eba:	2309      	movs	r3, #9
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <HAL_I2C_MspInit+0x114>)
 8000ec6:	f001 f85d 	bl	8001f84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000ed4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_I2C_MspInit+0x110>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	; 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40005800 	.word	0x40005800

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes t	he Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fb13 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f8a7 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f7ff fe7f 	bl	8000c10 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f12:	f7ff fde7 	bl	8000ae4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f16:	f7ff ff09 	bl	8000d2c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f1a:	f7ff ff35 	bl	8000d88 <MX_I2C2_Init>
  MX_RTC_Init();
 8000f1e:	f000 f905 	bl	800112c <MX_RTC_Init>
  MX_SPI1_Init();
 8000f22:	f000 f955 	bl	80011d0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f26:	f000 f98b 	bl	8001240 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7565_begin(0x7); // initize display
 8000f2a:	2007      	movs	r0, #7
 8000f2c:	f7ff fc9e 	bl	800086c <ST7565_begin>
  ST7565_clear(); // clear the display
 8000f30:	f7ff fdc6 	bl	8000ac0 <ST7565_clear>
  while (1)
  {
    /* USER CODE END WHILE */

	  // TEST
	  HAL_GPIO_TogglePin(DisplayRSE_GPIO_Port, DisplayRSE_Pin);
 8000f34:	2108      	movs	r1, #8
 8000f36:	4841      	ldr	r0, [pc, #260]	; (800103c <main+0x13c>)
 8000f38:	f001 f9c1 	bl	80022be <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f40:	f000 fb68 	bl	8001614 <HAL_Delay>

	  // TEST
	  ST7565_drawstring(1, 1, "Hello world!");
 8000f44:	4a3e      	ldr	r2, [pc, #248]	; (8001040 <main+0x140>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fc29 	bl	80007a0 <ST7565_drawstring>


	  // Read magnetometer data
	  uint16_t HMC_x_axis_front = HMC5883L_get_X(SENSOR_FRONT);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fb4a 	bl	80005e8 <HMC5883L_get_X>
 8000f54:	4603      	mov	r3, r0
 8000f56:	82fb      	strh	r3, [r7, #22]
	  uint16_t HMC_x_axis_rear = HMC5883L_get_X(SENSOR_REAR);
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f7ff fb45 	bl	80005e8 <HMC5883L_get_X>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	82bb      	strh	r3, [r7, #20]
	  char str[10] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	809a      	strh	r2, [r3, #4]

	  sprintf(str, "%u", HMC_x_axis_front);
 8000f70:	8afa      	ldrh	r2, [r7, #22]
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	4933      	ldr	r1, [pc, #204]	; (8001044 <main+0x144>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 f880 	bl	800407c <siprintf>
	  ST7565_drawstring(2, 0, "Front travel: ");
 8000f7c:	4a32      	ldr	r2, [pc, #200]	; (8001048 <main+0x148>)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2002      	movs	r0, #2
 8000f82:	f7ff fc0d 	bl	80007a0 <ST7565_drawstring>
	  ST7565_drawstring(2, 20, str);
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2114      	movs	r1, #20
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f7ff fc07 	bl	80007a0 <ST7565_drawstring>

	  sprintf(str, "%u", HMC_x_axis_rear);
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	492b      	ldr	r1, [pc, #172]	; (8001044 <main+0x144>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f003 f86f 	bl	800407c <siprintf>
	  ST7565_drawstring(3, 0, "Rear travel: ");
 8000f9e:	4a2b      	ldr	r2, [pc, #172]	; (800104c <main+0x14c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f7ff fbfc 	bl	80007a0 <ST7565_drawstring>
	  ST7565_drawstring(3, 20, str);
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	461a      	mov	r2, r3
 8000fac:	2114      	movs	r1, #20
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f7ff fbf6 	bl	80007a0 <ST7565_drawstring>

	  // Read brake sensor ADC
	  uint16_t Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff fadf 	bl	8000578 <Brake_Sensor_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	827b      	strh	r3, [r7, #18]
	  uint16_t Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fada 	bl	8000578 <Brake_Sensor_Read>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	823b      	strh	r3, [r7, #16]

	  sprintf(str, "%u", Brake_left);
 8000fc8:	8a7a      	ldrh	r2, [r7, #18]
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	491d      	ldr	r1, [pc, #116]	; (8001044 <main+0x144>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f854 	bl	800407c <siprintf>
	  ST7565_drawstring(4, 0, "Brake left: ");
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x150>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff fbe1 	bl	80007a0 <ST7565_drawstring>
	  ST7565_drawstring(4, 20, str);
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2114      	movs	r1, #20
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	f7ff fbdb 	bl	80007a0 <ST7565_drawstring>

	  sprintf(str, "%u", Brake_right);
 8000fea:	8a3a      	ldrh	r2, [r7, #16]
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4915      	ldr	r1, [pc, #84]	; (8001044 <main+0x144>)
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 f843 	bl	800407c <siprintf>
	  ST7565_drawstring(5, 0, "Brake right: ");
 8000ff6:	4a17      	ldr	r2, [pc, #92]	; (8001054 <main+0x154>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2005      	movs	r0, #5
 8000ffc:	f7ff fbd0 	bl	80007a0 <ST7565_drawstring>
	  ST7565_drawstring(5, 20, str);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	461a      	mov	r2, r3
 8001004:	2114      	movs	r1, #20
 8001006:	2005      	movs	r0, #5
 8001008:	f7ff fbca 	bl	80007a0 <ST7565_drawstring>

	  // Read battery voltage
	  uint8_t battery_voltage = Read_Battery_Voltage();
 800100c:	f7ff fb44 	bl	8000698 <Read_Battery_Voltage>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
	  sprintf(str, "%u", battery_voltage);
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	490a      	ldr	r1, [pc, #40]	; (8001044 <main+0x144>)
 800101a:	4618      	mov	r0, r3
 800101c:	f003 f82e 	bl	800407c <siprintf>
	  ST7565_drawstring(6, 0, "Battery voltage: ");
 8001020:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <main+0x158>)
 8001022:	2100      	movs	r1, #0
 8001024:	2006      	movs	r0, #6
 8001026:	f7ff fbbb 	bl	80007a0 <ST7565_drawstring>
	  ST7565_drawstring(6, 20, str);
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	461a      	mov	r2, r3
 800102e:	2114      	movs	r1, #20
 8001030:	2006      	movs	r0, #6
 8001032:	f7ff fbb5 	bl	80007a0 <ST7565_drawstring>

	  // TODO
	  // Read accelerometer and gyroscpe

	  // Send data to display
	  ST7565_display();
 8001036:	f7ff fcc5 	bl	80009c4 <ST7565_display>
  {
 800103a:	e77b      	b.n	8000f34 <main+0x34>
 800103c:	40020000 	.word	0x40020000
 8001040:	080048f0 	.word	0x080048f0
 8001044:	08004900 	.word	0x08004900
 8001048:	08004904 	.word	0x08004904
 800104c:	08004914 	.word	0x08004914
 8001050:	08004924 	.word	0x08004924
 8001054:	08004934 	.word	0x08004934
 8001058:	08004944 	.word	0x08004944

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fffe 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <SystemClock_Config+0xbc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <SystemClock_Config+0xbc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <SystemClock_Config+0xbc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <SystemClock_Config+0xc0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a8:	4a1c      	ldr	r2, [pc, #112]	; (800111c <SystemClock_Config+0xc0>)
 80010aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <SystemClock_Config+0xc0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010bc:	230a      	movs	r3, #10
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0320 	add.w	r3, r7, #32
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fefb 	bl	8002ed0 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80010e0:	f000 f81e 	bl	8001120 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 f95e 	bl	80033c0 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800110a:	f000 f809 	bl	8001120 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	; 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	e7fe      	b.n	8001128 <Error_Handler+0x8>
	...

0800112c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_RTC_Init+0x44>)
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <MX_RTC_Init+0x48>)
 8001134:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_RTC_Init+0x44>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_RTC_Init+0x44>)
 800113e:	227f      	movs	r2, #127	; 0x7f
 8001140:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_RTC_Init+0x44>)
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_RTC_Init+0x44>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_RTC_Init+0x44>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_RTC_Init+0x44>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_RTC_Init+0x44>)
 800115c:	f002 fbda 	bl	8003914 <HAL_RTC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001166:	f7ff ffdb 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000638 	.word	0x20000638
 8001174:	40002800 	.word	0x40002800

08001178 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0c      	ldr	r2, [pc, #48]	; (80011c8 <HAL_RTC_MspInit+0x50>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d111      	bne.n	80011be <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800119a:	2302      	movs	r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800119e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fac5 	bl	8003738 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80011b4:	f7ff ffb4 	bl	8001120 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b8:	4b04      	ldr	r3, [pc, #16]	; (80011cc <HAL_RTC_MspInit+0x54>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40002800 	.word	0x40002800
 80011cc:	42470e3c 	.word	0x42470e3c

080011d0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_SPI1_Init+0x68>)
 80011d6:	4a19      	ldr	r2, [pc, #100]	; (800123c <MX_SPI1_Init+0x6c>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_SPI1_Init+0x68>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_SPI1_Init+0x68>)
 80011e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_SPI1_Init+0x68>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_SPI1_Init+0x68>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_SPI1_Init+0x68>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_SPI1_Init+0x68>)
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_SPI1_Init+0x68>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_SPI1_Init+0x68>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_SPI1_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	; (8001238 <MX_SPI1_Init+0x68>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_SPI1_Init+0x68>)
 800121e:	220a      	movs	r2, #10
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_SPI1_Init+0x68>)
 8001224:	f002 fc5b 	bl	8003ade <HAL_SPI_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800122e:	f7ff ff77 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000058c 	.word	0x2000058c
 800123c:	40013000 	.word	0x40013000

08001240 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_SPI2_Init+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_SPI2_Init+0x64>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_SPI2_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_SPI2_Init+0x64>)
 800126c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001270:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_SPI2_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_SPI2_Init+0x64>)
 800128c:	220a      	movs	r2, #10
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_SPI2_Init+0x64>)
 8001292:	f002 fc24 	bl	8003ade <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800129c:	f7ff ff40 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000658 	.word	0x20000658
 80012a8:	40003800 	.word	0x40003800

080012ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_SPI_MspInit+0xe8>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12c      	bne.n	8001328 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a29      	ldr	r2, [pc, #164]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_SPI_MspInit+0xec>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <HAL_SPI_MspInit+0xf0>)
 8001322:	f000 fe2f 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001326:	e031      	b.n	800138c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1c      	ldr	r2, [pc, #112]	; (80013a0 <HAL_SPI_MspInit+0xf4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12c      	bne.n	800138c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_SPI_MspInit+0xec>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_SPI_MspInit+0xec>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_SPI_MspInit+0xec>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspInit+0xec>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspInit+0xec>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_SPI_MspInit+0xec>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800136a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137c:	2305      	movs	r3, #5
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <HAL_SPI_MspInit+0xf8>)
 8001388:	f000 fdfc 	bl	8001f84 <HAL_GPIO_Init>
}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	; 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40013000 	.word	0x40013000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40003800 	.word	0x40003800
 80013a4:	40020400 	.word	0x40020400

080013a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_MspInit+0x4c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x4c>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f8c6 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f002 fdcc 	bl	8004018 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20010000 	.word	0x20010000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	20000490 	.word	0x20000490
 80014b4:	200006c8 	.word	0x200006c8

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e0:	480d      	ldr	r0, [pc, #52]	; (8001518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014e2:	490e      	ldr	r1, [pc, #56]	; (800151c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e8:	e002      	b.n	80014f0 <LoopCopyDataInit>

080014ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ee:	3304      	adds	r3, #4

080014f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f4:	d3f9      	bcc.n	80014ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f8:	4c0b      	ldr	r4, [pc, #44]	; (8001528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014fc:	e001      	b.n	8001502 <LoopFillZerobss>

080014fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001500:	3204      	adds	r2, #4

08001502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001504:	d3fb      	bcc.n	80014fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd7 	bl	80014b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f002 fd8b 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fcf7 	bl	8000f00 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001520:	08004eb8 	.word	0x08004eb8
  ldr r2, =_sbss
 8001524:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001528:	200006c4 	.word	0x200006c4

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fcdf 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff ff20 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fce9 	bl	8001f6a <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fcbf 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	200006b0 	.word	0x200006b0

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200006b0 	.word	0x200006b0

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e033      	b.n	80016da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fa84 	bl	8000b88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa86 	bl	8001bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Start+0x1a>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e097      	b.n	800182e <HAL_ADC_Start+0x14a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d018      	beq.n	8001746 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001724:	4b45      	ldr	r3, [pc, #276]	; (800183c <HAL_ADC_Start+0x158>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a45      	ldr	r2, [pc, #276]	; (8001840 <HAL_ADC_Start+0x15c>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9a      	lsrs	r2, r3, #18
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3b01      	subs	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d15f      	bne.n	8001814 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001772:	2b00      	cmp	r3, #0
 8001774:	d007      	beq.n	8001786 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800177e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001792:	d106      	bne.n	80017a2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	f023 0206 	bic.w	r2, r3, #6
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_ADC_Start+0x160>)
 80017b2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017bc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d129      	bne.n	800182c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	e020      	b.n	800182c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a16      	ldr	r2, [pc, #88]	; (8001848 <HAL_ADC_Start+0x164>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d11b      	bne.n	800182c <HAL_ADC_Start+0x148>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d114      	bne.n	800182c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e00b      	b.n	800182c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	431bde83 	.word	0x431bde83
 8001844:	40012300 	.word	0x40012300
 8001848:	40012000 	.word	0x40012000

0800184c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001868:	d113      	bne.n	8001892 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001878:	d10b      	bne.n	8001892 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f043 0220 	orr.w	r2, r3, #32
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e063      	b.n	800195a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001892:	f7ff feb3 	bl	80015fc <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001898:	e021      	b.n	80018de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d01d      	beq.n	80018de <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x6c>
 80018a8:	f7ff fea8 	bl	80015fc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d212      	bcs.n	80018de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d00b      	beq.n	80018de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f043 0204 	orr.w	r2, r3, #4
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e03d      	b.n	800195a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d1d6      	bne.n	800189a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0212 	mvn.w	r2, #18
 80018f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d123      	bne.n	8001958 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11f      	bne.n	8001958 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001930:	2b00      	cmp	r3, #0
 8001932:	d111      	bne.n	8001958 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d105      	bne.n	8001958 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c>
 8001994:	2302      	movs	r3, #2
 8001996:	e105      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x228>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d925      	bls.n	80019f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68d9      	ldr	r1, [r3, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	3b1e      	subs	r3, #30
 80019be:	2207      	movs	r2, #7
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68d9      	ldr	r1, [r3, #12]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	409a      	lsls	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e022      	b.n	8001a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	2207      	movs	r2, #7
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4403      	add	r3, r0
 8001a30:	409a      	lsls	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d824      	bhi.n	8001a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b05      	subs	r3, #5
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	400a      	ands	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b05      	subs	r3, #5
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8a:	e04c      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d824      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b23      	subs	r3, #35	; 0x23
 8001aa6:	221f      	movs	r2, #31
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b23      	subs	r3, #35	; 0x23
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
 8001adc:	e023      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b41      	subs	r3, #65	; 0x41
 8001af0:	221f      	movs	r2, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b41      	subs	r3, #65	; 0x41
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_ADC_ConfigChannel+0x234>)
 8001b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d123      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d003      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x1e6>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d11b      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d111      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_ADC_ConfigChannel+0x240>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9a      	lsrs	r2, r3, #18
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40012300 	.word	0x40012300
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <ADC_Init+0x1f0>)
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <ADC_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	3b01      	subs	r3, #1
 8001d18:	035a      	lsls	r2, r3, #13
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e007      	b.n	8001d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051a      	lsls	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d76:	025a      	lsls	r2, r3, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	029a      	lsls	r2, r3, #10
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	0f000001 	.word	0x0f000001

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff47 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5c 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e159      	b.n	8002254 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8148 	bne.w	800224e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a2 	beq.w	800224e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_GPIO_Init+0x2e8>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_GPIO_Init+0x2ec>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_GPIO_Init+0x2f0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x202>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x2f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x1fe>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_GPIO_Init+0x2f8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x1fa>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a46      	ldr	r2, [pc, #280]	; (8002280 <HAL_GPIO_Init+0x2fc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x1f6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a45      	ldr	r2, [pc, #276]	; (8002284 <HAL_GPIO_Init+0x300>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x1f2>
 8002172:	2304      	movs	r3, #4
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002176:	2307      	movs	r3, #7
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x204>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x204>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2ec>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d0:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_GPIO_Init+0x304>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f aea2 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022be:	b480      	push	{r7}
 80022c0:	b085      	sub	sp, #20
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4013      	ands	r3, r2
 80022d6:	041a      	lsls	r2, r3, #16
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43d9      	mvns	r1, r3
 80022dc:	887b      	ldrh	r3, [r7, #2]
 80022de:	400b      	ands	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e12b      	b.n	800255e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe fd62 	bl	8000de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002358:	f001 f9da 	bl	8003710 <HAL_RCC_GetPCLK1Freq>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a81      	ldr	r2, [pc, #516]	; (8002568 <HAL_I2C_Init+0x274>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d807      	bhi.n	8002378 <HAL_I2C_Init+0x84>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a80      	ldr	r2, [pc, #512]	; (800256c <HAL_I2C_Init+0x278>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e006      	b.n	8002386 <HAL_I2C_Init+0x92>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a7d      	ldr	r2, [pc, #500]	; (8002570 <HAL_I2C_Init+0x27c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0e7      	b.n	800255e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a78      	ldr	r2, [pc, #480]	; (8002574 <HAL_I2C_Init+0x280>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a6a      	ldr	r2, [pc, #424]	; (8002568 <HAL_I2C_Init+0x274>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d802      	bhi.n	80023c8 <HAL_I2C_Init+0xd4>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e009      	b.n	80023dc <HAL_I2C_Init+0xe8>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a69      	ldr	r2, [pc, #420]	; (8002578 <HAL_I2C_Init+0x284>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	495c      	ldr	r1, [pc, #368]	; (8002568 <HAL_I2C_Init+0x274>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d819      	bhi.n	8002430 <HAL_I2C_Init+0x13c>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e59      	subs	r1, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fbb1 f3f3 	udiv	r3, r1, r3
 800240a:	1c59      	adds	r1, r3, #1
 800240c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002410:	400b      	ands	r3, r1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_I2C_Init+0x138>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1e59      	subs	r1, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fbb1 f3f3 	udiv	r3, r1, r3
 8002424:	3301      	adds	r3, #1
 8002426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800242a:	e051      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800242c:	2304      	movs	r3, #4
 800242e:	e04f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_I2C_Init+0x168>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e012      	b.n	8002482 <HAL_I2C_Init+0x18e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x196>
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <HAL_I2C_Init+0x1bc>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e58      	subs	r0, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	440b      	add	r3, r1
 80024a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Init+0x1dc>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6911      	ldr	r1, [r2, #16]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000186a0 	.word	0x000186a0
 800256c:	001e847f 	.word	0x001e847f
 8002570:	003d08ff 	.word	0x003d08ff
 8002574:	431bde83 	.word	0x431bde83
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	460b      	mov	r3, r1
 8002590:	813b      	strh	r3, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002596:	f7ff f831 	bl	80015fc <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	f040 8208 	bne.w	80029ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2319      	movs	r3, #25
 80025b0:	2201      	movs	r2, #1
 80025b2:	497b      	ldr	r1, [pc, #492]	; (80027a0 <HAL_I2C_Mem_Read+0x224>)
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 faef 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80025c0:	2302      	movs	r3, #2
 80025c2:	e1fb      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x56>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e1f4      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002606:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2222      	movs	r2, #34	; 0x22
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2240      	movs	r2, #64	; 0x40
 8002614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a5b      	ldr	r2, [pc, #364]	; (80027a4 <HAL_I2C_Mem_Read+0x228>)
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263a:	88f8      	ldrh	r0, [r7, #6]
 800263c:	893a      	ldrh	r2, [r7, #8]
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	4603      	mov	r3, r0
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f9bc 	bl	80029c8 <I2C_RequestMemoryRead>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1b0      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	2b00      	cmp	r3, #0
 8002660:	d113      	bne.n	800268a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e184      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	2b01      	cmp	r3, #1
 8002690:	d11b      	bne.n	80026ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e164      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d11b      	bne.n	800270a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	e144      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002720:	e138      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	2b03      	cmp	r3, #3
 8002728:	f200 80f1 	bhi.w	800290e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b01      	cmp	r3, #1
 8002732:	d123      	bne.n	800277c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fb44 	bl	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e139      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277a:	e10b      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	2b02      	cmp	r3, #2
 8002782:	d14e      	bne.n	8002822 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	2200      	movs	r2, #0
 800278c:	4906      	ldr	r1, [pc, #24]	; (80027a8 <HAL_I2C_Mem_Read+0x22c>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fa02 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e10e      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
 800279e:	bf00      	nop
 80027a0:	00100002 	.word	0x00100002
 80027a4:	ffff0000 	.word	0xffff0000
 80027a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002820:	e0b8      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	2200      	movs	r2, #0
 800282a:	4966      	ldr	r1, [pc, #408]	; (80029c4 <HAL_I2C_Mem_Read+0x448>)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f9b3 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0bf      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800284a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	2200      	movs	r2, #0
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <HAL_I2C_Mem_Read+0x448>)
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f985 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e091      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	b2d2      	uxtb	r2, r2
 80028b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800290c:	e042      	b.n	8002994 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002910:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fa57 	bl	8002dc6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e04c      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b04      	cmp	r3, #4
 8002960:	d118      	bne.n	8002994 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aec2 	bne.w	8002722 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	e000      	b.n	80029bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3728      	adds	r7, #40	; 0x28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00010004 	.word	0x00010004

080029c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	4608      	mov	r0, r1
 80029d2:	4611      	mov	r1, r2
 80029d4:	461a      	mov	r2, r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	817b      	strh	r3, [r7, #10]
 80029da:	460b      	mov	r3, r1
 80029dc:	813b      	strh	r3, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f8c2 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a28:	d103      	bne.n	8002a32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0aa      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	4952      	ldr	r1, [pc, #328]	; (8002b94 <I2C_RequestMemoryRead+0x1cc>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f8fa 	bl	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e097      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f964 	bl	8002d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00d      	beq.n	8002a9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d107      	bne.n	8002a9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e076      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa4:	893b      	ldrh	r3, [r7, #8]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e021      	b.n	8002af4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ab0:	893b      	ldrh	r3, [r7, #8]
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac0:	6a39      	ldr	r1, [r7, #32]
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f93e 	bl	8002d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d107      	bne.n	8002ae6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e050      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aea:	893b      	ldrh	r3, [r7, #8]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af6:	6a39      	ldr	r1, [r7, #32]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f923 	bl	8002d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00d      	beq.n	8002b20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e035      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f82b 	bl	8002b98 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00d      	beq.n	8002b64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b56:	d103      	bne.n	8002b60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e013      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b64:	897b      	ldrh	r3, [r7, #10]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	6a3a      	ldr	r2, [r7, #32]
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <I2C_RequestMemoryRead+0x1cc>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f863 	bl	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e000      	b.n	8002b8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	00010002 	.word	0x00010002

08002b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba8:	e025      	b.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d021      	beq.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe fd23 	bl	80015fc <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e023      	b.n	8002c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf0c      	ite	eq
 8002c12:	2301      	moveq	r3, #1
 8002c14:	2300      	movne	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	e00c      	b.n	8002c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf0c      	ite	eq
 8002c2e:	2301      	moveq	r3, #1
 8002c30:	2300      	movne	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d0b6      	beq.n	8002baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c54:	e051      	b.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c64:	d123      	bne.n	8002cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e046      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d021      	beq.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fca1 	bl	80015fc <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d116      	bne.n	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e020      	b.n	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	0c1b      	lsrs	r3, r3, #16
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e00b      	b.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	43da      	mvns	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d18d      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d50:	e02d      	b.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f88d 	bl	8002e72 <I2C_IsAcknowledgeFailed>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e02d      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d68:	d021      	beq.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7fe fc47 	bl	80015fc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e007      	b.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db8:	2b80      	cmp	r3, #128	; 0x80
 8002dba:	d1ca      	bne.n	8002d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dd2:	e042      	b.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b10      	cmp	r3, #16
 8002de0:	d119      	bne.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f06f 0210 	mvn.w	r2, #16
 8002dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e029      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fbf1 	bl	80015fc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d116      	bne.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e007      	b.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b40      	cmp	r3, #64	; 0x40
 8002e66:	d1b5      	bne.n	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d11b      	bne.n	8002ec2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0204 	orr.w	r2, r3, #4
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e264      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	4ba3      	ldr	r3, [pc, #652]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4ba0      	ldr	r3, [pc, #640]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b9d      	ldr	r3, [pc, #628]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b99      	ldr	r3, [pc, #612]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e23f      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b91      	ldr	r3, [pc, #580]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a90      	ldr	r2, [pc, #576]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a8a      	ldr	r2, [pc, #552]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a87      	ldr	r2, [pc, #540]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f68:	4b84      	ldr	r3, [pc, #528]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a83      	ldr	r2, [pc, #524]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b81      	ldr	r3, [pc, #516]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a80      	ldr	r2, [pc, #512]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fb38 	bl	80015fc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fb34 	bl	80015fc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e204      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fb24 	bl	80015fc <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe fb20 	bl	80015fc <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1f0      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b6c      	ldr	r3, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b62      	ldr	r3, [pc, #392]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b5c      	ldr	r3, [pc, #368]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c4      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4952      	ldr	r1, [pc, #328]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_OscConfig+0x2b0>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fad9 	bl	80015fc <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fad5 	bl	80015fc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a5      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b46      	ldr	r3, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4940      	ldr	r1, [pc, #256]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_OscConfig+0x2b0>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fab8 	bl	80015fc <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7fe fab4 	bl	80015fc <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e184      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d030      	beq.n	800311c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_OscConfig+0x2b4>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fe fa98 	bl	80015fc <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe fa94 	bl	80015fc <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e164      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b26      	ldr	r3, [pc, #152]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x200>
 80030ee:	e015      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b24      	ldr	r3, [pc, #144]	; (8003184 <HAL_RCC_OscConfig+0x2b4>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7fe fa81 	bl	80015fc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fe fa7d 	bl	80015fc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e14d      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80a0 	beq.w	800326a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCC_OscConfig+0x2ac>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_OscConfig+0x2b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d121      	bne.n	80031aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b08      	ldr	r3, [pc, #32]	; (8003188 <HAL_RCC_OscConfig+0x2b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a07      	ldr	r2, [pc, #28]	; (8003188 <HAL_RCC_OscConfig+0x2b8>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe fa43 	bl	80015fc <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e011      	b.n	800319e <HAL_RCC_OscConfig+0x2ce>
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
 8003188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318c:	f7fe fa36 	bl	80015fc <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e106      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	4b85      	ldr	r3, [pc, #532]	; (80033b4 <HAL_RCC_OscConfig+0x4e4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2f0>
 80031b2:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a80      	ldr	r2, [pc, #512]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e01c      	b.n	80031fa <HAL_RCC_OscConfig+0x32a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b05      	cmp	r3, #5
 80031c6:	d10c      	bne.n	80031e2 <HAL_RCC_OscConfig+0x312>
 80031c8:	4b7b      	ldr	r3, [pc, #492]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a7a      	ldr	r2, [pc, #488]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	4b78      	ldr	r3, [pc, #480]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a77      	ldr	r2, [pc, #476]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	e00b      	b.n	80031fa <HAL_RCC_OscConfig+0x32a>
 80031e2:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70
 80031ee:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d015      	beq.n	800322e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fe f9fb 	bl	80015fc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320a:	f7fe f9f7 	bl	80015fc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f241 3288 	movw	r2, #5000	; 0x1388
 8003218:	4293      	cmp	r3, r2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e0c5      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	4b65      	ldr	r3, [pc, #404]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ee      	beq.n	800320a <HAL_RCC_OscConfig+0x33a>
 800322c:	e014      	b.n	8003258 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe f9e5 	bl	80015fc <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe f9e1 	bl	80015fc <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0af      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d105      	bne.n	800326a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325e:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a55      	ldr	r2, [pc, #340]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 809b 	beq.w	80033aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003274:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f003 030c 	and.w	r3, r3, #12
 800327c:	2b08      	cmp	r3, #8
 800327e:	d05c      	beq.n	800333a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d141      	bne.n	800330c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328e:	f7fe f9b5 	bl	80015fc <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003296:	f7fe f9b1 	bl	80015fc <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e081      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1f0      	bne.n	8003296 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	019b      	lsls	r3, r3, #6
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	3b01      	subs	r3, #1
 80032ce:	041b      	lsls	r3, r3, #16
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	061b      	lsls	r3, r3, #24
 80032d8:	4937      	ldr	r1, [pc, #220]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fe f98a 	bl	80015fc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fe f986 	bl	80015fc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e056      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0x41c>
 800330a:	e04e      	b.n	80033aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fe f973 	bl	80015fc <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331a:	f7fe f96f 	bl	80015fc <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e03f      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x44a>
 8003338:	e037      	b.n	80033aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e032      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <HAL_RCC_OscConfig+0x4e8>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d028      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d121      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d11a      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003376:	4013      	ands	r3, r2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800337c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337e:	4293      	cmp	r3, r2
 8003380:	d111      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40007000 	.word	0x40007000
 80033b8:	40023800 	.word	0x40023800
 80033bc:	42470060 	.word	0x42470060

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe f8a4 	bl	80015fc <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe f8a0 	bl	80015fc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f804 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	08004e5c 	.word	0x08004e5c
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003592:	2100      	movs	r1, #0
 8003594:	6079      	str	r1, [r7, #4]
 8003596:	2100      	movs	r1, #0
 8003598:	60f9      	str	r1, [r7, #12]
 800359a:	2100      	movs	r1, #0
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359e:	2100      	movs	r1, #0
 80035a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a2:	4952      	ldr	r1, [pc, #328]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035a4:	6889      	ldr	r1, [r1, #8]
 80035a6:	f001 010c 	and.w	r1, r1, #12
 80035aa:	2908      	cmp	r1, #8
 80035ac:	d00d      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x3e>
 80035ae:	2908      	cmp	r1, #8
 80035b0:	f200 8094 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x150>
 80035b4:	2900      	cmp	r1, #0
 80035b6:	d002      	beq.n	80035be <HAL_RCC_GetSysClockFreq+0x32>
 80035b8:	2904      	cmp	r1, #4
 80035ba:	d003      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x38>
 80035bc:	e08e      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035be:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80035c0:	60bb      	str	r3, [r7, #8]
       break;
 80035c2:	e08e      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c4:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035c6:	60bb      	str	r3, [r7, #8]
      break;
 80035c8:	e08b      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035ca:	4948      	ldr	r1, [pc, #288]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035cc:	6849      	ldr	r1, [r1, #4]
 80035ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035d2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d4:	4945      	ldr	r1, [pc, #276]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035d6:	6849      	ldr	r1, [r1, #4]
 80035d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035dc:	2900      	cmp	r1, #0
 80035de:	d024      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4942      	ldr	r1, [pc, #264]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035e2:	6849      	ldr	r1, [r1, #4]
 80035e4:	0989      	lsrs	r1, r1, #6
 80035e6:	4608      	mov	r0, r1
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035f0:	f04f 0500 	mov.w	r5, #0
 80035f4:	ea00 0204 	and.w	r2, r0, r4
 80035f8:	ea01 0305 	and.w	r3, r1, r5
 80035fc:	493d      	ldr	r1, [pc, #244]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035fe:	fb01 f003 	mul.w	r0, r1, r3
 8003602:	2100      	movs	r1, #0
 8003604:	fb01 f102 	mul.w	r1, r1, r2
 8003608:	1844      	adds	r4, r0, r1
 800360a:	493a      	ldr	r1, [pc, #232]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800360c:	fba2 0101 	umull	r0, r1, r2, r1
 8003610:	1863      	adds	r3, r4, r1
 8003612:	4619      	mov	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	461a      	mov	r2, r3
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f7fc fe30 	bl	8000280 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4613      	mov	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e04a      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	461a      	mov	r2, r3
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f240 10ff 	movw	r0, #511	; 0x1ff
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	ea02 0400 	and.w	r4, r2, r0
 8003642:	ea03 0501 	and.w	r5, r3, r1
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	014b      	lsls	r3, r1, #5
 8003654:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003658:	0142      	lsls	r2, r0, #5
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	1b00      	subs	r0, r0, r4
 8003660:	eb61 0105 	sbc.w	r1, r1, r5
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	018b      	lsls	r3, r1, #6
 800366e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003672:	0182      	lsls	r2, r0, #6
 8003674:	1a12      	subs	r2, r2, r0
 8003676:	eb63 0301 	sbc.w	r3, r3, r1
 800367a:	f04f 0000 	mov.w	r0, #0
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	00d9      	lsls	r1, r3, #3
 8003684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003688:	00d0      	lsls	r0, r2, #3
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	1912      	adds	r2, r2, r4
 8003690:	eb45 0303 	adc.w	r3, r5, r3
 8003694:	f04f 0000 	mov.w	r0, #0
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	0299      	lsls	r1, r3, #10
 800369e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036a2:	0290      	lsls	r0, r2, #10
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f7fc fde4 	bl	8000280 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RCC_GetSysClockFreq+0x160>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	60bb      	str	r3, [r7, #8]
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80036de:	60bb      	str	r3, [r7, #8]
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	68bb      	ldr	r3, [r7, #8]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdb0      	pop	{r4, r5, r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	017d7840 	.word	0x017d7840

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_GetHCLKFreq+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	20000000 	.word	0x20000000

08003710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003714:	f7ff fff0 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	0a9b      	lsrs	r3, r3, #10
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4903      	ldr	r1, [pc, #12]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800372c:	4618      	mov	r0, r3
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800
 8003734:	08004e6c 	.word	0x08004e6c

08003738 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800375c:	2b00      	cmp	r3, #0
 800375e:	d035      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003760:	4b67      	ldr	r3, [pc, #412]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003766:	f7fd ff49 	bl	80015fc <HAL_GetTick>
 800376a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800376e:	f7fd ff45 	bl	80015fc <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0ba      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003780:	4b60      	ldr	r3, [pc, #384]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	019a      	lsls	r2, r3, #6
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	071b      	lsls	r3, r3, #28
 8003798:	495a      	ldr	r1, [pc, #360]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037a0:	4b57      	ldr	r3, [pc, #348]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037a6:	f7fd ff29 	bl	80015fc <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037ae:	f7fd ff25 	bl	80015fc <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e09a      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8083 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	2300      	movs	r3, #0
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	4b49      	ldr	r3, [pc, #292]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	4a48      	ldr	r2, [pc, #288]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ea:	4b46      	ldr	r3, [pc, #280]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037f6:	4b44      	ldr	r3, [pc, #272]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a43      	ldr	r2, [pc, #268]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003802:	f7fd fefb 	bl	80015fc <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fd fef7 	bl	80015fc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e06c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800381c:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003830:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d02f      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	429a      	cmp	r2, r3
 8003844:	d028      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003846:	4b2f      	ldr	r3, [pc, #188]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003856:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800385c:	4a29      	ldr	r2, [pc, #164]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003862:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d114      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800386e:	f7fd fec5 	bl	80015fc <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fd fec1 	bl	80015fc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e034      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ee      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038a4:	d10d      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038a6:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	4912      	ldr	r1, [pc, #72]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	e005      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038c2:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4a0f      	ldr	r2, [pc, #60]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038cc:	6093      	str	r3, [r2, #8]
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038da:	490a      	ldr	r1, [pc, #40]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7c1a      	ldrb	r2, [r3, #16]
 80038f0:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	42470068 	.word	0x42470068
 8003904:	40023800 	.word	0x40023800
 8003908:	40007000 	.word	0x40007000
 800390c:	42470e40 	.word	0x42470e40
 8003910:	424711e0 	.word	0x424711e0

08003914 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e083      	b.n	8003a2e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	7f5b      	ldrb	r3, [r3, #29]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fc1e 	bl	8001178 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	22ca      	movs	r2, #202	; 0xca
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2253      	movs	r2, #83	; 0x53
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f897 	bl	8003a86 <RTC_EnterInitMode>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	22ff      	movs	r2, #255	; 0xff
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2204      	movs	r2, #4
 800396a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e05e      	b.n	8003a2e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800397e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003982:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6919      	ldr	r1, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	041a      	lsls	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10e      	bne.n	80039fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f829 	bl	8003a36 <HAL_RTC_WaitForSynchro>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e018      	b.n	8003a2e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	22ff      	movs	r2, #255	; 0xff
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68da      	ldr	r2, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a52:	f7fd fdd3 	bl	80015fc <HAL_GetTick>
 8003a56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a58:	e009      	b.n	8003a6e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003a5a:	f7fd fdcf 	bl	80015fc <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a68:	d901      	bls.n	8003a6e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e007      	b.n	8003a7e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ee      	beq.n	8003a5a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d119      	bne.n	8003ad4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aaa:	f7fd fda7 	bl	80015fc <HAL_GetTick>
 8003aae:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ab0:	e009      	b.n	8003ac6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003ab2:	f7fd fda3 	bl	80015fc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac0:	d901      	bls.n	8003ac6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e007      	b.n	8003ad6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ee      	beq.n	8003ab2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e07b      	b.n	8003be8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d108      	bne.n	8003b0a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b00:	d009      	beq.n	8003b16 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	61da      	str	r2, [r3, #28]
 8003b08:	e005      	b.n	8003b16 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7fd fbbb 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9a:	ea42 0103 	orr.w	r1, r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f003 0104 	and.w	r1, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f003 0210 	and.w	r2, r3, #16
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_SPI_Transmit+0x22>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e126      	b.n	8003e60 <HAL_SPI_Transmit+0x270>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c1a:	f7fd fcef 	bl	80015fc <HAL_GetTick>
 8003c1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
 8003c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c34:	e10b      	b.n	8003e4e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_SPI_Transmit+0x52>
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c46:	e102      	b.n	8003e4e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c8e:	d10f      	bne.n	8003cb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d007      	beq.n	8003cce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd6:	d14b      	bne.n	8003d70 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_SPI_Transmit+0xf6>
 8003ce0:	8afb      	ldrh	r3, [r7, #22]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d13e      	bne.n	8003d64 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	881a      	ldrh	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	1c9a      	adds	r2, r3, #2
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d0a:	e02b      	b.n	8003d64 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d112      	bne.n	8003d40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	1c9a      	adds	r2, r3, #2
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d3e:	e011      	b.n	8003d64 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d40:	f7fd fc5c 	bl	80015fc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d803      	bhi.n	8003d58 <HAL_SPI_Transmit+0x168>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d102      	bne.n	8003d5e <HAL_SPI_Transmit+0x16e>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d102      	bne.n	8003d64 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d62:	e074      	b.n	8003e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ce      	bne.n	8003d0c <HAL_SPI_Transmit+0x11c>
 8003d6e:	e04c      	b.n	8003e0a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_SPI_Transmit+0x18e>
 8003d78:	8afb      	ldrh	r3, [r7, #22]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d140      	bne.n	8003e00 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	7812      	ldrb	r2, [r2, #0]
 8003d8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003da4:	e02c      	b.n	8003e00 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d113      	bne.n	8003ddc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dda:	e011      	b.n	8003e00 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ddc:	f7fd fc0e 	bl	80015fc <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d803      	bhi.n	8003df4 <HAL_SPI_Transmit+0x204>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d102      	bne.n	8003dfa <HAL_SPI_Transmit+0x20a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d102      	bne.n	8003e00 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dfe:	e026      	b.n	8003e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1cd      	bne.n	8003da6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f8c0 	bl	8003f94 <SPI_EndRxTxTransaction>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e000      	b.n	8003e4e <HAL_SPI_Transmit+0x25e>
  }

error:
 8003e4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e76:	b2db      	uxtb	r3, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e94:	f7fd fbb2 	bl	80015fc <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ea4:	f7fd fbaa 	bl	80015fc <HAL_GetTick>
 8003ea8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eaa:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	015b      	lsls	r3, r3, #5
 8003eb0:	0d1b      	lsrs	r3, r3, #20
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	fb02 f303 	mul.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eba:	e054      	b.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d050      	beq.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec4:	f7fd fb9a 	bl	80015fc <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d902      	bls.n	8003eda <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d13d      	bne.n	8003f56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d111      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efc:	d004      	beq.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d107      	bne.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f20:	d10f      	bne.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e017      	b.n	8003f86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d19b      	bne.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000000 	.word	0x20000000

08003f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fa0:	4b1b      	ldr	r3, [pc, #108]	; (8004010 <SPI_EndRxTxTransaction+0x7c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	; (8004014 <SPI_EndRxTxTransaction+0x80>)
 8003fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003faa:	0d5b      	lsrs	r3, r3, #21
 8003fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb0:	fb02 f303 	mul.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fbe:	d112      	bne.n	8003fe6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2180      	movs	r1, #128	; 0x80
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f7ff ff5a 	bl	8003e84 <SPI_WaitFlagStateUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e00f      	b.n	8004006 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b80      	cmp	r3, #128	; 0x80
 8003ffe:	d0f2      	beq.n	8003fe6 <SPI_EndRxTxTransaction+0x52>
 8004000:	e000      	b.n	8004004 <SPI_EndRxTxTransaction+0x70>
        break;
 8004002:	bf00      	nop
  }

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000000 	.word	0x20000000
 8004014:	165e9f81 	.word	0x165e9f81

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	; (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f000 fc4e 	bl	80048d8 <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08004eb0 	.word	0x08004eb0
 8004060:	08004eb0 	.word	0x08004eb0
 8004064:	08004eb0 	.word	0x08004eb0
 8004068:	08004eb4 	.word	0x08004eb4

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <siprintf>:
 800407c:	b40e      	push	{r1, r2, r3}
 800407e:	b500      	push	{lr}
 8004080:	b09c      	sub	sp, #112	; 0x70
 8004082:	ab1d      	add	r3, sp, #116	; 0x74
 8004084:	9002      	str	r0, [sp, #8]
 8004086:	9006      	str	r0, [sp, #24]
 8004088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800408c:	4809      	ldr	r0, [pc, #36]	; (80040b4 <siprintf+0x38>)
 800408e:	9107      	str	r1, [sp, #28]
 8004090:	9104      	str	r1, [sp, #16]
 8004092:	4909      	ldr	r1, [pc, #36]	; (80040b8 <siprintf+0x3c>)
 8004094:	f853 2b04 	ldr.w	r2, [r3], #4
 8004098:	9105      	str	r1, [sp, #20]
 800409a:	6800      	ldr	r0, [r0, #0]
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	a902      	add	r1, sp, #8
 80040a0:	f000 f868 	bl	8004174 <_svfiprintf_r>
 80040a4:	9b02      	ldr	r3, [sp, #8]
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	b01c      	add	sp, #112	; 0x70
 80040ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b0:	b003      	add	sp, #12
 80040b2:	4770      	bx	lr
 80040b4:	2000000c 	.word	0x2000000c
 80040b8:	ffff0208 	.word	0xffff0208

080040bc <__ssputs_r>:
 80040bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c0:	688e      	ldr	r6, [r1, #8]
 80040c2:	429e      	cmp	r6, r3
 80040c4:	4682      	mov	sl, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	4690      	mov	r8, r2
 80040ca:	461f      	mov	r7, r3
 80040cc:	d838      	bhi.n	8004140 <__ssputs_r+0x84>
 80040ce:	898a      	ldrh	r2, [r1, #12]
 80040d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d4:	d032      	beq.n	800413c <__ssputs_r+0x80>
 80040d6:	6825      	ldr	r5, [r4, #0]
 80040d8:	6909      	ldr	r1, [r1, #16]
 80040da:	eba5 0901 	sub.w	r9, r5, r1
 80040de:	6965      	ldr	r5, [r4, #20]
 80040e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e8:	3301      	adds	r3, #1
 80040ea:	444b      	add	r3, r9
 80040ec:	106d      	asrs	r5, r5, #1
 80040ee:	429d      	cmp	r5, r3
 80040f0:	bf38      	it	cc
 80040f2:	461d      	movcc	r5, r3
 80040f4:	0553      	lsls	r3, r2, #21
 80040f6:	d531      	bpl.n	800415c <__ssputs_r+0xa0>
 80040f8:	4629      	mov	r1, r5
 80040fa:	f000 fb47 	bl	800478c <_malloc_r>
 80040fe:	4606      	mov	r6, r0
 8004100:	b950      	cbnz	r0, 8004118 <__ssputs_r+0x5c>
 8004102:	230c      	movs	r3, #12
 8004104:	f8ca 3000 	str.w	r3, [sl]
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800410e:	81a3      	strh	r3, [r4, #12]
 8004110:	f04f 30ff 	mov.w	r0, #4294967295
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004118:	6921      	ldr	r1, [r4, #16]
 800411a:	464a      	mov	r2, r9
 800411c:	f000 fabe 	bl	800469c <memcpy>
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	81a3      	strh	r3, [r4, #12]
 800412c:	6126      	str	r6, [r4, #16]
 800412e:	6165      	str	r5, [r4, #20]
 8004130:	444e      	add	r6, r9
 8004132:	eba5 0509 	sub.w	r5, r5, r9
 8004136:	6026      	str	r6, [r4, #0]
 8004138:	60a5      	str	r5, [r4, #8]
 800413a:	463e      	mov	r6, r7
 800413c:	42be      	cmp	r6, r7
 800413e:	d900      	bls.n	8004142 <__ssputs_r+0x86>
 8004140:	463e      	mov	r6, r7
 8004142:	4632      	mov	r2, r6
 8004144:	6820      	ldr	r0, [r4, #0]
 8004146:	4641      	mov	r1, r8
 8004148:	f000 fab6 	bl	80046b8 <memmove>
 800414c:	68a3      	ldr	r3, [r4, #8]
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	1b9b      	subs	r3, r3, r6
 8004152:	4432      	add	r2, r6
 8004154:	60a3      	str	r3, [r4, #8]
 8004156:	6022      	str	r2, [r4, #0]
 8004158:	2000      	movs	r0, #0
 800415a:	e7db      	b.n	8004114 <__ssputs_r+0x58>
 800415c:	462a      	mov	r2, r5
 800415e:	f000 fb6f 	bl	8004840 <_realloc_r>
 8004162:	4606      	mov	r6, r0
 8004164:	2800      	cmp	r0, #0
 8004166:	d1e1      	bne.n	800412c <__ssputs_r+0x70>
 8004168:	6921      	ldr	r1, [r4, #16]
 800416a:	4650      	mov	r0, sl
 800416c:	f000 fabe 	bl	80046ec <_free_r>
 8004170:	e7c7      	b.n	8004102 <__ssputs_r+0x46>
	...

08004174 <_svfiprintf_r>:
 8004174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004178:	4698      	mov	r8, r3
 800417a:	898b      	ldrh	r3, [r1, #12]
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	b09d      	sub	sp, #116	; 0x74
 8004180:	4607      	mov	r7, r0
 8004182:	460d      	mov	r5, r1
 8004184:	4614      	mov	r4, r2
 8004186:	d50e      	bpl.n	80041a6 <_svfiprintf_r+0x32>
 8004188:	690b      	ldr	r3, [r1, #16]
 800418a:	b963      	cbnz	r3, 80041a6 <_svfiprintf_r+0x32>
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	f000 fafd 	bl	800478c <_malloc_r>
 8004192:	6028      	str	r0, [r5, #0]
 8004194:	6128      	str	r0, [r5, #16]
 8004196:	b920      	cbnz	r0, 80041a2 <_svfiprintf_r+0x2e>
 8004198:	230c      	movs	r3, #12
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e0d1      	b.n	8004346 <_svfiprintf_r+0x1d2>
 80041a2:	2340      	movs	r3, #64	; 0x40
 80041a4:	616b      	str	r3, [r5, #20]
 80041a6:	2300      	movs	r3, #0
 80041a8:	9309      	str	r3, [sp, #36]	; 0x24
 80041aa:	2320      	movs	r3, #32
 80041ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80041b4:	2330      	movs	r3, #48	; 0x30
 80041b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004360 <_svfiprintf_r+0x1ec>
 80041ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041be:	f04f 0901 	mov.w	r9, #1
 80041c2:	4623      	mov	r3, r4
 80041c4:	469a      	mov	sl, r3
 80041c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ca:	b10a      	cbz	r2, 80041d0 <_svfiprintf_r+0x5c>
 80041cc:	2a25      	cmp	r2, #37	; 0x25
 80041ce:	d1f9      	bne.n	80041c4 <_svfiprintf_r+0x50>
 80041d0:	ebba 0b04 	subs.w	fp, sl, r4
 80041d4:	d00b      	beq.n	80041ee <_svfiprintf_r+0x7a>
 80041d6:	465b      	mov	r3, fp
 80041d8:	4622      	mov	r2, r4
 80041da:	4629      	mov	r1, r5
 80041dc:	4638      	mov	r0, r7
 80041de:	f7ff ff6d 	bl	80040bc <__ssputs_r>
 80041e2:	3001      	adds	r0, #1
 80041e4:	f000 80aa 	beq.w	800433c <_svfiprintf_r+0x1c8>
 80041e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041ea:	445a      	add	r2, fp
 80041ec:	9209      	str	r2, [sp, #36]	; 0x24
 80041ee:	f89a 3000 	ldrb.w	r3, [sl]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80a2 	beq.w	800433c <_svfiprintf_r+0x1c8>
 80041f8:	2300      	movs	r3, #0
 80041fa:	f04f 32ff 	mov.w	r2, #4294967295
 80041fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004202:	f10a 0a01 	add.w	sl, sl, #1
 8004206:	9304      	str	r3, [sp, #16]
 8004208:	9307      	str	r3, [sp, #28]
 800420a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800420e:	931a      	str	r3, [sp, #104]	; 0x68
 8004210:	4654      	mov	r4, sl
 8004212:	2205      	movs	r2, #5
 8004214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004218:	4851      	ldr	r0, [pc, #324]	; (8004360 <_svfiprintf_r+0x1ec>)
 800421a:	f7fb ffe1 	bl	80001e0 <memchr>
 800421e:	9a04      	ldr	r2, [sp, #16]
 8004220:	b9d8      	cbnz	r0, 800425a <_svfiprintf_r+0xe6>
 8004222:	06d0      	lsls	r0, r2, #27
 8004224:	bf44      	itt	mi
 8004226:	2320      	movmi	r3, #32
 8004228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422c:	0711      	lsls	r1, r2, #28
 800422e:	bf44      	itt	mi
 8004230:	232b      	movmi	r3, #43	; 0x2b
 8004232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004236:	f89a 3000 	ldrb.w	r3, [sl]
 800423a:	2b2a      	cmp	r3, #42	; 0x2a
 800423c:	d015      	beq.n	800426a <_svfiprintf_r+0xf6>
 800423e:	9a07      	ldr	r2, [sp, #28]
 8004240:	4654      	mov	r4, sl
 8004242:	2000      	movs	r0, #0
 8004244:	f04f 0c0a 	mov.w	ip, #10
 8004248:	4621      	mov	r1, r4
 800424a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800424e:	3b30      	subs	r3, #48	; 0x30
 8004250:	2b09      	cmp	r3, #9
 8004252:	d94e      	bls.n	80042f2 <_svfiprintf_r+0x17e>
 8004254:	b1b0      	cbz	r0, 8004284 <_svfiprintf_r+0x110>
 8004256:	9207      	str	r2, [sp, #28]
 8004258:	e014      	b.n	8004284 <_svfiprintf_r+0x110>
 800425a:	eba0 0308 	sub.w	r3, r0, r8
 800425e:	fa09 f303 	lsl.w	r3, r9, r3
 8004262:	4313      	orrs	r3, r2
 8004264:	9304      	str	r3, [sp, #16]
 8004266:	46a2      	mov	sl, r4
 8004268:	e7d2      	b.n	8004210 <_svfiprintf_r+0x9c>
 800426a:	9b03      	ldr	r3, [sp, #12]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	9103      	str	r1, [sp, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	bfbb      	ittet	lt
 8004276:	425b      	neglt	r3, r3
 8004278:	f042 0202 	orrlt.w	r2, r2, #2
 800427c:	9307      	strge	r3, [sp, #28]
 800427e:	9307      	strlt	r3, [sp, #28]
 8004280:	bfb8      	it	lt
 8004282:	9204      	strlt	r2, [sp, #16]
 8004284:	7823      	ldrb	r3, [r4, #0]
 8004286:	2b2e      	cmp	r3, #46	; 0x2e
 8004288:	d10c      	bne.n	80042a4 <_svfiprintf_r+0x130>
 800428a:	7863      	ldrb	r3, [r4, #1]
 800428c:	2b2a      	cmp	r3, #42	; 0x2a
 800428e:	d135      	bne.n	80042fc <_svfiprintf_r+0x188>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	1d1a      	adds	r2, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9203      	str	r2, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfb8      	it	lt
 800429c:	f04f 33ff 	movlt.w	r3, #4294967295
 80042a0:	3402      	adds	r4, #2
 80042a2:	9305      	str	r3, [sp, #20]
 80042a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004370 <_svfiprintf_r+0x1fc>
 80042a8:	7821      	ldrb	r1, [r4, #0]
 80042aa:	2203      	movs	r2, #3
 80042ac:	4650      	mov	r0, sl
 80042ae:	f7fb ff97 	bl	80001e0 <memchr>
 80042b2:	b140      	cbz	r0, 80042c6 <_svfiprintf_r+0x152>
 80042b4:	2340      	movs	r3, #64	; 0x40
 80042b6:	eba0 000a 	sub.w	r0, r0, sl
 80042ba:	fa03 f000 	lsl.w	r0, r3, r0
 80042be:	9b04      	ldr	r3, [sp, #16]
 80042c0:	4303      	orrs	r3, r0
 80042c2:	3401      	adds	r4, #1
 80042c4:	9304      	str	r3, [sp, #16]
 80042c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ca:	4826      	ldr	r0, [pc, #152]	; (8004364 <_svfiprintf_r+0x1f0>)
 80042cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042d0:	2206      	movs	r2, #6
 80042d2:	f7fb ff85 	bl	80001e0 <memchr>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d038      	beq.n	800434c <_svfiprintf_r+0x1d8>
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <_svfiprintf_r+0x1f4>)
 80042dc:	bb1b      	cbnz	r3, 8004326 <_svfiprintf_r+0x1b2>
 80042de:	9b03      	ldr	r3, [sp, #12]
 80042e0:	3307      	adds	r3, #7
 80042e2:	f023 0307 	bic.w	r3, r3, #7
 80042e6:	3308      	adds	r3, #8
 80042e8:	9303      	str	r3, [sp, #12]
 80042ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ec:	4433      	add	r3, r6
 80042ee:	9309      	str	r3, [sp, #36]	; 0x24
 80042f0:	e767      	b.n	80041c2 <_svfiprintf_r+0x4e>
 80042f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80042f6:	460c      	mov	r4, r1
 80042f8:	2001      	movs	r0, #1
 80042fa:	e7a5      	b.n	8004248 <_svfiprintf_r+0xd4>
 80042fc:	2300      	movs	r3, #0
 80042fe:	3401      	adds	r4, #1
 8004300:	9305      	str	r3, [sp, #20]
 8004302:	4619      	mov	r1, r3
 8004304:	f04f 0c0a 	mov.w	ip, #10
 8004308:	4620      	mov	r0, r4
 800430a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800430e:	3a30      	subs	r2, #48	; 0x30
 8004310:	2a09      	cmp	r2, #9
 8004312:	d903      	bls.n	800431c <_svfiprintf_r+0x1a8>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0c5      	beq.n	80042a4 <_svfiprintf_r+0x130>
 8004318:	9105      	str	r1, [sp, #20]
 800431a:	e7c3      	b.n	80042a4 <_svfiprintf_r+0x130>
 800431c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004320:	4604      	mov	r4, r0
 8004322:	2301      	movs	r3, #1
 8004324:	e7f0      	b.n	8004308 <_svfiprintf_r+0x194>
 8004326:	ab03      	add	r3, sp, #12
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	462a      	mov	r2, r5
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <_svfiprintf_r+0x1f8>)
 800432e:	a904      	add	r1, sp, #16
 8004330:	4638      	mov	r0, r7
 8004332:	f3af 8000 	nop.w
 8004336:	1c42      	adds	r2, r0, #1
 8004338:	4606      	mov	r6, r0
 800433a:	d1d6      	bne.n	80042ea <_svfiprintf_r+0x176>
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	065b      	lsls	r3, r3, #25
 8004340:	f53f af2c 	bmi.w	800419c <_svfiprintf_r+0x28>
 8004344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004346:	b01d      	add	sp, #116	; 0x74
 8004348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434c:	ab03      	add	r3, sp, #12
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	462a      	mov	r2, r5
 8004352:	4b06      	ldr	r3, [pc, #24]	; (800436c <_svfiprintf_r+0x1f8>)
 8004354:	a904      	add	r1, sp, #16
 8004356:	4638      	mov	r0, r7
 8004358:	f000 f87a 	bl	8004450 <_printf_i>
 800435c:	e7eb      	b.n	8004336 <_svfiprintf_r+0x1c2>
 800435e:	bf00      	nop
 8004360:	08004e74 	.word	0x08004e74
 8004364:	08004e7e 	.word	0x08004e7e
 8004368:	00000000 	.word	0x00000000
 800436c:	080040bd 	.word	0x080040bd
 8004370:	08004e7a 	.word	0x08004e7a

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4699      	mov	r9, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	4293      	cmp	r3, r2
 8004386:	bfb8      	it	lt
 8004388:	4613      	movlt	r3, r2
 800438a:	6033      	str	r3, [r6, #0]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc26      	bgt.n	800440a <_printf_common+0x96>
 80043bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c0:	1e13      	subs	r3, r2, #0
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d42b      	bmi.n	8004424 <_printf_common+0xb0>
 80043cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d01e      	beq.n	8004418 <_printf_common+0xa4>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	68e5      	ldr	r5, [r4, #12]
 80043de:	6832      	ldr	r2, [r6, #0]
 80043e0:	f003 0306 	and.w	r3, r3, #6
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	bf08      	it	eq
 80043e8:	1aad      	subeq	r5, r5, r2
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	6922      	ldr	r2, [r4, #16]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	2600      	movs	r6, #0
 8004400:	341a      	adds	r4, #26
 8004402:	42b5      	cmp	r5, r6
 8004404:	d11a      	bne.n	800443c <_printf_common+0xc8>
 8004406:	2000      	movs	r0, #0
 8004408:	e008      	b.n	800441c <_printf_common+0xa8>
 800440a:	2301      	movs	r3, #1
 800440c:	4652      	mov	r2, sl
 800440e:	4649      	mov	r1, r9
 8004410:	4638      	mov	r0, r7
 8004412:	47c0      	blx	r8
 8004414:	3001      	adds	r0, #1
 8004416:	d103      	bne.n	8004420 <_printf_common+0xac>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	3501      	adds	r5, #1
 8004422:	e7c6      	b.n	80043b2 <_printf_common+0x3e>
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	2030      	movs	r0, #48	; 0x30
 800442a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442e:	4422      	add	r2, r4
 8004430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	3302      	adds	r3, #2
 800443a:	e7c7      	b.n	80043cc <_printf_common+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	4622      	mov	r2, r4
 8004440:	4649      	mov	r1, r9
 8004442:	4638      	mov	r0, r7
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d0e6      	beq.n	8004418 <_printf_common+0xa4>
 800444a:	3601      	adds	r6, #1
 800444c:	e7d9      	b.n	8004402 <_printf_common+0x8e>
	...

08004450 <_printf_i>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	460c      	mov	r4, r1
 8004456:	4691      	mov	r9, r2
 8004458:	7e27      	ldrb	r7, [r4, #24]
 800445a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800445c:	2f78      	cmp	r7, #120	; 0x78
 800445e:	4680      	mov	r8, r0
 8004460:	469a      	mov	sl, r3
 8004462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004466:	d807      	bhi.n	8004478 <_printf_i+0x28>
 8004468:	2f62      	cmp	r7, #98	; 0x62
 800446a:	d80a      	bhi.n	8004482 <_printf_i+0x32>
 800446c:	2f00      	cmp	r7, #0
 800446e:	f000 80d8 	beq.w	8004622 <_printf_i+0x1d2>
 8004472:	2f58      	cmp	r7, #88	; 0x58
 8004474:	f000 80a3 	beq.w	80045be <_printf_i+0x16e>
 8004478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800447c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004480:	e03a      	b.n	80044f8 <_printf_i+0xa8>
 8004482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004486:	2b15      	cmp	r3, #21
 8004488:	d8f6      	bhi.n	8004478 <_printf_i+0x28>
 800448a:	a001      	add	r0, pc, #4	; (adr r0, 8004490 <_printf_i+0x40>)
 800448c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004479 	.word	0x08004479
 800449c:	08004479 	.word	0x08004479
 80044a0:	08004479 	.word	0x08004479
 80044a4:	08004479 	.word	0x08004479
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004479 	.word	0x08004479
 80044b0:	08004479 	.word	0x08004479
 80044b4:	08004479 	.word	0x08004479
 80044b8:	08004479 	.word	0x08004479
 80044bc:	08004609 	.word	0x08004609
 80044c0:	0800452d 	.word	0x0800452d
 80044c4:	080045eb 	.word	0x080045eb
 80044c8:	08004479 	.word	0x08004479
 80044cc:	08004479 	.word	0x08004479
 80044d0:	0800462b 	.word	0x0800462b
 80044d4:	08004479 	.word	0x08004479
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	08004479 	.word	0x08004479
 80044e0:	08004479 	.word	0x08004479
 80044e4:	080045f3 	.word	0x080045f3
 80044e8:	680b      	ldr	r3, [r1, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	600a      	str	r2, [r1, #0]
 80044f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0a3      	b.n	8004644 <_printf_i+0x1f4>
 80044fc:	6825      	ldr	r5, [r4, #0]
 80044fe:	6808      	ldr	r0, [r1, #0]
 8004500:	062e      	lsls	r6, r5, #24
 8004502:	f100 0304 	add.w	r3, r0, #4
 8004506:	d50a      	bpl.n	800451e <_printf_i+0xce>
 8004508:	6805      	ldr	r5, [r0, #0]
 800450a:	600b      	str	r3, [r1, #0]
 800450c:	2d00      	cmp	r5, #0
 800450e:	da03      	bge.n	8004518 <_printf_i+0xc8>
 8004510:	232d      	movs	r3, #45	; 0x2d
 8004512:	426d      	negs	r5, r5
 8004514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004518:	485e      	ldr	r0, [pc, #376]	; (8004694 <_printf_i+0x244>)
 800451a:	230a      	movs	r3, #10
 800451c:	e019      	b.n	8004552 <_printf_i+0x102>
 800451e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004522:	6805      	ldr	r5, [r0, #0]
 8004524:	600b      	str	r3, [r1, #0]
 8004526:	bf18      	it	ne
 8004528:	b22d      	sxthne	r5, r5
 800452a:	e7ef      	b.n	800450c <_printf_i+0xbc>
 800452c:	680b      	ldr	r3, [r1, #0]
 800452e:	6825      	ldr	r5, [r4, #0]
 8004530:	1d18      	adds	r0, r3, #4
 8004532:	6008      	str	r0, [r1, #0]
 8004534:	0628      	lsls	r0, r5, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xec>
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0xf2>
 800453c:	0669      	lsls	r1, r5, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xe8>
 8004540:	881d      	ldrh	r5, [r3, #0]
 8004542:	4854      	ldr	r0, [pc, #336]	; (8004694 <_printf_i+0x244>)
 8004544:	2f6f      	cmp	r7, #111	; 0x6f
 8004546:	bf0c      	ite	eq
 8004548:	2308      	moveq	r3, #8
 800454a:	230a      	movne	r3, #10
 800454c:	2100      	movs	r1, #0
 800454e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004552:	6866      	ldr	r6, [r4, #4]
 8004554:	60a6      	str	r6, [r4, #8]
 8004556:	2e00      	cmp	r6, #0
 8004558:	bfa2      	ittt	ge
 800455a:	6821      	ldrge	r1, [r4, #0]
 800455c:	f021 0104 	bicge.w	r1, r1, #4
 8004560:	6021      	strge	r1, [r4, #0]
 8004562:	b90d      	cbnz	r5, 8004568 <_printf_i+0x118>
 8004564:	2e00      	cmp	r6, #0
 8004566:	d04d      	beq.n	8004604 <_printf_i+0x1b4>
 8004568:	4616      	mov	r6, r2
 800456a:	fbb5 f1f3 	udiv	r1, r5, r3
 800456e:	fb03 5711 	mls	r7, r3, r1, r5
 8004572:	5dc7      	ldrb	r7, [r0, r7]
 8004574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004578:	462f      	mov	r7, r5
 800457a:	42bb      	cmp	r3, r7
 800457c:	460d      	mov	r5, r1
 800457e:	d9f4      	bls.n	800456a <_printf_i+0x11a>
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10b      	bne.n	800459c <_printf_i+0x14c>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	07df      	lsls	r7, r3, #31
 8004588:	d508      	bpl.n	800459c <_printf_i+0x14c>
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	6861      	ldr	r1, [r4, #4]
 800458e:	4299      	cmp	r1, r3
 8004590:	bfde      	ittt	le
 8004592:	2330      	movle	r3, #48	; 0x30
 8004594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800459c:	1b92      	subs	r2, r2, r6
 800459e:	6122      	str	r2, [r4, #16]
 80045a0:	f8cd a000 	str.w	sl, [sp]
 80045a4:	464b      	mov	r3, r9
 80045a6:	aa03      	add	r2, sp, #12
 80045a8:	4621      	mov	r1, r4
 80045aa:	4640      	mov	r0, r8
 80045ac:	f7ff fee2 	bl	8004374 <_printf_common>
 80045b0:	3001      	adds	r0, #1
 80045b2:	d14c      	bne.n	800464e <_printf_i+0x1fe>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	b004      	add	sp, #16
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	4835      	ldr	r0, [pc, #212]	; (8004694 <_printf_i+0x244>)
 80045c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	680e      	ldr	r6, [r1, #0]
 80045c8:	061f      	lsls	r7, r3, #24
 80045ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80045ce:	600e      	str	r6, [r1, #0]
 80045d0:	d514      	bpl.n	80045fc <_printf_i+0x1ac>
 80045d2:	07d9      	lsls	r1, r3, #31
 80045d4:	bf44      	itt	mi
 80045d6:	f043 0320 	orrmi.w	r3, r3, #32
 80045da:	6023      	strmi	r3, [r4, #0]
 80045dc:	b91d      	cbnz	r5, 80045e6 <_printf_i+0x196>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f023 0320 	bic.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	2310      	movs	r3, #16
 80045e8:	e7b0      	b.n	800454c <_printf_i+0xfc>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f043 0320 	orr.w	r3, r3, #32
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	2378      	movs	r3, #120	; 0x78
 80045f4:	4828      	ldr	r0, [pc, #160]	; (8004698 <_printf_i+0x248>)
 80045f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045fa:	e7e3      	b.n	80045c4 <_printf_i+0x174>
 80045fc:	065e      	lsls	r6, r3, #25
 80045fe:	bf48      	it	mi
 8004600:	b2ad      	uxthmi	r5, r5
 8004602:	e7e6      	b.n	80045d2 <_printf_i+0x182>
 8004604:	4616      	mov	r6, r2
 8004606:	e7bb      	b.n	8004580 <_printf_i+0x130>
 8004608:	680b      	ldr	r3, [r1, #0]
 800460a:	6826      	ldr	r6, [r4, #0]
 800460c:	6960      	ldr	r0, [r4, #20]
 800460e:	1d1d      	adds	r5, r3, #4
 8004610:	600d      	str	r5, [r1, #0]
 8004612:	0635      	lsls	r5, r6, #24
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	d501      	bpl.n	800461c <_printf_i+0x1cc>
 8004618:	6018      	str	r0, [r3, #0]
 800461a:	e002      	b.n	8004622 <_printf_i+0x1d2>
 800461c:	0671      	lsls	r1, r6, #25
 800461e:	d5fb      	bpl.n	8004618 <_printf_i+0x1c8>
 8004620:	8018      	strh	r0, [r3, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	4616      	mov	r6, r2
 8004628:	e7ba      	b.n	80045a0 <_printf_i+0x150>
 800462a:	680b      	ldr	r3, [r1, #0]
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	600a      	str	r2, [r1, #0]
 8004630:	681e      	ldr	r6, [r3, #0]
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	2100      	movs	r1, #0
 8004636:	4630      	mov	r0, r6
 8004638:	f7fb fdd2 	bl	80001e0 <memchr>
 800463c:	b108      	cbz	r0, 8004642 <_printf_i+0x1f2>
 800463e:	1b80      	subs	r0, r0, r6
 8004640:	6060      	str	r0, [r4, #4]
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	2300      	movs	r3, #0
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	e7a8      	b.n	80045a0 <_printf_i+0x150>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	4632      	mov	r2, r6
 8004652:	4649      	mov	r1, r9
 8004654:	4640      	mov	r0, r8
 8004656:	47d0      	blx	sl
 8004658:	3001      	adds	r0, #1
 800465a:	d0ab      	beq.n	80045b4 <_printf_i+0x164>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	079b      	lsls	r3, r3, #30
 8004660:	d413      	bmi.n	800468a <_printf_i+0x23a>
 8004662:	68e0      	ldr	r0, [r4, #12]
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	4298      	cmp	r0, r3
 8004668:	bfb8      	it	lt
 800466a:	4618      	movlt	r0, r3
 800466c:	e7a4      	b.n	80045b8 <_printf_i+0x168>
 800466e:	2301      	movs	r3, #1
 8004670:	4632      	mov	r2, r6
 8004672:	4649      	mov	r1, r9
 8004674:	4640      	mov	r0, r8
 8004676:	47d0      	blx	sl
 8004678:	3001      	adds	r0, #1
 800467a:	d09b      	beq.n	80045b4 <_printf_i+0x164>
 800467c:	3501      	adds	r5, #1
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	9903      	ldr	r1, [sp, #12]
 8004682:	1a5b      	subs	r3, r3, r1
 8004684:	42ab      	cmp	r3, r5
 8004686:	dcf2      	bgt.n	800466e <_printf_i+0x21e>
 8004688:	e7eb      	b.n	8004662 <_printf_i+0x212>
 800468a:	2500      	movs	r5, #0
 800468c:	f104 0619 	add.w	r6, r4, #25
 8004690:	e7f5      	b.n	800467e <_printf_i+0x22e>
 8004692:	bf00      	nop
 8004694:	08004e85 	.word	0x08004e85
 8004698:	08004e96 	.word	0x08004e96

0800469c <memcpy>:
 800469c:	440a      	add	r2, r1
 800469e:	4291      	cmp	r1, r2
 80046a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a4:	d100      	bne.n	80046a8 <memcpy+0xc>
 80046a6:	4770      	bx	lr
 80046a8:	b510      	push	{r4, lr}
 80046aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b2:	4291      	cmp	r1, r2
 80046b4:	d1f9      	bne.n	80046aa <memcpy+0xe>
 80046b6:	bd10      	pop	{r4, pc}

080046b8 <memmove>:
 80046b8:	4288      	cmp	r0, r1
 80046ba:	b510      	push	{r4, lr}
 80046bc:	eb01 0402 	add.w	r4, r1, r2
 80046c0:	d902      	bls.n	80046c8 <memmove+0x10>
 80046c2:	4284      	cmp	r4, r0
 80046c4:	4623      	mov	r3, r4
 80046c6:	d807      	bhi.n	80046d8 <memmove+0x20>
 80046c8:	1e43      	subs	r3, r0, #1
 80046ca:	42a1      	cmp	r1, r4
 80046cc:	d008      	beq.n	80046e0 <memmove+0x28>
 80046ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046d6:	e7f8      	b.n	80046ca <memmove+0x12>
 80046d8:	4402      	add	r2, r0
 80046da:	4601      	mov	r1, r0
 80046dc:	428a      	cmp	r2, r1
 80046de:	d100      	bne.n	80046e2 <memmove+0x2a>
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ea:	e7f7      	b.n	80046dc <memmove+0x24>

080046ec <_free_r>:
 80046ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046ee:	2900      	cmp	r1, #0
 80046f0:	d048      	beq.n	8004784 <_free_r+0x98>
 80046f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f6:	9001      	str	r0, [sp, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f1a1 0404 	sub.w	r4, r1, #4
 80046fe:	bfb8      	it	lt
 8004700:	18e4      	addlt	r4, r4, r3
 8004702:	f000 f8d3 	bl	80048ac <__malloc_lock>
 8004706:	4a20      	ldr	r2, [pc, #128]	; (8004788 <_free_r+0x9c>)
 8004708:	9801      	ldr	r0, [sp, #4]
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	4615      	mov	r5, r2
 800470e:	b933      	cbnz	r3, 800471e <_free_r+0x32>
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	6014      	str	r4, [r2, #0]
 8004714:	b003      	add	sp, #12
 8004716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800471a:	f000 b8cd 	b.w	80048b8 <__malloc_unlock>
 800471e:	42a3      	cmp	r3, r4
 8004720:	d90b      	bls.n	800473a <_free_r+0x4e>
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	1862      	adds	r2, r4, r1
 8004726:	4293      	cmp	r3, r2
 8004728:	bf04      	itt	eq
 800472a:	681a      	ldreq	r2, [r3, #0]
 800472c:	685b      	ldreq	r3, [r3, #4]
 800472e:	6063      	str	r3, [r4, #4]
 8004730:	bf04      	itt	eq
 8004732:	1852      	addeq	r2, r2, r1
 8004734:	6022      	streq	r2, [r4, #0]
 8004736:	602c      	str	r4, [r5, #0]
 8004738:	e7ec      	b.n	8004714 <_free_r+0x28>
 800473a:	461a      	mov	r2, r3
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b10b      	cbz	r3, 8004744 <_free_r+0x58>
 8004740:	42a3      	cmp	r3, r4
 8004742:	d9fa      	bls.n	800473a <_free_r+0x4e>
 8004744:	6811      	ldr	r1, [r2, #0]
 8004746:	1855      	adds	r5, r2, r1
 8004748:	42a5      	cmp	r5, r4
 800474a:	d10b      	bne.n	8004764 <_free_r+0x78>
 800474c:	6824      	ldr	r4, [r4, #0]
 800474e:	4421      	add	r1, r4
 8004750:	1854      	adds	r4, r2, r1
 8004752:	42a3      	cmp	r3, r4
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	d1dd      	bne.n	8004714 <_free_r+0x28>
 8004758:	681c      	ldr	r4, [r3, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	6053      	str	r3, [r2, #4]
 800475e:	4421      	add	r1, r4
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	e7d7      	b.n	8004714 <_free_r+0x28>
 8004764:	d902      	bls.n	800476c <_free_r+0x80>
 8004766:	230c      	movs	r3, #12
 8004768:	6003      	str	r3, [r0, #0]
 800476a:	e7d3      	b.n	8004714 <_free_r+0x28>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf04      	itt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	6063      	str	r3, [r4, #4]
 800477a:	bf04      	itt	eq
 800477c:	1949      	addeq	r1, r1, r5
 800477e:	6021      	streq	r1, [r4, #0]
 8004780:	6054      	str	r4, [r2, #4]
 8004782:	e7c7      	b.n	8004714 <_free_r+0x28>
 8004784:	b003      	add	sp, #12
 8004786:	bd30      	pop	{r4, r5, pc}
 8004788:	20000494 	.word	0x20000494

0800478c <_malloc_r>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	1ccd      	adds	r5, r1, #3
 8004790:	f025 0503 	bic.w	r5, r5, #3
 8004794:	3508      	adds	r5, #8
 8004796:	2d0c      	cmp	r5, #12
 8004798:	bf38      	it	cc
 800479a:	250c      	movcc	r5, #12
 800479c:	2d00      	cmp	r5, #0
 800479e:	4606      	mov	r6, r0
 80047a0:	db01      	blt.n	80047a6 <_malloc_r+0x1a>
 80047a2:	42a9      	cmp	r1, r5
 80047a4:	d903      	bls.n	80047ae <_malloc_r+0x22>
 80047a6:	230c      	movs	r3, #12
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	2000      	movs	r0, #0
 80047ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ae:	f000 f87d 	bl	80048ac <__malloc_lock>
 80047b2:	4921      	ldr	r1, [pc, #132]	; (8004838 <_malloc_r+0xac>)
 80047b4:	680a      	ldr	r2, [r1, #0]
 80047b6:	4614      	mov	r4, r2
 80047b8:	b99c      	cbnz	r4, 80047e2 <_malloc_r+0x56>
 80047ba:	4f20      	ldr	r7, [pc, #128]	; (800483c <_malloc_r+0xb0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	b923      	cbnz	r3, 80047ca <_malloc_r+0x3e>
 80047c0:	4621      	mov	r1, r4
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 f862 	bl	800488c <_sbrk_r>
 80047c8:	6038      	str	r0, [r7, #0]
 80047ca:	4629      	mov	r1, r5
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 f85d 	bl	800488c <_sbrk_r>
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	d123      	bne.n	800481e <_malloc_r+0x92>
 80047d6:	230c      	movs	r3, #12
 80047d8:	6033      	str	r3, [r6, #0]
 80047da:	4630      	mov	r0, r6
 80047dc:	f000 f86c 	bl	80048b8 <__malloc_unlock>
 80047e0:	e7e3      	b.n	80047aa <_malloc_r+0x1e>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	1b5b      	subs	r3, r3, r5
 80047e6:	d417      	bmi.n	8004818 <_malloc_r+0x8c>
 80047e8:	2b0b      	cmp	r3, #11
 80047ea:	d903      	bls.n	80047f4 <_malloc_r+0x68>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	441c      	add	r4, r3
 80047f0:	6025      	str	r5, [r4, #0]
 80047f2:	e004      	b.n	80047fe <_malloc_r+0x72>
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	42a2      	cmp	r2, r4
 80047f8:	bf0c      	ite	eq
 80047fa:	600b      	streq	r3, [r1, #0]
 80047fc:	6053      	strne	r3, [r2, #4]
 80047fe:	4630      	mov	r0, r6
 8004800:	f000 f85a 	bl	80048b8 <__malloc_unlock>
 8004804:	f104 000b 	add.w	r0, r4, #11
 8004808:	1d23      	adds	r3, r4, #4
 800480a:	f020 0007 	bic.w	r0, r0, #7
 800480e:	1ac2      	subs	r2, r0, r3
 8004810:	d0cc      	beq.n	80047ac <_malloc_r+0x20>
 8004812:	1a1b      	subs	r3, r3, r0
 8004814:	50a3      	str	r3, [r4, r2]
 8004816:	e7c9      	b.n	80047ac <_malloc_r+0x20>
 8004818:	4622      	mov	r2, r4
 800481a:	6864      	ldr	r4, [r4, #4]
 800481c:	e7cc      	b.n	80047b8 <_malloc_r+0x2c>
 800481e:	1cc4      	adds	r4, r0, #3
 8004820:	f024 0403 	bic.w	r4, r4, #3
 8004824:	42a0      	cmp	r0, r4
 8004826:	d0e3      	beq.n	80047f0 <_malloc_r+0x64>
 8004828:	1a21      	subs	r1, r4, r0
 800482a:	4630      	mov	r0, r6
 800482c:	f000 f82e 	bl	800488c <_sbrk_r>
 8004830:	3001      	adds	r0, #1
 8004832:	d1dd      	bne.n	80047f0 <_malloc_r+0x64>
 8004834:	e7cf      	b.n	80047d6 <_malloc_r+0x4a>
 8004836:	bf00      	nop
 8004838:	20000494 	.word	0x20000494
 800483c:	20000498 	.word	0x20000498

08004840 <_realloc_r>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	4607      	mov	r7, r0
 8004844:	4614      	mov	r4, r2
 8004846:	460e      	mov	r6, r1
 8004848:	b921      	cbnz	r1, 8004854 <_realloc_r+0x14>
 800484a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800484e:	4611      	mov	r1, r2
 8004850:	f7ff bf9c 	b.w	800478c <_malloc_r>
 8004854:	b922      	cbnz	r2, 8004860 <_realloc_r+0x20>
 8004856:	f7ff ff49 	bl	80046ec <_free_r>
 800485a:	4625      	mov	r5, r4
 800485c:	4628      	mov	r0, r5
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	f000 f830 	bl	80048c4 <_malloc_usable_size_r>
 8004864:	42a0      	cmp	r0, r4
 8004866:	d20f      	bcs.n	8004888 <_realloc_r+0x48>
 8004868:	4621      	mov	r1, r4
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff ff8e 	bl	800478c <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0f2      	beq.n	800485c <_realloc_r+0x1c>
 8004876:	4631      	mov	r1, r6
 8004878:	4622      	mov	r2, r4
 800487a:	f7ff ff0f 	bl	800469c <memcpy>
 800487e:	4631      	mov	r1, r6
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff ff33 	bl	80046ec <_free_r>
 8004886:	e7e9      	b.n	800485c <_realloc_r+0x1c>
 8004888:	4635      	mov	r5, r6
 800488a:	e7e7      	b.n	800485c <_realloc_r+0x1c>

0800488c <_sbrk_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d06      	ldr	r5, [pc, #24]	; (80048a8 <_sbrk_r+0x1c>)
 8004890:	2300      	movs	r3, #0
 8004892:	4604      	mov	r4, r0
 8004894:	4608      	mov	r0, r1
 8004896:	602b      	str	r3, [r5, #0]
 8004898:	f7fc fdd8 	bl	800144c <_sbrk>
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	d102      	bne.n	80048a6 <_sbrk_r+0x1a>
 80048a0:	682b      	ldr	r3, [r5, #0]
 80048a2:	b103      	cbz	r3, 80048a6 <_sbrk_r+0x1a>
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	200006b4 	.word	0x200006b4

080048ac <__malloc_lock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	; (80048b4 <__malloc_lock+0x8>)
 80048ae:	f000 b811 	b.w	80048d4 <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	200006bc 	.word	0x200006bc

080048b8 <__malloc_unlock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	; (80048c0 <__malloc_unlock+0x8>)
 80048ba:	f000 b80c 	b.w	80048d6 <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	200006bc 	.word	0x200006bc

080048c4 <_malloc_usable_size_r>:
 80048c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c8:	1f18      	subs	r0, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfbc      	itt	lt
 80048ce:	580b      	ldrlt	r3, [r1, r0]
 80048d0:	18c0      	addlt	r0, r0, r3
 80048d2:	4770      	bx	lr

080048d4 <__retarget_lock_acquire_recursive>:
 80048d4:	4770      	bx	lr

080048d6 <__retarget_lock_release_recursive>:
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
