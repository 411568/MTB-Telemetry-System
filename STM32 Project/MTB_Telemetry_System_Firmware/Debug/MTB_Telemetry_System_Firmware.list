
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bbc  0800cf60  0800cf60  0001cf60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db1c  0800db1c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800db1c  0800db1c  0001db1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db24  0800db24  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800db2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fec  200001f4  0800dd20  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011e0  0800dd20  000211e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000238ac  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a92  00000000  00000000  00043ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00048568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00049c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcb9  00000000  00000000  0004b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021562  00000000  00000000  00068e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4ca3  00000000  00000000  0008a39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f03e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  0012f094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cf48 	.word	0x0800cf48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800cf48 	.word	0x0800cf48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <Brake_Sensor_Read+0x38>
	{

		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 8000f04:	2100      	movs	r1, #0
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f08:	f000 f992 	bl	8001230 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f0e:	f002 fadf 	bl	80034d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f18:	f002 fbc1 	bl	800369e <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f1e:	f002 fc49 	bl	80037b4 <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	81fb      	strh	r3, [r7, #14]
 8000f26:	e017      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d111      	bne.n	8000f52 <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f32:	f000 f97d 	bl	8001230 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f38:	f002 faca 	bl	80034d0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f42:	f002 fbac 	bl	800369e <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f48:	f002 fc34 	bl	80037b4 <HAL_ADC_GetValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
 8000f50:	e002      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 8000f52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f56:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f5a:	f002 fb6d 	bl	8003638 <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 40;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <Brake_Sensor_Read+0x88>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000065c 	.word	0x2000065c
 8000f78:	cccccccd 	.word	0xcccccccd

08000f7c <HMC5883L_initialize>:
#include "HMC5883L.h"

uint8_t HMC5883L_initialize (void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
	uint8_t RegSettingA = HMC5883l_Enable_A;
 8000f82:	2378      	movs	r3, #120	; 0x78
 8000f84:	71bb      	strb	r3, [r7, #6]
	uint8_t RegSettingB = HMC5883l_Enable_B;
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	717b      	strb	r3, [r7, #5]
	uint8_t RegSettingMR = HMC5883l_MR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	713b      	strb	r3, [r7, #4]
	uint8_t check = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]

	if (HAL_I2C_Init(&handler_1_HMC) != HAL_OK)
 8000f92:	4836      	ldr	r0, [pc, #216]	; (800106c <HMC5883L_initialize+0xf0>)
 8000f94:	f003 f94c 	bl	8004230 <HAL_I2C_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HMC5883L_initialize+0x28>
	{
		check = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e029      	b.n	8000ff8 <HMC5883L_initialize+0x7c>
	}
	else
	{
		// Sensor 1
		check = HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000fa4:	2364      	movs	r3, #100	; 0x64
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	213c      	movs	r1, #60	; 0x3c
 8000fb6:	482d      	ldr	r0, [pc, #180]	; (800106c <HMC5883L_initialize+0xf0>)
 8000fb8:	f003 fa7e 	bl	80044b8 <HAL_I2C_Mem_Write>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
		check = HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	1d7b      	adds	r3, r7, #5
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	2201      	movs	r2, #1
 8000fd0:	213c      	movs	r1, #60	; 0x3c
 8000fd2:	4826      	ldr	r0, [pc, #152]	; (800106c <HMC5883L_initialize+0xf0>)
 8000fd4:	f003 fa70 	bl	80044b8 <HAL_I2C_Mem_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
		check = HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2202      	movs	r2, #2
 8000fec:	213c      	movs	r1, #60	; 0x3c
 8000fee:	481f      	ldr	r0, [pc, #124]	; (800106c <HMC5883L_initialize+0xf0>)
 8000ff0:	f003 fa62 	bl	80044b8 <HAL_I2C_Mem_Write>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_I2C_Init(&handler_2_HMC) != HAL_OK)
 8000ff8:	481d      	ldr	r0, [pc, #116]	; (8001070 <HMC5883L_initialize+0xf4>)
 8000ffa:	f003 f919 	bl	8004230 <HAL_I2C_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <HMC5883L_initialize+0x8e>
	{
		check = 1;
 8001004:	2301      	movs	r3, #1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	e02b      	b.n	8001062 <HMC5883L_initialize+0xe6>
	}
	else
	{
		// Sensor 2
		check = HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 800100a:	2364      	movs	r3, #100	; 0x64
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	2200      	movs	r2, #0
 800101a:	213c      	movs	r1, #60	; 0x3c
 800101c:	4814      	ldr	r0, [pc, #80]	; (8001070 <HMC5883L_initialize+0xf4>)
 800101e:	f003 fa4b 	bl	80044b8 <HAL_I2C_Mem_Write>
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
		check = HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	2301      	movs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	1d7b      	adds	r3, r7, #5
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	2201      	movs	r2, #1
 8001036:	213c      	movs	r1, #60	; 0x3c
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <HMC5883L_initialize+0xf4>)
 800103a:	f003 fa3d 	bl	80044b8 <HAL_I2C_Mem_Write>
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
		check = HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2202      	movs	r2, #2
 8001052:	213c      	movs	r1, #60	; 0x3c
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <HMC5883L_initialize+0xf4>)
 8001056:	f003 fa2f 	bl	80044b8 <HAL_I2C_Mem_Write>
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
		check = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]
	}

	return check;
 8001062:	79fb      	ldrb	r3, [r7, #7]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200006fc 	.word	0x200006fc
 8001070:	20000750 	.word	0x20000750

08001074 <HMC5883L_get_X>:

uint16_t HMC5883L_get_X(uint8_t sensor)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af04      	add	r7, sp, #16
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t DataX[2];
	uint16_t Xaxis = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	81fb      	strh	r3, [r7, #14]
	uint8_t temp[2];

	// Read the register
	if(sensor == 0)
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d127      	bne.n	80010d8 <HMC5883L_get_X+0x64>
	{

		// RECEIVE X_axis
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8001088:	2364      	movs	r3, #100	; 0x64
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2302      	movs	r3, #2
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	2283      	movs	r2, #131	; 0x83
 800109a:	213c      	movs	r1, #60	; 0x3c
 800109c:	482c      	ldr	r0, [pc, #176]	; (8001150 <HMC5883L_get_X+0xdc>)
 800109e:	f003 fb05 	bl	80046ac <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2302      	movs	r3, #2
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f107 0308 	add.w	r3, r7, #8
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2301      	movs	r3, #1
 80010b2:	2287      	movs	r2, #135	; 0x87
 80010b4:	213c      	movs	r1, #60	; 0x3c
 80010b6:	4826      	ldr	r0, [pc, #152]	; (8001150 <HMC5883L_get_X+0xdc>)
 80010b8:	f003 faf8 	bl	80046ac <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2285      	movs	r2, #133	; 0x85
 80010ce:	213c      	movs	r1, #60	; 0x3c
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <HMC5883L_get_X+0xdc>)
 80010d2:	f003 faeb 	bl	80046ac <HAL_I2C_Mem_Read>
 80010d6:	e026      	b.n	8001126 <HMC5883L_get_X+0xb2>

	}
	else
	{
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2302      	movs	r3, #2
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2283      	movs	r2, #131	; 0x83
 80010ea:	213c      	movs	r1, #60	; 0x3c
 80010ec:	4819      	ldr	r0, [pc, #100]	; (8001154 <HMC5883L_get_X+0xe0>)
 80010ee:	f003 fadd 	bl	80046ac <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	2302      	movs	r3, #2
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2301      	movs	r3, #1
 8001102:	2287      	movs	r2, #135	; 0x87
 8001104:	213c      	movs	r1, #60	; 0x3c
 8001106:	4813      	ldr	r0, [pc, #76]	; (8001154 <HMC5883L_get_X+0xe0>)
 8001108:	f003 fad0 	bl	80046ac <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2302      	movs	r3, #2
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2285      	movs	r2, #133	; 0x85
 800111e:	213c      	movs	r1, #60	; 0x3c
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <HMC5883L_get_X+0xe0>)
 8001122:	f003 fac3 	bl	80046ac <HAL_I2C_Mem_Read>

	}

	Xaxis = ((DataX[1]<<8) | DataX[0]);
 8001126:	7b7b      	ldrb	r3, [r7, #13]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	b21a      	sxth	r2, r3
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	b21b      	sxth	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b21b      	sxth	r3, r3
 8001134:	81fb      	strh	r3, [r7, #14]
	return Xaxis / 655;
 8001136:	89fa      	ldrh	r2, [r7, #14]
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HMC5883L_get_X+0xe4>)
 800113a:	fba3 1302 	umull	r1, r3, r3, r2
 800113e:	1ad2      	subs	r2, r2, r3
 8001140:	0852      	lsrs	r2, r2, #1
 8001142:	4413      	add	r3, r2
 8001144:	0a5b      	lsrs	r3, r3, #9
 8001146:	b29b      	uxth	r3, r3
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200006fc 	.word	0x200006fc
 8001154:	20000750 	.word	0x20000750
 8001158:	903847eb 	.word	0x903847eb

0800115c <MPU6050_initialize>:
#include "MPU6050.h"

uint8_t MPU6050_initialize(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af04      	add	r7, sp, #16
	uint8_t check;

	// Check the device id
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	2301      	movs	r3, #1
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 030f 	add.w	r3, r7, #15
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2275      	movs	r2, #117	; 0x75
 8001176:	21d0      	movs	r1, #208	; 0xd0
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <MPU6050_initialize+0xd0>)
 800117a:	f003 fa97 	bl	80046ac <HAL_I2C_Mem_Read>

	if (check == 104)
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	2b68      	cmp	r3, #104	; 0x68
 8001182:	d14e      	bne.n	8001222 <MPU6050_initialize+0xc6>
	{
		// Set power register to 0
		uint8_t command = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &command, 1, 1000);
 8001188:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2301      	movs	r3, #1
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030e 	add.w	r3, r7, #14
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	226b      	movs	r2, #107	; 0x6b
 800119c:	21d0      	movs	r1, #208	; 0xd0
 800119e:	4823      	ldr	r0, [pc, #140]	; (800122c <MPU6050_initialize+0xd0>)
 80011a0:	f003 f98a 	bl	80044b8 <HAL_I2C_Mem_Write>

		// Set data rate of 1kHz
		command = 0x07;
 80011a4:	2307      	movs	r3, #7
 80011a6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &command, 1, 1000);
 80011a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030e 	add.w	r3, r7, #14
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2219      	movs	r2, #25
 80011bc:	21d0      	movs	r1, #208	; 0xd0
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <MPU6050_initialize+0xd0>)
 80011c0:	f003 f97a 	bl	80044b8 <HAL_I2C_Mem_Write>

		// Accelerometer configuration
		command = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &command, 1, 1000);
 80011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011cc:	9302      	str	r3, [sp, #8]
 80011ce:	2301      	movs	r3, #1
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	f107 030e 	add.w	r3, r7, #14
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	221c      	movs	r2, #28
 80011dc:	21d0      	movs	r1, #208	; 0xd0
 80011de:	4813      	ldr	r0, [pc, #76]	; (800122c <MPU6050_initialize+0xd0>)
 80011e0:	f003 f96a 	bl	80044b8 <HAL_I2C_Mem_Write>

		// Gyroscope config
		command = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &command, 1, 1000);
 80011e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ec:	9302      	str	r3, [sp, #8]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 030e 	add.w	r3, r7, #14
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	221b      	movs	r2, #27
 80011fc:	21d0      	movs	r1, #208	; 0xd0
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <MPU6050_initialize+0xd0>)
 8001200:	f003 f95a 	bl	80044b8 <HAL_I2C_Mem_Write>

		// Read all data from sensor
		uint8_t Rec_Data[14];
		HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 1000);
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	230e      	movs	r3, #14
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	463b      	mov	r3, r7
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	223b      	movs	r2, #59	; 0x3b
 8001216:	21d0      	movs	r1, #208	; 0xd0
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MPU6050_initialize+0xd0>)
 800121a:	f003 fa47 	bl	80046ac <HAL_I2C_Mem_Read>

		return 0;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <MPU6050_initialize+0xc8>
	}
	else
	{
		return 1; // error
 8001222:	2301      	movs	r3, #1
	}
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200006fc 	.word	0x200006fc

08001230 <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001250:	2304      	movs	r3, #4
 8001252:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f002 fab8 	bl	80037d0 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 8001266:	f001 f9f9 	bl	800265c <Error_Handler>
	}
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	80bb      	strh	r3, [r7, #4]
	uint8_t battery_out = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
	const uint16_t bat_min = 2172; // minimum battery reading (about 3.5V)
 8001282:	f640 037c 	movw	r3, #2172	; 0x87c
 8001286:	807b      	strh	r3, [r7, #2]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 8001288:	2102      	movs	r1, #2
 800128a:	4815      	ldr	r0, [pc, #84]	; (80012e0 <Read_Battery_Voltage+0x6c>)
 800128c:	f7ff ffd0 	bl	8001230 <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <Read_Battery_Voltage+0x6c>)
 8001292:	f002 f91d 	bl	80034d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 8001296:	f04f 31ff 	mov.w	r1, #4294967295
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <Read_Battery_Voltage+0x6c>)
 800129c:	f002 f9ff 	bl	800369e <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <Read_Battery_Voltage+0x6c>)
 80012a2:	f002 fa87 	bl	80037b4 <HAL_ADC_GetValue>
 80012a6:	4603      	mov	r3, r0
 80012a8:	80bb      	strh	r3, [r7, #4]

	// Return the battery %
	if (ADC_reading < bat_min)
 80012aa:	88ba      	ldrh	r2, [r7, #4]
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d202      	bcs.n	80012b8 <Read_Battery_Voltage+0x44>
	{
		battery_out = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	e00e      	b.n	80012d6 <Read_Battery_Voltage+0x62>
	}
	else
	{
		battery_out = (ADC_reading - bat_min) / 5;
 80012b8:	88ba      	ldrh	r2, [r7, #4]
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <Read_Battery_Voltage+0x70>)
 80012c0:	fb82 1203 	smull	r1, r2, r2, r3
 80012c4:	1052      	asrs	r2, r2, #1
 80012c6:	17db      	asrs	r3, r3, #31
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	71fb      	strb	r3, [r7, #7]
		if (battery_out > 100) // if the voltage exceeds about 4.15 V (depends on the ADC supply voltage, so it might shift a little)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <Read_Battery_Voltage+0x62>
		{
			battery_out = 100;
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	71fb      	strb	r3, [r7, #7]
		}
	}

	return battery_out;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000065c 	.word	0x2000065c
 80012e4:	66666667 	.word	0x66666667

080012e8 <My_Error_Handler>:


void My_Error_Handler(uint8_t error)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b095      	sub	sp, #84	; 0x54
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f2:	b672      	cpsid	i
}
 80012f4:	bf00      	nop
	__disable_irq();
	while (1)
	{
		char str[50] = "";
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	222e      	movs	r2, #46	; 0x2e
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f008 ff70 	bl	800a1e8 <memset>
		char str_temp[20] = "";
 8001308:	2300      	movs	r3, #0
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800130c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
		ST7565_clear(); // clear the display
 800131a:	f000 fb73 	bl	8001a04 <ST7565_clear>

		if (error == 1)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d125      	bne.n	8001370 <My_Error_Handler+0x88>
		{
			strcpy(str_temp, "MAGNETIC");
 8001324:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001328:	4a53      	ldr	r2, [pc, #332]	; (8001478 <My_Error_Handler+0x190>)
 800132a:	ca07      	ldmia	r2, {r0, r1, r2}
 800132c:	c303      	stmia	r3!, {r0, r1}
 800132e:	701a      	strb	r2, [r3, #0]
			strcat(str, str_temp);
 8001330:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fbe6 	bl	800ab0c <strcat>
			strcpy(str_temp, " ");
 8001340:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001344:	2220      	movs	r2, #32
 8001346:	801a      	strh	r2, [r3, #0]
			strcat(str, str_temp);
 8001348:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800134c:	f107 0308 	add.w	r3, r7, #8
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f009 fbda 	bl	800ab0c <strcat>
			strcpy(str_temp, "SENSOR");
 8001358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135c:	4a47      	ldr	r2, [pc, #284]	; (800147c <My_Error_Handler+0x194>)
 800135e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001362:	6018      	str	r0, [r3, #0]
 8001364:	3304      	adds	r3, #4
 8001366:	8019      	strh	r1, [r3, #0]
 8001368:	3302      	adds	r3, #2
 800136a:	0c0a      	lsrs	r2, r1, #16
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e04f      	b.n	8001410 <My_Error_Handler+0x128>
		}
		else if(error == 2)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d127      	bne.n	80013c6 <My_Error_Handler+0xde>
		{
			strcpy(str_temp, "ACCELEROMETER");
 8001376:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800137a:	4a41      	ldr	r2, [pc, #260]	; (8001480 <My_Error_Handler+0x198>)
 800137c:	461c      	mov	r4, r3
 800137e:	4613      	mov	r3, r2
 8001380:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001382:	c407      	stmia	r4!, {r0, r1, r2}
 8001384:	8023      	strh	r3, [r4, #0]
			strcat(str, str_temp);
 8001386:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f009 fbbb 	bl	800ab0c <strcat>
			strcpy(str_temp, " ");
 8001396:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800139a:	2220      	movs	r2, #32
 800139c:	801a      	strh	r2, [r3, #0]
			strcat(str, str_temp);
 800139e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f009 fbaf 	bl	800ab0c <strcat>
			strcpy(str_temp, "SENSOR");
 80013ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013b2:	4a32      	ldr	r2, [pc, #200]	; (800147c <My_Error_Handler+0x194>)
 80013b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b8:	6018      	str	r0, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	8019      	strh	r1, [r3, #0]
 80013be:	3302      	adds	r3, #2
 80013c0:	0c0a      	lsrs	r2, r1, #16
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e024      	b.n	8001410 <My_Error_Handler+0x128>
		}else{
			strcpy(str_temp, "SD");
 80013c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ca:	4a2e      	ldr	r2, [pc, #184]	; (8001484 <My_Error_Handler+0x19c>)
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	4611      	mov	r1, r2
 80013d0:	8019      	strh	r1, [r3, #0]
 80013d2:	3302      	adds	r3, #2
 80013d4:	0c12      	lsrs	r2, r2, #16
 80013d6:	701a      	strb	r2, [r3, #0]
			strcat(str, str_temp);
 80013d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f009 fb92 	bl	800ab0c <strcat>
			strcpy(str_temp, " ");
 80013e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ec:	2220      	movs	r2, #32
 80013ee:	801a      	strh	r2, [r3, #0]
			strcat(str, str_temp);
 80013f0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f009 fb86 	bl	800ab0c <strcat>
			strcpy(str_temp, "CARD");
 8001400:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001404:	4a20      	ldr	r2, [pc, #128]	; (8001488 <My_Error_Handler+0x1a0>)
 8001406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800140a:	6018      	str	r0, [r3, #0]
 800140c:	3304      	adds	r3, #4
 800140e:	7019      	strb	r1, [r3, #0]
		}

		strcpy(str_temp, " ");
 8001410:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001414:	2220      	movs	r2, #32
 8001416:	801a      	strh	r2, [r3, #0]
		strcat(str, str_temp);
 8001418:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f009 fb72 	bl	800ab0c <strcat>
		strcpy(str_temp, "ERROR");
 8001428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <My_Error_Handler+0x1a4>)
 800142e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001432:	6018      	str	r0, [r3, #0]
 8001434:	3304      	adds	r3, #4
 8001436:	8019      	strh	r1, [r3, #0]
		strcat(str, str_temp);
 8001438:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f009 fb62 	bl	800ab0c <strcat>
		ST7565_drawstring(40, 0, str);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	461a      	mov	r2, r3
 800144e:	2100      	movs	r1, #0
 8001450:	2028      	movs	r0, #40	; 0x28
 8001452:	f000 f8b1 	bl	80015b8 <ST7565_drawstring>

		ST7565_display();
 8001456:	f000 fa57 	bl	8001908 <ST7565_display>

		if(HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == 1)
 800145a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <My_Error_Handler+0x1a8>)
 8001460:	f002 fe9c 	bl	800419c <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b01      	cmp	r3, #1
 8001468:	f47f af45 	bne.w	80012f6 <My_Error_Handler+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
 800146c:	b662      	cpsie	i
}
 800146e:	bf00      	nop
		{
			__enable_irq();
			break;
		}
	}
}
 8001470:	bf00      	nop
 8001472:	3754      	adds	r7, #84	; 0x54
 8001474:	46bd      	mov	sp, r7
 8001476:	bd90      	pop	{r4, r7, pc}
 8001478:	0800cf60 	.word	0x0800cf60
 800147c:	0800cf6c 	.word	0x0800cf6c
 8001480:	0800cf74 	.word	0x0800cf74
 8001484:	0800cf84 	.word	0x0800cf84
 8001488:	0800cf88 	.word	0x0800cf88
 800148c:	0800cf90 	.word	0x0800cf90
 8001490:	40020000 	.word	0x40020000

08001494 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 8001494:	b490      	push	{r4, r7}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	4603      	mov	r3, r0
 80014a8:	71bb      	strb	r3, [r7, #6]
 80014aa:	460b      	mov	r3, r1
 80014ac:	717b      	strb	r3, [r7, #5]
 80014ae:	4613      	mov	r3, r2
 80014b0:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <ST7565_updateBoundingBox+0x68>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	79fa      	ldrb	r2, [r7, #7]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d202      	bcs.n	80014c2 <ST7565_updateBoundingBox+0x2e>
 80014bc:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <ST7565_updateBoundingBox+0x68>)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <ST7565_updateBoundingBox+0x6c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	797a      	ldrb	r2, [r7, #5]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d902      	bls.n	80014d2 <ST7565_updateBoundingBox+0x3e>
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <ST7565_updateBoundingBox+0x6c>)
 80014ce:	797b      	ldrb	r3, [r7, #5]
 80014d0:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <ST7565_updateBoundingBox+0x70>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	79ba      	ldrb	r2, [r7, #6]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d202      	bcs.n	80014e2 <ST7565_updateBoundingBox+0x4e>
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <ST7565_updateBoundingBox+0x70>)
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <ST7565_updateBoundingBox+0x74>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	793a      	ldrb	r2, [r7, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d902      	bls.n	80014f2 <ST7565_updateBoundingBox+0x5e>
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <ST7565_updateBoundingBox+0x74>)
 80014ee:	793b      	ldrb	r3, [r7, #4]
 80014f0:	7013      	strb	r3, [r2, #0]
	#endif
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc90      	pop	{r4, r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000610 	.word	0x20000610
 8001500:	20000611 	.word	0x20000611
 8001504:	20000612 	.word	0x20000612
 8001508:	20000613 	.word	0x20000613

0800150c <ST7565_drawbitmap>:

void ST7565_drawbitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	603a      	str	r2, [r7, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	460b      	mov	r3, r1
 800151c:	71bb      	strb	r3, [r7, #6]
 800151e:	4613      	mov	r3, r2
 8001520:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;
	for (j = 0; j < h; j++)
 8001522:	2300      	movs	r3, #0
 8001524:	73bb      	strb	r3, [r7, #14]
 8001526:	e030      	b.n	800158a <ST7565_drawbitmap+0x7e>
	{
		for (i = 0; i < w; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e026      	b.n	800157c <ST7565_drawbitmap+0x70>
		{
			if (bitmap[i + (j / 8) * w] & (1 << (j % 8)))
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	7bbb      	ldrb	r3, [r7, #14]
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	797b      	ldrb	r3, [r7, #5]
 800153a:	fb03 f301 	mul.w	r3, r3, r1
 800153e:	4413      	add	r3, r2
 8001540:	461a      	mov	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	fa42 f303 	asr.w	r3, r2, r3
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00c      	beq.n	8001576 <ST7565_drawbitmap+0x6a>
			{
				ST7565_my_setpixel(x + i, y + j, color);
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	4413      	add	r3, r2
 8001562:	b2d8      	uxtb	r0, r3
 8001564:	79ba      	ldrb	r2, [r7, #6]
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	4413      	add	r3, r2
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001570:	4619      	mov	r1, r3
 8001572:	f000 f8c7 	bl	8001704 <ST7565_my_setpixel>
		for (i = 0; i < w; i++)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	3301      	adds	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	797b      	ldrb	r3, [r7, #5]
 8001580:	429a      	cmp	r2, r3
 8001582:	d3d4      	bcc.n	800152e <ST7565_drawbitmap+0x22>
	for (j = 0; j < h; j++)
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	3301      	adds	r3, #1
 8001588:	73bb      	strb	r3, [r7, #14]
 800158a:	7bba      	ldrb	r2, [r7, #14]
 800158c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3c9      	bcc.n	8001528 <ST7565_drawbitmap+0x1c>
			}
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	4413      	add	r3, r2
 800159a:	b2dc      	uxtb	r4, r3
 800159c:	79ba      	ldrb	r2, [r7, #6]
 800159e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a2:	4413      	add	r3, r2
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	79b9      	ldrb	r1, [r7, #6]
 80015a8:	79f8      	ldrb	r0, [r7, #7]
 80015aa:	4622      	mov	r2, r4
 80015ac:	f7ff ff72 	bl	8001494 <ST7565_updateBoundingBox>
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	603a      	str	r2, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	460b      	mov	r3, r1
 80015c6:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 80015c8:	e017      	b.n	80015fa <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	781a      	ldrb	r2, [r3, #0]
 80015ce:	79b9      	ldrb	r1, [r7, #6]
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f81a 	bl	800160c <ST7565_drawchar>
		c++;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	3306      	adds	r3, #6
 80015e2:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b79      	cmp	r3, #121	; 0x79
 80015e8:	d904      	bls.n	80015f4 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
			line++;
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	3301      	adds	r3, #1
 80015f2:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 80015f4:	79bb      	ldrb	r3, [r7, #6]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d804      	bhi.n	8001604 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e3      	bne.n	80015ca <ST7565_drawstring+0x12>
 8001602:	e000      	b.n	8001606 <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8001604:	bf00      	nop
	}
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
 8001616:	460b      	mov	r3, r1
 8001618:	71bb      	strb	r3, [r7, #6]
 800161a:	4613      	mov	r3, r2
 800161c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
 8001622:	e013      	b.n	800164c <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 8001624:	797a      	ldrb	r2, [r7, #5]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	441a      	add	r2, r3
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	441a      	add	r2, r3
 8001630:	79f9      	ldrb	r1, [r7, #7]
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	01db      	lsls	r3, r3, #7
 8001636:	440b      	add	r3, r1
 8001638:	4910      	ldr	r1, [pc, #64]	; (800167c <ST7565_drawchar+0x70>)
 800163a:	5c89      	ldrb	r1, [r1, r2]
 800163c:	4a10      	ldr	r2, [pc, #64]	; (8001680 <ST7565_drawchar+0x74>)
 800163e:	54d1      	strb	r1, [r2, r3]
		x++;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3301      	adds	r3, #1
 8001644:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	3301      	adds	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d9e8      	bls.n	8001624 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	3b05      	subs	r3, #5
 8001656:	b2d8      	uxtb	r0, r3
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	b2d9      	uxtb	r1, r3
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	3b01      	subs	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	3301      	adds	r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	f7ff ff11 	bl	8001494 <ST7565_updateBoundingBox>
}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800d09c 	.word	0x0800d09c
 8001680:	20000210 	.word	0x20000210

08001684 <ST7565_fillrect>:
		}
	}
}

void ST7565_fillrect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	4604      	mov	r4, r0
 800168c:	4608      	mov	r0, r1
 800168e:	4611      	mov	r1, r2
 8001690:	461a      	mov	r2, r3
 8001692:	4623      	mov	r3, r4
 8001694:	71fb      	strb	r3, [r7, #7]
 8001696:	4603      	mov	r3, r0
 8001698:	71bb      	strb	r3, [r7, #6]
 800169a:	460b      	mov	r3, r1
 800169c:	717b      	strb	r3, [r7, #5]
 800169e:	4613      	mov	r3, r2
 80016a0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;

	for (i = x; i < x + w; i++)
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e015      	b.n	80016d4 <ST7565_fillrect+0x50>
	{
		for (j = y; j < y + h; j++)
 80016a8:	79bb      	ldrb	r3, [r7, #6]
 80016aa:	73bb      	strb	r3, [r7, #14]
 80016ac:	e009      	b.n	80016c2 <ST7565_fillrect+0x3e>
		{
			ST7565_my_setpixel(i, j, color);
 80016ae:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016b2:	7bb9      	ldrb	r1, [r7, #14]
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f824 	bl	8001704 <ST7565_my_setpixel>
		for (j = y; j < y + h; j++)
 80016bc:	7bbb      	ldrb	r3, [r7, #14]
 80016be:	3301      	adds	r3, #1
 80016c0:	73bb      	strb	r3, [r7, #14]
 80016c2:	7bba      	ldrb	r2, [r7, #14]
 80016c4:	79b9      	ldrb	r1, [r7, #6]
 80016c6:	793b      	ldrb	r3, [r7, #4]
 80016c8:	440b      	add	r3, r1
 80016ca:	429a      	cmp	r2, r3
 80016cc:	dbef      	blt.n	80016ae <ST7565_fillrect+0x2a>
	for (i = x; i < x + w; i++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	79f9      	ldrb	r1, [r7, #7]
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	440b      	add	r3, r1
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbe3      	blt.n	80016a8 <ST7565_fillrect+0x24>
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 80016e0:	79fa      	ldrb	r2, [r7, #7]
 80016e2:	797b      	ldrb	r3, [r7, #5]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2dc      	uxtb	r4, r3
 80016e8:	79ba      	ldrb	r2, [r7, #6]
 80016ea:	793b      	ldrb	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	79b9      	ldrb	r1, [r7, #6]
 80016f2:	79f8      	ldrb	r0, [r7, #7]
 80016f4:	4622      	mov	r2, r4
 80016f6:	f7ff fecd 	bl	8001494 <ST7565_updateBoundingBox>
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
	...

08001704 <ST7565_my_setpixel>:
		}
	}
}

void ST7565_my_setpixel(uint8_t x, uint8_t y, uint8_t color)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	460b      	mov	r3, r1
 8001710:	71bb      	strb	r3, [r7, #6]
 8001712:	4613      	mov	r3, r2
 8001714:	717b      	strb	r3, [r7, #5]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db3f      	blt.n	800179e <ST7565_my_setpixel+0x9a>
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	2b3f      	cmp	r3, #63	; 0x3f
 8001722:	d83c      	bhi.n	800179e <ST7565_my_setpixel+0x9a>
		return;

	if (color)
 8001724:	797b      	ldrb	r3, [r7, #5]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d01b      	beq.n	8001762 <ST7565_my_setpixel+0x5e>
		st7565_buffer[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	79bb      	ldrb	r3, [r7, #6]
 800172e:	08db      	lsrs	r3, r3, #3
 8001730:	b2d8      	uxtb	r0, r3
 8001732:	4603      	mov	r3, r0
 8001734:	01db      	lsls	r3, r3, #7
 8001736:	4413      	add	r3, r2
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <ST7565_my_setpixel+0xa8>)
 800173a:	5cd3      	ldrb	r3, [r2, r3]
 800173c:	b25a      	sxtb	r2, r3
 800173e:	79bb      	ldrb	r3, [r7, #6]
 8001740:	43db      	mvns	r3, r3
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	2101      	movs	r1, #1
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	b259      	sxtb	r1, r3
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4603      	mov	r3, r0
 8001756:	01db      	lsls	r3, r3, #7
 8001758:	4413      	add	r3, r2
 800175a:	b2c9      	uxtb	r1, r1
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <ST7565_my_setpixel+0xa8>)
 800175e:	54d1      	strb	r1, [r2, r3]
 8001760:	e01e      	b.n	80017a0 <ST7565_my_setpixel+0x9c>
	else
		st7565_buffer[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	79bb      	ldrb	r3, [r7, #6]
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	b2d8      	uxtb	r0, r3
 800176a:	4603      	mov	r3, r0
 800176c:	01db      	lsls	r3, r3, #7
 800176e:	4413      	add	r3, r2
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <ST7565_my_setpixel+0xa8>)
 8001772:	5cd3      	ldrb	r3, [r2, r3]
 8001774:	b25a      	sxtb	r2, r3
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	43db      	mvns	r3, r3
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	b25b      	sxtb	r3, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4013      	ands	r3, r2
 800178c:	b259      	sxtb	r1, r3
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	4603      	mov	r3, r0
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	4413      	add	r3, r2
 8001796:	b2c9      	uxtb	r1, r1
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <ST7565_my_setpixel+0xa8>)
 800179a:	54d1      	strb	r1, [r2, r3]
 800179c:	e000      	b.n	80017a0 <ST7565_my_setpixel+0x9c>
		return;
 800179e:	bf00      	nop
}
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000210 	.word	0x20000210

080017b0 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 80017ba:	f000 f80f 	bl	80017dc <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 80017be:	20af      	movs	r0, #175	; 0xaf
 80017c0:	f000 f866 	bl	8001890 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 80017c4:	20a4      	movs	r0, #164	; 0xa4
 80017c6:	f000 f863 	bl	8001890 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f887 	bl	80018e0 <ST7565_st7565_set_brightness>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2140      	movs	r1, #64	; 0x40
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <ST7565_st7565_init+0x7c>)
 80017e6:	f002 fcf1 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2108      	movs	r1, #8
 80017ee:	481a      	ldr	r0, [pc, #104]	; (8001858 <ST7565_st7565_init+0x7c>)
 80017f0:	f002 fcec 	bl	80041cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80017f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f8:	f001 fe02 	bl	8003400 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2108      	movs	r1, #8
 8001800:	4815      	ldr	r0, [pc, #84]	; (8001858 <ST7565_st7565_init+0x7c>)
 8001802:	f002 fce3 	bl	80041cc <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 8001806:	20a3      	movs	r0, #163	; 0xa3
 8001808:	f000 f842 	bl	8001890 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 800180c:	20a0      	movs	r0, #160	; 0xa0
 800180e:	f000 f83f 	bl	8001890 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 8001812:	20c0      	movs	r0, #192	; 0xc0
 8001814:	f000 f83c 	bl	8001890 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8001818:	2040      	movs	r0, #64	; 0x40
 800181a:	f000 f839 	bl	8001890 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 800181e:	202c      	movs	r0, #44	; 0x2c
 8001820:	f000 f836 	bl	8001890 <ST7565_st7565_command>
	HAL_Delay(50);
 8001824:	2032      	movs	r0, #50	; 0x32
 8001826:	f001 fdeb 	bl	8003400 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 800182a:	202e      	movs	r0, #46	; 0x2e
 800182c:	f000 f830 	bl	8001890 <ST7565_st7565_command>
	HAL_Delay(50);
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f001 fde5 	bl	8003400 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 8001836:	202f      	movs	r0, #47	; 0x2f
 8001838:	f000 f82a 	bl	8001890 <ST7565_st7565_command>
	HAL_Delay(10);
 800183c:	200a      	movs	r0, #10
 800183e:	f001 fddf 	bl	8003400 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 8001842:	2026      	movs	r0, #38	; 0x26
 8001844:	f000 f824 	bl	8001890 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 8001848:	233f      	movs	r3, #63	; 0x3f
 800184a:	227f      	movs	r2, #127	; 0x7f
 800184c:	2100      	movs	r1, #0
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fe20 	bl	8001494 <ST7565_updateBoundingBox>
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020000 	.word	0x40020000

0800185c <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 8001866:	1df9      	adds	r1, r7, #7
 8001868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186c:	2201      	movs	r2, #1
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <ST7565_spiwrite+0x30>)
 8001870:	f004 fd7b 	bl	800636a <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 8001874:	bf00      	nop
 8001876:	4805      	ldr	r0, [pc, #20]	; (800188c <ST7565_spiwrite+0x30>)
 8001878:	f005 f855 	bl	8006926 <HAL_SPI_GetState>
 800187c:	4603      	mov	r3, r0
 800187e:	2b01      	cmp	r3, #1
 8001880:	d1f9      	bne.n	8001876 <ST7565_spiwrite+0x1a>
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200006a4 	.word	0x200006a4

08001890 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2110      	movs	r1, #16
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <ST7565_st7565_command+0x24>)
 80018a0:	f002 fc94 	bl	80041cc <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ffd8 	bl	800185c <ST7565_spiwrite>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40020000 	.word	0x40020000

080018b8 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2110      	movs	r1, #16
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <ST7565_st7565_data+0x24>)
 80018c8:	f002 fc80 	bl	80041cc <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff ffc4 	bl	800185c <ST7565_spiwrite>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020000 	.word	0x40020000

080018e0 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 80018ea:	2081      	movs	r0, #129	; 0x81
 80018ec:	f7ff ffd0 	bl	8001890 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ffc9 	bl	8001890 <ST7565_st7565_command>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <ST7565_display>:

void ST7565_display(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 800190e:	2300      	movs	r3, #0
 8001910:	71bb      	strb	r3, [r7, #6]
 8001912:	e055      	b.n	80019c0 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 8001914:	4b35      	ldr	r3, [pc, #212]	; (80019ec <ST7565_display+0xe4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	79bb      	ldrb	r3, [r7, #6]
 800191c:	3301      	adds	r3, #1
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	429a      	cmp	r2, r3
 8001922:	da49      	bge.n	80019b8 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <ST7565_display+0xe8>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	79bb      	ldrb	r3, [r7, #6]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	429a      	cmp	r2, r3
 8001930:	db4a      	blt.n	80019c8 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 8001932:	2001      	movs	r0, #1
 8001934:	f001 fd64 	bl	8003400 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	4a2e      	ldr	r2, [pc, #184]	; (80019f4 <ST7565_display+0xec>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ffa3 	bl	8001890 <ST7565_st7565_command>
		HAL_Delay(1);
 800194a:	2001      	movs	r0, #1
 800194c:	f001 fd58 	bl	8003400 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 8001950:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <ST7565_display+0xf0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <ST7565_display+0xf4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff93 	bl	8001890 <ST7565_st7565_command>
		HAL_Delay(1);
 800196a:	2001      	movs	r0, #1
 800196c:	f001 fd48 	bl	8003400 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	b2db      	uxtb	r3, r3
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff87 	bl	8001890 <ST7565_st7565_command>
		HAL_Delay(1);
 8001982:	2001      	movs	r0, #1
 8001984:	f001 fd3c 	bl	8003400 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 8001988:	20e0      	movs	r0, #224	; 0xe0
 800198a:	f7ff ff81 	bl	8001890 <ST7565_st7565_command>
		HAL_Delay(1);
 800198e:	2001      	movs	r0, #1
 8001990:	f001 fd36 	bl	8003400 <HAL_Delay>

		for (; col < maxcol; col++)
 8001994:	e00b      	b.n	80019ae <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	01da      	lsls	r2, r3, #7
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4413      	add	r3, r2
 800199e:	4a18      	ldr	r2, [pc, #96]	; (8001a00 <ST7565_display+0xf8>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff88 	bl	80018b8 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	3301      	adds	r3, #1
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	797b      	ldrb	r3, [r7, #5]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3ef      	bcc.n	8001996 <ST7565_display+0x8e>
 80019b6:	e000      	b.n	80019ba <ST7565_display+0xb2>
				continue;   // nope, skip it!
 80019b8:	bf00      	nop
	for (p = 0; p < 8; p++)
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	3301      	adds	r3, #1
 80019be:	71bb      	strb	r3, [r7, #6]
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	d9a6      	bls.n	8001914 <ST7565_display+0xc>
 80019c6:	e000      	b.n	80019ca <ST7565_display+0xc2>
					break;
 80019c8:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <ST7565_display+0xf0>)
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <ST7565_display+0xf4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <ST7565_display+0xe4>)
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <ST7565_display+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	#endif
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000612 	.word	0x20000612
 80019f0:	20000613 	.word	0x20000613
 80019f4:	0800d094 	.word	0x0800d094
 80019f8:	20000610 	.word	0x20000610
 80019fc:	20000611 	.word	0x20000611
 8001a00:	20000210 	.word	0x20000210

08001a04 <ST7565_clear>:

void ST7565_clear(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8001a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <ST7565_clear+0x20>)
 8001a10:	f008 fbea 	bl	800a1e8 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fd3a 	bl	8001494 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000210 	.word	0x20000210

08001a28 <ST7565_get_big_font_bmp>:
		}
	}
}

void ST7565_get_big_font_bmp(uint8_t number, uint8_t* buffer)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 22; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e00e      	b.n	8001a58 <ST7565_get_big_font_bmp+0x30>
	{
		buffer[i] = font12x16[i + number * 22];
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2216      	movs	r2, #22
 8001a3e:	fb02 f203 	mul.w	r2, r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	441a      	add	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	440b      	add	r3, r1
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <ST7565_get_big_font_bmp+0x44>)
 8001a4e:	5c8a      	ldrb	r2, [r1, r2]
 8001a50:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3301      	adds	r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b15      	cmp	r3, #21
 8001a5c:	dded      	ble.n	8001a3a <ST7565_get_big_font_bmp+0x12>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	0800d598 	.word	0x0800d598

08001a70 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a76:	463b      	mov	r3, r7
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001a84:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <MX_ADC1_Init+0x9c>)
 8001a86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <MX_ADC1_Init+0xa0>)
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001ad0:	f001 fcba 	bl	8003448 <HAL_ADC_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f000 fdbf 	bl	800265c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aea:	463b      	mov	r3, r7
 8001aec:	4619      	mov	r1, r3
 8001aee:	4806      	ldr	r0, [pc, #24]	; (8001b08 <MX_ADC1_Init+0x98>)
 8001af0:	f001 fe6e 	bl	80037d0 <HAL_ADC_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001afa:	f000 fdaf 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000065c 	.word	0x2000065c
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	0f000001 	.word	0x0f000001

08001b14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a17      	ldr	r2, [pc, #92]	; (8001b90 <HAL_ADC_MspInit+0x7c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d127      	bne.n	8001b86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_ADC_MspInit+0x80>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	2303      	movs	r3, #3
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_ADC_MspInit+0x84>)
 8001b82:	f002 f987 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3728      	adds	r7, #40	; 0x28
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40012000 	.word	0x40012000
 8001b94:	40023800 	.word	0x40023800
 8001b98:	40020000 	.word	0x40020000

08001b9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <MX_GPIO_Init+0x13c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2158      	movs	r1, #88	; 0x58
 8001c26:	482d      	ldr	r0, [pc, #180]	; (8001cdc <MX_GPIO_Init+0x140>)
 8001c28:	f002 fad0 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c32:	482b      	ldr	r0, [pc, #172]	; (8001ce0 <MX_GPIO_Init+0x144>)
 8001c34:	f002 faca 	bl	80041cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8001c38:	2358      	movs	r3, #88	; 0x58
 8001c3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4823      	ldr	r0, [pc, #140]	; (8001cdc <MX_GPIO_Init+0x140>)
 8001c50:	f002 f920 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8001c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	481c      	ldr	r0, [pc, #112]	; (8001ce0 <MX_GPIO_Init+0x144>)
 8001c6e:	f002 f911 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4814      	ldr	r0, [pc, #80]	; (8001cdc <MX_GPIO_Init+0x140>)
 8001c8a:	f002 f903 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001c8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480e      	ldr	r0, [pc, #56]	; (8001cdc <MX_GPIO_Init+0x140>)
 8001ca4:	f002 f8f6 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8001ca8:	23e0      	movs	r3, #224	; 0xe0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <MX_GPIO_Init+0x144>)
 8001cbc:	f002 f8ea 	bl	8003e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2028      	movs	r0, #40	; 0x28
 8001cc6:	f002 f8a0 	bl	8003e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cca:	2028      	movs	r0, #40	; 0x28
 8001ccc:	f002 f8b9 	bl	8003e42 <HAL_NVIC_EnableIRQ>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020000 	.word	0x40020000
 8001ce0:	40020400 	.word	0x40020400

08001ce4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001cea:	4a13      	ldr	r2, [pc, #76]	; (8001d38 <MX_I2C1_Init+0x54>)
 8001cec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001cf0:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x58>)
 8001cf2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d08:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d20:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_I2C1_Init+0x50>)
 8001d22:	f002 fa85 	bl	8004230 <HAL_I2C_Init>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d2c:	f000 fc96 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d30:	bf00      	nop
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200006fc 	.word	0x200006fc
 8001d38:	40005400 	.word	0x40005400
 8001d3c:	000186a0 	.word	0x000186a0

08001d40 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d46:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <MX_I2C2_Init+0x54>)
 8001d48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d4c:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <MX_I2C2_Init+0x58>)
 8001d4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_I2C2_Init+0x50>)
 8001d7e:	f002 fa57 	bl	8004230 <HAL_I2C_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d88:	f000 fc68 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000750 	.word	0x20000750
 8001d94:	40005800 	.word	0x40005800
 8001d98:	000186a0 	.word	0x000186a0

08001d9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a3b      	ldr	r2, [pc, #236]	; (8001ea8 <HAL_I2C_MspInit+0x10c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12d      	bne.n	8001e1a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a39      	ldr	r2, [pc, #228]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	2301      	movs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dec:	2304      	movs	r3, #4
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df0:	f107 031c 	add.w	r3, r7, #28
 8001df4:	4619      	mov	r1, r3
 8001df6:	482e      	ldr	r0, [pc, #184]	; (8001eb0 <HAL_I2C_MspInit+0x114>)
 8001df8:	f002 f84c 	bl	8003e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e18:	e041      	b.n	8001e9e <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <HAL_I2C_MspInit+0x118>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d13c      	bne.n	8001e9e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e2e:	f043 0302 	orr.w	r3, r3, #2
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e46:	2312      	movs	r3, #18
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e52:	2304      	movs	r3, #4
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <HAL_I2C_MspInit+0x114>)
 8001e5e:	f002 f819 	bl	8003e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e62:	2308      	movs	r3, #8
 8001e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001e72:	2309      	movs	r3, #9
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <HAL_I2C_MspInit+0x114>)
 8001e7e:	f002 f809 	bl	8003e94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a08      	ldr	r2, [pc, #32]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_I2C_MspInit+0x110>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
}
 8001e9e:	bf00      	nop
 8001ea0:	3730      	adds	r7, #48	; 0x30
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40005400 	.word	0x40005400
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40005800 	.word	0x40005800

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b092      	sub	sp, #72	; 0x48
 8001ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebe:	f001 fa2d 	bl	800331c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec2:	f000 f9f5 	bl	80022b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec6:	f7ff fe69 	bl	8001b9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001eca:	f7ff fdd1 	bl	8001a70 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ece:	f7ff ff09 	bl	8001ce4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ed2:	f7ff ff35 	bl	8001d40 <MX_I2C2_Init>
  MX_RTC_Init();
 8001ed6:	f000 fbc7 	bl	8002668 <MX_RTC_Init>
  MX_SPI1_Init();
 8001eda:	f000 fee1 	bl	8002ca0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ede:	f000 ff17 	bl	8002d10 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001ee2:	f001 f90f 	bl	8003104 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001ee6:	f005 fa3d 	bl	8007364 <MX_FATFS_Init>
  MX_TIM5_Init();
 8001eea:	f001 f959 	bl	80031a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001eee:	201e      	movs	r0, #30
 8001ef0:	f001 ffb5 	bl	8003e5e <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(TIM5_IRQn);
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f001 ffb2 	bl	8003e5e <HAL_NVIC_DisableIRQ>

  ST7565_begin(0x7); // Initialize display
 8001efa:	2007      	movs	r0, #7
 8001efc:	f7ff fc58 	bl	80017b0 <ST7565_begin>
  ST7565_clear(); // Clear the display
 8001f00:	f7ff fd80 	bl	8001a04 <ST7565_clear>


  uint8_t MPU_check = MPU6050_initialize(); // Initialize MPU6050
 8001f04:	f7ff f92a 	bl	800115c <MPU6050_initialize>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (MPU_check == 1)
 8001f0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <main+0x64>
  {
	  My_Error_Handler(MPU_Error);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff f9e6 	bl	80012e8 <My_Error_Handler>
  }

  uint8_t HMC_check = HMC5883L_initialize(); // Initialize magnetometers
 8001f1c:	f7ff f82e 	bl	8000f7c <HMC5883L_initialize>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  if (HMC_check == 1)
 8001f26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d102      	bne.n	8001f34 <main+0x7c>
  {
	  My_Error_Handler(HMC_Error);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff f9da 	bl	80012e8 <My_Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim4);
 8001f34:	48c8      	ldr	r0, [pc, #800]	; (8002258 <main+0x3a0>)
 8001f36:	f004 fe1f 	bl	8006b78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001f3a:	48c8      	ldr	r0, [pc, #800]	; (800225c <main+0x3a4>)
 8001f3c:	f004 fe1c 	bl	8006b78 <HAL_TIM_Base_Start_IT>

  //SD CARD
  HAL_Delay(2000);
 8001f40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f44:	f001 fa5c 	bl	8003400 <HAL_Delay>

  SD_check = f_mount(&FatFs, "", 1); // open file system
 8001f48:	2201      	movs	r2, #1
 8001f4a:	49c5      	ldr	r1, [pc, #788]	; (8002260 <main+0x3a8>)
 8001f4c:	48c5      	ldr	r0, [pc, #788]	; (8002264 <main+0x3ac>)
 8001f4e:	f007 fc95 	bl	800987c <f_mount>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461a      	mov	r2, r3
 8001f56:	4bc4      	ldr	r3, [pc, #784]	; (8002268 <main+0x3b0>)
 8001f58:	701a      	strb	r2, [r3, #0]
  if(SD_check != FR_OK)
 8001f5a:	4bc3      	ldr	r3, [pc, #780]	; (8002268 <main+0x3b0>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <main+0xb2>
  {

	  My_Error_Handler(SD_Error);
 8001f62:	2003      	movs	r0, #3
 8001f64:	f7ff f9c0 	bl	80012e8 <My_Error_Handler>
 8001f68:	e004      	b.n	8001f74 <main+0xbc>
  }
  else
  {
	  f_open(&fil, "results.txt", FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_ALWAYS | FA_OPEN_APPEND); // open for write and append only
 8001f6a:	2232      	movs	r2, #50	; 0x32
 8001f6c:	49bf      	ldr	r1, [pc, #764]	; (800226c <main+0x3b4>)
 8001f6e:	48c0      	ldr	r0, [pc, #768]	; (8002270 <main+0x3b8>)
 8001f70:	f007 fcca 	bl	8009908 <f_open>
  }

  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f74:	201e      	movs	r0, #30
 8001f76:	f001 ff64 	bl	8003e42 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f7a:	2032      	movs	r0, #50	; 0x32
 8001f7c:	f001 ff61 	bl	8003e42 <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_pressed == 1)
 8001f80:	4bbc      	ldr	r3, [pc, #752]	; (8002274 <main+0x3bc>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d115      	bne.n	8001fb4 <main+0xfc>
	  {
		  // Disable button interrupt so that it does not interfere with our menu
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001f88:	2028      	movs	r0, #40	; 0x28
 8001f8a:	f001 ff68 	bl	8003e5e <HAL_NVIC_DisableIRQ>

		  // Save the file
		  f_close(&fil);
 8001f8e:	48b8      	ldr	r0, [pc, #736]	; (8002270 <main+0x3b8>)
 8001f90:	f008 f86b 	bl	800a06a <f_close>

		  // Go into the menu display function in file setup_menu.c
		  enterMenu();
 8001f94:	f000 fbee 	bl	8002774 <enterMenu>

		  HAL_Delay(200);
 8001f98:	20c8      	movs	r0, #200	; 0xc8
 8001f9a:	f001 fa31 	bl	8003400 <HAL_Delay>
		  __HAL_GPIO_EXTI_CLEAR_IT(SW1_Pin); // clear interrupts
 8001f9e:	4bb6      	ldr	r3, [pc, #728]	; (8002278 <main+0x3c0>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	615a      	str	r2, [r3, #20]
		  button_pressed = 0;
 8001fa6:	4bb3      	ldr	r3, [pc, #716]	; (8002274 <main+0x3bc>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

		  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fac:	2028      	movs	r0, #40	; 0x28
 8001fae:	f001 ff48 	bl	8003e42 <HAL_NVIC_EnableIRQ>
 8001fb2:	e7e5      	b.n	8001f80 <main+0xc8>
	  }
	  else
	  {
	  	  //HAL_Delay(100);
		  ST7565_clear(); // clear the display
 8001fb4:	f7ff fd26 	bl	8001a04 <ST7565_clear>

		  char str[10] = "";
 8001fb8:	2300      	movs	r3, #0
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
 8001fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]

		  // Brake lever bar graph
		  Brake_left = (uint16_t)(Brake_left / 2.3);
 8001fd8:	4ba8      	ldr	r3, [pc, #672]	; (800227c <main+0x3c4>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe faa9 	bl	8000534 <__aeabi_i2d>
 8001fe2:	a39b      	add	r3, pc, #620	; (adr r3, 8002250 <main+0x398>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fc38 	bl	800085c <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fde0 	bl	8000bb8 <__aeabi_d2uiz>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b9f      	ldr	r3, [pc, #636]	; (800227c <main+0x3c4>)
 8001ffe:	801a      	strh	r2, [r3, #0]
		  Brake_right = (uint16_t)(Brake_right / 2.3);
 8002000:	4b9f      	ldr	r3, [pc, #636]	; (8002280 <main+0x3c8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa95 	bl	8000534 <__aeabi_i2d>
 800200a:	a391      	add	r3, pc, #580	; (adr r3, 8002250 <main+0x398>)
 800200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002010:	f7fe fc24 	bl	800085c <__aeabi_ddiv>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fdcc 	bl	8000bb8 <__aeabi_d2uiz>
 8002020:	4603      	mov	r3, r0
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b96      	ldr	r3, [pc, #600]	; (8002280 <main+0x3c8>)
 8002026:	801a      	strh	r2, [r3, #0]
		  ST7565_fillrect(0, 0, Brake_left, 10, BLACK);
 8002028:	4b94      	ldr	r3, [pc, #592]	; (800227c <main+0x3c4>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	2301      	movs	r3, #1
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	230a      	movs	r3, #10
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fb24 	bl	8001684 <ST7565_fillrect>
		  ST7565_fillrect((128-Brake_right), 0, Brake_right, 10, BLACK);
 800203c:	4b90      	ldr	r3, [pc, #576]	; (8002280 <main+0x3c8>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <main+0x3c8>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	b2da      	uxtb	r2, r3
 8002050:	2301      	movs	r3, #1
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	230a      	movs	r3, #10
 8002056:	2100      	movs	r1, #0
 8002058:	f7ff fb14 	bl	8001684 <ST7565_fillrect>
		  ST7565_drawstring(50, 0, "BRAKE");
 800205c:	4a89      	ldr	r2, [pc, #548]	; (8002284 <main+0x3cc>)
 800205e:	2100      	movs	r1, #0
 8002060:	2032      	movs	r0, #50	; 0x32
 8002062:	f7ff faa9 	bl	80015b8 <ST7565_drawstring>

		  // Suspension percent
		  ST7565_drawstring(48, 2, "TRAVEL");
 8002066:	4a88      	ldr	r2, [pc, #544]	; (8002288 <main+0x3d0>)
 8002068:	2102      	movs	r1, #2
 800206a:	2030      	movs	r0, #48	; 0x30
 800206c:	f7ff faa4 	bl	80015b8 <ST7565_drawstring>
		  uint8_t suspension_front_1 = HMC_x_axis_front % 10;
 8002070:	4b86      	ldr	r3, [pc, #536]	; (800228c <main+0x3d4>)
 8002072:	881a      	ldrh	r2, [r3, #0]
 8002074:	4b86      	ldr	r3, [pc, #536]	; (8002290 <main+0x3d8>)
 8002076:	fba3 1302 	umull	r1, r3, r3, r2
 800207a:	08d9      	lsrs	r1, r3, #3
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  uint8_t suspension_front_10 = HMC_x_axis_front / 10;
 800208c:	4b7f      	ldr	r3, [pc, #508]	; (800228c <main+0x3d4>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	4a7f      	ldr	r2, [pc, #508]	; (8002290 <main+0x3d8>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	08db      	lsrs	r3, r3, #3
 8002098:	b29b      	uxth	r3, r3
 800209a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  uint8_t suspension_rear_1 = HMC_x_axis_rear % 10;
 800209e:	4b7d      	ldr	r3, [pc, #500]	; (8002294 <main+0x3dc>)
 80020a0:	881a      	ldrh	r2, [r3, #0]
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <main+0x3d8>)
 80020a4:	fba3 1302 	umull	r1, r3, r3, r2
 80020a8:	08d9      	lsrs	r1, r3, #3
 80020aa:	460b      	mov	r3, r1
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  uint8_t suspension_rear_10 = HMC_x_axis_rear / 10;
 80020ba:	4b76      	ldr	r3, [pc, #472]	; (8002294 <main+0x3dc>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	4a74      	ldr	r2, [pc, #464]	; (8002290 <main+0x3d8>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  uint8_t buffer[22];

		  ST7565_get_big_font_bmp(suspension_front_10, buffer);
 80020cc:	1d3a      	adds	r2, r7, #4
 80020ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fca7 	bl	8001a28 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(10, 15, buffer, 11, 16, BLACK);
 80020da:	1d3a      	adds	r2, r7, #4
 80020dc:	2301      	movs	r3, #1
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2310      	movs	r3, #16
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	230b      	movs	r3, #11
 80020e6:	210f      	movs	r1, #15
 80020e8:	200a      	movs	r0, #10
 80020ea:	f7ff fa0f 	bl	800150c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_front_1, buffer);
 80020ee:	1d3a      	adds	r2, r7, #4
 80020f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fc96 	bl	8001a28 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(25, 15, buffer, 11, 16, BLACK);
 80020fc:	1d3a      	adds	r2, r7, #4
 80020fe:	2301      	movs	r3, #1
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2310      	movs	r3, #16
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	230b      	movs	r3, #11
 8002108:	210f      	movs	r1, #15
 800210a:	2019      	movs	r0, #25
 800210c:	f7ff f9fe 	bl	800150c <ST7565_drawbitmap>

		  ST7565_get_big_font_bmp(suspension_rear_10, buffer);
 8002110:	1d3a      	adds	r2, r7, #4
 8002112:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc85 	bl	8001a28 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(90, 15, buffer, 11, 16, BLACK);
 800211e:	1d3a      	adds	r2, r7, #4
 8002120:	2301      	movs	r3, #1
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	2310      	movs	r3, #16
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	230b      	movs	r3, #11
 800212a:	210f      	movs	r1, #15
 800212c:	205a      	movs	r0, #90	; 0x5a
 800212e:	f7ff f9ed 	bl	800150c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_rear_1, buffer);
 8002132:	1d3a      	adds	r2, r7, #4
 8002134:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fc74 	bl	8001a28 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(105, 15, buffer, 11, 16, BLACK);
 8002140:	1d3a      	adds	r2, r7, #4
 8002142:	2301      	movs	r3, #1
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2310      	movs	r3, #16
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	230b      	movs	r3, #11
 800214c:	210f      	movs	r1, #15
 800214e:	2069      	movs	r0, #105	; 0x69
 8002150:	f7ff f9dc 	bl	800150c <ST7565_drawbitmap>
		  //HMC_x_axis_rear = (uint16_t)(HMC_x_axis_rear / 2.3);
		  //ST7565_fillrect(0, 35, HMC_x_axis_front, 10, BLACK);
		  //ST7565_fillrect((128-HMC_x_axis_rear), 35, HMC_x_axis_rear, 10, BLACK);

		  // Current time
		  ST7565_drawstring(10, 6, "TIME");
 8002154:	4a50      	ldr	r2, [pc, #320]	; (8002298 <main+0x3e0>)
 8002156:	2106      	movs	r1, #6
 8002158:	200a      	movs	r0, #10
 800215a:	f7ff fa2d 	bl	80015b8 <ST7565_drawstring>
		  sprintf(str, "%02u", time.Hours);
 800215e:	4b4f      	ldr	r3, [pc, #316]	; (800229c <main+0x3e4>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <main+0x3e8>)
 800216a:	4618      	mov	r0, r3
 800216c:	f008 fcae 	bl	800aacc <siprintf>
		  strcat(str_temp, str);
 8002170:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f008 fcc6 	bl	800ab0c <strcat>
		  strcpy(str, ":");
 8002180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002184:	223a      	movs	r2, #58	; 0x3a
 8002186:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 8002188:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f008 fcba 	bl	800ab0c <strcat>
		  sprintf(str, "%02u", time.Minutes);
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <main+0x3e4>)
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	461a      	mov	r2, r3
 800219e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a2:	493f      	ldr	r1, [pc, #252]	; (80022a0 <main+0x3e8>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	f008 fc91 	bl	800aacc <siprintf>
		  strcat(str_temp, str);
 80021aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f008 fca9 	bl	800ab0c <strcat>
		  strcpy(str, ":");
 80021ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021be:	223a      	movs	r2, #58	; 0x3a
 80021c0:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 80021c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f008 fc9d 	bl	800ab0c <strcat>
		  sprintf(str, "%02u", time.Seconds);
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <main+0x3e4>)
 80021d4:	789b      	ldrb	r3, [r3, #2]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021dc:	4930      	ldr	r1, [pc, #192]	; (80022a0 <main+0x3e8>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f008 fc74 	bl	800aacc <siprintf>
		  strcat(str_temp, str);
 80021e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f008 fc8c 	bl	800ab0c <strcat>
		  ST7565_drawstring(0, 7, str_temp);
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	461a      	mov	r2, r3
 80021fa:	2107      	movs	r1, #7
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff f9db 	bl	80015b8 <ST7565_drawstring>

		  // Battery %
		  ST7565_drawstring(95, 6, "BATT");
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <main+0x3ec>)
 8002204:	2106      	movs	r1, #6
 8002206:	205f      	movs	r0, #95	; 0x5f
 8002208:	f7ff f9d6 	bl	80015b8 <ST7565_drawstring>
		  sprintf(str, "%u", battery_voltage);
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <main+0x3f0>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002216:	4925      	ldr	r1, [pc, #148]	; (80022ac <main+0x3f4>)
 8002218:	4618      	mov	r0, r3
 800221a:	f008 fc57 	bl	800aacc <siprintf>
		  strcpy(str_temp, "%");
 800221e:	f107 031c 	add.w	r3, r7, #28
 8002222:	2225      	movs	r2, #37	; 0x25
 8002224:	801a      	strh	r2, [r3, #0]
		  strcat(str, str_temp);
 8002226:	f107 021c 	add.w	r2, r7, #28
 800222a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f008 fc6b 	bl	800ab0c <strcat>
		  ST7565_drawstring(105, 7, str);
 8002236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800223a:	461a      	mov	r2, r3
 800223c:	2107      	movs	r1, #7
 800223e:	2069      	movs	r0, #105	; 0x69
 8002240:	f7ff f9ba 	bl	80015b8 <ST7565_drawstring>

		  // Send data to display
		  ST7565_display();
 8002244:	f7ff fb60 	bl	8001908 <ST7565_display>
	  if (button_pressed == 1)
 8002248:	e69a      	b.n	8001f80 <main+0xc8>
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	66666666 	.word	0x66666666
 8002254:	40026666 	.word	0x40026666
 8002258:	20000ccc 	.word	0x20000ccc
 800225c:	20000d14 	.word	0x20000d14
 8002260:	0800cf98 	.word	0x0800cf98
 8002264:	200007ac 	.word	0x200007ac
 8002268:	20000a20 	.word	0x20000a20
 800226c:	0800cf9c 	.word	0x0800cf9c
 8002270:	20000a24 	.word	0x20000a24
 8002274:	20000614 	.word	0x20000614
 8002278:	40013c00 	.word	0x40013c00
 800227c:	200009de 	.word	0x200009de
 8002280:	200007a8 	.word	0x200007a8
 8002284:	0800cfa8 	.word	0x0800cfa8
 8002288:	0800cfb0 	.word	0x0800cfb0
 800228c:	200009e0 	.word	0x200009e0
 8002290:	cccccccd 	.word	0xcccccccd
 8002294:	200009dc 	.word	0x200009dc
 8002298:	0800cfb8 	.word	0x0800cfb8
 800229c:	20000a04 	.word	0x20000a04
 80022a0:	0800cfc0 	.word	0x0800cfc0
 80022a4:	0800cfc8 	.word	0x0800cfc8
 80022a8:	200007aa 	.word	0x200007aa
 80022ac:	0800cfd0 	.word	0x0800cfd0

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b094      	sub	sp, #80	; 0x50
 80022b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	2230      	movs	r2, #48	; 0x30
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f007 ff92 	bl	800a1e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <SystemClock_Config+0xbc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	4a23      	ldr	r2, [pc, #140]	; (800236c <SystemClock_Config+0xbc>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	; 0x40
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <SystemClock_Config+0xbc>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <SystemClock_Config+0xc0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <SystemClock_Config+0xc0>)
 80022fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <SystemClock_Config+0xc0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002310:	2306      	movs	r3, #6
 8002312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002314:	2301      	movs	r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002318:	2301      	movs	r3, #1
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800231c:	2310      	movs	r3, #16
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002320:	2300      	movs	r3, #0
 8002322:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002324:	f107 0320 	add.w	r3, r7, #32
 8002328:	4618      	mov	r0, r3
 800232a:	f002 ff41 	bl	80051b0 <HAL_RCC_OscConfig>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002334:	f000 f992 	bl	800265c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002338:	230f      	movs	r3, #15
 800233a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f003 f9a4 	bl	80056a0 <HAL_RCC_ClockConfig>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800235e:	f000 f97d 	bl	800265c <Error_Handler>
  }
}
 8002362:	bf00      	nop
 8002364:	3750      	adds	r7, #80	; 0x50
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

// Timer interrupt
// On every timer interrupt read the current sensor states and write to SD card
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08e      	sub	sp, #56	; 0x38
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a9d      	ldr	r2, [pc, #628]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002380:	4293      	cmp	r3, r2
 8002382:	f040 8127 	bne.w	80025d4 <HAL_TIM_PeriodElapsedCallback+0x260>
  {
	  // Read magnetometer data
	  HMC_x_axis_front = HMC5883L_get_X(1);
 8002386:	2001      	movs	r0, #1
 8002388:	f7fe fe74 	bl	8001074 <HMC5883L_get_X>
 800238c:	4603      	mov	r3, r0
 800238e:	461a      	mov	r2, r3
 8002390:	4b99      	ldr	r3, [pc, #612]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002392:	801a      	strh	r2, [r3, #0]
	  HMC_x_axis_rear = HMC5883L_get_X(0);
 8002394:	2000      	movs	r0, #0
 8002396:	f7fe fe6d 	bl	8001074 <HMC5883L_get_X>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b97      	ldr	r3, [pc, #604]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80023a0:	801a      	strh	r2, [r3, #0]

	  // Read brake sensor ADC
	  Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe fda4 	bl	8000ef0 <Brake_Sensor_Read>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b94      	ldr	r3, [pc, #592]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80023ae:	801a      	strh	r2, [r3, #0]
	  Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fe fd9d 	bl	8000ef0 <Brake_Sensor_Read>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b92      	ldr	r3, [pc, #584]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80023bc:	801a      	strh	r2, [r3, #0]

	  // Read battery voltage
	  battery_voltage = Read_Battery_Voltage();
 80023be:	f7fe ff59 	bl	8001274 <Read_Battery_Voltage>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b90      	ldr	r3, [pc, #576]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80023c8:	701a      	strb	r2, [r3, #0]
	  // Read accelerometer and gyroscpe
	  //float accel_x = MPU6050_accel_read(Xaxis);
	  //float gyro_x = MPU6050_gyro_read(Zaxis);

	  // Get current time
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80023ca:	2200      	movs	r2, #0
 80023cc:	498f      	ldr	r1, [pc, #572]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x298>)
 80023ce:	4890      	ldr	r0, [pc, #576]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80023d0:	f003 fd5e 	bl	8005e90 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80023d4:	2200      	movs	r2, #0
 80023d6:	498f      	ldr	r1, [pc, #572]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80023d8:	488d      	ldr	r0, [pc, #564]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80023da:	f003 fe5e 	bl	800609a <HAL_RTC_GetDate>


	  // WRITE TO SD CARD

	  // Copy all sensor data to string
	  char str_temp[20] = "";
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
	  char str[20] = "";
 80023f0:	2300      	movs	r3, #0
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
	  memset(str, '\0', sizeof(str));
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	2214      	movs	r2, #20
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f007 feec 	bl	800a1e8 <memset>
	  memset(str_temp, '\0', sizeof(str_temp));
 8002410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002414:	2214      	movs	r2, #20
 8002416:	2100      	movs	r1, #0
 8002418:	4618      	mov	r0, r3
 800241a:	f007 fee5 	bl	800a1e8 <memset>

	  // time
	  sprintf(str_temp, "%02u", time.Hours);
 800241e:	4b7b      	ldr	r3, [pc, #492]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	497b      	ldr	r1, [pc, #492]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800242a:	4618      	mov	r0, r3
 800242c:	f008 fb4e 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 8002430:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f008 fb66 	bl	800ab0c <strcat>
	  sprintf(str_temp, "%02u", time.Minutes);
 8002440:	4b72      	ldr	r3, [pc, #456]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	461a      	mov	r2, r3
 8002446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244a:	4973      	ldr	r1, [pc, #460]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800244c:	4618      	mov	r0, r3
 800244e:	f008 fb3d 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 8002452:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f008 fb55 	bl	800ab0c <strcat>
	  sprintf(str_temp, "%02u", time.Seconds);
 8002462:	4b6a      	ldr	r3, [pc, #424]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002464:	789b      	ldrb	r3, [r3, #2]
 8002466:	461a      	mov	r2, r3
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	496a      	ldr	r1, [pc, #424]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800246e:	4618      	mov	r0, r3
 8002470:	f008 fb2c 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 8002474:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f008 fb44 	bl	800ab0c <strcat>
	  strcat(str, ";");
 8002484:	f107 0310 	add.w	r3, r7, #16
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd fea9 	bl	80001e0 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	4413      	add	r3, r2
 8002498:	4960      	ldr	r1, [pc, #384]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800249a:	461a      	mov	r2, r3
 800249c:	460b      	mov	r3, r1
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	8013      	strh	r3, [r2, #0]

	  // suspension
	  sprintf(str_temp, "%02u", HMC_x_axis_front);
 80024a2:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ac:	495a      	ldr	r1, [pc, #360]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80024ae:	4618      	mov	r0, r3
 80024b0:	f008 fb0c 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 80024b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f008 fb24 	bl	800ab0c <strcat>
	  strcat(str, ";");
 80024c4:	f107 0310 	add.w	r3, r7, #16
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fd fe89 	bl	80001e0 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4413      	add	r3, r2
 80024d8:	4950      	ldr	r1, [pc, #320]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80024da:	461a      	mov	r2, r3
 80024dc:	460b      	mov	r3, r1
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	8013      	strh	r3, [r2, #0]
	  sprintf(str_temp, "%02u", HMC_x_axis_rear);
 80024e2:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x288>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	494a      	ldr	r1, [pc, #296]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f008 faec 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 80024f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4611      	mov	r1, r2
 80024fe:	4618      	mov	r0, r3
 8002500:	f008 fb04 	bl	800ab0c <strcat>
	  strcat(str, ";");
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd fe69 	bl	80001e0 <strlen>
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4413      	add	r3, r2
 8002518:	4940      	ldr	r1, [pc, #256]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	8013      	strh	r3, [r2, #0]

	  // brakes
	  sprintf(str_temp, "%02u", Brake_left);
 8002522:	4b37      	ldr	r3, [pc, #220]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252c:	493a      	ldr	r1, [pc, #232]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800252e:	4618      	mov	r0, r3
 8002530:	f008 facc 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 8002534:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f008 fae4 	bl	800ab0c <strcat>
	  strcat(str, ";");
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe49 	bl	80001e0 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	461a      	mov	r2, r3
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4413      	add	r3, r2
 8002558:	4930      	ldr	r1, [pc, #192]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800255a:	461a      	mov	r2, r3
 800255c:	460b      	mov	r3, r1
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	8013      	strh	r3, [r2, #0]
	  sprintf(str_temp, "%02u", Brake_right);
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256c:	492a      	ldr	r1, [pc, #168]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800256e:	4618      	mov	r0, r3
 8002570:	f008 faac 	bl	800aacc <siprintf>
	  strcat(str, str_temp);
 8002574:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f008 fac4 	bl	800ab0c <strcat>
	  strcat(str, "\n");
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd fe29 	bl	80001e0 <strlen>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	4413      	add	r3, r2
 8002598:	4921      	ldr	r1, [pc, #132]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	8013      	strh	r3, [r2, #0]

	  // Write string onto SD
	  strncpy((char*)buffer, str, strlen(str));
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fe1a 	bl	80001e0 <strlen>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4619      	mov	r1, r3
 80025b4:	481b      	ldr	r0, [pc, #108]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80025b6:	f008 fab8 	bl	800ab2a <strncpy>
	  UINT bytesWrote;
	  //f_open(&fil, "results.txt", FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_ALWAYS | FA_OPEN_APPEND); // open for write and append only
	  f_write(&fil, buffer, strlen(str), &bytesWrote); // Write to file
 80025ba:	f107 0310 	add.w	r3, r7, #16
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fd fe0e 	bl	80001e0 <strlen>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f107 030c 	add.w	r3, r7, #12
 80025ca:	4916      	ldr	r1, [pc, #88]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80025cc:	4816      	ldr	r0, [pc, #88]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80025ce:	f007 fb59 	bl	8009c84 <f_write>
	  f_close(&fil);

	  // Reopen to continue writing data
	  f_open(&fil, "results.txt", FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_ALWAYS | FA_OPEN_APPEND);
  }
}
 80025d2:	e00b      	b.n	80025ec <HAL_TIM_PeriodElapsedCallback+0x278>
  else if (htim == &htim5)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d107      	bne.n	80025ec <HAL_TIM_PeriodElapsedCallback+0x278>
	  f_close(&fil);
 80025dc:	4812      	ldr	r0, [pc, #72]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80025de:	f007 fd44 	bl	800a06a <f_close>
	  f_open(&fil, "results.txt", FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_ALWAYS | FA_OPEN_APPEND);
 80025e2:	2232      	movs	r2, #50	; 0x32
 80025e4:	4912      	ldr	r1, [pc, #72]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80025e6:	4810      	ldr	r0, [pc, #64]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80025e8:	f007 f98e 	bl	8009908 <f_open>
}
 80025ec:	bf00      	nop
 80025ee:	3738      	adds	r7, #56	; 0x38
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000ccc 	.word	0x20000ccc
 80025f8:	200009e0 	.word	0x200009e0
 80025fc:	200009dc 	.word	0x200009dc
 8002600:	200009de 	.word	0x200009de
 8002604:	200007a8 	.word	0x200007a8
 8002608:	200007aa 	.word	0x200007aa
 800260c:	20000a04 	.word	0x20000a04
 8002610:	20000c54 	.word	0x20000c54
 8002614:	20000a1c 	.word	0x20000a1c
 8002618:	0800cfc0 	.word	0x0800cfc0
 800261c:	0800cfd4 	.word	0x0800cfd4
 8002620:	0800cfd8 	.word	0x0800cfd8
 8002624:	200009e4 	.word	0x200009e4
 8002628:	20000a24 	.word	0x20000a24
 800262c:	20000d14 	.word	0x20000d14
 8002630:	0800cf9c 	.word	0x0800cf9c

08002634 <HAL_GPIO_EXTI_Callback>:


// Button interrupt
// Disables all interrupts, stops main loop, shows basic menu
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
	// Check the interrupt source
    if(GPIO_Pin == SW1_Pin)
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d102      	bne.n	800264c <HAL_GPIO_EXTI_Callback+0x18>
    {
    	button_pressed = 1;
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_GPIO_EXTI_Callback+0x24>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
    }
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	20000614 	.word	0x20000614

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
}
 8002662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002664:	e7fe      	b.n	8002664 <Error_Handler+0x8>
	...

08002668 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800267c:	2300      	movs	r3, #0
 800267e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002680:	4b24      	ldr	r3, [pc, #144]	; (8002714 <MX_RTC_Init+0xac>)
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <MX_RTC_Init+0xb0>)
 8002684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002686:	4b23      	ldr	r3, [pc, #140]	; (8002714 <MX_RTC_Init+0xac>)
 8002688:	2200      	movs	r2, #0
 800268a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <MX_RTC_Init+0xac>)
 800268e:	227f      	movs	r2, #127	; 0x7f
 8002690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <MX_RTC_Init+0xac>)
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <MX_RTC_Init+0xac>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_RTC_Init+0xac>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <MX_RTC_Init+0xac>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026aa:	481a      	ldr	r0, [pc, #104]	; (8002714 <MX_RTC_Init+0xac>)
 80026ac:	f003 faa2 	bl	8005bf4 <HAL_RTC_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80026b6:	f7ff ffd1 	bl	800265c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 80026ba:	2312      	movs	r3, #18
 80026bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80026be:	2300      	movs	r3, #0
 80026c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2201      	movs	r2, #1
 80026d2:	4619      	mov	r1, r3
 80026d4:	480f      	ldr	r0, [pc, #60]	; (8002714 <MX_RTC_Init+0xac>)
 80026d6:	f003 fb1e 	bl	8005d16 <HAL_RTC_SetTime>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80026e0:	f7ff ffbc 	bl	800265c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80026e4:	2301      	movs	r3, #1
 80026e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80026e8:	2301      	movs	r3, #1
 80026ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80026ec:	2301      	movs	r3, #1
 80026ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80026f4:	463b      	mov	r3, r7
 80026f6:	2201      	movs	r2, #1
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_RTC_Init+0xac>)
 80026fc:	f003 fc26 	bl	8005f4c <HAL_RTC_SetDate>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002706:	f7ff ffa9 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000c54 	.word	0x20000c54
 8002718:	40002800 	.word	0x40002800

0800271c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <HAL_RTC_MspInit+0x50>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800273e:	2302      	movs	r3, #2
 8002740:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002746:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	4618      	mov	r0, r3
 800274e:	f003 f963 	bl	8005a18 <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002758:	f7ff ff80 	bl	800265c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <HAL_RTC_MspInit+0x54>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002762:	bf00      	nop
 8002764:	3720      	adds	r7, #32
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40002800 	.word	0x40002800
 8002770:	42470e3c 	.word	0x42470e3c

08002774 <enterMenu>:
#include "setup_menu.h"

void enterMenu()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b09a      	sub	sp, #104	; 0x68
 8002778:	af00      	add	r7, sp, #0
	ST7565_clear();
 800277a:	f7ff f943 	bl	8001a04 <ST7565_clear>
	ST7565_drawstring(40, 0, "SETTINGS");
 800277e:	4a69      	ldr	r2, [pc, #420]	; (8002924 <enterMenu+0x1b0>)
 8002780:	2100      	movs	r1, #0
 8002782:	2028      	movs	r0, #40	; 0x28
 8002784:	f7fe ff18 	bl	80015b8 <ST7565_drawstring>

	char menu_items[4][20] = {"Set time", "Set travel", "Set brakes", "Exit"};
 8002788:	4a67      	ldr	r2, [pc, #412]	; (8002928 <enterMenu+0x1b4>)
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4611      	mov	r1, r2
 8002790:	2250      	movs	r2, #80	; 0x50
 8002792:	4618      	mov	r0, r3
 8002794:	f007 fd1a 	bl	800a1cc <memcpy>
	uint8_t cursor_position = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	char str_temp[20];
	uint8_t exit = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	while(exit == 0)
 80027a4:	e0b3      	b.n	800290e <enterMenu+0x19a>
	{
		ST7565_clear();
 80027a6:	f7ff f92d 	bl	8001a04 <ST7565_clear>
		ST7565_drawstring(40, 0, "SETTINGS");
 80027aa:	4a5e      	ldr	r2, [pc, #376]	; (8002924 <enterMenu+0x1b0>)
 80027ac:	2100      	movs	r1, #0
 80027ae:	2028      	movs	r0, #40	; 0x28
 80027b0:	f7fe ff02 	bl	80015b8 <ST7565_drawstring>

		// Print menu items
		for(uint8_t i = 0; i < 4; i++)
 80027b4:	2300      	movs	r3, #0
 80027b6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80027ba:	e037      	b.n	800282c <enterMenu+0xb8>
		{
			if (cursor_position == i)
 80027bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80027c0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d11a      	bne.n	80027fe <enterMenu+0x8a>
			{
				  strcpy(str_temp, "-> ");
 80027c8:	463b      	mov	r3, r7
 80027ca:	4a58      	ldr	r2, [pc, #352]	; (800292c <enterMenu+0x1b8>)
 80027cc:	601a      	str	r2, [r3, #0]
				  strcat(str_temp, menu_items[i]);
 80027ce:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80027d2:	f107 0114 	add.w	r1, r7, #20
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	18ca      	adds	r2, r1, r3
 80027e0:	463b      	mov	r3, r7
 80027e2:	4611      	mov	r1, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f008 f991 	bl	800ab0c <strcat>
				  ST7565_drawstring(0, i+2, str_temp);
 80027ea:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80027ee:	3302      	adds	r3, #2
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	463a      	mov	r2, r7
 80027f4:	4619      	mov	r1, r3
 80027f6:	2000      	movs	r0, #0
 80027f8:	f7fe fede 	bl	80015b8 <ST7565_drawstring>
 80027fc:	e011      	b.n	8002822 <enterMenu+0xae>
			}
			else
			{
				ST7565_drawstring(0, i+2, menu_items[i]);
 80027fe:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002802:	3302      	adds	r3, #2
 8002804:	b2d8      	uxtb	r0, r3
 8002806:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800280a:	f107 0114 	add.w	r1, r7, #20
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	461a      	mov	r2, r3
 800281a:	4601      	mov	r1, r0
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fecb 	bl	80015b8 <ST7565_drawstring>
		for(uint8_t i = 0; i < 4; i++)
 8002822:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002826:	3301      	adds	r3, #1
 8002828:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800282c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002830:	2b03      	cmp	r3, #3
 8002832:	d9c3      	bls.n	80027bc <enterMenu+0x48>
			}
		}


		// Button inputs
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET) // button down
 8002834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002838:	483d      	ldr	r0, [pc, #244]	; (8002930 <enterMenu+0x1bc>)
 800283a:	f001 fcaf 	bl	800419c <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d118      	bne.n	8002876 <enterMenu+0x102>
		{
			HAL_Delay(100);
 8002844:	2064      	movs	r0, #100	; 0x64
 8002846:	f000 fddb 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET)
 800284a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800284e:	4838      	ldr	r0, [pc, #224]	; (8002930 <enterMenu+0x1bc>)
 8002850:	f001 fca4 	bl	800419c <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d157      	bne.n	800290a <enterMenu+0x196>
			{
				if(cursor_position < 3)
 800285a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800285e:	2b02      	cmp	r3, #2
 8002860:	d805      	bhi.n	800286e <enterMenu+0xfa>
				{
					cursor_position++;
 8002862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002866:	3301      	adds	r3, #1
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800286c:	e04d      	b.n	800290a <enterMenu+0x196>
				}
				else
				{
					cursor_position = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002874:	e049      	b.n	800290a <enterMenu+0x196>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET) // button up
 8002876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287a:	482d      	ldr	r0, [pc, #180]	; (8002930 <enterMenu+0x1bc>)
 800287c:	f001 fc8e 	bl	800419c <HAL_GPIO_ReadPin>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d118      	bne.n	80028b8 <enterMenu+0x144>
		{
			HAL_Delay(100);
 8002886:	2064      	movs	r0, #100	; 0x64
 8002888:	f000 fdba 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 800288c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002890:	4827      	ldr	r0, [pc, #156]	; (8002930 <enterMenu+0x1bc>)
 8002892:	f001 fc83 	bl	800419c <HAL_GPIO_ReadPin>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d136      	bne.n	800290a <enterMenu+0x196>
			{
				if(cursor_position > 0)
 800289c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <enterMenu+0x13c>
				{
					cursor_position--;
 80028a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028a8:	3b01      	subs	r3, #1
 80028aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028ae:	e02c      	b.n	800290a <enterMenu+0x196>
				}
				else
				{
					cursor_position = 3;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028b6:	e028      	b.n	800290a <enterMenu+0x196>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET) // enter
 80028b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028bc:	481c      	ldr	r0, [pc, #112]	; (8002930 <enterMenu+0x1bc>)
 80028be:	f001 fc6d 	bl	800419c <HAL_GPIO_ReadPin>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d120      	bne.n	800290a <enterMenu+0x196>
		{
			HAL_Delay(100);
 80028c8:	2064      	movs	r0, #100	; 0x64
 80028ca:	f000 fd99 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET)
 80028ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d2:	4817      	ldr	r0, [pc, #92]	; (8002930 <enterMenu+0x1bc>)
 80028d4:	f001 fc62 	bl	800419c <HAL_GPIO_ReadPin>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d115      	bne.n	800290a <enterMenu+0x196>
			{
				if (cursor_position == 3)
 80028de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d103      	bne.n	80028ee <enterMenu+0x17a>
					exit = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80028ec:	e00d      	b.n	800290a <enterMenu+0x196>
				else if (cursor_position == 2)
 80028ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d009      	beq.n	800290a <enterMenu+0x196>
					;//setup_brakes(); TODO
				else if (cursor_position == 1)
 80028f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d005      	beq.n	800290a <enterMenu+0x196>
					;//setup_suspension(); TODO
				else if (cursor_position == 0)
 80028fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <enterMenu+0x196>
					setupTime();
 8002906:	f000 f815 	bl	8002934 <setupTime>
			}
		}

		ST7565_display();
 800290a:	f7fe fffd 	bl	8001908 <ST7565_display>
	while(exit == 0)
 800290e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002912:	2b00      	cmp	r3, #0
 8002914:	f43f af47 	beq.w	80027a6 <enterMenu+0x32>
	}
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3768      	adds	r7, #104	; 0x68
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0800cfdc 	.word	0x0800cfdc
 8002928:	0800cfe8 	.word	0x0800cfe8
 800292c:	00203e2d 	.word	0x00203e2d
 8002930:	40020000 	.word	0x40020000

08002934 <setupTime>:


void setupTime()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b098      	sub	sp, #96	; 0x60
 8002938:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t cursor_position = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	char str[30] = "";
 8002946:	2300      	movs	r3, #0
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	831a      	strh	r2, [r3, #24]
	char str_temp[30] = "";
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	f107 0320 	add.w	r3, r7, #32
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	611a      	str	r2, [r3, #16]
 8002972:	615a      	str	r2, [r3, #20]
 8002974:	831a      	strh	r2, [r3, #24]

	RTC_TimeTypeDef time_temp;
	RTC_DateTypeDef date_temp;

	HAL_RTC_GetTime(&hrtc, &time_temp, RTC_FORMAT_BIN);
 8002976:	f107 0308 	add.w	r3, r7, #8
 800297a:	2200      	movs	r2, #0
 800297c:	4619      	mov	r1, r3
 800297e:	48c3      	ldr	r0, [pc, #780]	; (8002c8c <setupTime+0x358>)
 8002980:	f003 fa86 	bl	8005e90 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date_temp, RTC_FORMAT_BIN);
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	2200      	movs	r2, #0
 8002988:	4619      	mov	r1, r3
 800298a:	48c0      	ldr	r0, [pc, #768]	; (8002c8c <setupTime+0x358>)
 800298c:	f003 fb85 	bl	800609a <HAL_RTC_GetDate>

	uint8_t hour = time_temp.Hours;
 8002990:	7a3b      	ldrb	r3, [r7, #8]
 8002992:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint8_t minute = time_temp.Minutes;
 8002996:	7a7b      	ldrb	r3, [r7, #9]
 8002998:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	uint8_t second = time_temp.Seconds;
 800299c:	7abb      	ldrb	r3, [r7, #10]
 800299e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	memset(str, '\0', sizeof(str));
 80029a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029a6:	221e      	movs	r2, #30
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f007 fc1c 	bl	800a1e8 <memset>
	memset(str_temp, '\0', sizeof(str_temp));
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	221e      	movs	r2, #30
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f007 fc15 	bl	800a1e8 <memset>

	sprintf(str, "%02u", hour);
 80029be:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80029c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80029c6:	49b2      	ldr	r1, [pc, #712]	; (8002c90 <setupTime+0x35c>)
 80029c8:	4618      	mov	r0, r3
 80029ca:	f008 f87f 	bl	800aacc <siprintf>
	strcat(str_temp, str);
 80029ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f008 f897 	bl	800ab0c <strcat>
	strcat(str_temp, " : ");
 80029de:	f107 031c 	add.w	r3, r7, #28
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fbfc 	bl	80001e0 <strlen>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4413      	add	r3, r2
 80029f2:	4aa8      	ldr	r2, [pc, #672]	; (8002c94 <setupTime+0x360>)
 80029f4:	6810      	ldr	r0, [r2, #0]
 80029f6:	6018      	str	r0, [r3, #0]
	sprintf(str, "%02u", minute);
 80029f8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80029fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a00:	49a3      	ldr	r1, [pc, #652]	; (8002c90 <setupTime+0x35c>)
 8002a02:	4618      	mov	r0, r3
 8002a04:	f008 f862 	bl	800aacc <siprintf>
	strcat(str_temp, str);
 8002a08:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f008 f87a 	bl	800ab0c <strcat>
	strcat(str_temp, " : ");
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fbdf 	bl	80001e0 <strlen>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a99      	ldr	r2, [pc, #612]	; (8002c94 <setupTime+0x360>)
 8002a2e:	6810      	ldr	r0, [r2, #0]
 8002a30:	6018      	str	r0, [r3, #0]
	sprintf(str, "%02u", second);
 8002a32:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002a36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a3a:	4995      	ldr	r1, [pc, #596]	; (8002c90 <setupTime+0x35c>)
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f008 f845 	bl	800aacc <siprintf>
	strcat(str_temp, str);
 8002a42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f008 f85d 	bl	800ab0c <strcat>

	while(exit == 0)
 8002a52:	e110      	b.n	8002c76 <setupTime+0x342>
	{
		ST7565_clear();
 8002a54:	f7fe ffd6 	bl	8001a04 <ST7565_clear>
		ST7565_drawstring(30, 0, "TIME SETUP");
 8002a58:	4a8f      	ldr	r2, [pc, #572]	; (8002c98 <setupTime+0x364>)
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	201e      	movs	r0, #30
 8002a5e:	f7fe fdab 	bl	80015b8 <ST7565_drawstring>

		memset(str, '\0', sizeof(str));
 8002a62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a66:	221e      	movs	r2, #30
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f007 fbbc 	bl	800a1e8 <memset>
		memset(str_temp, '\0', sizeof(str_temp));
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	221e      	movs	r2, #30
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f007 fbb5 	bl	800a1e8 <memset>

		sprintf(str, "%02u", hour);
 8002a7e:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8002a82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a86:	4982      	ldr	r1, [pc, #520]	; (8002c90 <setupTime+0x35c>)
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f008 f81f 	bl	800aacc <siprintf>
		strcat(str_temp, str);
 8002a8e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a92:	f107 031c 	add.w	r3, r7, #28
 8002a96:	4611      	mov	r1, r2
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f008 f837 	bl	800ab0c <strcat>
		strcat(str_temp, " : ");
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd fb9c 	bl	80001e0 <strlen>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a78      	ldr	r2, [pc, #480]	; (8002c94 <setupTime+0x360>)
 8002ab4:	6810      	ldr	r0, [r2, #0]
 8002ab6:	6018      	str	r0, [r3, #0]
		sprintf(str, "%02u", minute);
 8002ab8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ac0:	4973      	ldr	r1, [pc, #460]	; (8002c90 <setupTime+0x35c>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f008 f802 	bl	800aacc <siprintf>
		strcat(str_temp, str);
 8002ac8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002acc:	f107 031c 	add.w	r3, r7, #28
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f008 f81a 	bl	800ab0c <strcat>
		strcat(str_temp, " : ");
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fb7f 	bl	80001e0 <strlen>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4413      	add	r3, r2
 8002aec:	4a69      	ldr	r2, [pc, #420]	; (8002c94 <setupTime+0x360>)
 8002aee:	6810      	ldr	r0, [r2, #0]
 8002af0:	6018      	str	r0, [r3, #0]
		sprintf(str, "%02u", second);
 8002af2:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8002af6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afa:	4965      	ldr	r1, [pc, #404]	; (8002c90 <setupTime+0x35c>)
 8002afc:	4618      	mov	r0, r3
 8002afe:	f007 ffe5 	bl	800aacc <siprintf>
		strcat(str_temp, str);
 8002b02:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002b06:	f107 031c 	add.w	r3, r7, #28
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f007 fffd 	bl	800ab0c <strcat>

		ST7565_drawstring(20, 3, str_temp);
 8002b12:	f107 031c 	add.w	r3, r7, #28
 8002b16:	461a      	mov	r2, r3
 8002b18:	2103      	movs	r1, #3
 8002b1a:	2014      	movs	r0, #20
 8002b1c:	f7fe fd4c 	bl	80015b8 <ST7565_drawstring>

		// Button inputs
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET) // button down
 8002b20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b24:	485d      	ldr	r0, [pc, #372]	; (8002c9c <setupTime+0x368>)
 8002b26:	f001 fb39 	bl	800419c <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d132      	bne.n	8002b96 <setupTime+0x262>
		{
			HAL_Delay(100);
 8002b30:	2064      	movs	r0, #100	; 0x64
 8002b32:	f000 fc65 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET)
 8002b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b3a:	4858      	ldr	r0, [pc, #352]	; (8002c9c <setupTime+0x368>)
 8002b3c:	f001 fb2e 	bl	800419c <HAL_GPIO_ReadPin>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8095 	bne.w	8002c72 <setupTime+0x33e>
			{
				if (cursor_position == 0)
 8002b48:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <setupTime+0x232>
				{
					if (hour > 0)
 8002b50:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 808c 	beq.w	8002c72 <setupTime+0x33e>
						hour--;
 8002b5a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002b64:	e085      	b.n	8002c72 <setupTime+0x33e>
				}
				else if (cursor_position == 1)
 8002b66:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d109      	bne.n	8002b82 <setupTime+0x24e>
				{
					if (minute > 0)
 8002b6e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d07d      	beq.n	8002c72 <setupTime+0x33e>
						minute--;
 8002b76:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002b80:	e077      	b.n	8002c72 <setupTime+0x33e>
				}
				else
				{
					if (second > 0)
 8002b82:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d073      	beq.n	8002c72 <setupTime+0x33e>
						second--;
 8002b8a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002b94:	e06d      	b.n	8002c72 <setupTime+0x33e>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET) // button up
 8002b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9a:	4840      	ldr	r0, [pc, #256]	; (8002c9c <setupTime+0x368>)
 8002b9c:	f001 fafe 	bl	800419c <HAL_GPIO_ReadPin>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d130      	bne.n	8002c08 <setupTime+0x2d4>
		{
			HAL_Delay(100);
 8002ba6:	2064      	movs	r0, #100	; 0x64
 8002ba8:	f000 fc2a 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 8002bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bb0:	483a      	ldr	r0, [pc, #232]	; (8002c9c <setupTime+0x368>)
 8002bb2:	f001 faf3 	bl	800419c <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d15a      	bne.n	8002c72 <setupTime+0x33e>
			{
				if (cursor_position == 0)
 8002bbc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <setupTime+0x2a4>
				{
					if (hour < 23)
 8002bc4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002bc8:	2b16      	cmp	r3, #22
 8002bca:	d852      	bhi.n	8002c72 <setupTime+0x33e>
						hour++;
 8002bcc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002bd6:	e04c      	b.n	8002c72 <setupTime+0x33e>
				}
				else if (cursor_position == 1)
 8002bd8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d109      	bne.n	8002bf4 <setupTime+0x2c0>
				{
					if (minute < 59)
 8002be0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002be4:	2b3a      	cmp	r3, #58	; 0x3a
 8002be6:	d844      	bhi.n	8002c72 <setupTime+0x33e>
						minute++;
 8002be8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002bec:	3301      	adds	r3, #1
 8002bee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002bf2:	e03e      	b.n	8002c72 <setupTime+0x33e>
				}
				else
				{
					if (second < 59)
 8002bf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002bf8:	2b3a      	cmp	r3, #58	; 0x3a
 8002bfa:	d83a      	bhi.n	8002c72 <setupTime+0x33e>
						second++;
 8002bfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002c00:	3301      	adds	r3, #1
 8002c02:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002c06:	e034      	b.n	8002c72 <setupTime+0x33e>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET) // button enter
 8002c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c0c:	4823      	ldr	r0, [pc, #140]	; (8002c9c <setupTime+0x368>)
 8002c0e:	f001 fac5 	bl	800419c <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12c      	bne.n	8002c72 <setupTime+0x33e>
		{
			HAL_Delay(100);
 8002c18:	2064      	movs	r0, #100	; 0x64
 8002c1a:	f000 fbf1 	bl	8003400 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET)
 8002c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c22:	481e      	ldr	r0, [pc, #120]	; (8002c9c <setupTime+0x368>)
 8002c24:	f001 faba 	bl	800419c <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d121      	bne.n	8002c72 <setupTime+0x33e>
			{
				cursor_position++;
 8002c2e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002c32:	3301      	adds	r3, #1
 8002c34:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				if(cursor_position >= 3)
 8002c38:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d918      	bls.n	8002c72 <setupTime+0x33e>
				{
					// Write to RTC registers on exit
					time_temp.Hours = hour;
 8002c40:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002c44:	723b      	strb	r3, [r7, #8]
					time_temp.Minutes = minute;
 8002c46:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002c4a:	727b      	strb	r3, [r7, #9]
					time_temp.Seconds = second;
 8002c4c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002c50:	72bb      	strb	r3, [r7, #10]

					HAL_RTC_SetTime(&hrtc, &time_temp, RTC_FORMAT_BIN);
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	2200      	movs	r2, #0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480c      	ldr	r0, [pc, #48]	; (8002c8c <setupTime+0x358>)
 8002c5c:	f003 f85b 	bl	8005d16 <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &date_temp, RTC_FORMAT_BIN);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	4619      	mov	r1, r3
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <setupTime+0x358>)
 8002c68:	f003 f970 	bl	8005f4c <HAL_RTC_SetDate>

					exit = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}

		ST7565_display();
 8002c72:	f7fe fe49 	bl	8001908 <ST7565_display>
	while(exit == 0)
 8002c76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f43f aeea 	beq.w	8002a54 <setupTime+0x120>
	}
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3760      	adds	r7, #96	; 0x60
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000c54 	.word	0x20000c54
 8002c90:	0800d038 	.word	0x0800d038
 8002c94:	0800d040 	.word	0x0800d040
 8002c98:	0800d044 	.word	0x0800d044
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <MX_SPI1_Init+0x6c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cb8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cee:	220a      	movs	r2, #10
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_SPI1_Init+0x68>)
 8002cf4:	f003 fab0 	bl	8006258 <HAL_SPI_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002cfe:	f7ff fcad 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200006a4 	.word	0x200006a4
 8002d0c:	40013000 	.word	0x40013000

08002d10 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d14:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <MX_SPI2_Init+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d1a:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d22:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d44:	2228      	movs	r2, #40	; 0x28
 8002d46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d60:	4804      	ldr	r0, [pc, #16]	; (8002d74 <MX_SPI2_Init+0x64>)
 8002d62:	f003 fa79 	bl	8006258 <HAL_SPI_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d6c:	f7ff fc76 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000c74 	.word	0x20000c74
 8002d78:	40003800 	.word	0x40003800

08002d7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <HAL_SPI_MspInit+0xe8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d12c      	bne.n	8002df8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002da8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002dd6:	23a0      	movs	r3, #160	; 0xa0
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002de6:	2305      	movs	r3, #5
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	4619      	mov	r1, r3
 8002df0:	481e      	ldr	r0, [pc, #120]	; (8002e6c <HAL_SPI_MspInit+0xf0>)
 8002df2:	f001 f84f 	bl	8003e94 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002df6:	e031      	b.n	8002e5c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_SPI_MspInit+0xf4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12c      	bne.n	8002e5c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_SPI_MspInit+0xec>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e4c:	2305      	movs	r3, #5
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e50:	f107 031c 	add.w	r3, r7, #28
 8002e54:	4619      	mov	r1, r3
 8002e56:	4807      	ldr	r0, [pc, #28]	; (8002e74 <HAL_SPI_MspInit+0xf8>)
 8002e58:	f001 f81c 	bl	8003e94 <HAL_GPIO_Init>
}
 8002e5c:	bf00      	nop
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40013000 	.word	0x40013000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	40003800 	.word	0x40003800
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_MspInit+0x4c>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800

08002ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <NMI_Handler+0x4>

08002ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler+0x4>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <BusFault_Handler+0x4>

08002ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler+0x4>

08002ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f14:	f000 fa54 	bl	80033c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <TIM4_IRQHandler+0x10>)
 8002f22:	f003 fe8b 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	20000ccc 	.word	0x20000ccc

08002f30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002f34:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f38:	f001 f962 	bl	8004200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <TIM5_IRQHandler+0x10>)
 8002f46:	f003 fe79 	bl	8006c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000d14 	.word	0x20000d14

08002f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
	return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_kill>:

int _kill(int pid, int sig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f6e:	f007 f903 	bl	800a178 <__errno>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2216      	movs	r2, #22
 8002f76:	601a      	str	r2, [r3, #0]
	return -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_exit>:

void _exit (int status)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ffe7 	bl	8002f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f96:	e7fe      	b.n	8002f96 <_exit+0x12>

08002f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e00a      	b.n	8002fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002faa:	f3af 8000 	nop.w
 8002fae:	4601      	mov	r1, r0
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	60ba      	str	r2, [r7, #8]
 8002fb6:	b2ca      	uxtb	r2, r1
 8002fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	dbf0      	blt.n	8002faa <_read+0x12>
	}

return len;
 8002fc8:	687b      	ldr	r3, [r7, #4]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	e009      	b.n	8002ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	60ba      	str	r2, [r7, #8]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dbf1      	blt.n	8002fe4 <_write+0x12>
	}
	return len;
 8003000:	687b      	ldr	r3, [r7, #4]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <_close>:

int _close(int file)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
	return -1;
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003016:	4618      	mov	r0, r3
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003032:	605a      	str	r2, [r3, #4]
	return 0;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <_isatty>:

int _isatty(int file)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
	return 1;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
	return 0;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800307c:	4a14      	ldr	r2, [pc, #80]	; (80030d0 <_sbrk+0x5c>)
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <_sbrk+0x60>)
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <_sbrk+0x64>)
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <_sbrk+0x68>)
 8003094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <_sbrk+0x64>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4413      	add	r3, r2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a4:	f007 f868 	bl	800a178 <__errno>
 80030a8:	4603      	mov	r3, r0
 80030aa:	220c      	movs	r2, #12
 80030ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	e009      	b.n	80030c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <_sbrk+0x64>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ba:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <_sbrk+0x64>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <_sbrk+0x64>)
 80030c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20010000 	.word	0x20010000
 80030d4:	00000400 	.word	0x00000400
 80030d8:	20000618 	.word	0x20000618
 80030dc:	200011e0 	.word	0x200011e0

080030e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <SystemInit+0x20>)
 80030e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <SystemInit+0x20>)
 80030ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003118:	463b      	mov	r3, r7
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <MX_TIM4_Init+0x94>)
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <MX_TIM4_Init+0x98>)
 8003124:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8003126:	4b1c      	ldr	r3, [pc, #112]	; (8003198 <MX_TIM4_Init+0x94>)
 8003128:	f240 32e7 	movw	r2, #999	; 0x3e7
 800312c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_TIM4_Init+0x94>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1600;
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <MX_TIM4_Init+0x94>)
 8003136:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800313a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <MX_TIM4_Init+0x94>)
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <MX_TIM4_Init+0x94>)
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003148:	4813      	ldr	r0, [pc, #76]	; (8003198 <MX_TIM4_Init+0x94>)
 800314a:	f003 fcc5 	bl	8006ad8 <HAL_TIM_Base_Init>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003154:	f7ff fa82 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800315c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	4619      	mov	r1, r3
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <MX_TIM4_Init+0x94>)
 8003166:	f003 fe71 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003170:	f7ff fa74 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800317c:	463b      	mov	r3, r7
 800317e:	4619      	mov	r1, r3
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <MX_TIM4_Init+0x94>)
 8003182:	f004 f86d 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800318c:	f7ff fa66 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003190:	bf00      	nop
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000ccc 	.word	0x20000ccc
 800319c:	40000800 	.word	0x40000800

080031a0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031a6:	f107 0308 	add.w	r3, r7, #8
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b4:	463b      	mov	r3, r7
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <MX_TIM5_Init+0x94>)
 80031be:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <MX_TIM5_Init+0x98>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <MX_TIM5_Init+0x94>)
 80031c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <MX_TIM5_Init+0x94>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2450;
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <MX_TIM5_Init+0x94>)
 80031d2:	f640 1292 	movw	r2, #2450	; 0x992
 80031d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d8:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_TIM5_Init+0x94>)
 80031da:	2200      	movs	r2, #0
 80031dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <MX_TIM5_Init+0x94>)
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80031e4:	4813      	ldr	r0, [pc, #76]	; (8003234 <MX_TIM5_Init+0x94>)
 80031e6:	f003 fc77 	bl	8006ad8 <HAL_TIM_Base_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80031f0:	f7ff fa34 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80031fa:	f107 0308 	add.w	r3, r7, #8
 80031fe:	4619      	mov	r1, r3
 8003200:	480c      	ldr	r0, [pc, #48]	; (8003234 <MX_TIM5_Init+0x94>)
 8003202:	f003 fe23 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800320c:	f7ff fa26 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003210:	2300      	movs	r3, #0
 8003212:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003218:	463b      	mov	r3, r7
 800321a:	4619      	mov	r1, r3
 800321c:	4805      	ldr	r0, [pc, #20]	; (8003234 <MX_TIM5_Init+0x94>)
 800321e:	f004 f81f 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003228:	f7ff fa18 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	20000d14 	.word	0x20000d14
 8003238:	40000c00 	.word	0x40000c00

0800323c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1c      	ldr	r2, [pc, #112]	; (80032bc <HAL_TIM_Base_MspInit+0x80>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d116      	bne.n	800327c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6413      	str	r3, [r2, #64]	; 0x40
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2101      	movs	r1, #1
 800326e:	201e      	movs	r0, #30
 8003270:	f000 fdcb 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003274:	201e      	movs	r0, #30
 8003276:	f000 fde4 	bl	8003e42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800327a:	e01a      	b.n	80032b2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM5)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_TIM_Base_MspInit+0x88>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d115      	bne.n	80032b2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_TIM_Base_MspInit+0x84>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2032      	movs	r0, #50	; 0x32
 80032a8:	f000 fdaf 	bl	8003e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032ac:	2032      	movs	r0, #50	; 0x32
 80032ae:	f000 fdc8 	bl	8003e42 <HAL_NVIC_EnableIRQ>
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40000c00 	.word	0x40000c00

080032c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003300 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032cc:	480d      	ldr	r0, [pc, #52]	; (8003304 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032d0:	4a0e      	ldr	r2, [pc, #56]	; (800330c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d4:	e002      	b.n	80032dc <LoopCopyDataInit>

080032d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032da:	3304      	adds	r3, #4

080032dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e0:	d3f9      	bcc.n	80032d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032e2:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032e4:	4c0b      	ldr	r4, [pc, #44]	; (8003314 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e8:	e001      	b.n	80032ee <LoopFillZerobss>

080032ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032ec:	3204      	adds	r2, #4

080032ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f0:	d3fb      	bcc.n	80032ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032f2:	f7ff fef5 	bl	80030e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032f6:	f006 ff45 	bl	800a184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032fa:	f7fe fddd 	bl	8001eb8 <main>
  bx  lr    
 80032fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003300:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003308:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800330c:	0800db2c 	.word	0x0800db2c
  ldr r2, =_sbss
 8003310:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003314:	200011e0 	.word	0x200011e0

08003318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003318:	e7fe      	b.n	8003318 <ADC_IRQHandler>
	...

0800331c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003320:	4b0e      	ldr	r3, [pc, #56]	; (800335c <HAL_Init+0x40>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0d      	ldr	r2, [pc, #52]	; (800335c <HAL_Init+0x40>)
 8003326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800332a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_Init+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_Init+0x40>)
 8003332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003336:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_Init+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a07      	ldr	r2, [pc, #28]	; (800335c <HAL_Init+0x40>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003344:	2003      	movs	r0, #3
 8003346:	f000 fd55 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800334a:	200f      	movs	r0, #15
 800334c:	f000 f808 	bl	8003360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003350:	f7ff fd92 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40023c00 	.word	0x40023c00

08003360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_InitTick+0x54>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b12      	ldr	r3, [pc, #72]	; (80033b8 <HAL_InitTick+0x58>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	4619      	mov	r1, r3
 8003372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003376:	fbb3 f3f1 	udiv	r3, r3, r1
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd7b 	bl	8003e7a <HAL_SYSTICK_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00e      	b.n	80033ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d80a      	bhi.n	80033aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003394:	2200      	movs	r2, #0
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f000 fd35 	bl	8003e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <HAL_InitTick+0x5c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	e000      	b.n	80033ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000000 	.word	0x20000000
 80033b8:	20000008 	.word	0x20000008
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000008 	.word	0x20000008
 80033e4:	20000d5c 	.word	0x20000d5c

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000d5c 	.word	0x20000d5c

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000008 	.word	0x20000008

08003448 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e033      	b.n	80034c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fb54 	bl	8001b14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d118      	bne.n	80034b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800348e:	f023 0302 	bic.w	r3, r3, #2
 8003492:	f043 0202 	orr.w	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 faba 	bl	8003a14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f023 0303 	bic.w	r3, r3, #3
 80034ae:	f043 0201 	orr.w	r2, r3, #1
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
 80034b6:	e001      	b.n	80034bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Start+0x1a>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e097      	b.n	800361a <HAL_ADC_Start+0x14a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d018      	beq.n	8003532 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003510:	4b45      	ldr	r3, [pc, #276]	; (8003628 <HAL_ADC_Start+0x158>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a45      	ldr	r2, [pc, #276]	; (800362c <HAL_ADC_Start+0x15c>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0c9a      	lsrs	r2, r3, #18
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003524:	e002      	b.n	800352c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f9      	bne.n	8003526 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d15f      	bne.n	8003600 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800356a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	d106      	bne.n	800358e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	f023 0206 	bic.w	r2, r3, #6
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	; 0x44
 800358c:	e002      	b.n	8003594 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800359c:	4b24      	ldr	r3, [pc, #144]	; (8003630 <HAL_ADC_Start+0x160>)
 800359e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d129      	bne.n	8003618 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e020      	b.n	8003618 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_ADC_Start+0x164>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d11b      	bne.n	8003618 <HAL_ADC_Start+0x148>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d114      	bne.n	8003618 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	e00b      	b.n	8003618 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	f043 0210 	orr.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000
 800362c:	431bde83 	.word	0x431bde83
 8003630:	40012300 	.word	0x40012300
 8003634:	40012000 	.word	0x40012000

08003638 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_ADC_Stop+0x16>
 800364a:	2302      	movs	r3, #2
 800364c:	e021      	b.n	8003692 <HAL_ADC_Stop+0x5a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ba:	d113      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ca:	d10b      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e063      	b.n	80037ac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80036e4:	f7ff fe80 	bl	80033e8 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036ea:	e021      	b.n	8003730 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d01d      	beq.n	8003730 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <HAL_ADC_PollForConversion+0x6c>
 80036fa:	f7ff fe75 	bl	80033e8 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d212      	bcs.n	8003730 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d00b      	beq.n	8003730 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0204 	orr.w	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e03d      	b.n	80037ac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d1d6      	bne.n	80036ec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f06f 0212 	mvn.w	r2, #18
 8003746:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d123      	bne.n	80037aa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11f      	bne.n	80037aa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003774:	2b00      	cmp	r3, #0
 8003776:	d006      	beq.n	8003786 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d111      	bne.n	80037aa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1c>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e105      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x228>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d925      	bls.n	8003848 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	3b1e      	subs	r3, #30
 8003812:	2207      	movs	r2, #7
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43da      	mvns	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	400a      	ands	r2, r1
 8003820:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68d9      	ldr	r1, [r3, #12]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	4618      	mov	r0, r3
 8003834:	4603      	mov	r3, r0
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4403      	add	r3, r0
 800383a:	3b1e      	subs	r3, #30
 800383c:	409a      	lsls	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	e022      	b.n	800388e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6919      	ldr	r1, [r3, #16]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	2207      	movs	r2, #7
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43da      	mvns	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	400a      	ands	r2, r1
 800386a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6919      	ldr	r1, [r3, #16]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4618      	mov	r0, r3
 800387e:	4603      	mov	r3, r0
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4403      	add	r3, r0
 8003884:	409a      	lsls	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b06      	cmp	r3, #6
 8003894:	d824      	bhi.n	80038e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	3b05      	subs	r3, #5
 80038a8:	221f      	movs	r2, #31
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	400a      	ands	r2, r1
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4618      	mov	r0, r3
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	3b05      	subs	r3, #5
 80038d2:	fa00 f203 	lsl.w	r2, r0, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34
 80038de:	e04c      	b.n	800397a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d824      	bhi.n	8003932 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	3b23      	subs	r3, #35	; 0x23
 80038fa:	221f      	movs	r2, #31
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43da      	mvns	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	400a      	ands	r2, r1
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	4618      	mov	r0, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	3b23      	subs	r3, #35	; 0x23
 8003924:	fa00 f203 	lsl.w	r2, r0, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
 8003930:	e023      	b.n	800397a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	3b41      	subs	r3, #65	; 0x41
 8003944:	221f      	movs	r2, #31
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	400a      	ands	r2, r1
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	4618      	mov	r0, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b41      	subs	r3, #65	; 0x41
 800396e:	fa00 f203 	lsl.w	r2, r0, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_ADC_ConfigChannel+0x234>)
 800397c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_ADC_ConfigChannel+0x238>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d109      	bne.n	800399c <HAL_ADC_ConfigChannel+0x1cc>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b12      	cmp	r3, #18
 800398e:	d105      	bne.n	800399c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_ADC_ConfigChannel+0x238>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d123      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x21e>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d003      	beq.n	80039b6 <HAL_ADC_ConfigChannel+0x1e6>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b11      	cmp	r3, #17
 80039b4:	d11b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d111      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_ADC_ConfigChannel+0x23c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <HAL_ADC_ConfigChannel+0x240>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	0c9a      	lsrs	r2, r3, #18
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039e0:	e002      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f9      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40012300 	.word	0x40012300
 8003a08:	40012000 	.word	0x40012000
 8003a0c:	20000000 	.word	0x20000000
 8003a10:	431bde83 	.word	0x431bde83

08003a14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <ADC_Init+0x1f0>)
 8003a1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6859      	ldr	r1, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	021a      	lsls	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6899      	ldr	r1, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa6:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <ADC_Init+0x1f4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6899      	ldr	r1, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6899      	ldr	r1, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	e00f      	b.n	8003b12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0202 	bic.w	r2, r2, #2
 8003b20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7e1b      	ldrb	r3, [r3, #24]
 8003b2c:	005a      	lsls	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	035a      	lsls	r2, r3, #13
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	e007      	b.n	8003b88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	051a      	lsls	r2, r3, #20
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bca:	025a      	lsls	r2, r3, #9
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	029a      	lsls	r2, r3, #10
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40012300 	.word	0x40012300
 8003c08:	0f000001 	.word	0x0f000001

08003c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c1c:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3e:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <__NVIC_SetPriorityGrouping+0x44>)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	60d3      	str	r3, [r2, #12]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <__NVIC_GetPriorityGrouping+0x18>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	f003 0307 	and.w	r3, r3, #7
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	db0b      	blt.n	8003c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	f003 021f 	and.w	r2, r3, #31
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <__NVIC_EnableIRQ+0x38>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	2001      	movs	r0, #1
 8003c92:	fa00 f202 	lsl.w	r2, r0, r2
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000e100 	.word	0xe000e100

08003cac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db12      	blt.n	8003ce4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	490a      	ldr	r1, [pc, #40]	; (8003cf0 <__NVIC_DisableIRQ+0x44>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	3320      	adds	r3, #32
 8003cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd8:	f3bf 8f4f 	dsb	sy
}
 8003cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cde:	f3bf 8f6f 	isb	sy
}
 8003ce2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
	...

08003db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc0:	d301      	bcc.n	8003dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00f      	b.n	8003de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <SysTick_Config+0x40>)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dce:	210f      	movs	r1, #15
 8003dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd4:	f7ff ff8e 	bl	8003cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <SysTick_Config+0x40>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <SysTick_Config+0x40>)
 8003de0:	2207      	movs	r2, #7
 8003de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	e000e010 	.word	0xe000e010

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff05 	bl	8003c0c <__NVIC_SetPriorityGrouping>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e1c:	f7ff ff1a 	bl	8003c54 <__NVIC_GetPriorityGrouping>
 8003e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	6978      	ldr	r0, [r7, #20]
 8003e28:	f7ff ff8e 	bl	8003d48 <NVIC_EncodePriority>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff5d 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff ff0d 	bl	8003c70 <__NVIC_EnableIRQ>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b082      	sub	sp, #8
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff1d 	bl	8003cac <__NVIC_DisableIRQ>
}
 8003e72:	bf00      	nop
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ff94 	bl	8003db0 <SysTick_Config>
 8003e88:	4603      	mov	r3, r0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	e159      	b.n	8004164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	f040 8148 	bne.w	800415e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d005      	beq.n	8003ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d130      	bne.n	8003f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 0201 	and.w	r2, r3, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d017      	beq.n	8003f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d123      	bne.n	8003fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	08da      	lsrs	r2, r3, #3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3208      	adds	r2, #8
 8003f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	08da      	lsrs	r2, r3, #3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3208      	adds	r2, #8
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0203 	and.w	r2, r3, #3
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a2 	beq.w	800415e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b57      	ldr	r3, [pc, #348]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4a56      	ldr	r2, [pc, #344]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	6453      	str	r3, [r2, #68]	; 0x44
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_GPIO_Init+0x2e8>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a49      	ldr	r2, [pc, #292]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x202>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a48      	ldr	r2, [pc, #288]	; (8004188 <HAL_GPIO_Init+0x2f4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x1fe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_GPIO_Init+0x2f8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x1fa>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x1f6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a45      	ldr	r2, [pc, #276]	; (8004194 <HAL_GPIO_Init+0x300>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x1f2>
 8004082:	2304      	movs	r3, #4
 8004084:	e008      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004086:	2307      	movs	r3, #7
 8004088:	e006      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408a:	2303      	movs	r3, #3
 800408c:	e004      	b.n	8004098 <HAL_GPIO_Init+0x204>
 800408e:	2302      	movs	r3, #2
 8004090:	e002      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_GPIO_Init+0x204>
 8004096:	2300      	movs	r3, #0
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	f002 0203 	and.w	r2, r2, #3
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4093      	lsls	r3, r2
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040a8:	4935      	ldr	r1, [pc, #212]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3302      	adds	r3, #2
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b6:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040da:	4a2f      	ldr	r2, [pc, #188]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_GPIO_Init+0x304>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	4013      	ands	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004104:	4a24      	ldr	r2, [pc, #144]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_GPIO_Init+0x304>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800412e:	4a1a      	ldr	r2, [pc, #104]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_GPIO_Init+0x304>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004158:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <HAL_GPIO_Init+0x304>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3301      	adds	r3, #1
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	2b0f      	cmp	r3, #15
 8004168:	f67f aea2 	bls.w	8003eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	3724      	adds	r7, #36	; 0x24
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	40013800 	.word	0x40013800
 8004184:	40020000 	.word	0x40020000
 8004188:	40020400 	.word	0x40020400
 800418c:	40020800 	.word	0x40020800
 8004190:	40020c00 	.word	0x40020c00
 8004194:	40021000 	.word	0x40021000
 8004198:	40013c00 	.word	0x40013c00

0800419c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
 80041b8:	e001      	b.n	80041be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	807b      	strh	r3, [r7, #2]
 80041d8:	4613      	mov	r3, r2
 80041da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e2:	887a      	ldrh	r2, [r7, #2]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041e8:	e003      	b.n	80041f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	041a      	lsls	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	88fb      	ldrh	r3, [r7, #6]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004216:	4a05      	ldr	r2, [pc, #20]	; (800422c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004218:	88fb      	ldrh	r3, [r7, #6]
 800421a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fa08 	bl	8002634 <HAL_GPIO_EXTI_Callback>
  }
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40013c00 	.word	0x40013c00

08004230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e12b      	b.n	800449a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fda0 	bl	8001d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0201 	bic.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004294:	f001 fbac 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4a81      	ldr	r2, [pc, #516]	; (80044a4 <HAL_I2C_Init+0x274>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d807      	bhi.n	80042b4 <HAL_I2C_Init+0x84>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_I2C_Init+0x278>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	bf94      	ite	ls
 80042ac:	2301      	movls	r3, #1
 80042ae:	2300      	movhi	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e006      	b.n	80042c2 <HAL_I2C_Init+0x92>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a7d      	ldr	r2, [pc, #500]	; (80044ac <HAL_I2C_Init+0x27c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	bf94      	ite	ls
 80042bc:	2301      	movls	r3, #1
 80042be:	2300      	movhi	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0e7      	b.n	800449a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4a78      	ldr	r2, [pc, #480]	; (80044b0 <HAL_I2C_Init+0x280>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4a6a      	ldr	r2, [pc, #424]	; (80044a4 <HAL_I2C_Init+0x274>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d802      	bhi.n	8004304 <HAL_I2C_Init+0xd4>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3301      	adds	r3, #1
 8004302:	e009      	b.n	8004318 <HAL_I2C_Init+0xe8>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	4a69      	ldr	r2, [pc, #420]	; (80044b4 <HAL_I2C_Init+0x284>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	099b      	lsrs	r3, r3, #6
 8004316:	3301      	adds	r3, #1
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	430b      	orrs	r3, r1
 800431e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800432a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	495c      	ldr	r1, [pc, #368]	; (80044a4 <HAL_I2C_Init+0x274>)
 8004334:	428b      	cmp	r3, r1
 8004336:	d819      	bhi.n	800436c <HAL_I2C_Init+0x13c>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e59      	subs	r1, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fbb1 f3f3 	udiv	r3, r1, r3
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800434c:	400b      	ands	r3, r1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00a      	beq.n	8004368 <HAL_I2C_Init+0x138>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e59      	subs	r1, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004366:	e051      	b.n	800440c <HAL_I2C_Init+0x1dc>
 8004368:	2304      	movs	r3, #4
 800436a:	e04f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <HAL_I2C_Init+0x168>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	440b      	add	r3, r1
 8004382:	fbb0 f3f3 	udiv	r3, r0, r3
 8004386:	3301      	adds	r3, #1
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	2b00      	cmp	r3, #0
 800438e:	bf0c      	ite	eq
 8004390:	2301      	moveq	r3, #1
 8004392:	2300      	movne	r3, #0
 8004394:	b2db      	uxtb	r3, r3
 8004396:	e012      	b.n	80043be <HAL_I2C_Init+0x18e>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	bf0c      	ite	eq
 80043b8:	2301      	moveq	r3, #1
 80043ba:	2300      	movne	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Init+0x196>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10e      	bne.n	80043ec <HAL_I2C_Init+0x1bc>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1e58      	subs	r0, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	440b      	add	r3, r1
 80043dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e0:	3301      	adds	r3, #1
 80043e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ea:	e00f      	b.n	800440c <HAL_I2C_Init+0x1dc>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e58      	subs	r0, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	0099      	lsls	r1, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004402:	3301      	adds	r3, #1
 8004404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6809      	ldr	r1, [r1, #0]
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69da      	ldr	r2, [r3, #28]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800443a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6911      	ldr	r1, [r2, #16]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68d2      	ldr	r2, [r2, #12]
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	430b      	orrs	r3, r1
 800444e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695a      	ldr	r2, [r3, #20]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	000186a0 	.word	0x000186a0
 80044a8:	001e847f 	.word	0x001e847f
 80044ac:	003d08ff 	.word	0x003d08ff
 80044b0:	431bde83 	.word	0x431bde83
 80044b4:	10624dd3 	.word	0x10624dd3

080044b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044d2:	f7fe ff89 	bl	80033e8 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	f040 80d9 	bne.w	8004698 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	2319      	movs	r3, #25
 80044ec:	2201      	movs	r2, #1
 80044ee:	496d      	ldr	r1, [pc, #436]	; (80046a4 <HAL_I2C_Mem_Write+0x1ec>)
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fc7f 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0cc      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_I2C_Mem_Write+0x56>
 800450a:	2302      	movs	r3, #2
 800450c:	e0c5      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d007      	beq.n	8004534 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2221      	movs	r2, #33	; 0x21
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4a4d      	ldr	r2, [pc, #308]	; (80046a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004576:	88f8      	ldrh	r0, [r7, #6]
 8004578:	893a      	ldrh	r2, [r7, #8]
 800457a:	8979      	ldrh	r1, [r7, #10]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	9301      	str	r3, [sp, #4]
 8004580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	4603      	mov	r3, r0
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fab6 	bl	8004af8 <I2C_RequestMemoryWrite>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d052      	beq.n	8004638 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e081      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fd00 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d107      	bne.n	80045be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e06b      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d11b      	bne.n	8004638 <HAL_I2C_Mem_Write+0x180>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d017      	beq.n	8004638 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1aa      	bne.n	8004596 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fcec 	bl	8005022 <I2C_WaitOnBTFFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e016      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	00100002 	.word	0x00100002
 80046a8:	ffff0000 	.word	0xffff0000

080046ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08c      	sub	sp, #48	; 0x30
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	817b      	strh	r3, [r7, #10]
 80046be:	460b      	mov	r3, r1
 80046c0:	813b      	strh	r3, [r7, #8]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046c6:	f7fe fe8f 	bl	80033e8 <HAL_GetTick>
 80046ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	f040 8208 	bne.w	8004aea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	2319      	movs	r3, #25
 80046e0:	2201      	movs	r2, #1
 80046e2:	497b      	ldr	r1, [pc, #492]	; (80048d0 <HAL_I2C_Mem_Read+0x224>)
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fb85 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
 80046f2:	e1fb      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_Mem_Read+0x56>
 80046fe:	2302      	movs	r3, #2
 8004700:	e1f4      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	d007      	beq.n	8004728 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2222      	movs	r2, #34	; 0x22
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2240      	movs	r2, #64	; 0x40
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a5b      	ldr	r2, [pc, #364]	; (80048d4 <HAL_I2C_Mem_Read+0x228>)
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476a:	88f8      	ldrh	r0, [r7, #6]
 800476c:	893a      	ldrh	r2, [r7, #8]
 800476e:	8979      	ldrh	r1, [r7, #10]
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4603      	mov	r3, r0
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 fa52 	bl	8004c24 <I2C_RequestMemoryRead>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e1b0      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478e:	2b00      	cmp	r3, #0
 8004790:	d113      	bne.n	80047ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	623b      	str	r3, [r7, #32]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	623b      	str	r3, [r7, #32]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e184      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d11b      	bne.n	80047fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e164      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d11b      	bne.n	800483a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004810:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	e144      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004850:	e138      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	2b03      	cmp	r3, #3
 8004858:	f200 80f1 	bhi.w	8004a3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	2b01      	cmp	r3, #1
 8004862:	d123      	bne.n	80048ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fc1b 	bl	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e139      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048aa:	e10b      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d14e      	bne.n	8004952 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	2200      	movs	r2, #0
 80048bc:	4906      	ldr	r1, [pc, #24]	; (80048d8 <HAL_I2C_Mem_Read+0x22c>)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 fa98 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e10e      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
 80048ce:	bf00      	nop
 80048d0:	00100002 	.word	0x00100002
 80048d4:	ffff0000 	.word	0xffff0000
 80048d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	3b01      	subs	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004950:	e0b8      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2200      	movs	r2, #0
 800495a:	4966      	ldr	r1, [pc, #408]	; (8004af4 <HAL_I2C_Mem_Read+0x448>)
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fa49 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0bf      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800497a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2200      	movs	r2, #0
 80049b6:	494f      	ldr	r1, [pc, #316]	; (8004af4 <HAL_I2C_Mem_Read+0x448>)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fa1b 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e091      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691a      	ldr	r2, [r3, #16]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	1c5a      	adds	r2, r3, #1
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a26:	3b01      	subs	r3, #1
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a3c:	e042      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fb2e 	bl	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e04c      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d118      	bne.n	8004ac4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f47f aec2 	bne.w	8004852 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e000      	b.n	8004aec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004aea:	2302      	movs	r3, #2
  }
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3728      	adds	r7, #40	; 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	00010004 	.word	0x00010004

08004af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	461a      	mov	r2, r3
 8004b06:	4603      	mov	r3, r0
 8004b08:	817b      	strh	r3, [r7, #10]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f960 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b48:	d103      	bne.n	8004b52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e05f      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6a3a      	ldr	r2, [r7, #32]
 8004b6a:	492d      	ldr	r1, [pc, #180]	; (8004c20 <I2C_RequestMemoryWrite+0x128>)
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f998 	bl	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04c      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	6a39      	ldr	r1, [r7, #32]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 fa02 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00d      	beq.n	8004bbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	d107      	bne.n	8004bba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e02b      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bbe:	88fb      	ldrh	r3, [r7, #6]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc4:	893b      	ldrh	r3, [r7, #8]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	611a      	str	r2, [r3, #16]
 8004bce:	e021      	b.n	8004c14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	6a39      	ldr	r1, [r7, #32]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f9dc 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d107      	bne.n	8004c06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e005      	b.n	8004c16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c0a:	893b      	ldrh	r3, [r7, #8]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	817b      	strh	r3, [r7, #10]
 8004c36:	460b      	mov	r3, r1
 8004c38:	813b      	strh	r3, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 f8c2 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00d      	beq.n	8004c92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c84:	d103      	bne.n	8004c8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e0aa      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c92:	897b      	ldrh	r3, [r7, #10]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	6a3a      	ldr	r2, [r7, #32]
 8004ca6:	4952      	ldr	r1, [pc, #328]	; (8004df0 <I2C_RequestMemoryRead+0x1cc>)
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f8fa 	bl	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e097      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	6a39      	ldr	r1, [r7, #32]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f964 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d107      	bne.n	8004cf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e076      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d00:	893b      	ldrh	r3, [r7, #8]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	611a      	str	r2, [r3, #16]
 8004d0a:	e021      	b.n	8004d50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d0c:	893b      	ldrh	r3, [r7, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1c:	6a39      	ldr	r1, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f93e 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00d      	beq.n	8004d46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d107      	bne.n	8004d42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e050      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d46:	893b      	ldrh	r3, [r7, #8]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	6a39      	ldr	r1, [r7, #32]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f923 	bl	8004fa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d107      	bne.n	8004d78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e035      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f82b 	bl	8004df4 <I2C_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db2:	d103      	bne.n	8004dbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e013      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	4906      	ldr	r1, [pc, #24]	; (8004df0 <I2C_RequestMemoryRead+0x1cc>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f863 	bl	8004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e000      	b.n	8004de8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	00010002 	.word	0x00010002

08004df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e04:	e025      	b.n	8004e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d021      	beq.n	8004e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0e:	f7fe faeb 	bl	80033e8 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d302      	bcc.n	8004e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0220 	orr.w	r2, r3, #32
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e023      	b.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	0c1b      	lsrs	r3, r3, #16
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10d      	bne.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	43da      	mvns	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4013      	ands	r3, r2
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	e00c      	b.n	8004e92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4013      	ands	r3, r2
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	461a      	mov	r2, r3
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d0b6      	beq.n	8004e06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	60f8      	str	r0, [r7, #12]
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb0:	e051      	b.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec0:	d123      	bne.n	8004f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	f043 0204 	orr.w	r2, r3, #4
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e046      	b.n	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f10:	d021      	beq.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f12:	f7fe fa69 	bl	80033e8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d302      	bcc.n	8004f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e020      	b.n	8004f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d10c      	bne.n	8004f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	43da      	mvns	r2, r3
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf14      	ite	ne
 8004f72:	2301      	movne	r3, #1
 8004f74:	2300      	moveq	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	e00b      	b.n	8004f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf14      	ite	ne
 8004f8c:	2301      	movne	r3, #1
 8004f8e:	2300      	moveq	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d18d      	bne.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fac:	e02d      	b.n	800500a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f8ce 	bl	8005150 <I2C_IsAcknowledgeFailed>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e02d      	b.n	800501a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc4:	d021      	beq.n	800500a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc6:	f7fe fa0f 	bl	80033e8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d116      	bne.n	800500a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f043 0220 	orr.w	r2, r3, #32
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e007      	b.n	800501a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b80      	cmp	r3, #128	; 0x80
 8005016:	d1ca      	bne.n	8004fae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800502e:	e02d      	b.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f88d 	bl	8005150 <I2C_IsAcknowledgeFailed>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e02d      	b.n	800509c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d021      	beq.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fe f9ce 	bl	80033e8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d116      	bne.n	800508c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e007      	b.n	800509c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b04      	cmp	r3, #4
 8005098:	d1ca      	bne.n	8005030 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050b0:	e042      	b.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f003 0310 	and.w	r3, r3, #16
 80050bc:	2b10      	cmp	r3, #16
 80050be:	d119      	bne.n	80050f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0210 	mvn.w	r2, #16
 80050c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e029      	b.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f4:	f7fe f978 	bl	80033e8 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	d302      	bcc.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d116      	bne.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e007      	b.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d1b5      	bne.n	80050b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005166:	d11b      	bne.n	80051a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005170:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f043 0204 	orr.w	r2, r3, #4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e264      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d075      	beq.n	80052ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ce:	4ba3      	ldr	r3, [pc, #652]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 030c 	and.w	r3, r3, #12
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d00c      	beq.n	80051f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051da:	4ba0      	ldr	r3, [pc, #640]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d112      	bne.n	800520c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051e6:	4b9d      	ldr	r3, [pc, #628]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051f2:	d10b      	bne.n	800520c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f4:	4b99      	ldr	r3, [pc, #612]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05b      	beq.n	80052b8 <HAL_RCC_OscConfig+0x108>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d157      	bne.n	80052b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e23f      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d106      	bne.n	8005224 <HAL_RCC_OscConfig+0x74>
 8005216:	4b91      	ldr	r3, [pc, #580]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a90      	ldr	r2, [pc, #576]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800521c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e01d      	b.n	8005260 <HAL_RCC_OscConfig+0xb0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0x98>
 800522e:	4b8b      	ldr	r3, [pc, #556]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a8a      	ldr	r2, [pc, #552]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4b88      	ldr	r3, [pc, #544]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a87      	ldr	r2, [pc, #540]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e00b      	b.n	8005260 <HAL_RCC_OscConfig+0xb0>
 8005248:	4b84      	ldr	r3, [pc, #528]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a83      	ldr	r2, [pc, #524]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800524e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005252:	6013      	str	r3, [r2, #0]
 8005254:	4b81      	ldr	r3, [pc, #516]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a80      	ldr	r2, [pc, #512]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800525a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800525e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d013      	beq.n	8005290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fe f8be 	bl	80033e8 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005270:	f7fe f8ba 	bl	80033e8 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b64      	cmp	r3, #100	; 0x64
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e204      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	4b76      	ldr	r3, [pc, #472]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0f0      	beq.n	8005270 <HAL_RCC_OscConfig+0xc0>
 800528e:	e014      	b.n	80052ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe f8aa 	bl	80033e8 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005298:	f7fe f8a6 	bl	80033e8 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b64      	cmp	r3, #100	; 0x64
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e1f0      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052aa:	4b6c      	ldr	r3, [pc, #432]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0xe8>
 80052b6:	e000      	b.n	80052ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d063      	beq.n	800538e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052c6:	4b65      	ldr	r3, [pc, #404]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052d2:	4b62      	ldr	r3, [pc, #392]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d11c      	bne.n	8005318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052de:	4b5f      	ldr	r3, [pc, #380]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d116      	bne.n	8005318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	4b5c      	ldr	r3, [pc, #368]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <HAL_RCC_OscConfig+0x152>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d001      	beq.n	8005302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e1c4      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005302:	4b56      	ldr	r3, [pc, #344]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4952      	ldr	r1, [pc, #328]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005316:	e03a      	b.n	800538e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005320:	4b4f      	ldr	r3, [pc, #316]	; (8005460 <HAL_RCC_OscConfig+0x2b0>)
 8005322:	2201      	movs	r2, #1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fe f85f 	bl	80033e8 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800532e:	f7fe f85b 	bl	80033e8 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e1a5      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005340:	4b46      	ldr	r3, [pc, #280]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b43      	ldr	r3, [pc, #268]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4940      	ldr	r1, [pc, #256]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	4313      	orrs	r3, r2
 800535e:	600b      	str	r3, [r1, #0]
 8005360:	e015      	b.n	800538e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005362:	4b3f      	ldr	r3, [pc, #252]	; (8005460 <HAL_RCC_OscConfig+0x2b0>)
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005368:	f7fe f83e 	bl	80033e8 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800536e:	e008      	b.n	8005382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005370:	f7fe f83a 	bl	80033e8 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e184      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1f0      	bne.n	8005370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b00      	cmp	r3, #0
 8005398:	d030      	beq.n	80053fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d016      	beq.n	80053d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a2:	4b30      	ldr	r3, [pc, #192]	; (8005464 <HAL_RCC_OscConfig+0x2b4>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fe f81e 	bl	80033e8 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053b0:	f7fe f81a 	bl	80033e8 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e164      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0x200>
 80053ce:	e015      	b.n	80053fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053d0:	4b24      	ldr	r3, [pc, #144]	; (8005464 <HAL_RCC_OscConfig+0x2b4>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fe f807 	bl	80033e8 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053de:	f7fe f803 	bl	80033e8 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e14d      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80a0 	beq.w	800554a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10f      	bne.n	800543a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	4b0f      	ldr	r3, [pc, #60]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	4a0e      	ldr	r2, [pc, #56]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005436:	2301      	movs	r3, #1
 8005438:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800543a:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_OscConfig+0x2b8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	2b00      	cmp	r3, #0
 8005444:	d121      	bne.n	800548a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <HAL_RCC_OscConfig+0x2b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <HAL_RCC_OscConfig+0x2b8>)
 800544c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005452:	f7fd ffc9 	bl	80033e8 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005458:	e011      	b.n	800547e <HAL_RCC_OscConfig+0x2ce>
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	42470000 	.word	0x42470000
 8005464:	42470e80 	.word	0x42470e80
 8005468:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546c:	f7fd ffbc 	bl	80033e8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e106      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800547e:	4b85      	ldr	r3, [pc, #532]	; (8005694 <HAL_RCC_OscConfig+0x4e4>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x2f0>
 8005492:	4b81      	ldr	r3, [pc, #516]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4a80      	ldr	r2, [pc, #512]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
 800549e:	e01c      	b.n	80054da <HAL_RCC_OscConfig+0x32a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d10c      	bne.n	80054c2 <HAL_RCC_OscConfig+0x312>
 80054a8:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a7a      	ldr	r2, [pc, #488]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054ae:	f043 0304 	orr.w	r3, r3, #4
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	4b78      	ldr	r3, [pc, #480]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a77      	ldr	r2, [pc, #476]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	e00b      	b.n	80054da <HAL_RCC_OscConfig+0x32a>
 80054c2:	4b75      	ldr	r3, [pc, #468]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c6:	4a74      	ldr	r2, [pc, #464]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	6713      	str	r3, [r2, #112]	; 0x70
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	4a71      	ldr	r2, [pc, #452]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80054d4:	f023 0304 	bic.w	r3, r3, #4
 80054d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d015      	beq.n	800550e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e2:	f7fd ff81 	bl	80033e8 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e8:	e00a      	b.n	8005500 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ea:	f7fd ff7d 	bl	80033e8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e0c5      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005500:	4b65      	ldr	r3, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ee      	beq.n	80054ea <HAL_RCC_OscConfig+0x33a>
 800550c:	e014      	b.n	8005538 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800550e:	f7fd ff6b 	bl	80033e8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005514:	e00a      	b.n	800552c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005516:	f7fd ff67 	bl	80033e8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e0af      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800552c:	4b5a      	ldr	r3, [pc, #360]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ee      	bne.n	8005516 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005538:	7dfb      	ldrb	r3, [r7, #23]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d105      	bne.n	800554a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	4a55      	ldr	r2, [pc, #340]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005548:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 809b 	beq.w	800568a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005554:	4b50      	ldr	r3, [pc, #320]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b08      	cmp	r3, #8
 800555e:	d05c      	beq.n	800561a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d141      	bne.n	80055ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005568:	4b4c      	ldr	r3, [pc, #304]	; (800569c <HAL_RCC_OscConfig+0x4ec>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fd ff3b 	bl	80033e8 <HAL_GetTick>
 8005572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005576:	f7fd ff37 	bl	80033e8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e081      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005588:	4b43      	ldr	r3, [pc, #268]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f0      	bne.n	8005576 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	019b      	lsls	r3, r3, #6
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055aa:	085b      	lsrs	r3, r3, #1
 80055ac:	3b01      	subs	r3, #1
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	061b      	lsls	r3, r3, #24
 80055b8:	4937      	ldr	r1, [pc, #220]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055be:	4b37      	ldr	r3, [pc, #220]	; (800569c <HAL_RCC_OscConfig+0x4ec>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c4:	f7fd ff10 	bl	80033e8 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055cc:	f7fd ff0c 	bl	80033e8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e056      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055de:	4b2e      	ldr	r3, [pc, #184]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x41c>
 80055ea:	e04e      	b.n	800568a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ec:	4b2b      	ldr	r3, [pc, #172]	; (800569c <HAL_RCC_OscConfig+0x4ec>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f2:	f7fd fef9 	bl	80033e8 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fa:	f7fd fef5 	bl	80033e8 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e03f      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560c:	4b22      	ldr	r3, [pc, #136]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f0      	bne.n	80055fa <HAL_RCC_OscConfig+0x44a>
 8005618:	e037      	b.n	800568a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e032      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <HAL_RCC_OscConfig+0x4e8>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d028      	beq.n	8005686 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d121      	bne.n	8005686 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d11a      	bne.n	8005686 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800565c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	3b01      	subs	r3, #1
 8005670:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d107      	bne.n	8005686 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005680:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40007000 	.word	0x40007000
 8005698:	40023800 	.word	0x40023800
 800569c:	42470060 	.word	0x42470060

080056a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0cc      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b4:	4b68      	ldr	r3, [pc, #416]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d90c      	bls.n	80056dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c2:	4b65      	ldr	r3, [pc, #404]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ca:	4b63      	ldr	r3, [pc, #396]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d001      	beq.n	80056dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e0b8      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d020      	beq.n	800572a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f4:	4b59      	ldr	r3, [pc, #356]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	4a58      	ldr	r2, [pc, #352]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800570c:	4b53      	ldr	r3, [pc, #332]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	4a52      	ldr	r2, [pc, #328]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005718:	4b50      	ldr	r3, [pc, #320]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	494d      	ldr	r1, [pc, #308]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d044      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d107      	bne.n	800574e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800573e:	4b47      	ldr	r3, [pc, #284]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d119      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e07f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d003      	beq.n	800575e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575a:	2b03      	cmp	r3, #3
 800575c:	d107      	bne.n	800576e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800575e:	4b3f      	ldr	r3, [pc, #252]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d109      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e06f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576e:	4b3b      	ldr	r3, [pc, #236]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e067      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f023 0203 	bic.w	r2, r3, #3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	4934      	ldr	r1, [pc, #208]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800578c:	4313      	orrs	r3, r2
 800578e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005790:	f7fd fe2a 	bl	80033e8 <HAL_GetTick>
 8005794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	e00a      	b.n	80057ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005798:	f7fd fe26 	bl	80033e8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e04f      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	4b2b      	ldr	r3, [pc, #172]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 020c 	and.w	r2, r3, #12
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1eb      	bne.n	8005798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c0:	4b25      	ldr	r3, [pc, #148]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20c      	bcs.n	80057e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b22      	ldr	r3, [pc, #136]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCC_ClockConfig+0x1b8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d001      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e032      	b.n	800584e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f4:	4b19      	ldr	r3, [pc, #100]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4916      	ldr	r1, [pc, #88]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	490e      	ldr	r1, [pc, #56]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	4313      	orrs	r3, r2
 8005824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005826:	f000 f821 	bl	800586c <HAL_RCC_GetSysClockFreq>
 800582a:	4602      	mov	r2, r0
 800582c:	4b0b      	ldr	r3, [pc, #44]	; (800585c <HAL_RCC_ClockConfig+0x1bc>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	490a      	ldr	r1, [pc, #40]	; (8005860 <HAL_RCC_ClockConfig+0x1c0>)
 8005838:	5ccb      	ldrb	r3, [r1, r3]
 800583a:	fa22 f303 	lsr.w	r3, r2, r3
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_ClockConfig+0x1c8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fd fd8a 	bl	8003360 <HAL_InitTick>

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40023c00 	.word	0x40023c00
 800585c:	40023800 	.word	0x40023800
 8005860:	0800d6a0 	.word	0x0800d6a0
 8005864:	20000000 	.word	0x20000000
 8005868:	20000004 	.word	0x20000004

0800586c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800586c:	b5b0      	push	{r4, r5, r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005872:	2100      	movs	r1, #0
 8005874:	6079      	str	r1, [r7, #4]
 8005876:	2100      	movs	r1, #0
 8005878:	60f9      	str	r1, [r7, #12]
 800587a:	2100      	movs	r1, #0
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800587e:	2100      	movs	r1, #0
 8005880:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005882:	4952      	ldr	r1, [pc, #328]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 8005884:	6889      	ldr	r1, [r1, #8]
 8005886:	f001 010c 	and.w	r1, r1, #12
 800588a:	2908      	cmp	r1, #8
 800588c:	d00d      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x3e>
 800588e:	2908      	cmp	r1, #8
 8005890:	f200 8094 	bhi.w	80059bc <HAL_RCC_GetSysClockFreq+0x150>
 8005894:	2900      	cmp	r1, #0
 8005896:	d002      	beq.n	800589e <HAL_RCC_GetSysClockFreq+0x32>
 8005898:	2904      	cmp	r1, #4
 800589a:	d003      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x38>
 800589c:	e08e      	b.n	80059bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800589e:	4b4c      	ldr	r3, [pc, #304]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80058a0:	60bb      	str	r3, [r7, #8]
       break;
 80058a2:	e08e      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058a4:	4b4b      	ldr	r3, [pc, #300]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80058a6:	60bb      	str	r3, [r7, #8]
      break;
 80058a8:	e08b      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058aa:	4948      	ldr	r1, [pc, #288]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 80058ac:	6849      	ldr	r1, [r1, #4]
 80058ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80058b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058b4:	4945      	ldr	r1, [pc, #276]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 80058b6:	6849      	ldr	r1, [r1, #4]
 80058b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80058bc:	2900      	cmp	r1, #0
 80058be:	d024      	beq.n	800590a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058c0:	4942      	ldr	r1, [pc, #264]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	0989      	lsrs	r1, r1, #6
 80058c6:	4608      	mov	r0, r1
 80058c8:	f04f 0100 	mov.w	r1, #0
 80058cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80058d0:	f04f 0500 	mov.w	r5, #0
 80058d4:	ea00 0204 	and.w	r2, r0, r4
 80058d8:	ea01 0305 	and.w	r3, r1, r5
 80058dc:	493d      	ldr	r1, [pc, #244]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80058de:	fb01 f003 	mul.w	r0, r1, r3
 80058e2:	2100      	movs	r1, #0
 80058e4:	fb01 f102 	mul.w	r1, r1, r2
 80058e8:	1844      	adds	r4, r0, r1
 80058ea:	493a      	ldr	r1, [pc, #232]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80058ec:	fba2 0101 	umull	r0, r1, r2, r1
 80058f0:	1863      	adds	r3, r4, r1
 80058f2:	4619      	mov	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	f7fb f97c 	bl	8000bf8 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4613      	mov	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	e04a      	b.n	80059a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590a:	4b30      	ldr	r3, [pc, #192]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	099b      	lsrs	r3, r3, #6
 8005910:	461a      	mov	r2, r3
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	ea02 0400 	and.w	r4, r2, r0
 8005922:	ea03 0501 	and.w	r5, r3, r1
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	014b      	lsls	r3, r1, #5
 8005934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005938:	0142      	lsls	r2, r0, #5
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	1b00      	subs	r0, r0, r4
 8005940:	eb61 0105 	sbc.w	r1, r1, r5
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	018b      	lsls	r3, r1, #6
 800594e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005952:	0182      	lsls	r2, r0, #6
 8005954:	1a12      	subs	r2, r2, r0
 8005956:	eb63 0301 	sbc.w	r3, r3, r1
 800595a:	f04f 0000 	mov.w	r0, #0
 800595e:	f04f 0100 	mov.w	r1, #0
 8005962:	00d9      	lsls	r1, r3, #3
 8005964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005968:	00d0      	lsls	r0, r2, #3
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	1912      	adds	r2, r2, r4
 8005970:	eb45 0303 	adc.w	r3, r5, r3
 8005974:	f04f 0000 	mov.w	r0, #0
 8005978:	f04f 0100 	mov.w	r1, #0
 800597c:	0299      	lsls	r1, r3, #10
 800597e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005982:	0290      	lsls	r0, r2, #10
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	461a      	mov	r2, r3
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	f7fb f930 	bl	8000bf8 <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4613      	mov	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059a0:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <HAL_RCC_GetSysClockFreq+0x160>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	3301      	adds	r3, #1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b8:	60bb      	str	r3, [r7, #8]
      break;
 80059ba:	e002      	b.n	80059c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80059be:	60bb      	str	r3, [r7, #8]
      break;
 80059c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059c2:	68bb      	ldr	r3, [r7, #8]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bdb0      	pop	{r4, r5, r7, pc}
 80059cc:	40023800 	.word	0x40023800
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	017d7840 	.word	0x017d7840

080059d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_RCC_GetHCLKFreq+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000000 	.word	0x20000000

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff0 	bl	80059d8 <HAL_RCC_GetHCLKFreq>
 80059f8:	4602      	mov	r2, r0
 80059fa:	4b05      	ldr	r3, [pc, #20]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	0a9b      	lsrs	r3, r3, #10
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	4903      	ldr	r1, [pc, #12]	; (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a06:	5ccb      	ldrb	r3, [r1, r3]
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800d6b0 	.word	0x0800d6b0

08005a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d105      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d035      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a40:	4b67      	ldr	r3, [pc, #412]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a46:	f7fd fccf 	bl	80033e8 <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a4e:	f7fd fccb 	bl	80033e8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0ba      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a60:	4b60      	ldr	r3, [pc, #384]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	019a      	lsls	r2, r3, #6
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	071b      	lsls	r3, r3, #28
 8005a78:	495a      	ldr	r1, [pc, #360]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a80:	4b57      	ldr	r3, [pc, #348]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a86:	f7fd fcaf 	bl	80033e8 <HAL_GetTick>
 8005a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a8e:	f7fd fcab 	bl	80033e8 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e09a      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aa0:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8083 	beq.w	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	4b49      	ldr	r3, [pc, #292]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	4a48      	ldr	r2, [pc, #288]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aca:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ad6:	4b44      	ldr	r3, [pc, #272]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a43      	ldr	r2, [pc, #268]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fd fc81 	bl	80033e8 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ae8:	e008      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fd fc7d 	bl	80033e8 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e06c      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005afc:	4b3a      	ldr	r3, [pc, #232]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b08:	4b36      	ldr	r3, [pc, #216]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b10:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d02f      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d028      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b26:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b30:	4b2e      	ldr	r3, [pc, #184]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b36:	4b2d      	ldr	r3, [pc, #180]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b3c:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b42:	4b28      	ldr	r3, [pc, #160]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d114      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fd fc4b 	bl	80033e8 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b54:	e00a      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b56:	f7fd fc47 	bl	80033e8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e034      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b6c:	4b1d      	ldr	r3, [pc, #116]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0ee      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b84:	d10d      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b86:	4b17      	ldr	r3, [pc, #92]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b9a:	4912      	ldr	r1, [pc, #72]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	608b      	str	r3, [r1, #8]
 8005ba0:	e005      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005ba2:	4b10      	ldr	r3, [pc, #64]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	4a0f      	ldr	r2, [pc, #60]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005ba8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bac:	6093      	str	r3, [r2, #8]
 8005bae:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bba:	490a      	ldr	r1, [pc, #40]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7c1a      	ldrb	r2, [r3, #16]
 8005bd0:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005bd2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	42470068 	.word	0x42470068
 8005be4:	40023800 	.word	0x40023800
 8005be8:	40007000 	.word	0x40007000
 8005bec:	42470e40 	.word	0x42470e40
 8005bf0:	424711e0 	.word	0x424711e0

08005bf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e083      	b.n	8005d0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7f5b      	ldrb	r3, [r3, #29]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fc fd80 	bl	800271c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	22ca      	movs	r2, #202	; 0xca
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2253      	movs	r2, #83	; 0x53
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 faa8 	bl	8006188 <RTC_EnterInitMode>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	22ff      	movs	r2, #255	; 0xff
 8005c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2204      	movs	r2, #4
 8005c4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e05e      	b.n	8005d0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6899      	ldr	r1, [r3, #8]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68d2      	ldr	r2, [r2, #12]
 8005c8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6919      	ldr	r1, [r3, #16]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	041a      	lsls	r2, r3, #16
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10e      	bne.n	8005cdc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa3a 	bl	8006138 <HAL_RTC_WaitForSynchro>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d008      	beq.n	8005cdc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e018      	b.n	8005d0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d16:	b590      	push	{r4, r7, lr}
 8005d18:	b087      	sub	sp, #28
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	7f1b      	ldrb	r3, [r3, #28]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_RTC_SetTime+0x1c>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e0aa      	b.n	8005e88 <HAL_RTC_SetTime+0x172>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d126      	bne.n	8005d92 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fa3f 	bl	80061e0 <RTC_ByteToBcd2>
 8005d62:	4603      	mov	r3, r0
 8005d64:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa38 	bl	80061e0 <RTC_ByteToBcd2>
 8005d70:	4603      	mov	r3, r0
 8005d72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d74:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	789b      	ldrb	r3, [r3, #2]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fa30 	bl	80061e0 <RTC_ByteToBcd2>
 8005d80:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005d82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	78db      	ldrb	r3, [r3, #3]
 8005d8a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e018      	b.n	8005dc4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d102      	bne.n	8005da6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005db2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005db8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	22ca      	movs	r2, #202	; 0xca
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2253      	movs	r2, #83	; 0x53
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f9d7 	bl	8006188 <RTC_EnterInitMode>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2204      	movs	r2, #4
 8005dec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e047      	b.n	8005e88 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005e02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005e06:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689a      	ldr	r2, [r3, #8]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e16:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d111      	bne.n	8005e72 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f000 f972 	bl	8006138 <HAL_RTC_WaitForSynchro>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2204      	movs	r2, #4
 8005e66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e00a      	b.n	8005e88 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	22ff      	movs	r2, #255	; 0xff
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005e86:	2300      	movs	r3, #0
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd90      	pop	{r4, r7, pc}

08005e90 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005ec2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	0c1b      	lsrs	r3, r3, #16
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed2:	b2da      	uxtb	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d11a      	bne.n	8005f42 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 f983 	bl	800621c <RTC_Bcd2ToByte>
 8005f16:	4603      	mov	r3, r0
 8005f18:	461a      	mov	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f97a 	bl	800621c <RTC_Bcd2ToByte>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	789b      	ldrb	r3, [r3, #2]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f971 	bl	800621c <RTC_Bcd2ToByte>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	7f1b      	ldrb	r3, [r3, #28]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_RTC_SetDate+0x1c>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e094      	b.n	8006092 <HAL_RTC_SetDate+0x146>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2202      	movs	r2, #2
 8005f72:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10e      	bne.n	8005f98 <HAL_RTC_SetDate+0x4c>
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d008      	beq.n	8005f98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	f023 0310 	bic.w	r3, r3, #16
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	330a      	adds	r3, #10
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11c      	bne.n	8005fd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	78db      	ldrb	r3, [r3, #3]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f91c 	bl	80061e0 <RTC_ByteToBcd2>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	785b      	ldrb	r3, [r3, #1]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f915 	bl	80061e0 <RTC_ByteToBcd2>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	789b      	ldrb	r3, [r3, #2]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f90d 	bl	80061e0 <RTC_ByteToBcd2>
 8005fc6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fc8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e00e      	b.n	8005ff6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	78db      	ldrb	r3, [r3, #3]
 8005fdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fe4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005fea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	22ca      	movs	r2, #202	; 0xca
 8005ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2253      	movs	r2, #83	; 0x53
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f8be 	bl	8006188 <RTC_EnterInitMode>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2204      	movs	r2, #4
 800601e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e033      	b.n	8006092 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006034:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006038:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006048:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d111      	bne.n	800607c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f86d 	bl	8006138 <HAL_RTC_WaitForSynchro>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	22ff      	movs	r2, #255	; 0xff
 800606a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2204      	movs	r2, #4
 8006070:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e00a      	b.n	8006092 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006090:	2300      	movs	r3, #0
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd90      	pop	{r4, r7, pc}

0800609a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b086      	sub	sp, #24
 800609e:	af00      	add	r7, sp, #0
 80060a0:	60f8      	str	r0, [r7, #12]
 80060a2:	60b9      	str	r1, [r7, #8]
 80060a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	0a1b      	lsrs	r3, r3, #8
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	0b5b      	lsrs	r3, r3, #13
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11a      	bne.n	800612e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 f88d 	bl	800621c <RTC_Bcd2ToByte>
 8006102:	4603      	mov	r3, r0
 8006104:	461a      	mov	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f884 	bl	800621c <RTC_Bcd2ToByte>
 8006114:	4603      	mov	r3, r0
 8006116:	461a      	mov	r2, r3
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	789b      	ldrb	r3, [r3, #2]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f87b 	bl	800621c <RTC_Bcd2ToByte>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006152:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006154:	f7fd f948 	bl	80033e8 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800615a:	e009      	b.n	8006170 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800615c:	f7fd f944 	bl	80033e8 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616a:	d901      	bls.n	8006170 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e007      	b.n	8006180 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0320 	and.w	r3, r3, #32
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ee      	beq.n	800615c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d119      	bne.n	80061d6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061ac:	f7fd f91c 	bl	80033e8 <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061b2:	e009      	b.n	80061c8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061b4:	f7fd f918 	bl	80033e8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c2:	d901      	bls.n	80061c8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e007      	b.n	80061d8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ee      	beq.n	80061b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80061ee:	e005      	b.n	80061fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	3b0a      	subs	r3, #10
 80061fa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	2b09      	cmp	r3, #9
 8006200:	d8f6      	bhi.n	80061f0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	011b      	lsls	r3, r3, #4
 8006208:	b2da      	uxtb	r2, r3
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	4313      	orrs	r3, r2
 800620e:	b2db      	uxtb	r3, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	4603      	mov	r3, r0
 8006224:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	b2db      	uxtb	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	b2da      	uxtb	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	4413      	add	r3, r2
 800624a:	b2db      	uxtb	r3, r3
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e07b      	b.n	8006362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627a:	d009      	beq.n	8006290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	61da      	str	r2, [r3, #28]
 8006282:	e005      	b.n	8006290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc fd66 	bl	8002d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006300:	431a      	orrs	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800630a:	431a      	orrs	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	ea42 0103 	orr.w	r1, r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	f003 0104 	and.w	r1, r3, #4
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0210 	and.w	r2, r3, #16
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b088      	sub	sp, #32
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_SPI_Transmit+0x22>
 8006388:	2302      	movs	r3, #2
 800638a:	e126      	b.n	80065da <HAL_SPI_Transmit+0x270>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006394:	f7fd f828 	bl	80033e8 <HAL_GetTick>
 8006398:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063aa:	2302      	movs	r3, #2
 80063ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ae:	e10b      	b.n	80065c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_SPI_Transmit+0x52>
 80063b6:	88fb      	ldrh	r3, [r7, #6]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d102      	bne.n	80063c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063c0:	e102      	b.n	80065c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2203      	movs	r2, #3
 80063c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	88fa      	ldrh	r2, [r7, #6]
 80063da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	88fa      	ldrh	r2, [r7, #6]
 80063e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006408:	d10f      	bne.n	800642a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d007      	beq.n	8006448 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d14b      	bne.n	80064ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <HAL_SPI_Transmit+0xf6>
 800645a:	8afb      	ldrh	r3, [r7, #22]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d13e      	bne.n	80064de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	881a      	ldrh	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	1c9a      	adds	r2, r3, #2
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800647a:	b29b      	uxth	r3, r3
 800647c:	3b01      	subs	r3, #1
 800647e:	b29a      	uxth	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006484:	e02b      	b.n	80064de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d112      	bne.n	80064ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	881a      	ldrh	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a4:	1c9a      	adds	r2, r3, #2
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80064b8:	e011      	b.n	80064de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ba:	f7fc ff95 	bl	80033e8 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d803      	bhi.n	80064d2 <HAL_SPI_Transmit+0x168>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d102      	bne.n	80064d8 <HAL_SPI_Transmit+0x16e>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d102      	bne.n	80064de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064dc:	e074      	b.n	80065c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1ce      	bne.n	8006486 <HAL_SPI_Transmit+0x11c>
 80064e8:	e04c      	b.n	8006584 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Transmit+0x18e>
 80064f2:	8afb      	ldrh	r3, [r7, #22]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d140      	bne.n	800657a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	7812      	ldrb	r2, [r2, #0]
 8006504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800651e:	e02c      	b.n	800657a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d113      	bne.n	8006556 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	86da      	strh	r2, [r3, #54]	; 0x36
 8006554:	e011      	b.n	800657a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006556:	f7fc ff47 	bl	80033e8 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d803      	bhi.n	800656e <HAL_SPI_Transmit+0x204>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d102      	bne.n	8006574 <HAL_SPI_Transmit+0x20a>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006578:	e026      	b.n	80065c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1cd      	bne.n	8006520 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 fa63 	bl	8006a54 <SPI_EndRxTxTransaction>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e000      	b.n	80065c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80065c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08c      	sub	sp, #48	; 0x30
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065f0:	2301      	movs	r3, #1
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x26>
 8006604:	2302      	movs	r3, #2
 8006606:	e18a      	b.n	800691e <HAL_SPI_TransmitReceive+0x33c>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006610:	f7fc feea 	bl	80033e8 <HAL_GetTick>
 8006614:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006626:	887b      	ldrh	r3, [r7, #2]
 8006628:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800662a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800662e:	2b01      	cmp	r3, #1
 8006630:	d00f      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x70>
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006638:	d107      	bne.n	800664a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <HAL_SPI_TransmitReceive+0x68>
 8006642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006646:	2b04      	cmp	r3, #4
 8006648:	d003      	beq.n	8006652 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800664a:	2302      	movs	r3, #2
 800664c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006650:	e15b      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x82>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SPI_TransmitReceive+0x82>
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800666a:	e14e      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b04      	cmp	r3, #4
 8006676:	d003      	beq.n	8006680 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2205      	movs	r2, #5
 800667c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	887a      	ldrh	r2, [r7, #2]
 8006696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	887a      	ldrh	r2, [r7, #2]
 80066a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b40      	cmp	r3, #64	; 0x40
 80066c2:	d007      	beq.n	80066d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066dc:	d178      	bne.n	80067d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x10a>
 80066e6:	8b7b      	ldrh	r3, [r7, #26]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d166      	bne.n	80067ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006710:	e053      	b.n	80067ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b02      	cmp	r3, #2
 800671e:	d11b      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x176>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d016      	beq.n	8006758 <HAL_SPI_TransmitReceive+0x176>
 800672a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d113      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	881a      	ldrh	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006740:	1c9a      	adds	r2, r3, #2
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800674a:	b29b      	uxth	r3, r3
 800674c:	3b01      	subs	r3, #1
 800674e:	b29a      	uxth	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b01      	cmp	r3, #1
 8006764:	d119      	bne.n	800679a <HAL_SPI_TransmitReceive+0x1b8>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d014      	beq.n	800679a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677a:	b292      	uxth	r2, r2
 800677c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006796:	2301      	movs	r3, #1
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800679a:	f7fc fe25 	bl	80033e8 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d807      	bhi.n	80067ba <HAL_SPI_TransmitReceive+0x1d8>
 80067aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d003      	beq.n	80067ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80067b8:	e0a7      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1a6      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x130>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1a1      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x130>
 80067ce:	e07c      	b.n	80068ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_SPI_TransmitReceive+0x1fc>
 80067d8:	8b7b      	ldrh	r3, [r7, #26]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d16b      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	7812      	ldrb	r2, [r2, #0]
 80067ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006804:	e057      	b.n	80068b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b02      	cmp	r3, #2
 8006812:	d11c      	bne.n	800684e <HAL_SPI_TransmitReceive+0x26c>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006818:	b29b      	uxth	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d017      	beq.n	800684e <HAL_SPI_TransmitReceive+0x26c>
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d114      	bne.n	800684e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	330c      	adds	r3, #12
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	1c5a      	adds	r2, r3, #1
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006840:	b29b      	uxth	r3, r3
 8006842:	3b01      	subs	r3, #1
 8006844:	b29a      	uxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d119      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x2ae>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d014      	beq.n	8006890 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800688c:	2301      	movs	r3, #1
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006890:	f7fc fdaa 	bl	80033e8 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800689c:	429a      	cmp	r2, r3
 800689e:	d803      	bhi.n	80068a8 <HAL_SPI_TransmitReceive+0x2c6>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a6:	d102      	bne.n	80068ae <HAL_SPI_TransmitReceive+0x2cc>
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80068b4:	e029      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1a2      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x224>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d19d      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f8c0 	bl	8006a54 <SPI_EndRxTxTransaction>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068e6:	e010      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10b      	bne.n	8006908 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	e000      	b.n	800690a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006908:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800691a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800691e:	4618      	mov	r0, r3
 8006920:	3730      	adds	r7, #48	; 0x30
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006934:	b2db      	uxtb	r3, r3
}
 8006936:	4618      	mov	r0, r3
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006954:	f7fc fd48 	bl	80033e8 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	1a9b      	subs	r3, r3, r2
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4413      	add	r3, r2
 8006962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006964:	f7fc fd40 	bl	80033e8 <HAL_GetTick>
 8006968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800696a:	4b39      	ldr	r3, [pc, #228]	; (8006a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	015b      	lsls	r3, r3, #5
 8006970:	0d1b      	lsrs	r3, r3, #20
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	fb02 f303 	mul.w	r3, r2, r3
 8006978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800697a:	e054      	b.n	8006a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d050      	beq.n	8006a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006984:	f7fc fd30 	bl	80033e8 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	429a      	cmp	r2, r3
 8006992:	d902      	bls.n	800699a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d13d      	bne.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069b2:	d111      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069bc:	d004      	beq.n	80069c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d107      	bne.n	80069d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069e0:	d10f      	bne.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e017      	b.n	8006a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	bf0c      	ite	eq
 8006a36:	2301      	moveq	r3, #1
 8006a38:	2300      	movne	r3, #0
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d19b      	bne.n	800697c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3720      	adds	r7, #32
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000000 	.word	0x20000000

08006a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a60:	4b1b      	ldr	r3, [pc, #108]	; (8006ad0 <SPI_EndRxTxTransaction+0x7c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1b      	ldr	r2, [pc, #108]	; (8006ad4 <SPI_EndRxTxTransaction+0x80>)
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6a:	0d5b      	lsrs	r3, r3, #21
 8006a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a70:	fb02 f303 	mul.w	r3, r2, r3
 8006a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a7e:	d112      	bne.n	8006aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2180      	movs	r1, #128	; 0x80
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f7ff ff5a 	bl	8006944 <SPI_WaitFlagStateUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e00f      	b.n	8006ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b80      	cmp	r3, #128	; 0x80
 8006abe:	d0f2      	beq.n	8006aa6 <SPI_EndRxTxTransaction+0x52>
 8006ac0:	e000      	b.n	8006ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ac2:	bf00      	nop
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000000 	.word	0x20000000
 8006ad4:	165e9f81 	.word	0x165e9f81

08006ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e041      	b.n	8006b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fc fb9c 	bl	800323c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4619      	mov	r1, r3
 8006b16:	4610      	mov	r0, r2
 8006b18:	f000 fa88 	bl	800702c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3708      	adds	r7, #8
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d001      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e044      	b.n	8006c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a1e      	ldr	r2, [pc, #120]	; (8006c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bba:	d013      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_Base_Start_IT+0x6c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a16      	ldr	r2, [pc, #88]	; (8006c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d111      	bne.n	8006c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b06      	cmp	r3, #6
 8006bf4:	d010      	beq.n	8006c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0201 	orr.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c06:	e007      	b.n	8006c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40014000 	.word	0x40014000

08006c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0202 	mvn.w	r2, #2
 8006c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f9b5 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9a7 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f9b8 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0204 	mvn.w	r2, #4
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f98b 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f97d 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f98e 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d122      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d11b      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0208 	mvn.w	r2, #8
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2204      	movs	r2, #4
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f961 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006d2c:	e005      	b.n	8006d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f953 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f964 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d122      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d11b      	bne.n	8006d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0210 	mvn.w	r2, #16
 8006d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2208      	movs	r2, #8
 8006d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f937 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006d80:	e005      	b.n	8006d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f929 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f93a 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d10e      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d107      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0201 	mvn.w	r2, #1
 8006db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fb fada 	bl	8002374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d10e      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd8:	2b80      	cmp	r3, #128	; 0x80
 8006dda:	d107      	bne.n	8006dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fab2 	bl	8007350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df6:	2b40      	cmp	r3, #64	; 0x40
 8006df8:	d10e      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d107      	bne.n	8006e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8ff 	bl	8007016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d10e      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d107      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f06f 0220 	mvn.w	r2, #32
 8006e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fa7c 	bl	800733c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_ConfigClockSource+0x1c>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e0b4      	b.n	8006fd2 <HAL_TIM_ConfigClockSource+0x186>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea0:	d03e      	beq.n	8006f20 <HAL_TIM_ConfigClockSource+0xd4>
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	f200 8087 	bhi.w	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	f000 8086 	beq.w	8006fbe <HAL_TIM_ConfigClockSource+0x172>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	d87f      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb8:	2b70      	cmp	r3, #112	; 0x70
 8006eba:	d01a      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8006ebc:	2b70      	cmp	r3, #112	; 0x70
 8006ebe:	d87b      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec0:	2b60      	cmp	r3, #96	; 0x60
 8006ec2:	d050      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0x11a>
 8006ec4:	2b60      	cmp	r3, #96	; 0x60
 8006ec6:	d877      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec8:	2b50      	cmp	r3, #80	; 0x50
 8006eca:	d03c      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0xfa>
 8006ecc:	2b50      	cmp	r3, #80	; 0x50
 8006ece:	d873      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed0:	2b40      	cmp	r3, #64	; 0x40
 8006ed2:	d058      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x13a>
 8006ed4:	2b40      	cmp	r3, #64	; 0x40
 8006ed6:	d86f      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b30      	cmp	r3, #48	; 0x30
 8006eda:	d064      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006edc:	2b30      	cmp	r3, #48	; 0x30
 8006ede:	d86b      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d060      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ee4:	2b20      	cmp	r3, #32
 8006ee6:	d867      	bhi.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d05c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d05a      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	e062      	b.n	8006fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6899      	ldr	r1, [r3, #8]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f000 f98d 	bl	8007220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	609a      	str	r2, [r3, #8]
      break;
 8006f1e:	e04f      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6899      	ldr	r1, [r3, #8]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f000 f976 	bl	8007220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f42:	609a      	str	r2, [r3, #8]
      break;
 8006f44:	e03c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f000 f8ea 	bl	800712c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2150      	movs	r1, #80	; 0x50
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f943 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006f64:	e02c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	461a      	mov	r2, r3
 8006f74:	f000 f909 	bl	800718a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2160      	movs	r1, #96	; 0x60
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 f933 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006f84:	e01c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 f8ca 	bl	800712c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2140      	movs	r1, #64	; 0x40
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f923 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e00c      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4619      	mov	r1, r3
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	f000 f91a 	bl	80071ea <TIM_ITRx_SetConfig>
      break;
 8006fb6:	e003      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	73fb      	strb	r3, [r7, #15]
      break;
 8006fbc:	e000      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a34      	ldr	r2, [pc, #208]	; (8007110 <TIM_Base_SetConfig+0xe4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00f      	beq.n	8007064 <TIM_Base_SetConfig+0x38>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d00b      	beq.n	8007064 <TIM_Base_SetConfig+0x38>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a31      	ldr	r2, [pc, #196]	; (8007114 <TIM_Base_SetConfig+0xe8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d007      	beq.n	8007064 <TIM_Base_SetConfig+0x38>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a30      	ldr	r2, [pc, #192]	; (8007118 <TIM_Base_SetConfig+0xec>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d003      	beq.n	8007064 <TIM_Base_SetConfig+0x38>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a2f      	ldr	r2, [pc, #188]	; (800711c <TIM_Base_SetConfig+0xf0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d108      	bne.n	8007076 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a25      	ldr	r2, [pc, #148]	; (8007110 <TIM_Base_SetConfig+0xe4>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01b      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007084:	d017      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a22      	ldr	r2, [pc, #136]	; (8007114 <TIM_Base_SetConfig+0xe8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <TIM_Base_SetConfig+0xec>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <TIM_Base_SetConfig+0xf0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <TIM_Base_SetConfig+0xf4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1e      	ldr	r2, [pc, #120]	; (8007124 <TIM_Base_SetConfig+0xf8>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0x8a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <TIM_Base_SetConfig+0xfc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a08      	ldr	r2, [pc, #32]	; (8007110 <TIM_Base_SetConfig+0xe4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d103      	bne.n	80070fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	615a      	str	r2, [r3, #20]
}
 8007102:	bf00      	nop
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40010000 	.word	0x40010000
 8007114:	40000400 	.word	0x40000400
 8007118:	40000800 	.word	0x40000800
 800711c:	40000c00 	.word	0x40000c00
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800

0800712c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800712c:	b480      	push	{r7}
 800712e:	b087      	sub	sp, #28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4313      	orrs	r3, r2
 8007160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f023 030a 	bic.w	r3, r3, #10
 8007168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	371c      	adds	r7, #28
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718a:	b480      	push	{r7}
 800718c:	b087      	sub	sp, #28
 800718e:	af00      	add	r7, sp, #0
 8007190:	60f8      	str	r0, [r7, #12]
 8007192:	60b9      	str	r1, [r7, #8]
 8007194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	f023 0210 	bic.w	r2, r3, #16
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	031b      	lsls	r3, r3, #12
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	f043 0307 	orr.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800723a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	431a      	orrs	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	609a      	str	r2, [r3, #8]
}
 8007254:	bf00      	nop
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e050      	b.n	800731a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d018      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c4:	d013      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00e      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a16      	ldr	r2, [pc, #88]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d009      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a15      	ldr	r2, [pc, #84]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d004      	beq.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a13      	ldr	r2, [pc, #76]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d10c      	bne.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40014000 	.word	0x40014000

0800733c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007368:	4904      	ldr	r1, [pc, #16]	; (800737c <MX_FATFS_Init+0x18>)
 800736a:	4805      	ldr	r0, [pc, #20]	; (8007380 <MX_FATFS_Init+0x1c>)
 800736c:	f002 fef4 	bl	800a158 <FATFS_LinkDriver>
 8007370:	4603      	mov	r3, r0
 8007372:	461a      	mov	r2, r3
 8007374:	4b03      	ldr	r3, [pc, #12]	; (8007384 <MX_FATFS_Init+0x20>)
 8007376:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000d60 	.word	0x20000d60
 8007380:	2000000c 	.word	0x2000000c
 8007384:	20000d64 	.word	0x20000d64

08007388 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800738c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800738e:	4618      	mov	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); // own init function
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f9d7 	bl	8007758 <USER_SPI_initialize>
 80073aa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	4603      	mov	r3, r0
 80073bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); // own status function
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 fab5 	bl	8007930 <USER_SPI_status>
 80073c6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
 80073da:	603b      	str	r3, [r7, #0]
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); // own read function
 80073e0:	7bf8      	ldrb	r0, [r7, #15]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	f000 fab8 	bl	800795c <USER_SPI_read>
 80073ec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); // own write function
 8007406:	7bf8      	ldrb	r0, [r7, #15]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68b9      	ldr	r1, [r7, #8]
 800740e:	f000 fb0b 	bl	8007a28 <USER_SPI_write>
 8007412:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	603a      	str	r2, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
 8007428:	460b      	mov	r3, r1
 800742a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800742c:	79b9      	ldrb	r1, [r7, #6]
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fb74 	bl	8007b20 <USER_SPI_ioctl>
 8007438:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800744c:	f7fb ffcc 	bl	80033e8 <HAL_GetTick>
 8007450:	4603      	mov	r3, r0
 8007452:	4a04      	ldr	r2, [pc, #16]	; (8007464 <SPI_Timer_On+0x20>)
 8007454:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007456:	4a04      	ldr	r2, [pc, #16]	; (8007468 <SPI_Timer_On+0x24>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6013      	str	r3, [r2, #0]
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200011c8 	.word	0x200011c8
 8007468:	200011cc 	.word	0x200011cc

0800746c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007470:	f7fb ffba 	bl	80033e8 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <SPI_Timer_Status+0x24>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	1ad2      	subs	r2, r2, r3
 800747c:	4b05      	ldr	r3, [pc, #20]	; (8007494 <SPI_Timer_Status+0x28>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	bf34      	ite	cc
 8007484:	2301      	movcc	r3, #1
 8007486:	2300      	movcs	r3, #0
 8007488:	b2db      	uxtb	r3, r3
}
 800748a:	4618      	mov	r0, r3
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	200011c8 	.word	0x200011c8
 8007494:	200011cc 	.word	0x200011cc

08007498 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af02      	add	r7, sp, #8
 800749e:	4603      	mov	r3, r0
 80074a0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80074a2:	f107 020f 	add.w	r2, r7, #15
 80074a6:	1df9      	adds	r1, r7, #7
 80074a8:	2332      	movs	r3, #50	; 0x32
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	2301      	movs	r3, #1
 80074ae:	4804      	ldr	r0, [pc, #16]	; (80074c0 <xchg_spi+0x28>)
 80074b0:	f7ff f897 	bl	80065e2 <HAL_SPI_TransmitReceive>
    return rxDat;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000c74 	.word	0x20000c74

080074c4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e00a      	b.n	80074ea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	18d4      	adds	r4, r2, r3
 80074da:	20ff      	movs	r0, #255	; 0xff
 80074dc:	f7ff ffdc 	bl	8007498 <xchg_spi>
 80074e0:	4603      	mov	r3, r0
 80074e2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d3f0      	bcc.n	80074d4 <rcvr_spi_multi+0x10>
	}
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd90      	pop	{r4, r7, pc}

080074fc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	b29a      	uxth	r2, r3
 800750a:	f04f 33ff 	mov.w	r3, #4294967295
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4803      	ldr	r0, [pc, #12]	; (8007520 <xmit_spi_multi+0x24>)
 8007512:	f7fe ff2a 	bl	800636a <HAL_SPI_Transmit>
}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000c74 	.word	0x20000c74

08007524 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800752c:	f7fb ff5c 	bl	80033e8 <HAL_GetTick>
 8007530:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007536:	20ff      	movs	r0, #255	; 0xff
 8007538:	f7ff ffae 	bl	8007498 <xchg_spi>
 800753c:	4603      	mov	r3, r0
 800753e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2bff      	cmp	r3, #255	; 0xff
 8007544:	d007      	beq.n	8007556 <wait_ready+0x32>
 8007546:	f7fb ff4f 	bl	80033e8 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	429a      	cmp	r2, r3
 8007554:	d8ef      	bhi.n	8007536 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2bff      	cmp	r3, #255	; 0xff
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007570:	2201      	movs	r2, #1
 8007572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007576:	4804      	ldr	r0, [pc, #16]	; (8007588 <despiselect+0x1c>)
 8007578:	f7fc fe28 	bl	80041cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800757c:	20ff      	movs	r0, #255	; 0xff
 800757e:	f7ff ff8b 	bl	8007498 <xchg_spi>

}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40020400 	.word	0x40020400

0800758c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007590:	2200      	movs	r2, #0
 8007592:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007596:	480a      	ldr	r0, [pc, #40]	; (80075c0 <spiselect+0x34>)
 8007598:	f7fc fe18 	bl	80041cc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800759c:	20ff      	movs	r0, #255	; 0xff
 800759e:	f7ff ff7b 	bl	8007498 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80075a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075a6:	f7ff ffbd 	bl	8007524 <wait_ready>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <spiselect+0x28>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e002      	b.n	80075ba <spiselect+0x2e>

	despiselect();
 80075b4:	f7ff ffda 	bl	800756c <despiselect>
	return 0;	/* Timeout */
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40020400 	.word	0x40020400

080075c4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80075ce:	20c8      	movs	r0, #200	; 0xc8
 80075d0:	f7ff ff38 	bl	8007444 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80075d4:	20ff      	movs	r0, #255	; 0xff
 80075d6:	f7ff ff5f 	bl	8007498 <xchg_spi>
 80075da:	4603      	mov	r3, r0
 80075dc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2bff      	cmp	r3, #255	; 0xff
 80075e2:	d104      	bne.n	80075ee <rcvr_datablock+0x2a>
 80075e4:	f7ff ff42 	bl	800746c <SPI_Timer_Status>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f2      	bne.n	80075d4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	2bfe      	cmp	r3, #254	; 0xfe
 80075f2:	d001      	beq.n	80075f8 <rcvr_datablock+0x34>
 80075f4:	2300      	movs	r3, #0
 80075f6:	e00a      	b.n	800760e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7ff ff62 	bl	80074c4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007600:	20ff      	movs	r0, #255	; 0xff
 8007602:	f7ff ff49 	bl	8007498 <xchg_spi>
 8007606:	20ff      	movs	r0, #255	; 0xff
 8007608:	f7ff ff46 	bl	8007498 <xchg_spi>

	return 1;						/* Function succeeded */
 800760c:	2301      	movs	r3, #1
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	460b      	mov	r3, r1
 8007620:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007626:	f7ff ff7d 	bl	8007524 <wait_ready>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <xmit_datablock+0x1e>
 8007630:	2300      	movs	r3, #0
 8007632:	e01e      	b.n	8007672 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	4618      	mov	r0, r3
 8007638:	f7ff ff2e 	bl	8007498 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2bfd      	cmp	r3, #253	; 0xfd
 8007640:	d016      	beq.n	8007670 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007642:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f7ff ff58 	bl	80074fc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800764c:	20ff      	movs	r0, #255	; 0xff
 800764e:	f7ff ff23 	bl	8007498 <xchg_spi>
 8007652:	20ff      	movs	r0, #255	; 0xff
 8007654:	f7ff ff20 	bl	8007498 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007658:	20ff      	movs	r0, #255	; 0xff
 800765a:	f7ff ff1d 	bl	8007498 <xchg_spi>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2b05      	cmp	r3, #5
 800766a:	d001      	beq.n	8007670 <xmit_datablock+0x5a>
 800766c:	2300      	movs	r3, #0
 800766e:	e000      	b.n	8007672 <xmit_datablock+0x5c>
	}
	return 1;
 8007670:	2301      	movs	r3, #1
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	4603      	mov	r3, r0
 8007682:	6039      	str	r1, [r7, #0]
 8007684:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768a:	2b00      	cmp	r3, #0
 800768c:	da0e      	bge.n	80076ac <send_cmd+0x32>
		cmd &= 0x7F;
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007694:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007696:	2100      	movs	r1, #0
 8007698:	2037      	movs	r0, #55	; 0x37
 800769a:	f7ff ffee 	bl	800767a <send_cmd>
 800769e:	4603      	mov	r3, r0
 80076a0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d901      	bls.n	80076ac <send_cmd+0x32>
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	e051      	b.n	8007750 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b0c      	cmp	r3, #12
 80076b0:	d008      	beq.n	80076c4 <send_cmd+0x4a>
		despiselect();
 80076b2:	f7ff ff5b 	bl	800756c <despiselect>
		if (!spiselect()) return 0xFF;
 80076b6:	f7ff ff69 	bl	800758c <spiselect>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <send_cmd+0x4a>
 80076c0:	23ff      	movs	r3, #255	; 0xff
 80076c2:	e045      	b.n	8007750 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fee3 	bl	8007498 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	0e1b      	lsrs	r3, r3, #24
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fedd 	bl	8007498 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fed7 	bl	8007498 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	0a1b      	lsrs	r3, r3, #8
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7ff fed1 	bl	8007498 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fecc 	bl	8007498 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007700:	2301      	movs	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <send_cmd+0x94>
 800770a:	2395      	movs	r3, #149	; 0x95
 800770c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b08      	cmp	r3, #8
 8007712:	d101      	bne.n	8007718 <send_cmd+0x9e>
 8007714:	2387      	movs	r3, #135	; 0x87
 8007716:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007718:	7bfb      	ldrb	r3, [r7, #15]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff febc 	bl	8007498 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	2b0c      	cmp	r3, #12
 8007724:	d102      	bne.n	800772c <send_cmd+0xb2>
 8007726:	20ff      	movs	r0, #255	; 0xff
 8007728:	f7ff feb6 	bl	8007498 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800772c:	230a      	movs	r3, #10
 800772e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007730:	20ff      	movs	r0, #255	; 0xff
 8007732:	f7ff feb1 	bl	8007498 <xchg_spi>
 8007736:	4603      	mov	r3, r0
 8007738:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800773a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800773e:	2b00      	cmp	r3, #0
 8007740:	da05      	bge.n	800774e <send_cmd+0xd4>
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	3b01      	subs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <send_cmd+0xb6>

	return res;							/* Return received response */
 800774e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007758:	b590      	push	{r4, r7, lr}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <USER_SPI_initialize+0x14>
 8007768:	2301      	movs	r3, #1
 800776a:	e0d6      	b.n	800791a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800776c:	4b6d      	ldr	r3, [pc, #436]	; (8007924 <USER_SPI_initialize+0x1cc>)
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <USER_SPI_initialize+0x2a>
 800777a:	4b6a      	ldr	r3, [pc, #424]	; (8007924 <USER_SPI_initialize+0x1cc>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b2db      	uxtb	r3, r3
 8007780:	e0cb      	b.n	800791a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007782:	4b69      	ldr	r3, [pc, #420]	; (8007928 <USER_SPI_initialize+0x1d0>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800778c:	4b66      	ldr	r3, [pc, #408]	; (8007928 <USER_SPI_initialize+0x1d0>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8007794:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007796:	230a      	movs	r3, #10
 8007798:	73fb      	strb	r3, [r7, #15]
 800779a:	e005      	b.n	80077a8 <USER_SPI_initialize+0x50>
 800779c:	20ff      	movs	r0, #255	; 0xff
 800779e:	f7ff fe7b 	bl	8007498 <xchg_spi>
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	73fb      	strb	r3, [r7, #15]
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1f6      	bne.n	800779c <USER_SPI_initialize+0x44>

	ty = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80077b2:	2100      	movs	r1, #0
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7ff ff60 	bl	800767a <send_cmd>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b01      	cmp	r3, #1
 80077be:	f040 808b 	bne.w	80078d8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80077c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077c6:	f7ff fe3d 	bl	8007444 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80077ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077ce:	2008      	movs	r0, #8
 80077d0:	f7ff ff53 	bl	800767a <send_cmd>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d151      	bne.n	800787e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]
 80077de:	e00d      	b.n	80077fc <USER_SPI_initialize+0xa4>
 80077e0:	7bfc      	ldrb	r4, [r7, #15]
 80077e2:	20ff      	movs	r0, #255	; 0xff
 80077e4:	f7ff fe58 	bl	8007498 <xchg_spi>
 80077e8:	4603      	mov	r3, r0
 80077ea:	461a      	mov	r2, r3
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4423      	add	r3, r4
 80077f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	3301      	adds	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b03      	cmp	r3, #3
 8007800:	d9ee      	bls.n	80077e0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007802:	7abb      	ldrb	r3, [r7, #10]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d167      	bne.n	80078d8 <USER_SPI_initialize+0x180>
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	2baa      	cmp	r3, #170	; 0xaa
 800780c:	d164      	bne.n	80078d8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800780e:	bf00      	nop
 8007810:	f7ff fe2c 	bl	800746c <SPI_Timer_Status>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <USER_SPI_initialize+0xd2>
 800781a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800781e:	20a9      	movs	r0, #169	; 0xa9
 8007820:	f7ff ff2b 	bl	800767a <send_cmd>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f2      	bne.n	8007810 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800782a:	f7ff fe1f 	bl	800746c <SPI_Timer_Status>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d051      	beq.n	80078d8 <USER_SPI_initialize+0x180>
 8007834:	2100      	movs	r1, #0
 8007836:	203a      	movs	r0, #58	; 0x3a
 8007838:	f7ff ff1f 	bl	800767a <send_cmd>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d14a      	bne.n	80078d8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
 8007846:	e00d      	b.n	8007864 <USER_SPI_initialize+0x10c>
 8007848:	7bfc      	ldrb	r4, [r7, #15]
 800784a:	20ff      	movs	r0, #255	; 0xff
 800784c:	f7ff fe24 	bl	8007498 <xchg_spi>
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	4423      	add	r3, r4
 800785a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	3301      	adds	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d9ee      	bls.n	8007848 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800786a:	7a3b      	ldrb	r3, [r7, #8]
 800786c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <USER_SPI_initialize+0x120>
 8007874:	230c      	movs	r3, #12
 8007876:	e000      	b.n	800787a <USER_SPI_initialize+0x122>
 8007878:	2304      	movs	r3, #4
 800787a:	737b      	strb	r3, [r7, #13]
 800787c:	e02c      	b.n	80078d8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800787e:	2100      	movs	r1, #0
 8007880:	20a9      	movs	r0, #169	; 0xa9
 8007882:	f7ff fefa 	bl	800767a <send_cmd>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d804      	bhi.n	8007896 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800788c:	2302      	movs	r3, #2
 800788e:	737b      	strb	r3, [r7, #13]
 8007890:	23a9      	movs	r3, #169	; 0xa9
 8007892:	73bb      	strb	r3, [r7, #14]
 8007894:	e003      	b.n	800789e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007896:	2301      	movs	r3, #1
 8007898:	737b      	strb	r3, [r7, #13]
 800789a:	2301      	movs	r3, #1
 800789c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800789e:	bf00      	nop
 80078a0:	f7ff fde4 	bl	800746c <SPI_Timer_Status>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <USER_SPI_initialize+0x162>
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	2100      	movs	r1, #0
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fee3 	bl	800767a <send_cmd>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f2      	bne.n	80078a0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80078ba:	f7ff fdd7 	bl	800746c <SPI_Timer_Status>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <USER_SPI_initialize+0x17c>
 80078c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078c8:	2010      	movs	r0, #16
 80078ca:	f7ff fed6 	bl	800767a <send_cmd>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <USER_SPI_initialize+0x180>
				ty = 0;
 80078d4:	2300      	movs	r3, #0
 80078d6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80078d8:	4a14      	ldr	r2, [pc, #80]	; (800792c <USER_SPI_initialize+0x1d4>)
 80078da:	7b7b      	ldrb	r3, [r7, #13]
 80078dc:	7013      	strb	r3, [r2, #0]
	despiselect();
 80078de:	f7ff fe45 	bl	800756c <despiselect>

	if (ty) {			/* OK */
 80078e2:	7b7b      	ldrb	r3, [r7, #13]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d012      	beq.n	800790e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80078e8:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <USER_SPI_initialize+0x1d0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80078f2:	4b0d      	ldr	r3, [pc, #52]	; (8007928 <USER_SPI_initialize+0x1d0>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0210 	orr.w	r2, r2, #16
 80078fa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80078fc:	4b09      	ldr	r3, [pc, #36]	; (8007924 <USER_SPI_initialize+0x1cc>)
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	b2db      	uxtb	r3, r3
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <USER_SPI_initialize+0x1cc>)
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e002      	b.n	8007914 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800790e:	4b05      	ldr	r3, [pc, #20]	; (8007924 <USER_SPI_initialize+0x1cc>)
 8007910:	2201      	movs	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007914:	4b03      	ldr	r3, [pc, #12]	; (8007924 <USER_SPI_initialize+0x1cc>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b2db      	uxtb	r3, r3
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	bd90      	pop	{r4, r7, pc}
 8007922:	bf00      	nop
 8007924:	20000020 	.word	0x20000020
 8007928:	20000c74 	.word	0x20000c74
 800792c:	2000061c 	.word	0x2000061c

08007930 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	4603      	mov	r3, r0
 8007938:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <USER_SPI_status+0x14>
 8007940:	2301      	movs	r3, #1
 8007942:	e002      	b.n	800794a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007944:	4b04      	ldr	r3, [pc, #16]	; (8007958 <USER_SPI_status+0x28>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	b2db      	uxtb	r3, r3
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000020 	.word	0x20000020

0800795c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	607a      	str	r2, [r7, #4]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <USER_SPI_read+0x1c>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d101      	bne.n	800797c <USER_SPI_read+0x20>
 8007978:	2304      	movs	r3, #4
 800797a:	e04d      	b.n	8007a18 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800797c:	4b28      	ldr	r3, [pc, #160]	; (8007a20 <USER_SPI_read+0xc4>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <USER_SPI_read+0x32>
 800798a:	2303      	movs	r3, #3
 800798c:	e044      	b.n	8007a18 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800798e:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <USER_SPI_read+0xc8>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <USER_SPI_read+0x44>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	025b      	lsls	r3, r3, #9
 800799e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d111      	bne.n	80079ca <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80079a6:	6879      	ldr	r1, [r7, #4]
 80079a8:	2011      	movs	r0, #17
 80079aa:	f7ff fe66 	bl	800767a <send_cmd>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d129      	bne.n	8007a08 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80079b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7ff fe03 	bl	80075c4 <rcvr_datablock>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d021      	beq.n	8007a08 <USER_SPI_read+0xac>
			count = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	e01e      	b.n	8007a08 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	2012      	movs	r0, #18
 80079ce:	f7ff fe54 	bl	800767a <send_cmd>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d117      	bne.n	8007a08 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80079d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079dc:	68b8      	ldr	r0, [r7, #8]
 80079de:	f7ff fdf1 	bl	80075c4 <rcvr_datablock>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <USER_SPI_read+0xa2>
				buff += 512;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80079ee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	603b      	str	r3, [r7, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1ed      	bne.n	80079d8 <USER_SPI_read+0x7c>
 80079fc:	e000      	b.n	8007a00 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80079fe:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007a00:	2100      	movs	r1, #0
 8007a02:	200c      	movs	r0, #12
 8007a04:	f7ff fe39 	bl	800767a <send_cmd>
		}
	}
	despiselect();
 8007a08:	f7ff fdb0 	bl	800756c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf14      	ite	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	2300      	moveq	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000020 	.word	0x20000020
 8007a24:	2000061c 	.word	0x2000061c

08007a28 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
 8007a32:	603b      	str	r3, [r7, #0]
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <USER_SPI_write+0x1c>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <USER_SPI_write+0x20>
 8007a44:	2304      	movs	r3, #4
 8007a46:	e063      	b.n	8007b10 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007a48:	4b33      	ldr	r3, [pc, #204]	; (8007b18 <USER_SPI_write+0xf0>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <USER_SPI_write+0x32>
 8007a56:	2303      	movs	r3, #3
 8007a58:	e05a      	b.n	8007b10 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007a5a:	4b2f      	ldr	r3, [pc, #188]	; (8007b18 <USER_SPI_write+0xf0>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <USER_SPI_write+0x44>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e051      	b.n	8007b10 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007a6c:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <USER_SPI_write+0xf4>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	f003 0308 	and.w	r3, r3, #8
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <USER_SPI_write+0x56>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	025b      	lsls	r3, r3, #9
 8007a7c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d110      	bne.n	8007aa6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	2018      	movs	r0, #24
 8007a88:	f7ff fdf7 	bl	800767a <send_cmd>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d136      	bne.n	8007b00 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007a92:	21fe      	movs	r1, #254	; 0xfe
 8007a94:	68b8      	ldr	r0, [r7, #8]
 8007a96:	f7ff fdbe 	bl	8007616 <xmit_datablock>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d02f      	beq.n	8007b00 <USER_SPI_write+0xd8>
			count = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	e02c      	b.n	8007b00 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007aa6:	4b1d      	ldr	r3, [pc, #116]	; (8007b1c <USER_SPI_write+0xf4>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	f003 0306 	and.w	r3, r3, #6
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <USER_SPI_write+0x92>
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	2097      	movs	r0, #151	; 0x97
 8007ab6:	f7ff fde0 	bl	800767a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	2019      	movs	r0, #25
 8007abe:	f7ff fddc 	bl	800767a <send_cmd>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11b      	bne.n	8007b00 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007ac8:	21fc      	movs	r1, #252	; 0xfc
 8007aca:	68b8      	ldr	r0, [r7, #8]
 8007acc:	f7ff fda3 	bl	8007616 <xmit_datablock>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <USER_SPI_write+0xc4>
				buff += 512;
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007adc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1ee      	bne.n	8007ac8 <USER_SPI_write+0xa0>
 8007aea:	e000      	b.n	8007aee <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007aec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007aee:	21fd      	movs	r1, #253	; 0xfd
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7ff fd90 	bl	8007616 <xmit_datablock>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USER_SPI_write+0xd8>
 8007afc:	2301      	movs	r3, #1
 8007afe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007b00:	f7ff fd34 	bl	800756c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	20000020 	.word	0x20000020
 8007b1c:	2000061c 	.word	0x2000061c

08007b20 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08c      	sub	sp, #48	; 0x30
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	603a      	str	r2, [r7, #0]
 8007b2a:	71fb      	strb	r3, [r7, #7]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <USER_SPI_ioctl+0x1a>
 8007b36:	2304      	movs	r3, #4
 8007b38:	e15a      	b.n	8007df0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007b3a:	4baf      	ldr	r3, [pc, #700]	; (8007df8 <USER_SPI_ioctl+0x2d8>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <USER_SPI_ioctl+0x2c>
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e151      	b.n	8007df0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8007b52:	79bb      	ldrb	r3, [r7, #6]
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	f200 8136 	bhi.w	8007dc6 <USER_SPI_ioctl+0x2a6>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <USER_SPI_ioctl+0x40>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b89 	.word	0x08007b89
 8007b68:	08007dc7 	.word	0x08007dc7
 8007b6c:	08007c35 	.word	0x08007c35
 8007b70:	08007d2b 	.word	0x08007d2b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007b74:	f7ff fd0a 	bl	800758c <spiselect>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8127 	beq.w	8007dce <USER_SPI_ioctl+0x2ae>
 8007b80:	2300      	movs	r3, #0
 8007b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007b86:	e122      	b.n	8007dce <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2009      	movs	r0, #9
 8007b8c:	f7ff fd75 	bl	800767a <send_cmd>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 811d 	bne.w	8007dd2 <USER_SPI_ioctl+0x2b2>
 8007b98:	f107 030c 	add.w	r3, r7, #12
 8007b9c:	2110      	movs	r1, #16
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff fd10 	bl	80075c4 <rcvr_datablock>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 8113 	beq.w	8007dd2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007bac:	7b3b      	ldrb	r3, [r7, #12]
 8007bae:	099b      	lsrs	r3, r3, #6
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d111      	bne.n	8007bda <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007bb6:	7d7b      	ldrb	r3, [r7, #21]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	7d3b      	ldrb	r3, [r7, #20]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	4413      	add	r3, r2
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	7cfb      	ldrb	r3, [r7, #19]
 8007bc4:	041b      	lsls	r3, r3, #16
 8007bc6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007bca:	4413      	add	r3, r2
 8007bcc:	3301      	adds	r3, #1
 8007bce:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	029a      	lsls	r2, r3, #10
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e028      	b.n	8007c2c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007bda:	7c7b      	ldrb	r3, [r7, #17]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	7dbb      	ldrb	r3, [r7, #22]
 8007be4:	09db      	lsrs	r3, r3, #7
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	7d7b      	ldrb	r3, [r7, #21]
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f003 0306 	and.w	r3, r3, #6
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007c02:	7d3b      	ldrb	r3, [r7, #20]
 8007c04:	099b      	lsrs	r3, r3, #6
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	7cfb      	ldrb	r3, [r7, #19]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	7cbb      	ldrb	r3, [r7, #18]
 8007c12:	029b      	lsls	r3, r3, #10
 8007c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c18:	4413      	add	r3, r2
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c22:	3b09      	subs	r3, #9
 8007c24:	69fa      	ldr	r2, [r7, #28]
 8007c26:	409a      	lsls	r2, r3
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007c32:	e0ce      	b.n	8007dd2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007c34:	4b71      	ldr	r3, [pc, #452]	; (8007dfc <USER_SPI_ioctl+0x2dc>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d031      	beq.n	8007ca4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007c40:	2100      	movs	r1, #0
 8007c42:	208d      	movs	r0, #141	; 0x8d
 8007c44:	f7ff fd19 	bl	800767a <send_cmd>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f040 80c3 	bne.w	8007dd6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007c50:	20ff      	movs	r0, #255	; 0xff
 8007c52:	f7ff fc21 	bl	8007498 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007c56:	f107 030c 	add.w	r3, r7, #12
 8007c5a:	2110      	movs	r1, #16
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7ff fcb1 	bl	80075c4 <rcvr_datablock>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80b6 	beq.w	8007dd6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007c6a:	2330      	movs	r3, #48	; 0x30
 8007c6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007c70:	e007      	b.n	8007c82 <USER_SPI_ioctl+0x162>
 8007c72:	20ff      	movs	r0, #255	; 0xff
 8007c74:	f7ff fc10 	bl	8007498 <xchg_spi>
 8007c78:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007c82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f3      	bne.n	8007c72 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007c8a:	7dbb      	ldrb	r3, [r7, #22]
 8007c8c:	091b      	lsrs	r3, r3, #4
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	461a      	mov	r2, r3
 8007c92:	2310      	movs	r3, #16
 8007c94:	fa03 f202 	lsl.w	r2, r3, r2
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007ca2:	e098      	b.n	8007dd6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	2009      	movs	r0, #9
 8007ca8:	f7ff fce7 	bl	800767a <send_cmd>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f040 8091 	bne.w	8007dd6 <USER_SPI_ioctl+0x2b6>
 8007cb4:	f107 030c 	add.w	r3, r7, #12
 8007cb8:	2110      	movs	r1, #16
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fc82 	bl	80075c4 <rcvr_datablock>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 8087 	beq.w	8007dd6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007cc8:	4b4c      	ldr	r3, [pc, #304]	; (8007dfc <USER_SPI_ioctl+0x2dc>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d012      	beq.n	8007cfa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007cd4:	7dbb      	ldrb	r3, [r7, #22]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007cdc:	7dfa      	ldrb	r2, [r7, #23]
 8007cde:	09d2      	lsrs	r2, r2, #7
 8007ce0:	b2d2      	uxtb	r2, r2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	7e7b      	ldrb	r3, [r7, #25]
 8007ce8:	099b      	lsrs	r3, r3, #6
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	3b01      	subs	r3, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	601a      	str	r2, [r3, #0]
 8007cf8:	e013      	b.n	8007d22 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007cfa:	7dbb      	ldrb	r3, [r7, #22]
 8007cfc:	109b      	asrs	r3, r3, #2
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	3301      	adds	r3, #1
 8007d06:	7dfa      	ldrb	r2, [r7, #23]
 8007d08:	00d2      	lsls	r2, r2, #3
 8007d0a:	f002 0218 	and.w	r2, r2, #24
 8007d0e:	7df9      	ldrb	r1, [r7, #23]
 8007d10:	0949      	lsrs	r1, r1, #5
 8007d12:	b2c9      	uxtb	r1, r1
 8007d14:	440a      	add	r2, r1
 8007d16:	3201      	adds	r2, #1
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007d28:	e055      	b.n	8007dd6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007d2a:	4b34      	ldr	r3, [pc, #208]	; (8007dfc <USER_SPI_ioctl+0x2dc>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 0306 	and.w	r3, r3, #6
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d051      	beq.n	8007dda <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007d36:	f107 020c 	add.w	r2, r7, #12
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	210b      	movs	r1, #11
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff feee 	bl	8007b20 <USER_SPI_ioctl>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d149      	bne.n	8007dde <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007d4a:	7b3b      	ldrb	r3, [r7, #12]
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <USER_SPI_ioctl+0x23e>
 8007d54:	7dbb      	ldrb	r3, [r7, #22]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d041      	beq.n	8007de2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	623b      	str	r3, [r7, #32]
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007d6e:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <USER_SPI_ioctl+0x2dc>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d105      	bne.n	8007d86 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	025b      	lsls	r3, r3, #9
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	025b      	lsls	r3, r3, #9
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d88:	2020      	movs	r0, #32
 8007d8a:	f7ff fc76 	bl	800767a <send_cmd>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d128      	bne.n	8007de6 <USER_SPI_ioctl+0x2c6>
 8007d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d96:	2021      	movs	r0, #33	; 0x21
 8007d98:	f7ff fc6f 	bl	800767a <send_cmd>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d121      	bne.n	8007de6 <USER_SPI_ioctl+0x2c6>
 8007da2:	2100      	movs	r1, #0
 8007da4:	2026      	movs	r0, #38	; 0x26
 8007da6:	f7ff fc68 	bl	800767a <send_cmd>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11a      	bne.n	8007de6 <USER_SPI_ioctl+0x2c6>
 8007db0:	f247 5030 	movw	r0, #30000	; 0x7530
 8007db4:	f7ff fbb6 	bl	8007524 <wait_ready>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d013      	beq.n	8007de6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007dc4:	e00f      	b.n	8007de6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007dc6:	2304      	movs	r3, #4
 8007dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007dcc:	e00c      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		break;
 8007dce:	bf00      	nop
 8007dd0:	e00a      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		break;
 8007dd2:	bf00      	nop
 8007dd4:	e008      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		break;
 8007dd6:	bf00      	nop
 8007dd8:	e006      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007dda:	bf00      	nop
 8007ddc:	e004      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007dde:	bf00      	nop
 8007de0:	e002      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <USER_SPI_ioctl+0x2c8>
		break;
 8007de6:	bf00      	nop
	}

	despiselect();
 8007de8:	f7ff fbc0 	bl	800756c <despiselect>

	return res;
 8007dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3730      	adds	r7, #48	; 0x30
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	20000020 	.word	0x20000020
 8007dfc:	2000061c 	.word	0x2000061c

08007e00 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007e0a:	79fb      	ldrb	r3, [r7, #7]
 8007e0c:	4a08      	ldr	r2, [pc, #32]	; (8007e30 <disk_status+0x30>)
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	79fa      	ldrb	r2, [r7, #7]
 8007e18:	4905      	ldr	r1, [pc, #20]	; (8007e30 <disk_status+0x30>)
 8007e1a:	440a      	add	r2, r1
 8007e1c:	7a12      	ldrb	r2, [r2, #8]
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4798      	blx	r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000648 	.word	0x20000648

08007e34 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	4a0d      	ldr	r2, [pc, #52]	; (8007e7c <disk_initialize+0x48>)
 8007e46:	5cd3      	ldrb	r3, [r2, r3]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d111      	bne.n	8007e70 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <disk_initialize+0x48>)
 8007e50:	2101      	movs	r1, #1
 8007e52:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <disk_initialize+0x48>)
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	4906      	ldr	r1, [pc, #24]	; (8007e7c <disk_initialize+0x48>)
 8007e64:	440a      	add	r2, r1
 8007e66:	7a12      	ldrb	r2, [r2, #8]
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000648 	.word	0x20000648

08007e80 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007e80:	b590      	push	{r4, r7, lr}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <disk_read+0x3c>)
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	689c      	ldr	r4, [r3, #8]
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	4a07      	ldr	r2, [pc, #28]	; (8007ebc <disk_read+0x3c>)
 8007ea0:	4413      	add	r3, r2
 8007ea2:	7a18      	ldrb	r0, [r3, #8]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	47a0      	blx	r4
 8007eac:	4603      	mov	r3, r0
 8007eae:	75fb      	strb	r3, [r7, #23]
  return res;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd90      	pop	{r4, r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000648 	.word	0x20000648

08007ec0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007ec0:	b590      	push	{r4, r7, lr}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60b9      	str	r1, [r7, #8]
 8007ec8:	607a      	str	r2, [r7, #4]
 8007eca:	603b      	str	r3, [r7, #0]
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	4a0a      	ldr	r2, [pc, #40]	; (8007efc <disk_write+0x3c>)
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	68dc      	ldr	r4, [r3, #12]
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4a07      	ldr	r2, [pc, #28]	; (8007efc <disk_write+0x3c>)
 8007ee0:	4413      	add	r3, r2
 8007ee2:	7a18      	ldrb	r0, [r3, #8]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	47a0      	blx	r4
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd90      	pop	{r4, r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000648 	.word	0x20000648

08007f00 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	603a      	str	r2, [r7, #0]
 8007f0a:	71fb      	strb	r3, [r7, #7]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	4a09      	ldr	r2, [pc, #36]	; (8007f38 <disk_ioctl+0x38>)
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	79fa      	ldrb	r2, [r7, #7]
 8007f1e:	4906      	ldr	r1, [pc, #24]	; (8007f38 <disk_ioctl+0x38>)
 8007f20:	440a      	add	r2, r1
 8007f22:	7a10      	ldrb	r0, [r2, #8]
 8007f24:	79b9      	ldrb	r1, [r7, #6]
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4798      	blx	r3
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  return res;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000648 	.word	0x20000648

08007f3c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3301      	adds	r3, #1
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007f4c:	89fb      	ldrh	r3, [r7, #14]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	b21a      	sxth	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b21b      	sxth	r3, r3
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	b21b      	sxth	r3, r3
 8007f5c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3303      	adds	r3, #3
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	021b      	lsls	r3, r3, #8
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	3202      	adds	r2, #2
 8007f84:	7812      	ldrb	r2, [r2, #0]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	021b      	lsls	r3, r3, #8
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	3201      	adds	r2, #1
 8007f92:	7812      	ldrb	r2, [r2, #0]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	021b      	lsls	r3, r3, #8
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	7812      	ldrb	r2, [r2, #0]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
	return rv;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	887a      	ldrh	r2, [r7, #2]
 8007fc6:	b2d2      	uxtb	r2, r2
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	607a      	str	r2, [r7, #4]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	b2d2      	uxtb	r2, r2
 8007fda:	701a      	strb	r2, [r3, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	1c5a      	adds	r2, r3, #1
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	0a1b      	lsrs	r3, r3, #8
 8008014:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	b2d2      	uxtb	r2, r2
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	0a1b      	lsrs	r3, r3, #8
 8008026:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
}
 8008034:	bf00      	nop
 8008036:	370c      	adds	r7, #12
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	1c53      	adds	r3, r2, #1
 800805e:	613b      	str	r3, [r7, #16]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	1c59      	adds	r1, r3, #1
 8008064:	6179      	str	r1, [r7, #20]
 8008066:	7812      	ldrb	r2, [r2, #0]
 8008068:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	3b01      	subs	r3, #1
 800806e:	607b      	str	r3, [r7, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1f1      	bne.n	800805a <mem_cpy+0x1a>
	}
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008082:	b480      	push	{r7}
 8008084:	b087      	sub	sp, #28
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	617a      	str	r2, [r7, #20]
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	607b      	str	r3, [r7, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f3      	bne.n	8008092 <mem_set+0x10>
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80080b8:	b480      	push	{r7}
 80080ba:	b089      	sub	sp, #36	; 0x24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	61fa      	str	r2, [r7, #28]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	4619      	mov	r1, r3
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	61ba      	str	r2, [r7, #24]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	1acb      	subs	r3, r1, r3
 80080e4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	607b      	str	r3, [r7, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d002      	beq.n	80080f8 <mem_cmp+0x40>
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0eb      	beq.n	80080d0 <mem_cmp+0x18>

	return r;
 80080f8:	697b      	ldr	r3, [r7, #20]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3724      	adds	r7, #36	; 0x24
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008110:	e002      	b.n	8008118 <chk_chr+0x12>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3301      	adds	r3, #1
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <chk_chr+0x26>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	4293      	cmp	r3, r2
 800812a:	d1f2      	bne.n	8008112 <chk_chr+0xc>
	return *str;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	781b      	ldrb	r3, [r3, #0]
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	e029      	b.n	80081a4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <chk_lock+0xb4>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	011b      	lsls	r3, r3, #4
 8008156:	4413      	add	r3, r2
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01d      	beq.n	800819a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800815e:	4a24      	ldr	r2, [pc, #144]	; (80081f0 <chk_lock+0xb4>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	011b      	lsls	r3, r3, #4
 8008164:	4413      	add	r3, r2
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d116      	bne.n	800819e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008170:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <chk_lock+0xb4>)
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	4413      	add	r3, r2
 8008178:	3304      	adds	r3, #4
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008180:	429a      	cmp	r2, r3
 8008182:	d10c      	bne.n	800819e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008184:	4a1a      	ldr	r2, [pc, #104]	; (80081f0 <chk_lock+0xb4>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	4413      	add	r3, r2
 800818c:	3308      	adds	r3, #8
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008194:	429a      	cmp	r2, r3
 8008196:	d102      	bne.n	800819e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008198:	e007      	b.n	80081aa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800819a:	2301      	movs	r3, #1
 800819c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d9d2      	bls.n	8008150 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d109      	bne.n	80081c4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <chk_lock+0x80>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d101      	bne.n	80081c0 <chk_lock+0x84>
 80081bc:	2300      	movs	r3, #0
 80081be:	e010      	b.n	80081e2 <chk_lock+0xa6>
 80081c0:	2312      	movs	r3, #18
 80081c2:	e00e      	b.n	80081e2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d108      	bne.n	80081dc <chk_lock+0xa0>
 80081ca:	4a09      	ldr	r2, [pc, #36]	; (80081f0 <chk_lock+0xb4>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	011b      	lsls	r3, r3, #4
 80081d0:	4413      	add	r3, r2
 80081d2:	330c      	adds	r3, #12
 80081d4:	881b      	ldrh	r3, [r3, #0]
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081da:	d101      	bne.n	80081e0 <chk_lock+0xa4>
 80081dc:	2310      	movs	r3, #16
 80081de:	e000      	b.n	80081e2 <chk_lock+0xa6>
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000628 	.word	0x20000628

080081f4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]
 80081fe:	e002      	b.n	8008206 <enq_lock+0x12>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3301      	adds	r3, #1
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d806      	bhi.n	800821a <enq_lock+0x26>
 800820c:	4a09      	ldr	r2, [pc, #36]	; (8008234 <enq_lock+0x40>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	011b      	lsls	r3, r3, #4
 8008212:	4413      	add	r3, r2
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f2      	bne.n	8008200 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b02      	cmp	r3, #2
 800821e:	bf14      	ite	ne
 8008220:	2301      	movne	r3, #1
 8008222:	2300      	moveq	r3, #0
 8008224:	b2db      	uxtb	r3, r3
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	20000628 	.word	0x20000628

08008238 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e01f      	b.n	8008288 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008248:	4a41      	ldr	r2, [pc, #260]	; (8008350 <inc_lock+0x118>)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	4413      	add	r3, r2
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d113      	bne.n	8008282 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800825a:	4a3d      	ldr	r2, [pc, #244]	; (8008350 <inc_lock+0x118>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	4413      	add	r3, r2
 8008262:	3304      	adds	r3, #4
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800826a:	429a      	cmp	r2, r3
 800826c:	d109      	bne.n	8008282 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800826e:	4a38      	ldr	r2, [pc, #224]	; (8008350 <inc_lock+0x118>)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	4413      	add	r3, r2
 8008276:	3308      	adds	r3, #8
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800827e:	429a      	cmp	r2, r3
 8008280:	d006      	beq.n	8008290 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	3301      	adds	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d9dc      	bls.n	8008248 <inc_lock+0x10>
 800828e:	e000      	b.n	8008292 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008290:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d132      	bne.n	80082fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e002      	b.n	80082a4 <inc_lock+0x6c>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3301      	adds	r3, #1
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d806      	bhi.n	80082b8 <inc_lock+0x80>
 80082aa:	4a29      	ldr	r2, [pc, #164]	; (8008350 <inc_lock+0x118>)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	4413      	add	r3, r2
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1f2      	bne.n	800829e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d101      	bne.n	80082c2 <inc_lock+0x8a>
 80082be:	2300      	movs	r3, #0
 80082c0:	e040      	b.n	8008344 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4922      	ldr	r1, [pc, #136]	; (8008350 <inc_lock+0x118>)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	011b      	lsls	r3, r3, #4
 80082cc:	440b      	add	r3, r1
 80082ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	689a      	ldr	r2, [r3, #8]
 80082d4:	491e      	ldr	r1, [pc, #120]	; (8008350 <inc_lock+0x118>)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	440b      	add	r3, r1
 80082dc:	3304      	adds	r3, #4
 80082de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695a      	ldr	r2, [r3, #20]
 80082e4:	491a      	ldr	r1, [pc, #104]	; (8008350 <inc_lock+0x118>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	440b      	add	r3, r1
 80082ec:	3308      	adds	r3, #8
 80082ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80082f0:	4a17      	ldr	r2, [pc, #92]	; (8008350 <inc_lock+0x118>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	011b      	lsls	r3, r3, #4
 80082f6:	4413      	add	r3, r2
 80082f8:	330c      	adds	r3, #12
 80082fa:	2200      	movs	r2, #0
 80082fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <inc_lock+0xe0>
 8008304:	4a12      	ldr	r2, [pc, #72]	; (8008350 <inc_lock+0x118>)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	4413      	add	r3, r2
 800830c:	330c      	adds	r3, #12
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <inc_lock+0xe0>
 8008314:	2300      	movs	r3, #0
 8008316:	e015      	b.n	8008344 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d108      	bne.n	8008330 <inc_lock+0xf8>
 800831e:	4a0c      	ldr	r2, [pc, #48]	; (8008350 <inc_lock+0x118>)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	4413      	add	r3, r2
 8008326:	330c      	adds	r3, #12
 8008328:	881b      	ldrh	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	b29a      	uxth	r2, r3
 800832e:	e001      	b.n	8008334 <inc_lock+0xfc>
 8008330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008334:	4906      	ldr	r1, [pc, #24]	; (8008350 <inc_lock+0x118>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	440b      	add	r3, r1
 800833c:	330c      	adds	r3, #12
 800833e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3301      	adds	r3, #1
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	20000628 	.word	0x20000628

08008354 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3b01      	subs	r3, #1
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d825      	bhi.n	80083b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8008368:	4a17      	ldr	r2, [pc, #92]	; (80083c8 <dec_lock+0x74>)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	011b      	lsls	r3, r3, #4
 800836e:	4413      	add	r3, r2
 8008370:	330c      	adds	r3, #12
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008376:	89fb      	ldrh	r3, [r7, #14]
 8008378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837c:	d101      	bne.n	8008382 <dec_lock+0x2e>
 800837e:	2300      	movs	r3, #0
 8008380:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <dec_lock+0x3a>
 8008388:	89fb      	ldrh	r3, [r7, #14]
 800838a:	3b01      	subs	r3, #1
 800838c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800838e:	4a0e      	ldr	r2, [pc, #56]	; (80083c8 <dec_lock+0x74>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	4413      	add	r3, r2
 8008396:	330c      	adds	r3, #12
 8008398:	89fa      	ldrh	r2, [r7, #14]
 800839a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800839c:	89fb      	ldrh	r3, [r7, #14]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <dec_lock+0x5a>
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <dec_lock+0x74>)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	011b      	lsls	r3, r3, #4
 80083a8:	4413      	add	r3, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	737b      	strb	r3, [r7, #13]
 80083b2:	e001      	b.n	80083b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80083b4:	2302      	movs	r3, #2
 80083b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80083b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000628 	.word	0x20000628

080083cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80083d4:	2300      	movs	r3, #0
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	e010      	b.n	80083fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80083da:	4a0d      	ldr	r2, [pc, #52]	; (8008410 <clear_lock+0x44>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	4413      	add	r3, r2
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d105      	bne.n	80083f6 <clear_lock+0x2a>
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <clear_lock+0x44>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4413      	add	r3, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d9eb      	bls.n	80083da <clear_lock+0xe>
	}
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	20000628 	.word	0x20000628

08008414 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	78db      	ldrb	r3, [r3, #3]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d034      	beq.n	8008492 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	7858      	ldrb	r0, [r3, #1]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008438:	2301      	movs	r3, #1
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	f7ff fd40 	bl	8007ec0 <disk_write>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008446:	2301      	movs	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
 800844a:	e022      	b.n	8008492 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	1ad2      	subs	r2, r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	429a      	cmp	r2, r3
 8008460:	d217      	bcs.n	8008492 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	789b      	ldrb	r3, [r3, #2]
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	e010      	b.n	800848c <sync_window+0x78>
					wsect += fs->fsize;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4413      	add	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7858      	ldrb	r0, [r3, #1]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800847e:	2301      	movs	r3, #1
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	f7ff fd1d 	bl	8007ec0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	3b01      	subs	r3, #1
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d8eb      	bhi.n	800846a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d01b      	beq.n	80084ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ffad 	bl	8008414 <sync_window>
 80084ba:	4603      	mov	r3, r0
 80084bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d113      	bne.n	80084ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	7858      	ldrb	r0, [r3, #1]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084ce:	2301      	movs	r3, #1
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	f7ff fcd5 	bl	8007e80 <disk_read>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff ff87 	bl	8008414 <sync_window>
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d158      	bne.n	80085c2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d148      	bne.n	80085aa <sync_fs+0xb2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	791b      	ldrb	r3, [r3, #4]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d144      	bne.n	80085aa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3330      	adds	r3, #48	; 0x30
 8008524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fda9 	bl	8008082 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3330      	adds	r3, #48	; 0x30
 8008534:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008538:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff fd38 	bl	8007fb2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3330      	adds	r3, #48	; 0x30
 8008546:	4921      	ldr	r1, [pc, #132]	; (80085cc <sync_fs+0xd4>)
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fd4d 	bl	8007fe8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3330      	adds	r3, #48	; 0x30
 8008552:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008556:	491e      	ldr	r1, [pc, #120]	; (80085d0 <sync_fs+0xd8>)
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff fd45 	bl	8007fe8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3330      	adds	r3, #48	; 0x30
 8008562:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7ff fd3b 	bl	8007fe8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3330      	adds	r3, #48	; 0x30
 8008576:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7ff fd31 	bl	8007fe8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	69db      	ldr	r3, [r3, #28]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	7858      	ldrb	r0, [r3, #1]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859e:	2301      	movs	r3, #1
 80085a0:	f7ff fc8e 	bl	8007ec0 <disk_write>
			fs->fsi_flag = 0;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2200      	movs	r2, #0
 80085b0:	2100      	movs	r1, #0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7ff fca4 	bl	8007f00 <disk_ioctl>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <sync_fs+0xca>
 80085be:	2301      	movs	r3, #1
 80085c0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	41615252 	.word	0x41615252
 80085d0:	61417272 	.word	0x61417272

080085d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3b02      	subs	r3, #2
 80085e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	3b02      	subs	r3, #2
 80085ea:	683a      	ldr	r2, [r7, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d301      	bcc.n	80085f4 <clust2sect+0x20>
 80085f0:	2300      	movs	r3, #0
 80085f2:	e008      	b.n	8008606 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	895b      	ldrh	r3, [r3, #10]
 80085f8:	461a      	mov	r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	fb03 f202 	mul.w	r2, r3, r2
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	4413      	add	r3, r2
}
 8008606:	4618      	mov	r0, r3
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d904      	bls.n	8008632 <get_fat+0x20>
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	429a      	cmp	r2, r3
 8008630:	d302      	bcc.n	8008638 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008632:	2301      	movs	r3, #1
 8008634:	617b      	str	r3, [r7, #20]
 8008636:	e08f      	b.n	8008758 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d062      	beq.n	800870c <get_fat+0xfa>
 8008646:	2b03      	cmp	r3, #3
 8008648:	dc7c      	bgt.n	8008744 <get_fat+0x132>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d002      	beq.n	8008654 <get_fat+0x42>
 800864e:	2b02      	cmp	r3, #2
 8008650:	d042      	beq.n	80086d8 <get_fat+0xc6>
 8008652:	e077      	b.n	8008744 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4413      	add	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	6a1a      	ldr	r2, [r3, #32]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	0a5b      	lsrs	r3, r3, #9
 800866a:	4413      	add	r3, r2
 800866c:	4619      	mov	r1, r3
 800866e:	6938      	ldr	r0, [r7, #16]
 8008670:	f7ff ff14 	bl	800849c <move_window>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d167      	bne.n	800874a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	60fa      	str	r2, [r7, #12]
 8008680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	4413      	add	r3, r2
 8008688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800868c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6a1a      	ldr	r2, [r3, #32]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	0a5b      	lsrs	r3, r3, #9
 8008696:	4413      	add	r3, r2
 8008698:	4619      	mov	r1, r3
 800869a:	6938      	ldr	r0, [r7, #16]
 800869c:	f7ff fefe 	bl	800849c <move_window>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d153      	bne.n	800874e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086b4:	021b      	lsls	r3, r3, #8
 80086b6:	461a      	mov	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <get_fat+0xbc>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	e002      	b.n	80086d4 <get_fat+0xc2>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086d4:	617b      	str	r3, [r7, #20]
			break;
 80086d6:	e03f      	b.n	8008758 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	6a1a      	ldr	r2, [r3, #32]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	4413      	add	r3, r2
 80086e2:	4619      	mov	r1, r3
 80086e4:	6938      	ldr	r0, [r7, #16]
 80086e6:	f7ff fed9 	bl	800849c <move_window>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d130      	bne.n	8008752 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80086fe:	4413      	add	r3, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7ff fc1b 	bl	8007f3c <ld_word>
 8008706:	4603      	mov	r3, r0
 8008708:	617b      	str	r3, [r7, #20]
			break;
 800870a:	e025      	b.n	8008758 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	6a1a      	ldr	r2, [r3, #32]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	09db      	lsrs	r3, r3, #7
 8008714:	4413      	add	r3, r2
 8008716:	4619      	mov	r1, r3
 8008718:	6938      	ldr	r0, [r7, #16]
 800871a:	f7ff febf 	bl	800849c <move_window>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d118      	bne.n	8008756 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008732:	4413      	add	r3, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f7ff fc19 	bl	8007f6c <ld_dword>
 800873a:	4603      	mov	r3, r0
 800873c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008740:	617b      	str	r3, [r7, #20]
			break;
 8008742:	e009      	b.n	8008758 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e006      	b.n	8008758 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800874a:	bf00      	nop
 800874c:	e004      	b.n	8008758 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008756:	bf00      	nop
		}
	}

	return val;
 8008758:	697b      	ldr	r3, [r7, #20]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3718      	adds	r7, #24
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008762:	b590      	push	{r4, r7, lr}
 8008764:	b089      	sub	sp, #36	; 0x24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800876e:	2302      	movs	r3, #2
 8008770:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b01      	cmp	r3, #1
 8008776:	f240 80d2 	bls.w	800891e <put_fat+0x1bc>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	429a      	cmp	r2, r3
 8008782:	f080 80cc 	bcs.w	800891e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b03      	cmp	r3, #3
 800878c:	f000 8096 	beq.w	80088bc <put_fat+0x15a>
 8008790:	2b03      	cmp	r3, #3
 8008792:	f300 80cd 	bgt.w	8008930 <put_fat+0x1ce>
 8008796:	2b01      	cmp	r3, #1
 8008798:	d002      	beq.n	80087a0 <put_fat+0x3e>
 800879a:	2b02      	cmp	r3, #2
 800879c:	d06e      	beq.n	800887c <put_fat+0x11a>
 800879e:	e0c7      	b.n	8008930 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	085b      	lsrs	r3, r3, #1
 80087a8:	69ba      	ldr	r2, [r7, #24]
 80087aa:	4413      	add	r3, r2
 80087ac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a1a      	ldr	r2, [r3, #32]
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	0a5b      	lsrs	r3, r3, #9
 80087b6:	4413      	add	r3, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7ff fe6e 	bl	800849c <move_window>
 80087c0:	4603      	mov	r3, r0
 80087c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087c4:	7ffb      	ldrb	r3, [r7, #31]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f040 80ab 	bne.w	8008922 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	1c59      	adds	r1, r3, #1
 80087d6:	61b9      	str	r1, [r7, #24]
 80087d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087dc:	4413      	add	r3, r2
 80087de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00d      	beq.n	8008806 <put_fat+0xa4>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	f003 030f 	and.w	r3, r3, #15
 80087f4:	b25a      	sxtb	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	b25b      	sxtb	r3, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	b25b      	sxtb	r3, r3
 8008802:	b2db      	uxtb	r3, r3
 8008804:	e001      	b.n	800880a <put_fat+0xa8>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a1a      	ldr	r2, [r3, #32]
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	0a5b      	lsrs	r3, r3, #9
 800881c:	4413      	add	r3, r2
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fe3b 	bl	800849c <move_window>
 8008826:	4603      	mov	r3, r0
 8008828:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800882a:	7ffb      	ldrb	r3, [r7, #31]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d17a      	bne.n	8008926 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800883c:	4413      	add	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <put_fat+0xf0>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	b2db      	uxtb	r3, r3
 8008850:	e00e      	b.n	8008870 <put_fat+0x10e>
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b25b      	sxtb	r3, r3
 8008858:	f023 030f 	bic.w	r3, r3, #15
 800885c:	b25a      	sxtb	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	0a1b      	lsrs	r3, r3, #8
 8008862:	b25b      	sxtb	r3, r3
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	b25b      	sxtb	r3, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	b25b      	sxtb	r3, r3
 800886e:	b2db      	uxtb	r3, r3
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	70da      	strb	r2, [r3, #3]
			break;
 800887a:	e059      	b.n	8008930 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	4413      	add	r3, r2
 8008886:	4619      	mov	r1, r3
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff fe07 	bl	800849c <move_window>
 800888e:	4603      	mov	r3, r0
 8008890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008892:	7ffb      	ldrb	r3, [r7, #31]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d148      	bne.n	800892a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80088a6:	4413      	add	r3, r2
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	b292      	uxth	r2, r2
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff fb7f 	bl	8007fb2 <st_word>
			fs->wflag = 1;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	70da      	strb	r2, [r3, #3]
			break;
 80088ba:	e039      	b.n	8008930 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1a      	ldr	r2, [r3, #32]
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	09db      	lsrs	r3, r3, #7
 80088c4:	4413      	add	r3, r2
 80088c6:	4619      	mov	r1, r3
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f7ff fde7 	bl	800849c <move_window>
 80088ce:	4603      	mov	r3, r0
 80088d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80088d2:	7ffb      	ldrb	r3, [r7, #31]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d12a      	bne.n	800892e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80088ec:	4413      	add	r3, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff fb3c 	bl	8007f6c <ld_dword>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80088fa:	4323      	orrs	r3, r4
 80088fc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800890c:	4413      	add	r3, r2
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff fb69 	bl	8007fe8 <st_dword>
			fs->wflag = 1;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	70da      	strb	r2, [r3, #3]
			break;
 800891c:	e008      	b.n	8008930 <put_fat+0x1ce>
		}
	}
 800891e:	bf00      	nop
 8008920:	e006      	b.n	8008930 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008922:	bf00      	nop
 8008924:	e004      	b.n	8008930 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008926:	bf00      	nop
 8008928:	e002      	b.n	8008930 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800892a:	bf00      	nop
 800892c:	e000      	b.n	8008930 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800892e:	bf00      	nop
	return res;
 8008930:	7ffb      	ldrb	r3, [r7, #31]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3724      	adds	r7, #36	; 0x24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}

0800893a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b088      	sub	sp, #32
 800893e:	af00      	add	r7, sp, #0
 8008940:	60f8      	str	r0, [r7, #12]
 8008942:	60b9      	str	r1, [r7, #8]
 8008944:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008946:	2300      	movs	r3, #0
 8008948:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d904      	bls.n	8008960 <remove_chain+0x26>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	429a      	cmp	r2, r3
 800895e:	d301      	bcc.n	8008964 <remove_chain+0x2a>
 8008960:	2302      	movs	r3, #2
 8008962:	e04b      	b.n	80089fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00c      	beq.n	8008984 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800896a:	f04f 32ff 	mov.w	r2, #4294967295
 800896e:	6879      	ldr	r1, [r7, #4]
 8008970:	69b8      	ldr	r0, [r7, #24]
 8008972:	f7ff fef6 	bl	8008762 <put_fat>
 8008976:	4603      	mov	r3, r0
 8008978:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800897a:	7ffb      	ldrb	r3, [r7, #31]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <remove_chain+0x4a>
 8008980:	7ffb      	ldrb	r3, [r7, #31]
 8008982:	e03b      	b.n	80089fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff fe43 	bl	8008612 <get_fat>
 800898c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d031      	beq.n	80089f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <remove_chain+0x64>
 800899a:	2302      	movs	r3, #2
 800899c:	e02e      	b.n	80089fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a4:	d101      	bne.n	80089aa <remove_chain+0x70>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e028      	b.n	80089fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80089aa:	2200      	movs	r2, #0
 80089ac:	68b9      	ldr	r1, [r7, #8]
 80089ae:	69b8      	ldr	r0, [r7, #24]
 80089b0:	f7ff fed7 	bl	8008762 <put_fat>
 80089b4:	4603      	mov	r3, r0
 80089b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80089b8:	7ffb      	ldrb	r3, [r7, #31]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <remove_chain+0x88>
 80089be:	7ffb      	ldrb	r3, [r7, #31]
 80089c0:	e01c      	b.n	80089fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	3b02      	subs	r3, #2
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d20b      	bcs.n	80089e8 <remove_chain+0xae>
			fs->free_clst++;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	791b      	ldrb	r3, [r3, #4]
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d3c6      	bcc.n	8008984 <remove_chain+0x4a>
 80089f6:	e000      	b.n	80089fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80089f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3720      	adds	r7, #32
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10d      	bne.n	8008a36 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <create_chain+0x2c>
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d31b      	bcc.n	8008a68 <create_chain+0x64>
 8008a30:	2301      	movs	r3, #1
 8008a32:	61bb      	str	r3, [r7, #24]
 8008a34:	e018      	b.n	8008a68 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fdea 	bl	8008612 <get_fat>
 8008a3e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d801      	bhi.n	8008a4a <create_chain+0x46>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e070      	b.n	8008b2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d101      	bne.n	8008a56 <create_chain+0x52>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	e06a      	b.n	8008b2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d201      	bcs.n	8008a64 <create_chain+0x60>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	e063      	b.n	8008b2c <create_chain+0x128>
		scl = clst;
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	695b      	ldr	r3, [r3, #20]
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d307      	bcc.n	8008a8c <create_chain+0x88>
				ncl = 2;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008a80:	69fa      	ldr	r2, [r7, #28]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d901      	bls.n	8008a8c <create_chain+0x88>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	e04f      	b.n	8008b2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008a8c:	69f9      	ldr	r1, [r7, #28]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff fdbf 	bl	8008612 <get_fat>
 8008a94:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00e      	beq.n	8008aba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d003      	beq.n	8008aaa <create_chain+0xa6>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d101      	bne.n	8008aae <create_chain+0xaa>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	e03e      	b.n	8008b2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008aae:	69fa      	ldr	r2, [r7, #28]
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d1da      	bne.n	8008a6c <create_chain+0x68>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e038      	b.n	8008b2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008aba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008abc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac0:	69f9      	ldr	r1, [r7, #28]
 8008ac2:	6938      	ldr	r0, [r7, #16]
 8008ac4:	f7ff fe4d 	bl	8008762 <put_fat>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <create_chain+0xe2>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d006      	beq.n	8008ae6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6938      	ldr	r0, [r7, #16]
 8008ade:	f7ff fe40 	bl	8008762 <put_fat>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ae6:	7dfb      	ldrb	r3, [r7, #23]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d116      	bne.n	8008b1a <create_chain+0x116>
		fs->last_clst = ncl;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	691a      	ldr	r2, [r3, #16]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	3b02      	subs	r3, #2
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d804      	bhi.n	8008b0a <create_chain+0x106>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	1e5a      	subs	r2, r3, #1
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	711a      	strb	r2, [r3, #4]
 8008b18:	e007      	b.n	8008b2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d102      	bne.n	8008b26 <create_chain+0x122>
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295
 8008b24:	e000      	b.n	8008b28 <create_chain+0x124>
 8008b26:	2301      	movs	r3, #1
 8008b28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008b2a:	69fb      	ldr	r3, [r7, #28]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3720      	adds	r7, #32
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	3304      	adds	r3, #4
 8008b4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	0a5b      	lsrs	r3, r3, #9
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	8952      	ldrh	r2, [r2, #10]
 8008b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b58:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1d1a      	adds	r2, r3, #4
 8008b5e:	613a      	str	r2, [r7, #16]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <clmt_clust+0x3a>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e010      	b.n	8008b90 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d307      	bcc.n	8008b86 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	3304      	adds	r3, #4
 8008b82:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008b84:	e7e9      	b.n	8008b5a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008b86:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	4413      	add	r3, r2
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bb2:	d204      	bcs.n	8008bbe <dir_sdi+0x22>
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e063      	b.n	8008c8a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d106      	bne.n	8008be2 <dir_sdi+0x46>
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d902      	bls.n	8008be2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10c      	bne.n	8008c02 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	8912      	ldrh	r2, [r2, #8]
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d301      	bcc.n	8008bf8 <dir_sdi+0x5c>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e048      	b.n	8008c8a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	61da      	str	r2, [r3, #28]
 8008c00:	e029      	b.n	8008c56 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	895b      	ldrh	r3, [r3, #10]
 8008c06:	025b      	lsls	r3, r3, #9
 8008c08:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c0a:	e019      	b.n	8008c40 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6979      	ldr	r1, [r7, #20]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7ff fcfe 	bl	8008612 <get_fat>
 8008c16:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d101      	bne.n	8008c24 <dir_sdi+0x88>
 8008c20:	2301      	movs	r3, #1
 8008c22:	e032      	b.n	8008c8a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d904      	bls.n	8008c34 <dir_sdi+0x98>
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d301      	bcc.n	8008c38 <dir_sdi+0x9c>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e028      	b.n	8008c8a <dir_sdi+0xee>
			ofs -= csz;
 8008c38:	683a      	ldr	r2, [r7, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d2e1      	bcs.n	8008c0c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008c48:	6979      	ldr	r1, [r7, #20]
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f7ff fcc2 	bl	80085d4 <clust2sect>
 8008c50:	4602      	mov	r2, r0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <dir_sdi+0xcc>
 8008c64:	2302      	movs	r3, #2
 8008c66:	e010      	b.n	8008c8a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	0a5b      	lsrs	r3, r3, #9
 8008c70:	441a      	add	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3718      	adds	r7, #24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	3320      	adds	r3, #32
 8008ca8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <dir_next+0x28>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cb8:	d301      	bcc.n	8008cbe <dir_next+0x2c>
 8008cba:	2304      	movs	r3, #4
 8008cbc:	e0aa      	b.n	8008e14 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 8098 	bne.w	8008dfa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	095b      	lsrs	r3, r3, #5
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	8912      	ldrh	r2, [r2, #8]
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	f0c0 8088 	bcc.w	8008dfa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	61da      	str	r2, [r3, #28]
 8008cf0:	2304      	movs	r3, #4
 8008cf2:	e08f      	b.n	8008e14 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	0a5b      	lsrs	r3, r3, #9
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	8952      	ldrh	r2, [r2, #10]
 8008cfc:	3a01      	subs	r2, #1
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d17a      	bne.n	8008dfa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f7ff fc80 	bl	8008612 <get_fat>
 8008d12:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d801      	bhi.n	8008d1e <dir_next+0x8c>
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	e07a      	b.n	8008e14 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d24:	d101      	bne.n	8008d2a <dir_next+0x98>
 8008d26:	2301      	movs	r3, #1
 8008d28:	e074      	b.n	8008e14 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d358      	bcc.n	8008de6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d104      	bne.n	8008d44 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	61da      	str	r2, [r3, #28]
 8008d40:	2304      	movs	r3, #4
 8008d42:	e067      	b.n	8008e14 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f7ff fe59 	bl	8008a04 <create_chain>
 8008d52:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <dir_next+0xcc>
 8008d5a:	2307      	movs	r3, #7
 8008d5c:	e05a      	b.n	8008e14 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d101      	bne.n	8008d68 <dir_next+0xd6>
 8008d64:	2302      	movs	r3, #2
 8008d66:	e055      	b.n	8008e14 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6e:	d101      	bne.n	8008d74 <dir_next+0xe2>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e04f      	b.n	8008e14 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f7ff fb4d 	bl	8008414 <sync_window>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <dir_next+0xf2>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e047      	b.n	8008e14 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3330      	adds	r3, #48	; 0x30
 8008d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff f977 	bl	8008082 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008d94:	2300      	movs	r3, #0
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	6979      	ldr	r1, [r7, #20]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff fc1a 	bl	80085d4 <clust2sect>
 8008da0:	4602      	mov	r2, r0
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008da6:	e012      	b.n	8008dce <dir_next+0x13c>
						fs->wflag = 1;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff fb30 	bl	8008414 <sync_window>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <dir_next+0x12c>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e02a      	b.n	8008e14 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	1c5a      	adds	r2, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	895b      	ldrh	r3, [r3, #10]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d3e6      	bcc.n	8008da8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad2      	subs	r2, r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008dec:	6979      	ldr	r1, [r7, #20]
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7ff fbf0 	bl	80085d4 <clust2sect>
 8008df4:	4602      	mov	r2, r0
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e0c:	441a      	add	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff feb4 	bl	8008b9c <dir_sdi>
 8008e34:	4603      	mov	r3, r0
 8008e36:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e38:	7dfb      	ldrb	r3, [r7, #23]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d12b      	bne.n	8008e96 <dir_alloc+0x7a>
		n = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	4619      	mov	r1, r3
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff fb27 	bl	800849c <move_window>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d11d      	bne.n	8008e94 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	2be5      	cmp	r3, #229	; 0xe5
 8008e60:	d004      	beq.n	8008e6c <dir_alloc+0x50>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d107      	bne.n	8008e7c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	613b      	str	r3, [r7, #16]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d102      	bne.n	8008e80 <dir_alloc+0x64>
 8008e7a:	e00c      	b.n	8008e96 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008e80:	2101      	movs	r1, #1
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff ff05 	bl	8008c92 <dir_next>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0d7      	beq.n	8008e42 <dir_alloc+0x26>
 8008e92:	e000      	b.n	8008e96 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008e94:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d101      	bne.n	8008ea0 <dir_alloc+0x84>
 8008e9c:	2307      	movs	r3, #7
 8008e9e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b084      	sub	sp, #16
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	331a      	adds	r3, #26
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff f83f 	bl	8007f3c <ld_word>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d109      	bne.n	8008ede <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	3314      	adds	r3, #20
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff f834 	bl	8007f3c <ld_word>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	041b      	lsls	r3, r3, #16
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	331a      	adds	r3, #26
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	b292      	uxth	r2, r2
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff f857 	bl	8007fb2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d109      	bne.n	8008f20 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f103 0214 	add.w	r2, r3, #20
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	0c1b      	lsrs	r3, r3, #16
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	f7ff f849 	bl	8007fb2 <st_word>
	}
}
 8008f20:	bf00      	nop
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008f36:	2100      	movs	r1, #0
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fe2f 	bl	8008b9c <dir_sdi>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <dir_find+0x24>
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	e03e      	b.n	8008fca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	4619      	mov	r1, r3
 8008f52:	6938      	ldr	r0, [r7, #16]
 8008f54:	f7ff faa2 	bl	800849c <move_window>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d12f      	bne.n	8008fc2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <dir_find+0x4e>
 8008f70:	2304      	movs	r3, #4
 8008f72:	75fb      	strb	r3, [r7, #23]
 8008f74:	e028      	b.n	8008fc8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	330b      	adds	r3, #11
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	330b      	adds	r3, #11
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <dir_find+0x86>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a18      	ldr	r0, [r3, #32]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3324      	adds	r3, #36	; 0x24
 8008fa0:	220b      	movs	r2, #11
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f7ff f888 	bl	80080b8 <mem_cmp>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff fe6e 	bl	8008c92 <dir_next>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0c5      	beq.n	8008f4c <dir_find+0x24>
 8008fc0:	e002      	b.n	8008fc8 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008fc2:	bf00      	nop
 8008fc4:	e000      	b.n	8008fc8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008fc6:	bf00      	nop

	return res;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff ff1a 	bl	8008e1c <dir_alloc>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008fec:	7bfb      	ldrb	r3, [r7, #15]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d11c      	bne.n	800902c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	68b8      	ldr	r0, [r7, #8]
 8008ffa:	f7ff fa4f 	bl	800849c <move_window>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d111      	bne.n	800902c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	2220      	movs	r2, #32
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff f836 	bl	8008082 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a18      	ldr	r0, [r3, #32]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3324      	adds	r3, #36	; 0x24
 800901e:	220b      	movs	r2, #11
 8009020:	4619      	mov	r1, r3
 8009022:	f7ff f80d 	bl	8008040 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	2201      	movs	r2, #1
 800902a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	3324      	adds	r3, #36	; 0x24
 800904c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800904e:	220b      	movs	r2, #11
 8009050:	2120      	movs	r1, #32
 8009052:	68b8      	ldr	r0, [r7, #8]
 8009054:	f7ff f815 	bl	8008082 <mem_set>
	si = i = 0; ni = 8;
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	2308      	movs	r3, #8
 8009062:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	1c5a      	adds	r2, r3, #1
 8009068:	61fa      	str	r2, [r7, #28]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009072:	7efb      	ldrb	r3, [r7, #27]
 8009074:	2b20      	cmp	r3, #32
 8009076:	d94e      	bls.n	8009116 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009078:	7efb      	ldrb	r3, [r7, #27]
 800907a:	2b2f      	cmp	r3, #47	; 0x2f
 800907c:	d006      	beq.n	800908c <create_name+0x54>
 800907e:	7efb      	ldrb	r3, [r7, #27]
 8009080:	2b5c      	cmp	r3, #92	; 0x5c
 8009082:	d110      	bne.n	80090a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009084:	e002      	b.n	800908c <create_name+0x54>
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	3301      	adds	r3, #1
 800908a:	61fb      	str	r3, [r7, #28]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b2f      	cmp	r3, #47	; 0x2f
 8009096:	d0f6      	beq.n	8009086 <create_name+0x4e>
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b5c      	cmp	r3, #92	; 0x5c
 80090a2:	d0f0      	beq.n	8009086 <create_name+0x4e>
			break;
 80090a4:	e038      	b.n	8009118 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80090a6:	7efb      	ldrb	r3, [r7, #27]
 80090a8:	2b2e      	cmp	r3, #46	; 0x2e
 80090aa:	d003      	beq.n	80090b4 <create_name+0x7c>
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d30c      	bcc.n	80090ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b0b      	cmp	r3, #11
 80090b8:	d002      	beq.n	80090c0 <create_name+0x88>
 80090ba:	7efb      	ldrb	r3, [r7, #27]
 80090bc:	2b2e      	cmp	r3, #46	; 0x2e
 80090be:	d001      	beq.n	80090c4 <create_name+0x8c>
 80090c0:	2306      	movs	r3, #6
 80090c2:	e044      	b.n	800914e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80090c4:	2308      	movs	r3, #8
 80090c6:	613b      	str	r3, [r7, #16]
 80090c8:	230b      	movs	r3, #11
 80090ca:	617b      	str	r3, [r7, #20]
			continue;
 80090cc:	e022      	b.n	8009114 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80090ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	da04      	bge.n	80090e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80090d6:	7efb      	ldrb	r3, [r7, #27]
 80090d8:	3b80      	subs	r3, #128	; 0x80
 80090da:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <create_name+0x120>)
 80090dc:	5cd3      	ldrb	r3, [r2, r3]
 80090de:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80090e0:	7efb      	ldrb	r3, [r7, #27]
 80090e2:	4619      	mov	r1, r3
 80090e4:	481d      	ldr	r0, [pc, #116]	; (800915c <create_name+0x124>)
 80090e6:	f7ff f80e 	bl	8008106 <chk_chr>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <create_name+0xbc>
 80090f0:	2306      	movs	r3, #6
 80090f2:	e02c      	b.n	800914e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80090f4:	7efb      	ldrb	r3, [r7, #27]
 80090f6:	2b60      	cmp	r3, #96	; 0x60
 80090f8:	d905      	bls.n	8009106 <create_name+0xce>
 80090fa:	7efb      	ldrb	r3, [r7, #27]
 80090fc:	2b7a      	cmp	r3, #122	; 0x7a
 80090fe:	d802      	bhi.n	8009106 <create_name+0xce>
 8009100:	7efb      	ldrb	r3, [r7, #27]
 8009102:	3b20      	subs	r3, #32
 8009104:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	613a      	str	r2, [r7, #16]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	4413      	add	r3, r2
 8009110:	7efa      	ldrb	r2, [r7, #27]
 8009112:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009114:	e7a6      	b.n	8009064 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009116:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	441a      	add	r2, r3
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <create_name+0xf4>
 8009128:	2306      	movs	r3, #6
 800912a:	e010      	b.n	800914e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2be5      	cmp	r3, #229	; 0xe5
 8009132:	d102      	bne.n	800913a <create_name+0x102>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	2205      	movs	r2, #5
 8009138:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800913a:	7efb      	ldrb	r3, [r7, #27]
 800913c:	2b20      	cmp	r3, #32
 800913e:	d801      	bhi.n	8009144 <create_name+0x10c>
 8009140:	2204      	movs	r2, #4
 8009142:	e000      	b.n	8009146 <create_name+0x10e>
 8009144:	2200      	movs	r2, #0
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	330b      	adds	r3, #11
 800914a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800914c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	0800d6b8 	.word	0x0800d6b8
 800915c:	0800d050 	.word	0x0800d050

08009160 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009174:	e002      	b.n	800917c <follow_path+0x1c>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	3301      	adds	r3, #1
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b2f      	cmp	r3, #47	; 0x2f
 8009182:	d0f8      	beq.n	8009176 <follow_path+0x16>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b5c      	cmp	r3, #92	; 0x5c
 800918a:	d0f4      	beq.n	8009176 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	2b1f      	cmp	r3, #31
 8009198:	d80a      	bhi.n	80091b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2280      	movs	r2, #128	; 0x80
 800919e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7ff fcf9 	bl	8008b9c <dir_sdi>
 80091aa:	4603      	mov	r3, r0
 80091ac:	75fb      	strb	r3, [r7, #23]
 80091ae:	e043      	b.n	8009238 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80091b0:	463b      	mov	r3, r7
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff ff3f 	bl	8009038 <create_name>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d134      	bne.n	800922e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7ff feaf 	bl	8008f28 <dir_find>
 80091ca:	4603      	mov	r3, r0
 80091cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80091d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d00a      	beq.n	80091f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d127      	bne.n	8009232 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80091e2:	7afb      	ldrb	r3, [r7, #11]
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d122      	bne.n	8009232 <follow_path+0xd2>
 80091ec:	2305      	movs	r3, #5
 80091ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80091f0:	e01f      	b.n	8009232 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11c      	bne.n	8009236 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	799b      	ldrb	r3, [r3, #6]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009208:	2305      	movs	r3, #5
 800920a:	75fb      	strb	r3, [r7, #23]
 800920c:	e014      	b.n	8009238 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800921c:	4413      	add	r3, r2
 800921e:	4619      	mov	r1, r3
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f7ff fe42 	bl	8008eaa <ld_clust>
 8009226:	4602      	mov	r2, r0
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800922c:	e7c0      	b.n	80091b0 <follow_path+0x50>
			if (res != FR_OK) break;
 800922e:	bf00      	nop
 8009230:	e002      	b.n	8009238 <follow_path+0xd8>
				break;
 8009232:	bf00      	nop
 8009234:	e000      	b.n	8009238 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009236:	bf00      	nop
			}
		}
	}

	return res;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3718      	adds	r7, #24
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009242:	b480      	push	{r7}
 8009244:	b087      	sub	sp, #28
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800924a:	f04f 33ff 	mov.w	r3, #4294967295
 800924e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d031      	beq.n	80092bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	617b      	str	r3, [r7, #20]
 800925e:	e002      	b.n	8009266 <get_ldnumber+0x24>
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3301      	adds	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	2b20      	cmp	r3, #32
 800926c:	d903      	bls.n	8009276 <get_ldnumber+0x34>
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b3a      	cmp	r3, #58	; 0x3a
 8009274:	d1f4      	bne.n	8009260 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	2b3a      	cmp	r3, #58	; 0x3a
 800927c:	d11c      	bne.n	80092b8 <get_ldnumber+0x76>
			tp = *path;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	60fa      	str	r2, [r7, #12]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	3b30      	subs	r3, #48	; 0x30
 800928e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b09      	cmp	r3, #9
 8009294:	d80e      	bhi.n	80092b4 <get_ldnumber+0x72>
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	429a      	cmp	r2, r3
 800929c:	d10a      	bne.n	80092b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d107      	bne.n	80092b4 <get_ldnumber+0x72>
					vol = (int)i;
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3301      	adds	r3, #1
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	e002      	b.n	80092be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80092bc:	693b      	ldr	r3, [r7, #16]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	371c      	adds	r7, #28
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
	...

080092cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	70da      	strb	r2, [r3, #3]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f04f 32ff 	mov.w	r2, #4294967295
 80092e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7ff f8d8 	bl	800849c <move_window>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <check_fs+0x2a>
 80092f2:	2304      	movs	r3, #4
 80092f4:	e038      	b.n	8009368 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3330      	adds	r3, #48	; 0x30
 80092fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80092fe:	4618      	mov	r0, r3
 8009300:	f7fe fe1c 	bl	8007f3c <ld_word>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800930c:	429a      	cmp	r2, r3
 800930e:	d001      	beq.n	8009314 <check_fs+0x48>
 8009310:	2303      	movs	r3, #3
 8009312:	e029      	b.n	8009368 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800931a:	2be9      	cmp	r3, #233	; 0xe9
 800931c:	d009      	beq.n	8009332 <check_fs+0x66>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009324:	2beb      	cmp	r3, #235	; 0xeb
 8009326:	d11e      	bne.n	8009366 <check_fs+0x9a>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800932e:	2b90      	cmp	r3, #144	; 0x90
 8009330:	d119      	bne.n	8009366 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3330      	adds	r3, #48	; 0x30
 8009336:	3336      	adds	r3, #54	; 0x36
 8009338:	4618      	mov	r0, r3
 800933a:	f7fe fe17 	bl	8007f6c <ld_dword>
 800933e:	4603      	mov	r3, r0
 8009340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009344:	4a0a      	ldr	r2, [pc, #40]	; (8009370 <check_fs+0xa4>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d101      	bne.n	800934e <check_fs+0x82>
 800934a:	2300      	movs	r3, #0
 800934c:	e00c      	b.n	8009368 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3330      	adds	r3, #48	; 0x30
 8009352:	3352      	adds	r3, #82	; 0x52
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fe09 	bl	8007f6c <ld_dword>
 800935a:	4603      	mov	r3, r0
 800935c:	4a05      	ldr	r2, [pc, #20]	; (8009374 <check_fs+0xa8>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d101      	bne.n	8009366 <check_fs+0x9a>
 8009362:	2300      	movs	r3, #0
 8009364:	e000      	b.n	8009368 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009366:	2302      	movs	r3, #2
}
 8009368:	4618      	mov	r0, r3
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	00544146 	.word	0x00544146
 8009374:	33544146 	.word	0x33544146

08009378 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b096      	sub	sp, #88	; 0x58
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f7ff ff58 	bl	8009242 <get_ldnumber>
 8009392:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009396:	2b00      	cmp	r3, #0
 8009398:	da01      	bge.n	800939e <find_volume+0x26>
 800939a:	230b      	movs	r3, #11
 800939c:	e22e      	b.n	80097fc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800939e:	4aa8      	ldr	r2, [pc, #672]	; (8009640 <find_volume+0x2c8>)
 80093a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80093a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <find_volume+0x3a>
 80093ae:	230c      	movs	r3, #12
 80093b0:	e224      	b.n	80097fc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80093b8:	79fb      	ldrb	r3, [r7, #7]
 80093ba:	f023 0301 	bic.w	r3, r3, #1
 80093be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d01a      	beq.n	80093fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80093c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fe fd17 	bl	8007e00 <disk_status>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80093d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10c      	bne.n	80093fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d007      	beq.n	80093fa <find_volume+0x82>
 80093ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80093f6:	230a      	movs	r3, #10
 80093f8:	e200      	b.n	80097fc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80093fa:	2300      	movs	r3, #0
 80093fc:	e1fe      	b.n	80097fc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	2200      	movs	r2, #0
 8009402:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	b2da      	uxtb	r2, r3
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	4618      	mov	r0, r3
 8009412:	f7fe fd0f 	bl	8007e34 <disk_initialize>
 8009416:	4603      	mov	r3, r0
 8009418:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800941c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009428:	2303      	movs	r3, #3
 800942a:	e1e7      	b.n	80097fc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d007      	beq.n	8009442 <find_volume+0xca>
 8009432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800943e:	230a      	movs	r3, #10
 8009440:	e1dc      	b.n	80097fc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009446:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800944a:	f7ff ff3f 	bl	80092cc <check_fs>
 800944e:	4603      	mov	r3, r0
 8009450:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009454:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009458:	2b02      	cmp	r3, #2
 800945a:	d14b      	bne.n	80094f4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800945c:	2300      	movs	r3, #0
 800945e:	643b      	str	r3, [r7, #64]	; 0x40
 8009460:	e01f      	b.n	80094a2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009464:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009470:	4413      	add	r3, r2
 8009472:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	3304      	adds	r3, #4
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d006      	beq.n	800948c <find_volume+0x114>
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	3308      	adds	r3, #8
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fd72 	bl	8007f6c <ld_dword>
 8009488:	4602      	mov	r2, r0
 800948a:	e000      	b.n	800948e <find_volume+0x116>
 800948c:	2200      	movs	r2, #0
 800948e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009496:	440b      	add	r3, r1
 8009498:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800949c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800949e:	3301      	adds	r3, #1
 80094a0:	643b      	str	r3, [r7, #64]	; 0x40
 80094a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d9dc      	bls.n	8009462 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80094a8:	2300      	movs	r3, #0
 80094aa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80094ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <find_volume+0x140>
 80094b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b4:	3b01      	subs	r3, #1
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80094b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80094c0:	4413      	add	r3, r2
 80094c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80094c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80094c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <find_volume+0x162>
 80094ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094d2:	f7ff fefb 	bl	80092cc <check_fs>
 80094d6:	4603      	mov	r3, r0
 80094d8:	e000      	b.n	80094dc <find_volume+0x164>
 80094da:	2303      	movs	r3, #3
 80094dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80094e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d905      	bls.n	80094f4 <find_volume+0x17c>
 80094e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ea:	3301      	adds	r3, #1
 80094ec:	643b      	str	r3, [r7, #64]	; 0x40
 80094ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d9e1      	bls.n	80094b8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80094f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d101      	bne.n	8009500 <find_volume+0x188>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e17d      	b.n	80097fc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009504:	2b01      	cmp	r3, #1
 8009506:	d901      	bls.n	800950c <find_volume+0x194>
 8009508:	230d      	movs	r3, #13
 800950a:	e177      	b.n	80097fc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	3330      	adds	r3, #48	; 0x30
 8009510:	330b      	adds	r3, #11
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd12 	bl	8007f3c <ld_word>
 8009518:	4603      	mov	r3, r0
 800951a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951e:	d001      	beq.n	8009524 <find_volume+0x1ac>
 8009520:	230d      	movs	r3, #13
 8009522:	e16b      	b.n	80097fc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	3330      	adds	r3, #48	; 0x30
 8009528:	3316      	adds	r3, #22
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fd06 	bl	8007f3c <ld_word>
 8009530:	4603      	mov	r3, r0
 8009532:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <find_volume+0x1d0>
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	3330      	adds	r3, #48	; 0x30
 800953e:	3324      	adds	r3, #36	; 0x24
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fd13 	bl	8007f6c <ld_dword>
 8009546:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800954c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009556:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955a:	789b      	ldrb	r3, [r3, #2]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d005      	beq.n	800956c <find_volume+0x1f4>
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	789b      	ldrb	r3, [r3, #2]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d001      	beq.n	800956c <find_volume+0x1f4>
 8009568:	230d      	movs	r3, #13
 800956a:	e147      	b.n	80097fc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956e:	789b      	ldrb	r3, [r3, #2]
 8009570:	461a      	mov	r2, r3
 8009572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009574:	fb02 f303 	mul.w	r3, r2, r3
 8009578:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009580:	b29a      	uxth	r2, r3
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d008      	beq.n	80095a0 <find_volume+0x228>
 800958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009590:	895b      	ldrh	r3, [r3, #10]
 8009592:	461a      	mov	r2, r3
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	895b      	ldrh	r3, [r3, #10]
 8009598:	3b01      	subs	r3, #1
 800959a:	4013      	ands	r3, r2
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <find_volume+0x22c>
 80095a0:	230d      	movs	r3, #13
 80095a2:	e12b      	b.n	80097fc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	3330      	adds	r3, #48	; 0x30
 80095a8:	3311      	adds	r3, #17
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fcc6 	bl	8007f3c <ld_word>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	891b      	ldrh	r3, [r3, #8]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <find_volume+0x252>
 80095c6:	230d      	movs	r3, #13
 80095c8:	e118      	b.n	80097fc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	3330      	adds	r3, #48	; 0x30
 80095ce:	3313      	adds	r3, #19
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fe fcb3 	bl	8007f3c <ld_word>
 80095d6:	4603      	mov	r3, r0
 80095d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80095da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d106      	bne.n	80095ee <find_volume+0x276>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e2:	3330      	adds	r3, #48	; 0x30
 80095e4:	3320      	adds	r3, #32
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fe fcc0 	bl	8007f6c <ld_dword>
 80095ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80095ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f0:	3330      	adds	r3, #48	; 0x30
 80095f2:	330e      	adds	r3, #14
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fca1 	bl	8007f3c <ld_word>
 80095fa:	4603      	mov	r3, r0
 80095fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80095fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009600:	2b00      	cmp	r3, #0
 8009602:	d101      	bne.n	8009608 <find_volume+0x290>
 8009604:	230d      	movs	r3, #13
 8009606:	e0f9      	b.n	80097fc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009608:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800960a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800960c:	4413      	add	r3, r2
 800960e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009610:	8912      	ldrh	r2, [r2, #8]
 8009612:	0912      	lsrs	r2, r2, #4
 8009614:	b292      	uxth	r2, r2
 8009616:	4413      	add	r3, r2
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800961a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	429a      	cmp	r2, r3
 8009620:	d201      	bcs.n	8009626 <find_volume+0x2ae>
 8009622:	230d      	movs	r3, #13
 8009624:	e0ea      	b.n	80097fc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009626:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800962e:	8952      	ldrh	r2, [r2, #10]
 8009630:	fbb3 f3f2 	udiv	r3, r3, r2
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d103      	bne.n	8009644 <find_volume+0x2cc>
 800963c:	230d      	movs	r3, #13
 800963e:	e0dd      	b.n	80097fc <find_volume+0x484>
 8009640:	20000620 	.word	0x20000620
		fmt = FS_FAT32;
 8009644:	2303      	movs	r3, #3
 8009646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009650:	4293      	cmp	r3, r2
 8009652:	d802      	bhi.n	800965a <find_volume+0x2e2>
 8009654:	2302      	movs	r3, #2
 8009656:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009660:	4293      	cmp	r3, r2
 8009662:	d802      	bhi.n	800966a <find_volume+0x2f2>
 8009664:	2301      	movs	r3, #1
 8009666:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	1c9a      	adds	r2, r3, #2
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009674:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009676:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009678:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800967a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800967c:	441a      	add	r2, r3
 800967e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009680:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009682:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	441a      	add	r2, r3
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800968c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009690:	2b03      	cmp	r3, #3
 8009692:	d11e      	bne.n	80096d2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009696:	3330      	adds	r3, #48	; 0x30
 8009698:	332a      	adds	r3, #42	; 0x2a
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fc4e 	bl	8007f3c <ld_word>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <find_volume+0x332>
 80096a6:	230d      	movs	r3, #13
 80096a8:	e0a8      	b.n	80097fc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	891b      	ldrh	r3, [r3, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <find_volume+0x33e>
 80096b2:	230d      	movs	r3, #13
 80096b4:	e0a2      	b.n	80097fc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	3330      	adds	r3, #48	; 0x30
 80096ba:	332c      	adds	r3, #44	; 0x2c
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fe fc55 	bl	8007f6c <ld_dword>
 80096c2:	4602      	mov	r2, r0
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80096c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	647b      	str	r3, [r7, #68]	; 0x44
 80096d0:	e01f      	b.n	8009712 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80096d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d4:	891b      	ldrh	r3, [r3, #8]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <find_volume+0x366>
 80096da:	230d      	movs	r3, #13
 80096dc:	e08e      	b.n	80097fc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	6a1a      	ldr	r2, [r3, #32]
 80096e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e4:	441a      	add	r2, r3
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80096ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d103      	bne.n	80096fa <find_volume+0x382>
 80096f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	e00a      	b.n	8009710 <find_volume+0x398>
 80096fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fc:	695a      	ldr	r2, [r3, #20]
 80096fe:	4613      	mov	r3, r2
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	4413      	add	r3, r2
 8009704:	085a      	lsrs	r2, r3, #1
 8009706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009710:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	699a      	ldr	r2, [r3, #24]
 8009716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009718:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800971c:	0a5b      	lsrs	r3, r3, #9
 800971e:	429a      	cmp	r2, r3
 8009720:	d201      	bcs.n	8009726 <find_volume+0x3ae>
 8009722:	230d      	movs	r3, #13
 8009724:	e06a      	b.n	80097fc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	f04f 32ff 	mov.w	r2, #4294967295
 800972c:	611a      	str	r2, [r3, #16]
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	691a      	ldr	r2, [r3, #16]
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009738:	2280      	movs	r2, #128	; 0x80
 800973a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800973c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009740:	2b03      	cmp	r3, #3
 8009742:	d149      	bne.n	80097d8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	3330      	adds	r3, #48	; 0x30
 8009748:	3330      	adds	r3, #48	; 0x30
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fbf6 	bl	8007f3c <ld_word>
 8009750:	4603      	mov	r3, r0
 8009752:	2b01      	cmp	r3, #1
 8009754:	d140      	bne.n	80097d8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009758:	3301      	adds	r3, #1
 800975a:	4619      	mov	r1, r3
 800975c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800975e:	f7fe fe9d 	bl	800849c <move_window>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d137      	bne.n	80097d8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	2200      	movs	r2, #0
 800976c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	3330      	adds	r3, #48	; 0x30
 8009772:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fbe0 	bl	8007f3c <ld_word>
 800977c:	4603      	mov	r3, r0
 800977e:	461a      	mov	r2, r3
 8009780:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009784:	429a      	cmp	r2, r3
 8009786:	d127      	bne.n	80097d8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	3330      	adds	r3, #48	; 0x30
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fbed 	bl	8007f6c <ld_dword>
 8009792:	4603      	mov	r3, r0
 8009794:	4a1b      	ldr	r2, [pc, #108]	; (8009804 <find_volume+0x48c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d11e      	bne.n	80097d8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	3330      	adds	r3, #48	; 0x30
 800979e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fe fbe2 	bl	8007f6c <ld_dword>
 80097a8:	4603      	mov	r3, r0
 80097aa:	4a17      	ldr	r2, [pc, #92]	; (8009808 <find_volume+0x490>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d113      	bne.n	80097d8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	3330      	adds	r3, #48	; 0x30
 80097b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fe fbd7 	bl	8007f6c <ld_dword>
 80097be:	4602      	mov	r2, r0
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	3330      	adds	r3, #48	; 0x30
 80097c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fe fbcd 	bl	8007f6c <ld_dword>
 80097d2:	4602      	mov	r2, r0
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80097de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <find_volume+0x494>)
 80097e2:	881b      	ldrh	r3, [r3, #0]
 80097e4:	3301      	adds	r3, #1
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	4b08      	ldr	r3, [pc, #32]	; (800980c <find_volume+0x494>)
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <find_volume+0x494>)
 80097ee:	881a      	ldrh	r2, [r3, #0]
 80097f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80097f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097f6:	f7fe fde9 	bl	80083cc <clear_lock>
#endif
	return FR_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3758      	adds	r7, #88	; 0x58
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	41615252 	.word	0x41615252
 8009808:	61417272 	.word	0x61417272
 800980c:	20000624 	.word	0x20000624

08009810 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800981a:	2309      	movs	r3, #9
 800981c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d01c      	beq.n	800985e <validate+0x4e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d018      	beq.n	800985e <validate+0x4e>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d013      	beq.n	800985e <validate+0x4e>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	889a      	ldrh	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	88db      	ldrh	r3, [r3, #6]
 8009840:	429a      	cmp	r2, r3
 8009842:	d10c      	bne.n	800985e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	4618      	mov	r0, r3
 800984c:	f7fe fad8 	bl	8007e00 <disk_status>
 8009850:	4603      	mov	r3, r0
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <validate+0x4e>
			res = FR_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <validate+0x5a>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	e000      	b.n	800986c <validate+0x5c>
 800986a:	2300      	movs	r3, #0
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	6013      	str	r3, [r2, #0]
	return res;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
	...

0800987c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	4613      	mov	r3, r2
 8009888:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800988e:	f107 0310 	add.w	r3, r7, #16
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fcd5 	bl	8009242 <get_ldnumber>
 8009898:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	da01      	bge.n	80098a4 <f_mount+0x28>
 80098a0:	230b      	movs	r3, #11
 80098a2:	e02b      	b.n	80098fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80098a4:	4a17      	ldr	r2, [pc, #92]	; (8009904 <f_mount+0x88>)
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80098b4:	69b8      	ldr	r0, [r7, #24]
 80098b6:	f7fe fd89 	bl	80083cc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	490d      	ldr	r1, [pc, #52]	; (8009904 <f_mount+0x88>)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <f_mount+0x66>
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d001      	beq.n	80098e6 <f_mount+0x6a>
 80098e2:	2300      	movs	r3, #0
 80098e4:	e00a      	b.n	80098fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098e6:	f107 010c 	add.w	r1, r7, #12
 80098ea:	f107 0308 	add.w	r3, r7, #8
 80098ee:	2200      	movs	r2, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff fd41 	bl	8009378 <find_volume>
 80098f6:	4603      	mov	r3, r0
 80098f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3720      	adds	r7, #32
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000620 	.word	0x20000620

08009908 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b098      	sub	sp, #96	; 0x60
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	4613      	mov	r3, r2
 8009914:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <f_open+0x18>
 800991c:	2309      	movs	r3, #9
 800991e:	e1ad      	b.n	8009c7c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009926:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009928:	79fa      	ldrb	r2, [r7, #7]
 800992a:	f107 0110 	add.w	r1, r7, #16
 800992e:	f107 0308 	add.w	r3, r7, #8
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fd20 	bl	8009378 <find_volume>
 8009938:	4603      	mov	r3, r0
 800993a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800993e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009942:	2b00      	cmp	r3, #0
 8009944:	f040 8191 	bne.w	8009c6a <f_open+0x362>
		dj.obj.fs = fs;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	f107 0314 	add.w	r3, r7, #20
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff fc03 	bl	8009160 <follow_path>
 800995a:	4603      	mov	r3, r0
 800995c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009964:	2b00      	cmp	r3, #0
 8009966:	d11a      	bne.n	800999e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009968:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800996c:	b25b      	sxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	da03      	bge.n	800997a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009972:	2306      	movs	r3, #6
 8009974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009978:	e011      	b.n	800999e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	f023 0301 	bic.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe fbd2 	bl	800813c <chk_lock>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	f003 031c 	and.w	r3, r3, #28
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d07f      	beq.n	8009aa8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80099a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d017      	beq.n	80099e0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d10e      	bne.n	80099d6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80099b8:	f7fe fc1c 	bl	80081f4 <enq_lock>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d006      	beq.n	80099d0 <f_open+0xc8>
 80099c2:	f107 0314 	add.w	r3, r7, #20
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fb03 	bl	8008fd2 <dir_register>
 80099cc:	4603      	mov	r3, r0
 80099ce:	e000      	b.n	80099d2 <f_open+0xca>
 80099d0:	2312      	movs	r3, #18
 80099d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099d6:	79fb      	ldrb	r3, [r7, #7]
 80099d8:	f043 0308 	orr.w	r3, r3, #8
 80099dc:	71fb      	strb	r3, [r7, #7]
 80099de:	e010      	b.n	8009a02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099e0:	7ebb      	ldrb	r3, [r7, #26]
 80099e2:	f003 0311 	and.w	r3, r3, #17
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <f_open+0xea>
					res = FR_DENIED;
 80099ea:	2307      	movs	r3, #7
 80099ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099f0:	e007      	b.n	8009a02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <f_open+0xfa>
 80099fc:	2308      	movs	r3, #8
 80099fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d168      	bne.n	8009adc <f_open+0x1d4>
 8009a0a:	79fb      	ldrb	r3, [r7, #7]
 8009a0c:	f003 0308 	and.w	r3, r3, #8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d063      	beq.n	8009adc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a14:	f7fd fcb8 	bl	8007388 <get_fattime>
 8009a18:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1c:	330e      	adds	r3, #14
 8009a1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fe fae1 	bl	8007fe8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	3316      	adds	r3, #22
 8009a2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7fe fadb 	bl	8007fe8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	330b      	adds	r3, #11
 8009a36:	2220      	movs	r2, #32
 8009a38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fa32 	bl	8008eaa <ld_clust>
 8009a46:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fa4a 	bl	8008ee8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a56:	331c      	adds	r3, #28
 8009a58:	2100      	movs	r1, #0
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fac4 	bl	8007fe8 <st_dword>
					fs->wflag = 1;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2201      	movs	r2, #1
 8009a64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d037      	beq.n	8009adc <f_open+0x1d4>
						dw = fs->winsect;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a70:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a72:	f107 0314 	add.w	r3, r7, #20
 8009a76:	2200      	movs	r2, #0
 8009a78:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe ff5d 	bl	800893a <remove_chain>
 8009a80:	4603      	mov	r3, r0
 8009a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d126      	bne.n	8009adc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe fd02 	bl	800849c <move_window>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	60da      	str	r2, [r3, #12]
 8009aa6:	e019      	b.n	8009adc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009aa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d115      	bne.n	8009adc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ab0:	7ebb      	ldrb	r3, [r7, #26]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009aba:	2304      	movs	r3, #4
 8009abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ac0:	e00c      	b.n	8009adc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <f_open+0x1d4>
 8009acc:	7ebb      	ldrb	r3, [r7, #26]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d002      	beq.n	8009adc <f_open+0x1d4>
						res = FR_DENIED;
 8009ad6:	2307      	movs	r3, #7
 8009ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d128      	bne.n	8009b36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	f003 0308 	and.w	r3, r3, #8
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009aee:	79fb      	ldrb	r3, [r7, #7]
 8009af0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009af4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	f023 0301 	bic.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bf14      	ite	ne
 8009b0e:	2301      	movne	r3, #1
 8009b10:	2300      	moveq	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	f107 0314 	add.w	r3, r7, #20
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fe fb8b 	bl	8008238 <inc_lock>
 8009b22:	4602      	mov	r2, r0
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <f_open+0x22e>
 8009b30:	2302      	movs	r3, #2
 8009b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f040 8095 	bne.w	8009c6a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b44:	4611      	mov	r1, r2
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff f9af 	bl	8008eaa <ld_clust>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b54:	331c      	adds	r3, #28
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7fe fa08 	bl	8007f6c <ld_dword>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	88da      	ldrh	r2, [r3, #6]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	79fa      	ldrb	r2, [r7, #7]
 8009b7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3330      	adds	r3, #48	; 0x30
 8009b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fa72 	bl	8008082 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b9e:	79fb      	ldrb	r3, [r7, #7]
 8009ba0:	f003 0320 	and.w	r3, r3, #32
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d060      	beq.n	8009c6a <f_open+0x362>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d05c      	beq.n	8009c6a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	68da      	ldr	r2, [r3, #12]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	895b      	ldrh	r3, [r3, #10]
 8009bbc:	025b      	lsls	r3, r3, #9
 8009bbe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	657b      	str	r3, [r7, #84]	; 0x54
 8009bcc:	e016      	b.n	8009bfc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fd1d 	bl	8008612 <get_fat>
 8009bd8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d802      	bhi.n	8009be6 <f_open+0x2de>
 8009be0:	2302      	movs	r3, #2
 8009be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d102      	bne.n	8009bf4 <f_open+0x2ec>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	657b      	str	r3, [r7, #84]	; 0x54
 8009bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <f_open+0x304>
 8009c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d8e0      	bhi.n	8009bce <f_open+0x2c6>
				}
				fp->clust = clst;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d127      	bne.n	8009c6a <f_open+0x362>
 8009c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d022      	beq.n	8009c6a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fcd3 	bl	80085d4 <clust2sect>
 8009c2e:	6478      	str	r0, [r7, #68]	; 0x44
 8009c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d103      	bne.n	8009c3e <f_open+0x336>
						res = FR_INT_ERR;
 8009c36:	2302      	movs	r3, #2
 8009c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c3c:	e015      	b.n	8009c6a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c40:	0a5a      	lsrs	r2, r3, #9
 8009c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c44:	441a      	add	r2, r3
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	7858      	ldrb	r0, [r3, #1]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a1a      	ldr	r2, [r3, #32]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f7fe f911 	bl	8007e80 <disk_read>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d002      	beq.n	8009c6a <f_open+0x362>
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <f_open+0x370>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3760      	adds	r7, #96	; 0x60
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08c      	sub	sp, #48	; 0x30
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f107 0210 	add.w	r2, r7, #16
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fdb3 	bl	8009810 <validate>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d107      	bne.n	8009cc8 <f_write+0x44>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	7d5b      	ldrb	r3, [r3, #21]
 8009cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <f_write+0x4a>
 8009cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ccc:	e14b      	b.n	8009f66 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	7d1b      	ldrb	r3, [r3, #20]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <f_write+0x5a>
 8009cda:	2307      	movs	r3, #7
 8009cdc:	e143      	b.n	8009f66 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	f080 812d 	bcs.w	8009f4a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	43db      	mvns	r3, r3
 8009cf6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009cf8:	e127      	b.n	8009f4a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f040 80e3 	bne.w	8009ece <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	0a5b      	lsrs	r3, r3, #9
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	8952      	ldrh	r2, [r2, #10]
 8009d12:	3a01      	subs	r2, #1
 8009d14:	4013      	ands	r3, r2
 8009d16:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d143      	bne.n	8009da6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10c      	bne.n	8009d40 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d11a      	bne.n	8009d68 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fe64 	bl	8008a04 <create_chain>
 8009d3c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d3e:	e013      	b.n	8009d68 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d007      	beq.n	8009d58 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f7fe fef0 	bl	8008b34 <clmt_clust>
 8009d54:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d56:	e007      	b.n	8009d68 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	4610      	mov	r0, r2
 8009d62:	f7fe fe4f 	bl	8008a04 <create_chain>
 8009d66:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80f2 	beq.w	8009f54 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d104      	bne.n	8009d80 <f_write+0xfc>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	755a      	strb	r2, [r3, #21]
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e0f2      	b.n	8009f66 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d104      	bne.n	8009d92 <f_write+0x10e>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	755a      	strb	r2, [r3, #21]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e0e9      	b.n	8009f66 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d96:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d102      	bne.n	8009da6 <f_write+0x122>
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	7d1b      	ldrb	r3, [r3, #20]
 8009daa:	b25b      	sxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	da18      	bge.n	8009de2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	7858      	ldrb	r0, [r3, #1]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6a1a      	ldr	r2, [r3, #32]
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f7fe f87e 	bl	8007ec0 <disk_write>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d004      	beq.n	8009dd4 <f_write+0x150>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	755a      	strb	r2, [r3, #21]
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e0c8      	b.n	8009f66 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	7d1b      	ldrb	r3, [r3, #20]
 8009dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009de2:	693a      	ldr	r2, [r7, #16]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	69db      	ldr	r3, [r3, #28]
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fe fbf2 	bl	80085d4 <clust2sect>
 8009df0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d104      	bne.n	8009e02 <f_write+0x17e>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	755a      	strb	r2, [r3, #21]
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e0b1      	b.n	8009f66 <f_write+0x2e2>
			sect += csect;
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	4413      	add	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	0a5b      	lsrs	r3, r3, #9
 8009e0e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d03c      	beq.n	8009e90 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	6a3b      	ldr	r3, [r7, #32]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	8952      	ldrh	r2, [r2, #10]
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d905      	bls.n	8009e30 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	895b      	ldrh	r3, [r3, #10]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	7858      	ldrb	r0, [r3, #1]
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	69f9      	ldr	r1, [r7, #28]
 8009e3a:	f7fe f841 	bl	8007ec0 <disk_write>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d004      	beq.n	8009e4e <f_write+0x1ca>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2201      	movs	r2, #1
 8009e48:	755a      	strb	r2, [r3, #21]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e08b      	b.n	8009f66 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1a      	ldr	r2, [r3, #32]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	6a3a      	ldr	r2, [r7, #32]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d915      	bls.n	8009e88 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6a1a      	ldr	r2, [r3, #32]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	025b      	lsls	r3, r3, #9
 8009e6c:	69fa      	ldr	r2, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e74:	4619      	mov	r1, r3
 8009e76:	f7fe f8e3 	bl	8008040 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	7d1b      	ldrb	r3, [r3, #20]
 8009e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	025b      	lsls	r3, r3, #9
 8009e8c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009e8e:	e03f      	b.n	8009f10 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d016      	beq.n	8009ec8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	699a      	ldr	r2, [r3, #24]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d210      	bcs.n	8009ec8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	7858      	ldrb	r0, [r3, #1]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	f7fd ffe4 	bl	8007e80 <disk_read>
 8009eb8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	755a      	strb	r2, [r3, #21]
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e04e      	b.n	8009f66 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009eda:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d901      	bls.n	8009ee8 <f_write+0x264>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	4413      	add	r3, r2
 8009ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efa:	69f9      	ldr	r1, [r7, #28]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f7fe f89f 	bl	8008040 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	7d1b      	ldrb	r3, [r3, #20]
 8009f06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009f10:	69fa      	ldr	r2, [r7, #28]
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	4413      	add	r3, r2
 8009f16:	61fb      	str	r3, [r7, #28]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	699a      	ldr	r2, [r3, #24]
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	441a      	add	r2, r3
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	619a      	str	r2, [r3, #24]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	bf38      	it	cc
 8009f30:	461a      	movcc	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	60da      	str	r2, [r3, #12]
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	441a      	add	r2, r3
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f47f aed4 	bne.w	8009cfa <f_write+0x76>
 8009f52:	e000      	b.n	8009f56 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009f54:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	7d1b      	ldrb	r3, [r3, #20]
 8009f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3730      	adds	r7, #48	; 0x30
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b086      	sub	sp, #24
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f107 0208 	add.w	r2, r7, #8
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff fc46 	bl	8009810 <validate>
 8009f84:	4603      	mov	r3, r0
 8009f86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f88:	7dfb      	ldrb	r3, [r7, #23]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d168      	bne.n	800a060 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	7d1b      	ldrb	r3, [r3, #20]
 8009f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d062      	beq.n	800a060 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	7d1b      	ldrb	r3, [r3, #20]
 8009f9e:	b25b      	sxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	da15      	bge.n	8009fd0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	7858      	ldrb	r0, [r3, #1]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1a      	ldr	r2, [r3, #32]
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	f7fd ff84 	bl	8007ec0 <disk_write>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d001      	beq.n	8009fc2 <f_sync+0x54>
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e04f      	b.n	800a062 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	7d1b      	ldrb	r3, [r3, #20]
 8009fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fca:	b2da      	uxtb	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009fd0:	f7fd f9da 	bl	8007388 <get_fattime>
 8009fd4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	4619      	mov	r1, r3
 8009fde:	4610      	mov	r0, r2
 8009fe0:	f7fe fa5c 	bl	800849c <move_window>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d138      	bne.n	800a060 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	330b      	adds	r3, #11
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	330b      	adds	r3, #11
 8009ffe:	f042 0220 	orr.w	r2, r2, #32
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	461a      	mov	r2, r3
 800a010:	68f9      	ldr	r1, [r7, #12]
 800a012:	f7fe ff69 	bl	8008ee8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f103 021c 	add.w	r2, r3, #28
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f7fd ffe0 	bl	8007fe8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3316      	adds	r3, #22
 800a02c:	6939      	ldr	r1, [r7, #16]
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fd ffda 	bl	8007fe8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3312      	adds	r3, #18
 800a038:	2100      	movs	r1, #0
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7fd ffb9 	bl	8007fb2 <st_word>
					fs->wflag = 1;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2201      	movs	r2, #1
 800a044:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fe fa55 	bl	80084f8 <sync_fs>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7d1b      	ldrb	r3, [r3, #20]
 800a056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a05a:	b2da      	uxtb	r2, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff ff7b 	bl	8009f6e <f_sync>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d118      	bne.n	800a0b4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f107 0208 	add.w	r2, r7, #8
 800a088:	4611      	mov	r1, r2
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fbc0 	bl	8009810 <validate>
 800a090:	4603      	mov	r3, r0
 800a092:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10c      	bne.n	800a0b4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe f958 	bl	8008354 <dec_lock>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d102      	bne.n	800a0b4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a0d6:	4b1f      	ldr	r3, [pc, #124]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0d8:	7a5b      	ldrb	r3, [r3, #9]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d131      	bne.n	800a144 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a0e0:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0e2:	7a5b      	ldrb	r3, [r3, #9]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a0ee:	4b19      	ldr	r3, [pc, #100]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0f0:	7a5b      	ldrb	r3, [r3, #9]
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	4a17      	ldr	r2, [pc, #92]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a100:	7a5b      	ldrb	r3, [r3, #9]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	4b13      	ldr	r3, [pc, #76]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a108:	4413      	add	r3, r2
 800a10a:	79fa      	ldrb	r2, [r7, #7]
 800a10c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a10e:	4b11      	ldr	r3, [pc, #68]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a110:	7a5b      	ldrb	r3, [r3, #9]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	1c5a      	adds	r2, r3, #1
 800a116:	b2d1      	uxtb	r1, r2
 800a118:	4a0e      	ldr	r2, [pc, #56]	; (800a154 <FATFS_LinkDriverEx+0x94>)
 800a11a:	7251      	strb	r1, [r2, #9]
 800a11c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a11e:	7dbb      	ldrb	r3, [r7, #22]
 800a120:	3330      	adds	r3, #48	; 0x30
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	3301      	adds	r3, #1
 800a12c:	223a      	movs	r2, #58	; 0x3a
 800a12e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	3302      	adds	r3, #2
 800a134:	222f      	movs	r2, #47	; 0x2f
 800a136:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	3303      	adds	r3, #3
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a144:	7dfb      	ldrb	r3, [r7, #23]
}
 800a146:	4618      	mov	r0, r3
 800a148:	371c      	adds	r7, #28
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000648 	.word	0x20000648

0800a158 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a162:	2200      	movs	r2, #0
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff ffaa 	bl	800a0c0 <FATFS_LinkDriverEx>
 800a16c:	4603      	mov	r3, r0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <__errno>:
 800a178:	4b01      	ldr	r3, [pc, #4]	; (800a180 <__errno+0x8>)
 800a17a:	6818      	ldr	r0, [r3, #0]
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	20000024 	.word	0x20000024

0800a184 <__libc_init_array>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4d0d      	ldr	r5, [pc, #52]	; (800a1bc <__libc_init_array+0x38>)
 800a188:	4c0d      	ldr	r4, [pc, #52]	; (800a1c0 <__libc_init_array+0x3c>)
 800a18a:	1b64      	subs	r4, r4, r5
 800a18c:	10a4      	asrs	r4, r4, #2
 800a18e:	2600      	movs	r6, #0
 800a190:	42a6      	cmp	r6, r4
 800a192:	d109      	bne.n	800a1a8 <__libc_init_array+0x24>
 800a194:	4d0b      	ldr	r5, [pc, #44]	; (800a1c4 <__libc_init_array+0x40>)
 800a196:	4c0c      	ldr	r4, [pc, #48]	; (800a1c8 <__libc_init_array+0x44>)
 800a198:	f002 fed6 	bl	800cf48 <_init>
 800a19c:	1b64      	subs	r4, r4, r5
 800a19e:	10a4      	asrs	r4, r4, #2
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	42a6      	cmp	r6, r4
 800a1a4:	d105      	bne.n	800a1b2 <__libc_init_array+0x2e>
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
 800a1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1ac:	4798      	blx	r3
 800a1ae:	3601      	adds	r6, #1
 800a1b0:	e7ee      	b.n	800a190 <__libc_init_array+0xc>
 800a1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1b6:	4798      	blx	r3
 800a1b8:	3601      	adds	r6, #1
 800a1ba:	e7f2      	b.n	800a1a2 <__libc_init_array+0x1e>
 800a1bc:	0800db24 	.word	0x0800db24
 800a1c0:	0800db24 	.word	0x0800db24
 800a1c4:	0800db24 	.word	0x0800db24
 800a1c8:	0800db28 	.word	0x0800db28

0800a1cc <memcpy>:
 800a1cc:	440a      	add	r2, r1
 800a1ce:	4291      	cmp	r1, r2
 800a1d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d4:	d100      	bne.n	800a1d8 <memcpy+0xc>
 800a1d6:	4770      	bx	lr
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e2:	4291      	cmp	r1, r2
 800a1e4:	d1f9      	bne.n	800a1da <memcpy+0xe>
 800a1e6:	bd10      	pop	{r4, pc}

0800a1e8 <memset>:
 800a1e8:	4402      	add	r2, r0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d100      	bne.n	800a1f2 <memset+0xa>
 800a1f0:	4770      	bx	lr
 800a1f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1f6:	e7f9      	b.n	800a1ec <memset+0x4>

0800a1f8 <__cvt>:
 800a1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	ec55 4b10 	vmov	r4, r5, d0
 800a200:	2d00      	cmp	r5, #0
 800a202:	460e      	mov	r6, r1
 800a204:	4619      	mov	r1, r3
 800a206:	462b      	mov	r3, r5
 800a208:	bfbb      	ittet	lt
 800a20a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a20e:	461d      	movlt	r5, r3
 800a210:	2300      	movge	r3, #0
 800a212:	232d      	movlt	r3, #45	; 0x2d
 800a214:	700b      	strb	r3, [r1, #0]
 800a216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a218:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a21c:	4691      	mov	r9, r2
 800a21e:	f023 0820 	bic.w	r8, r3, #32
 800a222:	bfbc      	itt	lt
 800a224:	4622      	movlt	r2, r4
 800a226:	4614      	movlt	r4, r2
 800a228:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a22c:	d005      	beq.n	800a23a <__cvt+0x42>
 800a22e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a232:	d100      	bne.n	800a236 <__cvt+0x3e>
 800a234:	3601      	adds	r6, #1
 800a236:	2102      	movs	r1, #2
 800a238:	e000      	b.n	800a23c <__cvt+0x44>
 800a23a:	2103      	movs	r1, #3
 800a23c:	ab03      	add	r3, sp, #12
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	ab02      	add	r3, sp, #8
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	ec45 4b10 	vmov	d0, r4, r5
 800a248:	4653      	mov	r3, sl
 800a24a:	4632      	mov	r2, r6
 800a24c:	f000 fd0c 	bl	800ac68 <_dtoa_r>
 800a250:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a254:	4607      	mov	r7, r0
 800a256:	d102      	bne.n	800a25e <__cvt+0x66>
 800a258:	f019 0f01 	tst.w	r9, #1
 800a25c:	d022      	beq.n	800a2a4 <__cvt+0xac>
 800a25e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a262:	eb07 0906 	add.w	r9, r7, r6
 800a266:	d110      	bne.n	800a28a <__cvt+0x92>
 800a268:	783b      	ldrb	r3, [r7, #0]
 800a26a:	2b30      	cmp	r3, #48	; 0x30
 800a26c:	d10a      	bne.n	800a284 <__cvt+0x8c>
 800a26e:	2200      	movs	r2, #0
 800a270:	2300      	movs	r3, #0
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 fc2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a27a:	b918      	cbnz	r0, 800a284 <__cvt+0x8c>
 800a27c:	f1c6 0601 	rsb	r6, r6, #1
 800a280:	f8ca 6000 	str.w	r6, [sl]
 800a284:	f8da 3000 	ldr.w	r3, [sl]
 800a288:	4499      	add	r9, r3
 800a28a:	2200      	movs	r2, #0
 800a28c:	2300      	movs	r3, #0
 800a28e:	4620      	mov	r0, r4
 800a290:	4629      	mov	r1, r5
 800a292:	f7f6 fc21 	bl	8000ad8 <__aeabi_dcmpeq>
 800a296:	b108      	cbz	r0, 800a29c <__cvt+0xa4>
 800a298:	f8cd 900c 	str.w	r9, [sp, #12]
 800a29c:	2230      	movs	r2, #48	; 0x30
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	454b      	cmp	r3, r9
 800a2a2:	d307      	bcc.n	800a2b4 <__cvt+0xbc>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2a8:	1bdb      	subs	r3, r3, r7
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	b004      	add	sp, #16
 800a2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b4:	1c59      	adds	r1, r3, #1
 800a2b6:	9103      	str	r1, [sp, #12]
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	e7f0      	b.n	800a29e <__cvt+0xa6>

0800a2bc <__exponent>:
 800a2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	bfb8      	it	lt
 800a2c4:	4249      	neglt	r1, r1
 800a2c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2ca:	bfb4      	ite	lt
 800a2cc:	222d      	movlt	r2, #45	; 0x2d
 800a2ce:	222b      	movge	r2, #43	; 0x2b
 800a2d0:	2909      	cmp	r1, #9
 800a2d2:	7042      	strb	r2, [r0, #1]
 800a2d4:	dd2a      	ble.n	800a32c <__exponent+0x70>
 800a2d6:	f10d 0407 	add.w	r4, sp, #7
 800a2da:	46a4      	mov	ip, r4
 800a2dc:	270a      	movs	r7, #10
 800a2de:	46a6      	mov	lr, r4
 800a2e0:	460a      	mov	r2, r1
 800a2e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ea:	3530      	adds	r5, #48	; 0x30
 800a2ec:	2a63      	cmp	r2, #99	; 0x63
 800a2ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	dcf1      	bgt.n	800a2de <__exponent+0x22>
 800a2fa:	3130      	adds	r1, #48	; 0x30
 800a2fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a300:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a304:	1c44      	adds	r4, r0, #1
 800a306:	4629      	mov	r1, r5
 800a308:	4561      	cmp	r1, ip
 800a30a:	d30a      	bcc.n	800a322 <__exponent+0x66>
 800a30c:	f10d 0209 	add.w	r2, sp, #9
 800a310:	eba2 020e 	sub.w	r2, r2, lr
 800a314:	4565      	cmp	r5, ip
 800a316:	bf88      	it	hi
 800a318:	2200      	movhi	r2, #0
 800a31a:	4413      	add	r3, r2
 800a31c:	1a18      	subs	r0, r3, r0
 800a31e:	b003      	add	sp, #12
 800a320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a322:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a326:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a32a:	e7ed      	b.n	800a308 <__exponent+0x4c>
 800a32c:	2330      	movs	r3, #48	; 0x30
 800a32e:	3130      	adds	r1, #48	; 0x30
 800a330:	7083      	strb	r3, [r0, #2]
 800a332:	70c1      	strb	r1, [r0, #3]
 800a334:	1d03      	adds	r3, r0, #4
 800a336:	e7f1      	b.n	800a31c <__exponent+0x60>

0800a338 <_printf_float>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ed2d 8b02 	vpush	{d8}
 800a340:	b08d      	sub	sp, #52	; 0x34
 800a342:	460c      	mov	r4, r1
 800a344:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a348:	4616      	mov	r6, r2
 800a34a:	461f      	mov	r7, r3
 800a34c:	4605      	mov	r5, r0
 800a34e:	f001 fa77 	bl	800b840 <_localeconv_r>
 800a352:	f8d0 a000 	ldr.w	sl, [r0]
 800a356:	4650      	mov	r0, sl
 800a358:	f7f5 ff42 	bl	80001e0 <strlen>
 800a35c:	2300      	movs	r3, #0
 800a35e:	930a      	str	r3, [sp, #40]	; 0x28
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	f8d8 3000 	ldr.w	r3, [r8]
 800a368:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a36c:	3307      	adds	r3, #7
 800a36e:	f023 0307 	bic.w	r3, r3, #7
 800a372:	f103 0208 	add.w	r2, r3, #8
 800a376:	f8c8 2000 	str.w	r2, [r8]
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a382:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a386:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a38a:	9307      	str	r3, [sp, #28]
 800a38c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a390:	ee08 0a10 	vmov	s16, r0
 800a394:	4b9f      	ldr	r3, [pc, #636]	; (800a614 <_printf_float+0x2dc>)
 800a396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a39a:	f04f 32ff 	mov.w	r2, #4294967295
 800a39e:	f7f6 fbcd 	bl	8000b3c <__aeabi_dcmpun>
 800a3a2:	bb88      	cbnz	r0, 800a408 <_printf_float+0xd0>
 800a3a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3a8:	4b9a      	ldr	r3, [pc, #616]	; (800a614 <_printf_float+0x2dc>)
 800a3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ae:	f7f6 fba7 	bl	8000b00 <__aeabi_dcmple>
 800a3b2:	bb48      	cbnz	r0, 800a408 <_printf_float+0xd0>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f6 fb96 	bl	8000aec <__aeabi_dcmplt>
 800a3c0:	b110      	cbz	r0, 800a3c8 <_printf_float+0x90>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c8:	4b93      	ldr	r3, [pc, #588]	; (800a618 <_printf_float+0x2e0>)
 800a3ca:	4894      	ldr	r0, [pc, #592]	; (800a61c <_printf_float+0x2e4>)
 800a3cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3d0:	bf94      	ite	ls
 800a3d2:	4698      	movls	r8, r3
 800a3d4:	4680      	movhi	r8, r0
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	9b05      	ldr	r3, [sp, #20]
 800a3dc:	f023 0204 	bic.w	r2, r3, #4
 800a3e0:	6022      	str	r2, [r4, #0]
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	9700      	str	r7, [sp, #0]
 800a3e8:	4633      	mov	r3, r6
 800a3ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 f9d8 	bl	800a7a4 <_printf_common>
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f040 8090 	bne.w	800a51a <_printf_float+0x1e2>
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fe:	b00d      	add	sp, #52	; 0x34
 800a400:	ecbd 8b02 	vpop	{d8}
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	4642      	mov	r2, r8
 800a40a:	464b      	mov	r3, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	4649      	mov	r1, r9
 800a410:	f7f6 fb94 	bl	8000b3c <__aeabi_dcmpun>
 800a414:	b140      	cbz	r0, 800a428 <_printf_float+0xf0>
 800a416:	464b      	mov	r3, r9
 800a418:	2b00      	cmp	r3, #0
 800a41a:	bfbc      	itt	lt
 800a41c:	232d      	movlt	r3, #45	; 0x2d
 800a41e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a422:	487f      	ldr	r0, [pc, #508]	; (800a620 <_printf_float+0x2e8>)
 800a424:	4b7f      	ldr	r3, [pc, #508]	; (800a624 <_printf_float+0x2ec>)
 800a426:	e7d1      	b.n	800a3cc <_printf_float+0x94>
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a42e:	9206      	str	r2, [sp, #24]
 800a430:	1c5a      	adds	r2, r3, #1
 800a432:	d13f      	bne.n	800a4b4 <_printf_float+0x17c>
 800a434:	2306      	movs	r3, #6
 800a436:	6063      	str	r3, [r4, #4]
 800a438:	9b05      	ldr	r3, [sp, #20]
 800a43a:	6861      	ldr	r1, [r4, #4]
 800a43c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a440:	2300      	movs	r3, #0
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	ab0a      	add	r3, sp, #40	; 0x28
 800a446:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a44a:	ab09      	add	r3, sp, #36	; 0x24
 800a44c:	ec49 8b10 	vmov	d0, r8, r9
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	6022      	str	r2, [r4, #0]
 800a454:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a458:	4628      	mov	r0, r5
 800a45a:	f7ff fecd 	bl	800a1f8 <__cvt>
 800a45e:	9b06      	ldr	r3, [sp, #24]
 800a460:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a462:	2b47      	cmp	r3, #71	; 0x47
 800a464:	4680      	mov	r8, r0
 800a466:	d108      	bne.n	800a47a <_printf_float+0x142>
 800a468:	1cc8      	adds	r0, r1, #3
 800a46a:	db02      	blt.n	800a472 <_printf_float+0x13a>
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	4299      	cmp	r1, r3
 800a470:	dd41      	ble.n	800a4f6 <_printf_float+0x1be>
 800a472:	f1ab 0b02 	sub.w	fp, fp, #2
 800a476:	fa5f fb8b 	uxtb.w	fp, fp
 800a47a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a47e:	d820      	bhi.n	800a4c2 <_printf_float+0x18a>
 800a480:	3901      	subs	r1, #1
 800a482:	465a      	mov	r2, fp
 800a484:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a488:	9109      	str	r1, [sp, #36]	; 0x24
 800a48a:	f7ff ff17 	bl	800a2bc <__exponent>
 800a48e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a490:	1813      	adds	r3, r2, r0
 800a492:	2a01      	cmp	r2, #1
 800a494:	4681      	mov	r9, r0
 800a496:	6123      	str	r3, [r4, #16]
 800a498:	dc02      	bgt.n	800a4a0 <_printf_float+0x168>
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	07d2      	lsls	r2, r2, #31
 800a49e:	d501      	bpl.n	800a4a4 <_printf_float+0x16c>
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	6123      	str	r3, [r4, #16]
 800a4a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d09c      	beq.n	800a3e6 <_printf_float+0xae>
 800a4ac:	232d      	movs	r3, #45	; 0x2d
 800a4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b2:	e798      	b.n	800a3e6 <_printf_float+0xae>
 800a4b4:	9a06      	ldr	r2, [sp, #24]
 800a4b6:	2a47      	cmp	r2, #71	; 0x47
 800a4b8:	d1be      	bne.n	800a438 <_printf_float+0x100>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d1bc      	bne.n	800a438 <_printf_float+0x100>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e7b9      	b.n	800a436 <_printf_float+0xfe>
 800a4c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4c6:	d118      	bne.n	800a4fa <_printf_float+0x1c2>
 800a4c8:	2900      	cmp	r1, #0
 800a4ca:	6863      	ldr	r3, [r4, #4]
 800a4cc:	dd0b      	ble.n	800a4e6 <_printf_float+0x1ae>
 800a4ce:	6121      	str	r1, [r4, #16]
 800a4d0:	b913      	cbnz	r3, 800a4d8 <_printf_float+0x1a0>
 800a4d2:	6822      	ldr	r2, [r4, #0]
 800a4d4:	07d0      	lsls	r0, r2, #31
 800a4d6:	d502      	bpl.n	800a4de <_printf_float+0x1a6>
 800a4d8:	3301      	adds	r3, #1
 800a4da:	440b      	add	r3, r1
 800a4dc:	6123      	str	r3, [r4, #16]
 800a4de:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4e0:	f04f 0900 	mov.w	r9, #0
 800a4e4:	e7de      	b.n	800a4a4 <_printf_float+0x16c>
 800a4e6:	b913      	cbnz	r3, 800a4ee <_printf_float+0x1b6>
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	07d2      	lsls	r2, r2, #31
 800a4ec:	d501      	bpl.n	800a4f2 <_printf_float+0x1ba>
 800a4ee:	3302      	adds	r3, #2
 800a4f0:	e7f4      	b.n	800a4dc <_printf_float+0x1a4>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e7f2      	b.n	800a4dc <_printf_float+0x1a4>
 800a4f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fc:	4299      	cmp	r1, r3
 800a4fe:	db05      	blt.n	800a50c <_printf_float+0x1d4>
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	6121      	str	r1, [r4, #16]
 800a504:	07d8      	lsls	r0, r3, #31
 800a506:	d5ea      	bpl.n	800a4de <_printf_float+0x1a6>
 800a508:	1c4b      	adds	r3, r1, #1
 800a50a:	e7e7      	b.n	800a4dc <_printf_float+0x1a4>
 800a50c:	2900      	cmp	r1, #0
 800a50e:	bfd4      	ite	le
 800a510:	f1c1 0202 	rsble	r2, r1, #2
 800a514:	2201      	movgt	r2, #1
 800a516:	4413      	add	r3, r2
 800a518:	e7e0      	b.n	800a4dc <_printf_float+0x1a4>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	055a      	lsls	r2, r3, #21
 800a51e:	d407      	bmi.n	800a530 <_printf_float+0x1f8>
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	4642      	mov	r2, r8
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	d12c      	bne.n	800a588 <_printf_float+0x250>
 800a52e:	e764      	b.n	800a3fa <_printf_float+0xc2>
 800a530:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a534:	f240 80e0 	bls.w	800a6f8 <_printf_float+0x3c0>
 800a538:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a53c:	2200      	movs	r2, #0
 800a53e:	2300      	movs	r3, #0
 800a540:	f7f6 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 800a544:	2800      	cmp	r0, #0
 800a546:	d034      	beq.n	800a5b2 <_printf_float+0x27a>
 800a548:	4a37      	ldr	r2, [pc, #220]	; (800a628 <_printf_float+0x2f0>)
 800a54a:	2301      	movs	r3, #1
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af51 	beq.w	800a3fa <_printf_float+0xc2>
 800a558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a55c:	429a      	cmp	r2, r3
 800a55e:	db02      	blt.n	800a566 <_printf_float+0x22e>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	07d8      	lsls	r0, r3, #31
 800a564:	d510      	bpl.n	800a588 <_printf_float+0x250>
 800a566:	ee18 3a10 	vmov	r3, s16
 800a56a:	4652      	mov	r2, sl
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	f43f af41 	beq.w	800a3fa <_printf_float+0xc2>
 800a578:	f04f 0800 	mov.w	r8, #0
 800a57c:	f104 091a 	add.w	r9, r4, #26
 800a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a582:	3b01      	subs	r3, #1
 800a584:	4543      	cmp	r3, r8
 800a586:	dc09      	bgt.n	800a59c <_printf_float+0x264>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	079b      	lsls	r3, r3, #30
 800a58c:	f100 8105 	bmi.w	800a79a <_printf_float+0x462>
 800a590:	68e0      	ldr	r0, [r4, #12]
 800a592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a594:	4298      	cmp	r0, r3
 800a596:	bfb8      	it	lt
 800a598:	4618      	movlt	r0, r3
 800a59a:	e730      	b.n	800a3fe <_printf_float+0xc6>
 800a59c:	2301      	movs	r3, #1
 800a59e:	464a      	mov	r2, r9
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af27 	beq.w	800a3fa <_printf_float+0xc2>
 800a5ac:	f108 0801 	add.w	r8, r8, #1
 800a5b0:	e7e6      	b.n	800a580 <_printf_float+0x248>
 800a5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	dc39      	bgt.n	800a62c <_printf_float+0x2f4>
 800a5b8:	4a1b      	ldr	r2, [pc, #108]	; (800a628 <_printf_float+0x2f0>)
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af19 	beq.w	800a3fa <_printf_float+0xc2>
 800a5c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	d102      	bne.n	800a5d6 <_printf_float+0x29e>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d5d8      	bpl.n	800a588 <_printf_float+0x250>
 800a5d6:	ee18 3a10 	vmov	r3, s16
 800a5da:	4652      	mov	r2, sl
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f af09 	beq.w	800a3fa <_printf_float+0xc2>
 800a5e8:	f04f 0900 	mov.w	r9, #0
 800a5ec:	f104 0a1a 	add.w	sl, r4, #26
 800a5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f2:	425b      	negs	r3, r3
 800a5f4:	454b      	cmp	r3, r9
 800a5f6:	dc01      	bgt.n	800a5fc <_printf_float+0x2c4>
 800a5f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5fa:	e792      	b.n	800a522 <_printf_float+0x1ea>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	4652      	mov	r2, sl
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f aef7 	beq.w	800a3fa <_printf_float+0xc2>
 800a60c:	f109 0901 	add.w	r9, r9, #1
 800a610:	e7ee      	b.n	800a5f0 <_printf_float+0x2b8>
 800a612:	bf00      	nop
 800a614:	7fefffff 	.word	0x7fefffff
 800a618:	0800d73c 	.word	0x0800d73c
 800a61c:	0800d740 	.word	0x0800d740
 800a620:	0800d748 	.word	0x0800d748
 800a624:	0800d744 	.word	0x0800d744
 800a628:	0800d74c 	.word	0x0800d74c
 800a62c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a630:	429a      	cmp	r2, r3
 800a632:	bfa8      	it	ge
 800a634:	461a      	movge	r2, r3
 800a636:	2a00      	cmp	r2, #0
 800a638:	4691      	mov	r9, r2
 800a63a:	dc37      	bgt.n	800a6ac <_printf_float+0x374>
 800a63c:	f04f 0b00 	mov.w	fp, #0
 800a640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a644:	f104 021a 	add.w	r2, r4, #26
 800a648:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	eba3 0309 	sub.w	r3, r3, r9
 800a650:	455b      	cmp	r3, fp
 800a652:	dc33      	bgt.n	800a6bc <_printf_float+0x384>
 800a654:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a658:	429a      	cmp	r2, r3
 800a65a:	db3b      	blt.n	800a6d4 <_printf_float+0x39c>
 800a65c:	6823      	ldr	r3, [r4, #0]
 800a65e:	07da      	lsls	r2, r3, #31
 800a660:	d438      	bmi.n	800a6d4 <_printf_float+0x39c>
 800a662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a664:	9b05      	ldr	r3, [sp, #20]
 800a666:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	eba2 0901 	sub.w	r9, r2, r1
 800a66e:	4599      	cmp	r9, r3
 800a670:	bfa8      	it	ge
 800a672:	4699      	movge	r9, r3
 800a674:	f1b9 0f00 	cmp.w	r9, #0
 800a678:	dc35      	bgt.n	800a6e6 <_printf_float+0x3ae>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a682:	f104 0a1a 	add.w	sl, r4, #26
 800a686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a68a:	1a9b      	subs	r3, r3, r2
 800a68c:	eba3 0309 	sub.w	r3, r3, r9
 800a690:	4543      	cmp	r3, r8
 800a692:	f77f af79 	ble.w	800a588 <_printf_float+0x250>
 800a696:	2301      	movs	r3, #1
 800a698:	4652      	mov	r2, sl
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f aeaa 	beq.w	800a3fa <_printf_float+0xc2>
 800a6a6:	f108 0801 	add.w	r8, r8, #1
 800a6aa:	e7ec      	b.n	800a686 <_printf_float+0x34e>
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	4642      	mov	r2, r8
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	47b8      	blx	r7
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d1c0      	bne.n	800a63c <_printf_float+0x304>
 800a6ba:	e69e      	b.n	800a3fa <_printf_float+0xc2>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	9205      	str	r2, [sp, #20]
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f43f ae97 	beq.w	800a3fa <_printf_float+0xc2>
 800a6cc:	9a05      	ldr	r2, [sp, #20]
 800a6ce:	f10b 0b01 	add.w	fp, fp, #1
 800a6d2:	e7b9      	b.n	800a648 <_printf_float+0x310>
 800a6d4:	ee18 3a10 	vmov	r3, s16
 800a6d8:	4652      	mov	r2, sl
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4628      	mov	r0, r5
 800a6de:	47b8      	blx	r7
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1be      	bne.n	800a662 <_printf_float+0x32a>
 800a6e4:	e689      	b.n	800a3fa <_printf_float+0xc2>
 800a6e6:	9a05      	ldr	r2, [sp, #20]
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	4442      	add	r2, r8
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d1c1      	bne.n	800a67a <_printf_float+0x342>
 800a6f6:	e680      	b.n	800a3fa <_printf_float+0xc2>
 800a6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6fa:	2a01      	cmp	r2, #1
 800a6fc:	dc01      	bgt.n	800a702 <_printf_float+0x3ca>
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d538      	bpl.n	800a774 <_printf_float+0x43c>
 800a702:	2301      	movs	r3, #1
 800a704:	4642      	mov	r2, r8
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f ae74 	beq.w	800a3fa <_printf_float+0xc2>
 800a712:	ee18 3a10 	vmov	r3, s16
 800a716:	4652      	mov	r2, sl
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b8      	blx	r7
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f ae6b 	beq.w	800a3fa <_printf_float+0xc2>
 800a724:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	f7f6 f9d4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a730:	b9d8      	cbnz	r0, 800a76a <_printf_float+0x432>
 800a732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a734:	f108 0201 	add.w	r2, r8, #1
 800a738:	3b01      	subs	r3, #1
 800a73a:	4631      	mov	r1, r6
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b8      	blx	r7
 800a740:	3001      	adds	r0, #1
 800a742:	d10e      	bne.n	800a762 <_printf_float+0x42a>
 800a744:	e659      	b.n	800a3fa <_printf_float+0xc2>
 800a746:	2301      	movs	r3, #1
 800a748:	4652      	mov	r2, sl
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f ae52 	beq.w	800a3fa <_printf_float+0xc2>
 800a756:	f108 0801 	add.w	r8, r8, #1
 800a75a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a75c:	3b01      	subs	r3, #1
 800a75e:	4543      	cmp	r3, r8
 800a760:	dcf1      	bgt.n	800a746 <_printf_float+0x40e>
 800a762:	464b      	mov	r3, r9
 800a764:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a768:	e6dc      	b.n	800a524 <_printf_float+0x1ec>
 800a76a:	f04f 0800 	mov.w	r8, #0
 800a76e:	f104 0a1a 	add.w	sl, r4, #26
 800a772:	e7f2      	b.n	800a75a <_printf_float+0x422>
 800a774:	2301      	movs	r3, #1
 800a776:	4642      	mov	r2, r8
 800a778:	e7df      	b.n	800a73a <_printf_float+0x402>
 800a77a:	2301      	movs	r3, #1
 800a77c:	464a      	mov	r2, r9
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	47b8      	blx	r7
 800a784:	3001      	adds	r0, #1
 800a786:	f43f ae38 	beq.w	800a3fa <_printf_float+0xc2>
 800a78a:	f108 0801 	add.w	r8, r8, #1
 800a78e:	68e3      	ldr	r3, [r4, #12]
 800a790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a792:	1a5b      	subs	r3, r3, r1
 800a794:	4543      	cmp	r3, r8
 800a796:	dcf0      	bgt.n	800a77a <_printf_float+0x442>
 800a798:	e6fa      	b.n	800a590 <_printf_float+0x258>
 800a79a:	f04f 0800 	mov.w	r8, #0
 800a79e:	f104 0919 	add.w	r9, r4, #25
 800a7a2:	e7f4      	b.n	800a78e <_printf_float+0x456>

0800a7a4 <_printf_common>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	4699      	mov	r9, r3
 800a7ac:	688a      	ldr	r2, [r1, #8]
 800a7ae:	690b      	ldr	r3, [r1, #16]
 800a7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	bfb8      	it	lt
 800a7b8:	4613      	movlt	r3, r2
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b10a      	cbz	r2, 800a7ca <_printf_common+0x26>
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	6033      	str	r3, [r6, #0]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	0699      	lsls	r1, r3, #26
 800a7ce:	bf42      	ittt	mi
 800a7d0:	6833      	ldrmi	r3, [r6, #0]
 800a7d2:	3302      	addmi	r3, #2
 800a7d4:	6033      	strmi	r3, [r6, #0]
 800a7d6:	6825      	ldr	r5, [r4, #0]
 800a7d8:	f015 0506 	ands.w	r5, r5, #6
 800a7dc:	d106      	bne.n	800a7ec <_printf_common+0x48>
 800a7de:	f104 0a19 	add.w	sl, r4, #25
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	6832      	ldr	r2, [r6, #0]
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	42ab      	cmp	r3, r5
 800a7ea:	dc26      	bgt.n	800a83a <_printf_common+0x96>
 800a7ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f0:	1e13      	subs	r3, r2, #0
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	bf18      	it	ne
 800a7f6:	2301      	movne	r3, #1
 800a7f8:	0692      	lsls	r2, r2, #26
 800a7fa:	d42b      	bmi.n	800a854 <_printf_common+0xb0>
 800a7fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a800:	4649      	mov	r1, r9
 800a802:	4638      	mov	r0, r7
 800a804:	47c0      	blx	r8
 800a806:	3001      	adds	r0, #1
 800a808:	d01e      	beq.n	800a848 <_printf_common+0xa4>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	68e5      	ldr	r5, [r4, #12]
 800a80e:	6832      	ldr	r2, [r6, #0]
 800a810:	f003 0306 	and.w	r3, r3, #6
 800a814:	2b04      	cmp	r3, #4
 800a816:	bf08      	it	eq
 800a818:	1aad      	subeq	r5, r5, r2
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	bf0c      	ite	eq
 800a820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a824:	2500      	movne	r5, #0
 800a826:	4293      	cmp	r3, r2
 800a828:	bfc4      	itt	gt
 800a82a:	1a9b      	subgt	r3, r3, r2
 800a82c:	18ed      	addgt	r5, r5, r3
 800a82e:	2600      	movs	r6, #0
 800a830:	341a      	adds	r4, #26
 800a832:	42b5      	cmp	r5, r6
 800a834:	d11a      	bne.n	800a86c <_printf_common+0xc8>
 800a836:	2000      	movs	r0, #0
 800a838:	e008      	b.n	800a84c <_printf_common+0xa8>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4652      	mov	r2, sl
 800a83e:	4649      	mov	r1, r9
 800a840:	4638      	mov	r0, r7
 800a842:	47c0      	blx	r8
 800a844:	3001      	adds	r0, #1
 800a846:	d103      	bne.n	800a850 <_printf_common+0xac>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	3501      	adds	r5, #1
 800a852:	e7c6      	b.n	800a7e2 <_printf_common+0x3e>
 800a854:	18e1      	adds	r1, r4, r3
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	2030      	movs	r0, #48	; 0x30
 800a85a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a85e:	4422      	add	r2, r4
 800a860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a868:	3302      	adds	r3, #2
 800a86a:	e7c7      	b.n	800a7fc <_printf_common+0x58>
 800a86c:	2301      	movs	r3, #1
 800a86e:	4622      	mov	r2, r4
 800a870:	4649      	mov	r1, r9
 800a872:	4638      	mov	r0, r7
 800a874:	47c0      	blx	r8
 800a876:	3001      	adds	r0, #1
 800a878:	d0e6      	beq.n	800a848 <_printf_common+0xa4>
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7d9      	b.n	800a832 <_printf_common+0x8e>
	...

0800a880 <_printf_i>:
 800a880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	460c      	mov	r4, r1
 800a886:	4691      	mov	r9, r2
 800a888:	7e27      	ldrb	r7, [r4, #24]
 800a88a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a88c:	2f78      	cmp	r7, #120	; 0x78
 800a88e:	4680      	mov	r8, r0
 800a890:	469a      	mov	sl, r3
 800a892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a896:	d807      	bhi.n	800a8a8 <_printf_i+0x28>
 800a898:	2f62      	cmp	r7, #98	; 0x62
 800a89a:	d80a      	bhi.n	800a8b2 <_printf_i+0x32>
 800a89c:	2f00      	cmp	r7, #0
 800a89e:	f000 80d8 	beq.w	800aa52 <_printf_i+0x1d2>
 800a8a2:	2f58      	cmp	r7, #88	; 0x58
 800a8a4:	f000 80a3 	beq.w	800a9ee <_printf_i+0x16e>
 800a8a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b0:	e03a      	b.n	800a928 <_printf_i+0xa8>
 800a8b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8b6:	2b15      	cmp	r3, #21
 800a8b8:	d8f6      	bhi.n	800a8a8 <_printf_i+0x28>
 800a8ba:	a001      	add	r0, pc, #4	; (adr r0, 800a8c0 <_printf_i+0x40>)
 800a8bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8c0:	0800a919 	.word	0x0800a919
 800a8c4:	0800a92d 	.word	0x0800a92d
 800a8c8:	0800a8a9 	.word	0x0800a8a9
 800a8cc:	0800a8a9 	.word	0x0800a8a9
 800a8d0:	0800a8a9 	.word	0x0800a8a9
 800a8d4:	0800a8a9 	.word	0x0800a8a9
 800a8d8:	0800a92d 	.word	0x0800a92d
 800a8dc:	0800a8a9 	.word	0x0800a8a9
 800a8e0:	0800a8a9 	.word	0x0800a8a9
 800a8e4:	0800a8a9 	.word	0x0800a8a9
 800a8e8:	0800a8a9 	.word	0x0800a8a9
 800a8ec:	0800aa39 	.word	0x0800aa39
 800a8f0:	0800a95d 	.word	0x0800a95d
 800a8f4:	0800aa1b 	.word	0x0800aa1b
 800a8f8:	0800a8a9 	.word	0x0800a8a9
 800a8fc:	0800a8a9 	.word	0x0800a8a9
 800a900:	0800aa5b 	.word	0x0800aa5b
 800a904:	0800a8a9 	.word	0x0800a8a9
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a8a9 	.word	0x0800a8a9
 800a910:	0800a8a9 	.word	0x0800a8a9
 800a914:	0800aa23 	.word	0x0800aa23
 800a918:	680b      	ldr	r3, [r1, #0]
 800a91a:	1d1a      	adds	r2, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	600a      	str	r2, [r1, #0]
 800a920:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a928:	2301      	movs	r3, #1
 800a92a:	e0a3      	b.n	800aa74 <_printf_i+0x1f4>
 800a92c:	6825      	ldr	r5, [r4, #0]
 800a92e:	6808      	ldr	r0, [r1, #0]
 800a930:	062e      	lsls	r6, r5, #24
 800a932:	f100 0304 	add.w	r3, r0, #4
 800a936:	d50a      	bpl.n	800a94e <_printf_i+0xce>
 800a938:	6805      	ldr	r5, [r0, #0]
 800a93a:	600b      	str	r3, [r1, #0]
 800a93c:	2d00      	cmp	r5, #0
 800a93e:	da03      	bge.n	800a948 <_printf_i+0xc8>
 800a940:	232d      	movs	r3, #45	; 0x2d
 800a942:	426d      	negs	r5, r5
 800a944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a948:	485e      	ldr	r0, [pc, #376]	; (800aac4 <_printf_i+0x244>)
 800a94a:	230a      	movs	r3, #10
 800a94c:	e019      	b.n	800a982 <_printf_i+0x102>
 800a94e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a952:	6805      	ldr	r5, [r0, #0]
 800a954:	600b      	str	r3, [r1, #0]
 800a956:	bf18      	it	ne
 800a958:	b22d      	sxthne	r5, r5
 800a95a:	e7ef      	b.n	800a93c <_printf_i+0xbc>
 800a95c:	680b      	ldr	r3, [r1, #0]
 800a95e:	6825      	ldr	r5, [r4, #0]
 800a960:	1d18      	adds	r0, r3, #4
 800a962:	6008      	str	r0, [r1, #0]
 800a964:	0628      	lsls	r0, r5, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xec>
 800a968:	681d      	ldr	r5, [r3, #0]
 800a96a:	e002      	b.n	800a972 <_printf_i+0xf2>
 800a96c:	0669      	lsls	r1, r5, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xe8>
 800a970:	881d      	ldrh	r5, [r3, #0]
 800a972:	4854      	ldr	r0, [pc, #336]	; (800aac4 <_printf_i+0x244>)
 800a974:	2f6f      	cmp	r7, #111	; 0x6f
 800a976:	bf0c      	ite	eq
 800a978:	2308      	moveq	r3, #8
 800a97a:	230a      	movne	r3, #10
 800a97c:	2100      	movs	r1, #0
 800a97e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a982:	6866      	ldr	r6, [r4, #4]
 800a984:	60a6      	str	r6, [r4, #8]
 800a986:	2e00      	cmp	r6, #0
 800a988:	bfa2      	ittt	ge
 800a98a:	6821      	ldrge	r1, [r4, #0]
 800a98c:	f021 0104 	bicge.w	r1, r1, #4
 800a990:	6021      	strge	r1, [r4, #0]
 800a992:	b90d      	cbnz	r5, 800a998 <_printf_i+0x118>
 800a994:	2e00      	cmp	r6, #0
 800a996:	d04d      	beq.n	800aa34 <_printf_i+0x1b4>
 800a998:	4616      	mov	r6, r2
 800a99a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a99e:	fb03 5711 	mls	r7, r3, r1, r5
 800a9a2:	5dc7      	ldrb	r7, [r0, r7]
 800a9a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9a8:	462f      	mov	r7, r5
 800a9aa:	42bb      	cmp	r3, r7
 800a9ac:	460d      	mov	r5, r1
 800a9ae:	d9f4      	bls.n	800a99a <_printf_i+0x11a>
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	d10b      	bne.n	800a9cc <_printf_i+0x14c>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	07df      	lsls	r7, r3, #31
 800a9b8:	d508      	bpl.n	800a9cc <_printf_i+0x14c>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	6861      	ldr	r1, [r4, #4]
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	bfde      	ittt	le
 800a9c2:	2330      	movle	r3, #48	; 0x30
 800a9c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9cc:	1b92      	subs	r2, r2, r6
 800a9ce:	6122      	str	r2, [r4, #16]
 800a9d0:	f8cd a000 	str.w	sl, [sp]
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	aa03      	add	r2, sp, #12
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4640      	mov	r0, r8
 800a9dc:	f7ff fee2 	bl	800a7a4 <_printf_common>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d14c      	bne.n	800aa7e <_printf_i+0x1fe>
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	b004      	add	sp, #16
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	4835      	ldr	r0, [pc, #212]	; (800aac4 <_printf_i+0x244>)
 800a9f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	680e      	ldr	r6, [r1, #0]
 800a9f8:	061f      	lsls	r7, r3, #24
 800a9fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a9fe:	600e      	str	r6, [r1, #0]
 800aa00:	d514      	bpl.n	800aa2c <_printf_i+0x1ac>
 800aa02:	07d9      	lsls	r1, r3, #31
 800aa04:	bf44      	itt	mi
 800aa06:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0a:	6023      	strmi	r3, [r4, #0]
 800aa0c:	b91d      	cbnz	r5, 800aa16 <_printf_i+0x196>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	f023 0320 	bic.w	r3, r3, #32
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	2310      	movs	r3, #16
 800aa18:	e7b0      	b.n	800a97c <_printf_i+0xfc>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f043 0320 	orr.w	r3, r3, #32
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	2378      	movs	r3, #120	; 0x78
 800aa24:	4828      	ldr	r0, [pc, #160]	; (800aac8 <_printf_i+0x248>)
 800aa26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2a:	e7e3      	b.n	800a9f4 <_printf_i+0x174>
 800aa2c:	065e      	lsls	r6, r3, #25
 800aa2e:	bf48      	it	mi
 800aa30:	b2ad      	uxthmi	r5, r5
 800aa32:	e7e6      	b.n	800aa02 <_printf_i+0x182>
 800aa34:	4616      	mov	r6, r2
 800aa36:	e7bb      	b.n	800a9b0 <_printf_i+0x130>
 800aa38:	680b      	ldr	r3, [r1, #0]
 800aa3a:	6826      	ldr	r6, [r4, #0]
 800aa3c:	6960      	ldr	r0, [r4, #20]
 800aa3e:	1d1d      	adds	r5, r3, #4
 800aa40:	600d      	str	r5, [r1, #0]
 800aa42:	0635      	lsls	r5, r6, #24
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	d501      	bpl.n	800aa4c <_printf_i+0x1cc>
 800aa48:	6018      	str	r0, [r3, #0]
 800aa4a:	e002      	b.n	800aa52 <_printf_i+0x1d2>
 800aa4c:	0671      	lsls	r1, r6, #25
 800aa4e:	d5fb      	bpl.n	800aa48 <_printf_i+0x1c8>
 800aa50:	8018      	strh	r0, [r3, #0]
 800aa52:	2300      	movs	r3, #0
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	4616      	mov	r6, r2
 800aa58:	e7ba      	b.n	800a9d0 <_printf_i+0x150>
 800aa5a:	680b      	ldr	r3, [r1, #0]
 800aa5c:	1d1a      	adds	r2, r3, #4
 800aa5e:	600a      	str	r2, [r1, #0]
 800aa60:	681e      	ldr	r6, [r3, #0]
 800aa62:	6862      	ldr	r2, [r4, #4]
 800aa64:	2100      	movs	r1, #0
 800aa66:	4630      	mov	r0, r6
 800aa68:	f7f5 fbc2 	bl	80001f0 <memchr>
 800aa6c:	b108      	cbz	r0, 800aa72 <_printf_i+0x1f2>
 800aa6e:	1b80      	subs	r0, r0, r6
 800aa70:	6060      	str	r0, [r4, #4]
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	2300      	movs	r3, #0
 800aa78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa7c:	e7a8      	b.n	800a9d0 <_printf_i+0x150>
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	4632      	mov	r2, r6
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d0ab      	beq.n	800a9e4 <_printf_i+0x164>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	079b      	lsls	r3, r3, #30
 800aa90:	d413      	bmi.n	800aaba <_printf_i+0x23a>
 800aa92:	68e0      	ldr	r0, [r4, #12]
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	4298      	cmp	r0, r3
 800aa98:	bfb8      	it	lt
 800aa9a:	4618      	movlt	r0, r3
 800aa9c:	e7a4      	b.n	800a9e8 <_printf_i+0x168>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	47d0      	blx	sl
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d09b      	beq.n	800a9e4 <_printf_i+0x164>
 800aaac:	3501      	adds	r5, #1
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	9903      	ldr	r1, [sp, #12]
 800aab2:	1a5b      	subs	r3, r3, r1
 800aab4:	42ab      	cmp	r3, r5
 800aab6:	dcf2      	bgt.n	800aa9e <_printf_i+0x21e>
 800aab8:	e7eb      	b.n	800aa92 <_printf_i+0x212>
 800aaba:	2500      	movs	r5, #0
 800aabc:	f104 0619 	add.w	r6, r4, #25
 800aac0:	e7f5      	b.n	800aaae <_printf_i+0x22e>
 800aac2:	bf00      	nop
 800aac4:	0800d74e 	.word	0x0800d74e
 800aac8:	0800d75f 	.word	0x0800d75f

0800aacc <siprintf>:
 800aacc:	b40e      	push	{r1, r2, r3}
 800aace:	b500      	push	{lr}
 800aad0:	b09c      	sub	sp, #112	; 0x70
 800aad2:	ab1d      	add	r3, sp, #116	; 0x74
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	9006      	str	r0, [sp, #24]
 800aad8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aadc:	4809      	ldr	r0, [pc, #36]	; (800ab04 <siprintf+0x38>)
 800aade:	9107      	str	r1, [sp, #28]
 800aae0:	9104      	str	r1, [sp, #16]
 800aae2:	4909      	ldr	r1, [pc, #36]	; (800ab08 <siprintf+0x3c>)
 800aae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae8:	9105      	str	r1, [sp, #20]
 800aaea:	6800      	ldr	r0, [r0, #0]
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	a902      	add	r1, sp, #8
 800aaf0:	f001 fb46 	bl	800c180 <_svfiprintf_r>
 800aaf4:	9b02      	ldr	r3, [sp, #8]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	701a      	strb	r2, [r3, #0]
 800aafa:	b01c      	add	sp, #112	; 0x70
 800aafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab00:	b003      	add	sp, #12
 800ab02:	4770      	bx	lr
 800ab04:	20000024 	.word	0x20000024
 800ab08:	ffff0208 	.word	0xffff0208

0800ab0c <strcat>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4602      	mov	r2, r0
 800ab10:	7814      	ldrb	r4, [r2, #0]
 800ab12:	4613      	mov	r3, r2
 800ab14:	3201      	adds	r2, #1
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	d1fa      	bne.n	800ab10 <strcat+0x4>
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab24:	2a00      	cmp	r2, #0
 800ab26:	d1f9      	bne.n	800ab1c <strcat+0x10>
 800ab28:	bd10      	pop	{r4, pc}

0800ab2a <strncpy>:
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	3901      	subs	r1, #1
 800ab2e:	4603      	mov	r3, r0
 800ab30:	b132      	cbz	r2, 800ab40 <strncpy+0x16>
 800ab32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ab36:	f803 4b01 	strb.w	r4, [r3], #1
 800ab3a:	3a01      	subs	r2, #1
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	d1f7      	bne.n	800ab30 <strncpy+0x6>
 800ab40:	441a      	add	r2, r3
 800ab42:	2100      	movs	r1, #0
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d100      	bne.n	800ab4a <strncpy+0x20>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab4e:	e7f9      	b.n	800ab44 <strncpy+0x1a>

0800ab50 <quorem>:
 800ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	6903      	ldr	r3, [r0, #16]
 800ab56:	690c      	ldr	r4, [r1, #16]
 800ab58:	42a3      	cmp	r3, r4
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	f2c0 8081 	blt.w	800ac62 <quorem+0x112>
 800ab60:	3c01      	subs	r4, #1
 800ab62:	f101 0814 	add.w	r8, r1, #20
 800ab66:	f100 0514 	add.w	r5, r0, #20
 800ab6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ab80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab84:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab88:	d331      	bcc.n	800abee <quorem+0x9e>
 800ab8a:	f04f 0e00 	mov.w	lr, #0
 800ab8e:	4640      	mov	r0, r8
 800ab90:	46ac      	mov	ip, r5
 800ab92:	46f2      	mov	sl, lr
 800ab94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ab98:	b293      	uxth	r3, r2
 800ab9a:	fb06 e303 	mla	r3, r6, r3, lr
 800ab9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	ebaa 0303 	sub.w	r3, sl, r3
 800aba8:	0c12      	lsrs	r2, r2, #16
 800abaa:	f8dc a000 	ldr.w	sl, [ip]
 800abae:	fb06 e202 	mla	r2, r6, r2, lr
 800abb2:	fa13 f38a 	uxtah	r3, r3, sl
 800abb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abba:	fa1f fa82 	uxth.w	sl, r2
 800abbe:	f8dc 2000 	ldr.w	r2, [ip]
 800abc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800abc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800abca:	b29b      	uxth	r3, r3
 800abcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800abd0:	4581      	cmp	r9, r0
 800abd2:	f84c 3b04 	str.w	r3, [ip], #4
 800abd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800abda:	d2db      	bcs.n	800ab94 <quorem+0x44>
 800abdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800abe0:	b92b      	cbnz	r3, 800abee <quorem+0x9e>
 800abe2:	9b01      	ldr	r3, [sp, #4]
 800abe4:	3b04      	subs	r3, #4
 800abe6:	429d      	cmp	r5, r3
 800abe8:	461a      	mov	r2, r3
 800abea:	d32e      	bcc.n	800ac4a <quorem+0xfa>
 800abec:	613c      	str	r4, [r7, #16]
 800abee:	4638      	mov	r0, r7
 800abf0:	f001 f8b0 	bl	800bd54 <__mcmp>
 800abf4:	2800      	cmp	r0, #0
 800abf6:	db24      	blt.n	800ac42 <quorem+0xf2>
 800abf8:	3601      	adds	r6, #1
 800abfa:	4628      	mov	r0, r5
 800abfc:	f04f 0c00 	mov.w	ip, #0
 800ac00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac04:	f8d0 e000 	ldr.w	lr, [r0]
 800ac08:	b293      	uxth	r3, r2
 800ac0a:	ebac 0303 	sub.w	r3, ip, r3
 800ac0e:	0c12      	lsrs	r2, r2, #16
 800ac10:	fa13 f38e 	uxtah	r3, r3, lr
 800ac14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ac18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac22:	45c1      	cmp	r9, r8
 800ac24:	f840 3b04 	str.w	r3, [r0], #4
 800ac28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ac2c:	d2e8      	bcs.n	800ac00 <quorem+0xb0>
 800ac2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac36:	b922      	cbnz	r2, 800ac42 <quorem+0xf2>
 800ac38:	3b04      	subs	r3, #4
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	d30a      	bcc.n	800ac56 <quorem+0x106>
 800ac40:	613c      	str	r4, [r7, #16]
 800ac42:	4630      	mov	r0, r6
 800ac44:	b003      	add	sp, #12
 800ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4a:	6812      	ldr	r2, [r2, #0]
 800ac4c:	3b04      	subs	r3, #4
 800ac4e:	2a00      	cmp	r2, #0
 800ac50:	d1cc      	bne.n	800abec <quorem+0x9c>
 800ac52:	3c01      	subs	r4, #1
 800ac54:	e7c7      	b.n	800abe6 <quorem+0x96>
 800ac56:	6812      	ldr	r2, [r2, #0]
 800ac58:	3b04      	subs	r3, #4
 800ac5a:	2a00      	cmp	r2, #0
 800ac5c:	d1f0      	bne.n	800ac40 <quorem+0xf0>
 800ac5e:	3c01      	subs	r4, #1
 800ac60:	e7eb      	b.n	800ac3a <quorem+0xea>
 800ac62:	2000      	movs	r0, #0
 800ac64:	e7ee      	b.n	800ac44 <quorem+0xf4>
	...

0800ac68 <_dtoa_r>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	ed2d 8b02 	vpush	{d8}
 800ac70:	ec57 6b10 	vmov	r6, r7, d0
 800ac74:	b095      	sub	sp, #84	; 0x54
 800ac76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ac82:	4604      	mov	r4, r0
 800ac84:	9209      	str	r2, [sp, #36]	; 0x24
 800ac86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac88:	b975      	cbnz	r5, 800aca8 <_dtoa_r+0x40>
 800ac8a:	2010      	movs	r0, #16
 800ac8c:	f000 fddc 	bl	800b848 <malloc>
 800ac90:	4602      	mov	r2, r0
 800ac92:	6260      	str	r0, [r4, #36]	; 0x24
 800ac94:	b920      	cbnz	r0, 800aca0 <_dtoa_r+0x38>
 800ac96:	4bb2      	ldr	r3, [pc, #712]	; (800af60 <_dtoa_r+0x2f8>)
 800ac98:	21ea      	movs	r1, #234	; 0xea
 800ac9a:	48b2      	ldr	r0, [pc, #712]	; (800af64 <_dtoa_r+0x2fc>)
 800ac9c:	f001 fb80 	bl	800c3a0 <__assert_func>
 800aca0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aca4:	6005      	str	r5, [r0, #0]
 800aca6:	60c5      	str	r5, [r0, #12]
 800aca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acaa:	6819      	ldr	r1, [r3, #0]
 800acac:	b151      	cbz	r1, 800acc4 <_dtoa_r+0x5c>
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	604a      	str	r2, [r1, #4]
 800acb2:	2301      	movs	r3, #1
 800acb4:	4093      	lsls	r3, r2
 800acb6:	608b      	str	r3, [r1, #8]
 800acb8:	4620      	mov	r0, r4
 800acba:	f000 fe0d 	bl	800b8d8 <_Bfree>
 800acbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	1e3b      	subs	r3, r7, #0
 800acc6:	bfb9      	ittee	lt
 800acc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800accc:	9303      	strlt	r3, [sp, #12]
 800acce:	2300      	movge	r3, #0
 800acd0:	f8c8 3000 	strge.w	r3, [r8]
 800acd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800acd8:	4ba3      	ldr	r3, [pc, #652]	; (800af68 <_dtoa_r+0x300>)
 800acda:	bfbc      	itt	lt
 800acdc:	2201      	movlt	r2, #1
 800acde:	f8c8 2000 	strlt.w	r2, [r8]
 800ace2:	ea33 0309 	bics.w	r3, r3, r9
 800ace6:	d11b      	bne.n	800ad20 <_dtoa_r+0xb8>
 800ace8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acea:	f242 730f 	movw	r3, #9999	; 0x270f
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acf4:	4333      	orrs	r3, r6
 800acf6:	f000 857a 	beq.w	800b7ee <_dtoa_r+0xb86>
 800acfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acfc:	b963      	cbnz	r3, 800ad18 <_dtoa_r+0xb0>
 800acfe:	4b9b      	ldr	r3, [pc, #620]	; (800af6c <_dtoa_r+0x304>)
 800ad00:	e024      	b.n	800ad4c <_dtoa_r+0xe4>
 800ad02:	4b9b      	ldr	r3, [pc, #620]	; (800af70 <_dtoa_r+0x308>)
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	3308      	adds	r3, #8
 800ad08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	9800      	ldr	r0, [sp, #0]
 800ad0e:	b015      	add	sp, #84	; 0x54
 800ad10:	ecbd 8b02 	vpop	{d8}
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	4b94      	ldr	r3, [pc, #592]	; (800af6c <_dtoa_r+0x304>)
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	3303      	adds	r3, #3
 800ad1e:	e7f3      	b.n	800ad08 <_dtoa_r+0xa0>
 800ad20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	ec51 0b17 	vmov	r0, r1, d7
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ad30:	f7f5 fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad34:	4680      	mov	r8, r0
 800ad36:	b158      	cbz	r0, 800ad50 <_dtoa_r+0xe8>
 800ad38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f000 8551 	beq.w	800b7e8 <_dtoa_r+0xb80>
 800ad46:	488b      	ldr	r0, [pc, #556]	; (800af74 <_dtoa_r+0x30c>)
 800ad48:	6018      	str	r0, [r3, #0]
 800ad4a:	1e43      	subs	r3, r0, #1
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	e7dd      	b.n	800ad0c <_dtoa_r+0xa4>
 800ad50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ad54:	aa12      	add	r2, sp, #72	; 0x48
 800ad56:	a913      	add	r1, sp, #76	; 0x4c
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f001 f89f 	bl	800be9c <__d2b>
 800ad5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad62:	4683      	mov	fp, r0
 800ad64:	2d00      	cmp	r5, #0
 800ad66:	d07c      	beq.n	800ae62 <_dtoa_r+0x1fa>
 800ad68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ad6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ad76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ad7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ad7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ad82:	4b7d      	ldr	r3, [pc, #500]	; (800af78 <_dtoa_r+0x310>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fa85 	bl	8000298 <__aeabi_dsub>
 800ad8e:	a36e      	add	r3, pc, #440	; (adr r3, 800af48 <_dtoa_r+0x2e0>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	f7f5 fc38 	bl	8000608 <__aeabi_dmul>
 800ad98:	a36d      	add	r3, pc, #436	; (adr r3, 800af50 <_dtoa_r+0x2e8>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fa7d 	bl	800029c <__adddf3>
 800ada2:	4606      	mov	r6, r0
 800ada4:	4628      	mov	r0, r5
 800ada6:	460f      	mov	r7, r1
 800ada8:	f7f5 fbc4 	bl	8000534 <__aeabi_i2d>
 800adac:	a36a      	add	r3, pc, #424	; (adr r3, 800af58 <_dtoa_r+0x2f0>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f7f5 fc29 	bl	8000608 <__aeabi_dmul>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4630      	mov	r0, r6
 800adbc:	4639      	mov	r1, r7
 800adbe:	f7f5 fa6d 	bl	800029c <__adddf3>
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	f7f5 fecf 	bl	8000b68 <__aeabi_d2iz>
 800adca:	2200      	movs	r2, #0
 800adcc:	4682      	mov	sl, r0
 800adce:	2300      	movs	r3, #0
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fe8a 	bl	8000aec <__aeabi_dcmplt>
 800add8:	b148      	cbz	r0, 800adee <_dtoa_r+0x186>
 800adda:	4650      	mov	r0, sl
 800addc:	f7f5 fbaa 	bl	8000534 <__aeabi_i2d>
 800ade0:	4632      	mov	r2, r6
 800ade2:	463b      	mov	r3, r7
 800ade4:	f7f5 fe78 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade8:	b908      	cbnz	r0, 800adee <_dtoa_r+0x186>
 800adea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adee:	f1ba 0f16 	cmp.w	sl, #22
 800adf2:	d854      	bhi.n	800ae9e <_dtoa_r+0x236>
 800adf4:	4b61      	ldr	r3, [pc, #388]	; (800af7c <_dtoa_r+0x314>)
 800adf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800adfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae02:	f7f5 fe73 	bl	8000aec <__aeabi_dcmplt>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d04b      	beq.n	800aea2 <_dtoa_r+0x23a>
 800ae0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae0e:	2300      	movs	r3, #0
 800ae10:	930e      	str	r3, [sp, #56]	; 0x38
 800ae12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae14:	1b5d      	subs	r5, r3, r5
 800ae16:	1e6b      	subs	r3, r5, #1
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	bf43      	ittte	mi
 800ae1c:	2300      	movmi	r3, #0
 800ae1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800ae22:	9304      	strmi	r3, [sp, #16]
 800ae24:	f04f 0800 	movpl.w	r8, #0
 800ae28:	f1ba 0f00 	cmp.w	sl, #0
 800ae2c:	db3b      	blt.n	800aea6 <_dtoa_r+0x23e>
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ae34:	4453      	add	r3, sl
 800ae36:	9304      	str	r3, [sp, #16]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9306      	str	r3, [sp, #24]
 800ae3c:	9b05      	ldr	r3, [sp, #20]
 800ae3e:	2b09      	cmp	r3, #9
 800ae40:	d869      	bhi.n	800af16 <_dtoa_r+0x2ae>
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	bfc4      	itt	gt
 800ae46:	3b04      	subgt	r3, #4
 800ae48:	9305      	strgt	r3, [sp, #20]
 800ae4a:	9b05      	ldr	r3, [sp, #20]
 800ae4c:	f1a3 0302 	sub.w	r3, r3, #2
 800ae50:	bfcc      	ite	gt
 800ae52:	2500      	movgt	r5, #0
 800ae54:	2501      	movle	r5, #1
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d869      	bhi.n	800af2e <_dtoa_r+0x2c6>
 800ae5a:	e8df f003 	tbb	[pc, r3]
 800ae5e:	4e2c      	.short	0x4e2c
 800ae60:	5a4c      	.short	0x5a4c
 800ae62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ae66:	441d      	add	r5, r3
 800ae68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ae6c:	2b20      	cmp	r3, #32
 800ae6e:	bfc1      	itttt	gt
 800ae70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ae74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ae78:	fa09 f303 	lslgt.w	r3, r9, r3
 800ae7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ae80:	bfda      	itte	le
 800ae82:	f1c3 0320 	rsble	r3, r3, #32
 800ae86:	fa06 f003 	lslle.w	r0, r6, r3
 800ae8a:	4318      	orrgt	r0, r3
 800ae8c:	f7f5 fb42 	bl	8000514 <__aeabi_ui2d>
 800ae90:	2301      	movs	r3, #1
 800ae92:	4606      	mov	r6, r0
 800ae94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ae98:	3d01      	subs	r5, #1
 800ae9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ae9c:	e771      	b.n	800ad82 <_dtoa_r+0x11a>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e7b6      	b.n	800ae10 <_dtoa_r+0x1a8>
 800aea2:	900e      	str	r0, [sp, #56]	; 0x38
 800aea4:	e7b5      	b.n	800ae12 <_dtoa_r+0x1aa>
 800aea6:	f1ca 0300 	rsb	r3, sl, #0
 800aeaa:	9306      	str	r3, [sp, #24]
 800aeac:	2300      	movs	r3, #0
 800aeae:	eba8 080a 	sub.w	r8, r8, sl
 800aeb2:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb4:	e7c2      	b.n	800ae3c <_dtoa_r+0x1d4>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9308      	str	r3, [sp, #32]
 800aeba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	dc39      	bgt.n	800af34 <_dtoa_r+0x2cc>
 800aec0:	f04f 0901 	mov.w	r9, #1
 800aec4:	f8cd 9004 	str.w	r9, [sp, #4]
 800aec8:	464b      	mov	r3, r9
 800aeca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aece:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aed0:	2200      	movs	r2, #0
 800aed2:	6042      	str	r2, [r0, #4]
 800aed4:	2204      	movs	r2, #4
 800aed6:	f102 0614 	add.w	r6, r2, #20
 800aeda:	429e      	cmp	r6, r3
 800aedc:	6841      	ldr	r1, [r0, #4]
 800aede:	d92f      	bls.n	800af40 <_dtoa_r+0x2d8>
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fcb9 	bl	800b858 <_Balloc>
 800aee6:	9000      	str	r0, [sp, #0]
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d14b      	bne.n	800af84 <_dtoa_r+0x31c>
 800aeec:	4b24      	ldr	r3, [pc, #144]	; (800af80 <_dtoa_r+0x318>)
 800aeee:	4602      	mov	r2, r0
 800aef0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aef4:	e6d1      	b.n	800ac9a <_dtoa_r+0x32>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e7de      	b.n	800aeb8 <_dtoa_r+0x250>
 800aefa:	2300      	movs	r3, #0
 800aefc:	9308      	str	r3, [sp, #32]
 800aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af00:	eb0a 0903 	add.w	r9, sl, r3
 800af04:	f109 0301 	add.w	r3, r9, #1
 800af08:	2b01      	cmp	r3, #1
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	bfb8      	it	lt
 800af0e:	2301      	movlt	r3, #1
 800af10:	e7dd      	b.n	800aece <_dtoa_r+0x266>
 800af12:	2301      	movs	r3, #1
 800af14:	e7f2      	b.n	800aefc <_dtoa_r+0x294>
 800af16:	2501      	movs	r5, #1
 800af18:	2300      	movs	r3, #0
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	9508      	str	r5, [sp, #32]
 800af1e:	f04f 39ff 	mov.w	r9, #4294967295
 800af22:	2200      	movs	r2, #0
 800af24:	f8cd 9004 	str.w	r9, [sp, #4]
 800af28:	2312      	movs	r3, #18
 800af2a:	9209      	str	r2, [sp, #36]	; 0x24
 800af2c:	e7cf      	b.n	800aece <_dtoa_r+0x266>
 800af2e:	2301      	movs	r3, #1
 800af30:	9308      	str	r3, [sp, #32]
 800af32:	e7f4      	b.n	800af1e <_dtoa_r+0x2b6>
 800af34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800af38:	f8cd 9004 	str.w	r9, [sp, #4]
 800af3c:	464b      	mov	r3, r9
 800af3e:	e7c6      	b.n	800aece <_dtoa_r+0x266>
 800af40:	3101      	adds	r1, #1
 800af42:	6041      	str	r1, [r0, #4]
 800af44:	0052      	lsls	r2, r2, #1
 800af46:	e7c6      	b.n	800aed6 <_dtoa_r+0x26e>
 800af48:	636f4361 	.word	0x636f4361
 800af4c:	3fd287a7 	.word	0x3fd287a7
 800af50:	8b60c8b3 	.word	0x8b60c8b3
 800af54:	3fc68a28 	.word	0x3fc68a28
 800af58:	509f79fb 	.word	0x509f79fb
 800af5c:	3fd34413 	.word	0x3fd34413
 800af60:	0800d77d 	.word	0x0800d77d
 800af64:	0800d794 	.word	0x0800d794
 800af68:	7ff00000 	.word	0x7ff00000
 800af6c:	0800d779 	.word	0x0800d779
 800af70:	0800d770 	.word	0x0800d770
 800af74:	0800d74d 	.word	0x0800d74d
 800af78:	3ff80000 	.word	0x3ff80000
 800af7c:	0800d890 	.word	0x0800d890
 800af80:	0800d7f3 	.word	0x0800d7f3
 800af84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af86:	9a00      	ldr	r2, [sp, #0]
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	9b01      	ldr	r3, [sp, #4]
 800af8c:	2b0e      	cmp	r3, #14
 800af8e:	f200 80ad 	bhi.w	800b0ec <_dtoa_r+0x484>
 800af92:	2d00      	cmp	r5, #0
 800af94:	f000 80aa 	beq.w	800b0ec <_dtoa_r+0x484>
 800af98:	f1ba 0f00 	cmp.w	sl, #0
 800af9c:	dd36      	ble.n	800b00c <_dtoa_r+0x3a4>
 800af9e:	4ac3      	ldr	r2, [pc, #780]	; (800b2ac <_dtoa_r+0x644>)
 800afa0:	f00a 030f 	and.w	r3, sl, #15
 800afa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800afa8:	ed93 7b00 	vldr	d7, [r3]
 800afac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800afb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800afb4:	eeb0 8a47 	vmov.f32	s16, s14
 800afb8:	eef0 8a67 	vmov.f32	s17, s15
 800afbc:	d016      	beq.n	800afec <_dtoa_r+0x384>
 800afbe:	4bbc      	ldr	r3, [pc, #752]	; (800b2b0 <_dtoa_r+0x648>)
 800afc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800afc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afc8:	f7f5 fc48 	bl	800085c <__aeabi_ddiv>
 800afcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd0:	f007 070f 	and.w	r7, r7, #15
 800afd4:	2503      	movs	r5, #3
 800afd6:	4eb6      	ldr	r6, [pc, #728]	; (800b2b0 <_dtoa_r+0x648>)
 800afd8:	b957      	cbnz	r7, 800aff0 <_dtoa_r+0x388>
 800afda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afde:	ec53 2b18 	vmov	r2, r3, d8
 800afe2:	f7f5 fc3b 	bl	800085c <__aeabi_ddiv>
 800afe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afea:	e029      	b.n	800b040 <_dtoa_r+0x3d8>
 800afec:	2502      	movs	r5, #2
 800afee:	e7f2      	b.n	800afd6 <_dtoa_r+0x36e>
 800aff0:	07f9      	lsls	r1, r7, #31
 800aff2:	d508      	bpl.n	800b006 <_dtoa_r+0x39e>
 800aff4:	ec51 0b18 	vmov	r0, r1, d8
 800aff8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800affc:	f7f5 fb04 	bl	8000608 <__aeabi_dmul>
 800b000:	ec41 0b18 	vmov	d8, r0, r1
 800b004:	3501      	adds	r5, #1
 800b006:	107f      	asrs	r7, r7, #1
 800b008:	3608      	adds	r6, #8
 800b00a:	e7e5      	b.n	800afd8 <_dtoa_r+0x370>
 800b00c:	f000 80a6 	beq.w	800b15c <_dtoa_r+0x4f4>
 800b010:	f1ca 0600 	rsb	r6, sl, #0
 800b014:	4ba5      	ldr	r3, [pc, #660]	; (800b2ac <_dtoa_r+0x644>)
 800b016:	4fa6      	ldr	r7, [pc, #664]	; (800b2b0 <_dtoa_r+0x648>)
 800b018:	f006 020f 	and.w	r2, r6, #15
 800b01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b028:	f7f5 faee 	bl	8000608 <__aeabi_dmul>
 800b02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b030:	1136      	asrs	r6, r6, #4
 800b032:	2300      	movs	r3, #0
 800b034:	2502      	movs	r5, #2
 800b036:	2e00      	cmp	r6, #0
 800b038:	f040 8085 	bne.w	800b146 <_dtoa_r+0x4de>
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d1d2      	bne.n	800afe6 <_dtoa_r+0x37e>
 800b040:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b042:	2b00      	cmp	r3, #0
 800b044:	f000 808c 	beq.w	800b160 <_dtoa_r+0x4f8>
 800b048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b04c:	4b99      	ldr	r3, [pc, #612]	; (800b2b4 <_dtoa_r+0x64c>)
 800b04e:	2200      	movs	r2, #0
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	f7f5 fd4a 	bl	8000aec <__aeabi_dcmplt>
 800b058:	2800      	cmp	r0, #0
 800b05a:	f000 8081 	beq.w	800b160 <_dtoa_r+0x4f8>
 800b05e:	9b01      	ldr	r3, [sp, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d07d      	beq.n	800b160 <_dtoa_r+0x4f8>
 800b064:	f1b9 0f00 	cmp.w	r9, #0
 800b068:	dd3c      	ble.n	800b0e4 <_dtoa_r+0x47c>
 800b06a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b06e:	9307      	str	r3, [sp, #28]
 800b070:	2200      	movs	r2, #0
 800b072:	4b91      	ldr	r3, [pc, #580]	; (800b2b8 <_dtoa_r+0x650>)
 800b074:	4630      	mov	r0, r6
 800b076:	4639      	mov	r1, r7
 800b078:	f7f5 fac6 	bl	8000608 <__aeabi_dmul>
 800b07c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b080:	3501      	adds	r5, #1
 800b082:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b086:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b08a:	4628      	mov	r0, r5
 800b08c:	f7f5 fa52 	bl	8000534 <__aeabi_i2d>
 800b090:	4632      	mov	r2, r6
 800b092:	463b      	mov	r3, r7
 800b094:	f7f5 fab8 	bl	8000608 <__aeabi_dmul>
 800b098:	4b88      	ldr	r3, [pc, #544]	; (800b2bc <_dtoa_r+0x654>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	f7f5 f8fe 	bl	800029c <__adddf3>
 800b0a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0a8:	9303      	str	r3, [sp, #12]
 800b0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d15c      	bne.n	800b16a <_dtoa_r+0x502>
 800b0b0:	4b83      	ldr	r3, [pc, #524]	; (800b2c0 <_dtoa_r+0x658>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	f7f5 f8ee 	bl	8000298 <__aeabi_dsub>
 800b0bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	f7f5 fd30 	bl	8000b28 <__aeabi_dcmpgt>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	f040 8296 	bne.w	800b5fa <_dtoa_r+0x992>
 800b0ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0d8:	4639      	mov	r1, r7
 800b0da:	f7f5 fd07 	bl	8000aec <__aeabi_dcmplt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8288 	bne.w	800b5f4 <_dtoa_r+0x98c>
 800b0e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f2c0 8158 	blt.w	800b3a4 <_dtoa_r+0x73c>
 800b0f4:	f1ba 0f0e 	cmp.w	sl, #14
 800b0f8:	f300 8154 	bgt.w	800b3a4 <_dtoa_r+0x73c>
 800b0fc:	4b6b      	ldr	r3, [pc, #428]	; (800b2ac <_dtoa_r+0x644>)
 800b0fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b102:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f280 80e3 	bge.w	800b2d4 <_dtoa_r+0x66c>
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f300 80df 	bgt.w	800b2d4 <_dtoa_r+0x66c>
 800b116:	f040 826d 	bne.w	800b5f4 <_dtoa_r+0x98c>
 800b11a:	4b69      	ldr	r3, [pc, #420]	; (800b2c0 <_dtoa_r+0x658>)
 800b11c:	2200      	movs	r2, #0
 800b11e:	4640      	mov	r0, r8
 800b120:	4649      	mov	r1, r9
 800b122:	f7f5 fa71 	bl	8000608 <__aeabi_dmul>
 800b126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b12a:	f7f5 fcf3 	bl	8000b14 <__aeabi_dcmpge>
 800b12e:	9e01      	ldr	r6, [sp, #4]
 800b130:	4637      	mov	r7, r6
 800b132:	2800      	cmp	r0, #0
 800b134:	f040 8243 	bne.w	800b5be <_dtoa_r+0x956>
 800b138:	9d00      	ldr	r5, [sp, #0]
 800b13a:	2331      	movs	r3, #49	; 0x31
 800b13c:	f805 3b01 	strb.w	r3, [r5], #1
 800b140:	f10a 0a01 	add.w	sl, sl, #1
 800b144:	e23f      	b.n	800b5c6 <_dtoa_r+0x95e>
 800b146:	07f2      	lsls	r2, r6, #31
 800b148:	d505      	bpl.n	800b156 <_dtoa_r+0x4ee>
 800b14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14e:	f7f5 fa5b 	bl	8000608 <__aeabi_dmul>
 800b152:	3501      	adds	r5, #1
 800b154:	2301      	movs	r3, #1
 800b156:	1076      	asrs	r6, r6, #1
 800b158:	3708      	adds	r7, #8
 800b15a:	e76c      	b.n	800b036 <_dtoa_r+0x3ce>
 800b15c:	2502      	movs	r5, #2
 800b15e:	e76f      	b.n	800b040 <_dtoa_r+0x3d8>
 800b160:	9b01      	ldr	r3, [sp, #4]
 800b162:	f8cd a01c 	str.w	sl, [sp, #28]
 800b166:	930c      	str	r3, [sp, #48]	; 0x30
 800b168:	e78d      	b.n	800b086 <_dtoa_r+0x41e>
 800b16a:	9900      	ldr	r1, [sp, #0]
 800b16c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b16e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b170:	4b4e      	ldr	r3, [pc, #312]	; (800b2ac <_dtoa_r+0x644>)
 800b172:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b176:	4401      	add	r1, r0
 800b178:	9102      	str	r1, [sp, #8]
 800b17a:	9908      	ldr	r1, [sp, #32]
 800b17c:	eeb0 8a47 	vmov.f32	s16, s14
 800b180:	eef0 8a67 	vmov.f32	s17, s15
 800b184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b188:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d045      	beq.n	800b21c <_dtoa_r+0x5b4>
 800b190:	494c      	ldr	r1, [pc, #304]	; (800b2c4 <_dtoa_r+0x65c>)
 800b192:	2000      	movs	r0, #0
 800b194:	f7f5 fb62 	bl	800085c <__aeabi_ddiv>
 800b198:	ec53 2b18 	vmov	r2, r3, d8
 800b19c:	f7f5 f87c 	bl	8000298 <__aeabi_dsub>
 800b1a0:	9d00      	ldr	r5, [sp, #0]
 800b1a2:	ec41 0b18 	vmov	d8, r0, r1
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f7f5 fcdd 	bl	8000b68 <__aeabi_d2iz>
 800b1ae:	900c      	str	r0, [sp, #48]	; 0x30
 800b1b0:	f7f5 f9c0 	bl	8000534 <__aeabi_i2d>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	f7f5 f86c 	bl	8000298 <__aeabi_dsub>
 800b1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c2:	3330      	adds	r3, #48	; 0x30
 800b1c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b1c8:	ec53 2b18 	vmov	r2, r3, d8
 800b1cc:	4606      	mov	r6, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	f7f5 fc8c 	bl	8000aec <__aeabi_dcmplt>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d165      	bne.n	800b2a4 <_dtoa_r+0x63c>
 800b1d8:	4632      	mov	r2, r6
 800b1da:	463b      	mov	r3, r7
 800b1dc:	4935      	ldr	r1, [pc, #212]	; (800b2b4 <_dtoa_r+0x64c>)
 800b1de:	2000      	movs	r0, #0
 800b1e0:	f7f5 f85a 	bl	8000298 <__aeabi_dsub>
 800b1e4:	ec53 2b18 	vmov	r2, r3, d8
 800b1e8:	f7f5 fc80 	bl	8000aec <__aeabi_dcmplt>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f040 80b9 	bne.w	800b364 <_dtoa_r+0x6fc>
 800b1f2:	9b02      	ldr	r3, [sp, #8]
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	f43f af75 	beq.w	800b0e4 <_dtoa_r+0x47c>
 800b1fa:	4b2f      	ldr	r3, [pc, #188]	; (800b2b8 <_dtoa_r+0x650>)
 800b1fc:	ec51 0b18 	vmov	r0, r1, d8
 800b200:	2200      	movs	r2, #0
 800b202:	f7f5 fa01 	bl	8000608 <__aeabi_dmul>
 800b206:	4b2c      	ldr	r3, [pc, #176]	; (800b2b8 <_dtoa_r+0x650>)
 800b208:	ec41 0b18 	vmov	d8, r0, r1
 800b20c:	2200      	movs	r2, #0
 800b20e:	4630      	mov	r0, r6
 800b210:	4639      	mov	r1, r7
 800b212:	f7f5 f9f9 	bl	8000608 <__aeabi_dmul>
 800b216:	4606      	mov	r6, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	e7c4      	b.n	800b1a6 <_dtoa_r+0x53e>
 800b21c:	ec51 0b17 	vmov	r0, r1, d7
 800b220:	f7f5 f9f2 	bl	8000608 <__aeabi_dmul>
 800b224:	9b02      	ldr	r3, [sp, #8]
 800b226:	9d00      	ldr	r5, [sp, #0]
 800b228:	930c      	str	r3, [sp, #48]	; 0x30
 800b22a:	ec41 0b18 	vmov	d8, r0, r1
 800b22e:	4639      	mov	r1, r7
 800b230:	4630      	mov	r0, r6
 800b232:	f7f5 fc99 	bl	8000b68 <__aeabi_d2iz>
 800b236:	9011      	str	r0, [sp, #68]	; 0x44
 800b238:	f7f5 f97c 	bl	8000534 <__aeabi_i2d>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f5 f828 	bl	8000298 <__aeabi_dsub>
 800b248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b24a:	3330      	adds	r3, #48	; 0x30
 800b24c:	f805 3b01 	strb.w	r3, [r5], #1
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	429d      	cmp	r5, r3
 800b254:	4606      	mov	r6, r0
 800b256:	460f      	mov	r7, r1
 800b258:	f04f 0200 	mov.w	r2, #0
 800b25c:	d134      	bne.n	800b2c8 <_dtoa_r+0x660>
 800b25e:	4b19      	ldr	r3, [pc, #100]	; (800b2c4 <_dtoa_r+0x65c>)
 800b260:	ec51 0b18 	vmov	r0, r1, d8
 800b264:	f7f5 f81a 	bl	800029c <__adddf3>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4630      	mov	r0, r6
 800b26e:	4639      	mov	r1, r7
 800b270:	f7f5 fc5a 	bl	8000b28 <__aeabi_dcmpgt>
 800b274:	2800      	cmp	r0, #0
 800b276:	d175      	bne.n	800b364 <_dtoa_r+0x6fc>
 800b278:	ec53 2b18 	vmov	r2, r3, d8
 800b27c:	4911      	ldr	r1, [pc, #68]	; (800b2c4 <_dtoa_r+0x65c>)
 800b27e:	2000      	movs	r0, #0
 800b280:	f7f5 f80a 	bl	8000298 <__aeabi_dsub>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc2e 	bl	8000aec <__aeabi_dcmplt>
 800b290:	2800      	cmp	r0, #0
 800b292:	f43f af27 	beq.w	800b0e4 <_dtoa_r+0x47c>
 800b296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b298:	1e6b      	subs	r3, r5, #1
 800b29a:	930c      	str	r3, [sp, #48]	; 0x30
 800b29c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2a0:	2b30      	cmp	r3, #48	; 0x30
 800b2a2:	d0f8      	beq.n	800b296 <_dtoa_r+0x62e>
 800b2a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b2a8:	e04a      	b.n	800b340 <_dtoa_r+0x6d8>
 800b2aa:	bf00      	nop
 800b2ac:	0800d890 	.word	0x0800d890
 800b2b0:	0800d868 	.word	0x0800d868
 800b2b4:	3ff00000 	.word	0x3ff00000
 800b2b8:	40240000 	.word	0x40240000
 800b2bc:	401c0000 	.word	0x401c0000
 800b2c0:	40140000 	.word	0x40140000
 800b2c4:	3fe00000 	.word	0x3fe00000
 800b2c8:	4baf      	ldr	r3, [pc, #700]	; (800b588 <_dtoa_r+0x920>)
 800b2ca:	f7f5 f99d 	bl	8000608 <__aeabi_dmul>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	460f      	mov	r7, r1
 800b2d2:	e7ac      	b.n	800b22e <_dtoa_r+0x5c6>
 800b2d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b2d8:	9d00      	ldr	r5, [sp, #0]
 800b2da:	4642      	mov	r2, r8
 800b2dc:	464b      	mov	r3, r9
 800b2de:	4630      	mov	r0, r6
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	f7f5 fabb 	bl	800085c <__aeabi_ddiv>
 800b2e6:	f7f5 fc3f 	bl	8000b68 <__aeabi_d2iz>
 800b2ea:	9002      	str	r0, [sp, #8]
 800b2ec:	f7f5 f922 	bl	8000534 <__aeabi_i2d>
 800b2f0:	4642      	mov	r2, r8
 800b2f2:	464b      	mov	r3, r9
 800b2f4:	f7f5 f988 	bl	8000608 <__aeabi_dmul>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	4630      	mov	r0, r6
 800b2fe:	4639      	mov	r1, r7
 800b300:	f7f4 ffca 	bl	8000298 <__aeabi_dsub>
 800b304:	9e02      	ldr	r6, [sp, #8]
 800b306:	9f01      	ldr	r7, [sp, #4]
 800b308:	3630      	adds	r6, #48	; 0x30
 800b30a:	f805 6b01 	strb.w	r6, [r5], #1
 800b30e:	9e00      	ldr	r6, [sp, #0]
 800b310:	1bae      	subs	r6, r5, r6
 800b312:	42b7      	cmp	r7, r6
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	d137      	bne.n	800b38a <_dtoa_r+0x722>
 800b31a:	f7f4 ffbf 	bl	800029c <__adddf3>
 800b31e:	4642      	mov	r2, r8
 800b320:	464b      	mov	r3, r9
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	f7f5 fbff 	bl	8000b28 <__aeabi_dcmpgt>
 800b32a:	b9c8      	cbnz	r0, 800b360 <_dtoa_r+0x6f8>
 800b32c:	4642      	mov	r2, r8
 800b32e:	464b      	mov	r3, r9
 800b330:	4630      	mov	r0, r6
 800b332:	4639      	mov	r1, r7
 800b334:	f7f5 fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b338:	b110      	cbz	r0, 800b340 <_dtoa_r+0x6d8>
 800b33a:	9b02      	ldr	r3, [sp, #8]
 800b33c:	07d9      	lsls	r1, r3, #31
 800b33e:	d40f      	bmi.n	800b360 <_dtoa_r+0x6f8>
 800b340:	4620      	mov	r0, r4
 800b342:	4659      	mov	r1, fp
 800b344:	f000 fac8 	bl	800b8d8 <_Bfree>
 800b348:	2300      	movs	r3, #0
 800b34a:	702b      	strb	r3, [r5, #0]
 800b34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b34e:	f10a 0001 	add.w	r0, sl, #1
 800b352:	6018      	str	r0, [r3, #0]
 800b354:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b356:	2b00      	cmp	r3, #0
 800b358:	f43f acd8 	beq.w	800ad0c <_dtoa_r+0xa4>
 800b35c:	601d      	str	r5, [r3, #0]
 800b35e:	e4d5      	b.n	800ad0c <_dtoa_r+0xa4>
 800b360:	f8cd a01c 	str.w	sl, [sp, #28]
 800b364:	462b      	mov	r3, r5
 800b366:	461d      	mov	r5, r3
 800b368:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b36c:	2a39      	cmp	r2, #57	; 0x39
 800b36e:	d108      	bne.n	800b382 <_dtoa_r+0x71a>
 800b370:	9a00      	ldr	r2, [sp, #0]
 800b372:	429a      	cmp	r2, r3
 800b374:	d1f7      	bne.n	800b366 <_dtoa_r+0x6fe>
 800b376:	9a07      	ldr	r2, [sp, #28]
 800b378:	9900      	ldr	r1, [sp, #0]
 800b37a:	3201      	adds	r2, #1
 800b37c:	9207      	str	r2, [sp, #28]
 800b37e:	2230      	movs	r2, #48	; 0x30
 800b380:	700a      	strb	r2, [r1, #0]
 800b382:	781a      	ldrb	r2, [r3, #0]
 800b384:	3201      	adds	r2, #1
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	e78c      	b.n	800b2a4 <_dtoa_r+0x63c>
 800b38a:	4b7f      	ldr	r3, [pc, #508]	; (800b588 <_dtoa_r+0x920>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	f7f5 f93b 	bl	8000608 <__aeabi_dmul>
 800b392:	2200      	movs	r2, #0
 800b394:	2300      	movs	r3, #0
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	f7f5 fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d09b      	beq.n	800b2da <_dtoa_r+0x672>
 800b3a2:	e7cd      	b.n	800b340 <_dtoa_r+0x6d8>
 800b3a4:	9a08      	ldr	r2, [sp, #32]
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	f000 80c4 	beq.w	800b534 <_dtoa_r+0x8cc>
 800b3ac:	9a05      	ldr	r2, [sp, #20]
 800b3ae:	2a01      	cmp	r2, #1
 800b3b0:	f300 80a8 	bgt.w	800b504 <_dtoa_r+0x89c>
 800b3b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	f000 80a0 	beq.w	800b4fc <_dtoa_r+0x894>
 800b3bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3c0:	9e06      	ldr	r6, [sp, #24]
 800b3c2:	4645      	mov	r5, r8
 800b3c4:	9a04      	ldr	r2, [sp, #16]
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	441a      	add	r2, r3
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4498      	add	r8, r3
 800b3ce:	9204      	str	r2, [sp, #16]
 800b3d0:	f000 fb3e 	bl	800ba50 <__i2b>
 800b3d4:	4607      	mov	r7, r0
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	dd0b      	ble.n	800b3f2 <_dtoa_r+0x78a>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	dd08      	ble.n	800b3f2 <_dtoa_r+0x78a>
 800b3e0:	42ab      	cmp	r3, r5
 800b3e2:	9a04      	ldr	r2, [sp, #16]
 800b3e4:	bfa8      	it	ge
 800b3e6:	462b      	movge	r3, r5
 800b3e8:	eba8 0803 	sub.w	r8, r8, r3
 800b3ec:	1aed      	subs	r5, r5, r3
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	9304      	str	r3, [sp, #16]
 800b3f2:	9b06      	ldr	r3, [sp, #24]
 800b3f4:	b1fb      	cbz	r3, 800b436 <_dtoa_r+0x7ce>
 800b3f6:	9b08      	ldr	r3, [sp, #32]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 809f 	beq.w	800b53c <_dtoa_r+0x8d4>
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	dd11      	ble.n	800b426 <_dtoa_r+0x7be>
 800b402:	4639      	mov	r1, r7
 800b404:	4632      	mov	r2, r6
 800b406:	4620      	mov	r0, r4
 800b408:	f000 fbde 	bl	800bbc8 <__pow5mult>
 800b40c:	465a      	mov	r2, fp
 800b40e:	4601      	mov	r1, r0
 800b410:	4607      	mov	r7, r0
 800b412:	4620      	mov	r0, r4
 800b414:	f000 fb32 	bl	800ba7c <__multiply>
 800b418:	4659      	mov	r1, fp
 800b41a:	9007      	str	r0, [sp, #28]
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fa5b 	bl	800b8d8 <_Bfree>
 800b422:	9b07      	ldr	r3, [sp, #28]
 800b424:	469b      	mov	fp, r3
 800b426:	9b06      	ldr	r3, [sp, #24]
 800b428:	1b9a      	subs	r2, r3, r6
 800b42a:	d004      	beq.n	800b436 <_dtoa_r+0x7ce>
 800b42c:	4659      	mov	r1, fp
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 fbca 	bl	800bbc8 <__pow5mult>
 800b434:	4683      	mov	fp, r0
 800b436:	2101      	movs	r1, #1
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fb09 	bl	800ba50 <__i2b>
 800b43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b440:	2b00      	cmp	r3, #0
 800b442:	4606      	mov	r6, r0
 800b444:	dd7c      	ble.n	800b540 <_dtoa_r+0x8d8>
 800b446:	461a      	mov	r2, r3
 800b448:	4601      	mov	r1, r0
 800b44a:	4620      	mov	r0, r4
 800b44c:	f000 fbbc 	bl	800bbc8 <__pow5mult>
 800b450:	9b05      	ldr	r3, [sp, #20]
 800b452:	2b01      	cmp	r3, #1
 800b454:	4606      	mov	r6, r0
 800b456:	dd76      	ble.n	800b546 <_dtoa_r+0x8de>
 800b458:	2300      	movs	r3, #0
 800b45a:	9306      	str	r3, [sp, #24]
 800b45c:	6933      	ldr	r3, [r6, #16]
 800b45e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b462:	6918      	ldr	r0, [r3, #16]
 800b464:	f000 faa4 	bl	800b9b0 <__hi0bits>
 800b468:	f1c0 0020 	rsb	r0, r0, #32
 800b46c:	9b04      	ldr	r3, [sp, #16]
 800b46e:	4418      	add	r0, r3
 800b470:	f010 001f 	ands.w	r0, r0, #31
 800b474:	f000 8086 	beq.w	800b584 <_dtoa_r+0x91c>
 800b478:	f1c0 0320 	rsb	r3, r0, #32
 800b47c:	2b04      	cmp	r3, #4
 800b47e:	dd7f      	ble.n	800b580 <_dtoa_r+0x918>
 800b480:	f1c0 001c 	rsb	r0, r0, #28
 800b484:	9b04      	ldr	r3, [sp, #16]
 800b486:	4403      	add	r3, r0
 800b488:	4480      	add	r8, r0
 800b48a:	4405      	add	r5, r0
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	f1b8 0f00 	cmp.w	r8, #0
 800b492:	dd05      	ble.n	800b4a0 <_dtoa_r+0x838>
 800b494:	4659      	mov	r1, fp
 800b496:	4642      	mov	r2, r8
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 fbef 	bl	800bc7c <__lshift>
 800b49e:	4683      	mov	fp, r0
 800b4a0:	9b04      	ldr	r3, [sp, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	dd05      	ble.n	800b4b2 <_dtoa_r+0x84a>
 800b4a6:	4631      	mov	r1, r6
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fbe6 	bl	800bc7c <__lshift>
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d069      	beq.n	800b58c <_dtoa_r+0x924>
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4658      	mov	r0, fp
 800b4bc:	f000 fc4a 	bl	800bd54 <__mcmp>
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	da63      	bge.n	800b58c <_dtoa_r+0x924>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4659      	mov	r1, fp
 800b4c8:	220a      	movs	r2, #10
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f000 fa26 	bl	800b91c <__multadd>
 800b4d0:	9b08      	ldr	r3, [sp, #32]
 800b4d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4d6:	4683      	mov	fp, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 818f 	beq.w	800b7fc <_dtoa_r+0xb94>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	220a      	movs	r2, #10
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fa19 	bl	800b91c <__multadd>
 800b4ea:	f1b9 0f00 	cmp.w	r9, #0
 800b4ee:	4607      	mov	r7, r0
 800b4f0:	f300 808e 	bgt.w	800b610 <_dtoa_r+0x9a8>
 800b4f4:	9b05      	ldr	r3, [sp, #20]
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	dc50      	bgt.n	800b59c <_dtoa_r+0x934>
 800b4fa:	e089      	b.n	800b610 <_dtoa_r+0x9a8>
 800b4fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b502:	e75d      	b.n	800b3c0 <_dtoa_r+0x758>
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	1e5e      	subs	r6, r3, #1
 800b508:	9b06      	ldr	r3, [sp, #24]
 800b50a:	42b3      	cmp	r3, r6
 800b50c:	bfbf      	itttt	lt
 800b50e:	9b06      	ldrlt	r3, [sp, #24]
 800b510:	9606      	strlt	r6, [sp, #24]
 800b512:	1af2      	sublt	r2, r6, r3
 800b514:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b516:	bfb6      	itet	lt
 800b518:	189b      	addlt	r3, r3, r2
 800b51a:	1b9e      	subge	r6, r3, r6
 800b51c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b51e:	9b01      	ldr	r3, [sp, #4]
 800b520:	bfb8      	it	lt
 800b522:	2600      	movlt	r6, #0
 800b524:	2b00      	cmp	r3, #0
 800b526:	bfb5      	itete	lt
 800b528:	eba8 0503 	sublt.w	r5, r8, r3
 800b52c:	9b01      	ldrge	r3, [sp, #4]
 800b52e:	2300      	movlt	r3, #0
 800b530:	4645      	movge	r5, r8
 800b532:	e747      	b.n	800b3c4 <_dtoa_r+0x75c>
 800b534:	9e06      	ldr	r6, [sp, #24]
 800b536:	9f08      	ldr	r7, [sp, #32]
 800b538:	4645      	mov	r5, r8
 800b53a:	e74c      	b.n	800b3d6 <_dtoa_r+0x76e>
 800b53c:	9a06      	ldr	r2, [sp, #24]
 800b53e:	e775      	b.n	800b42c <_dtoa_r+0x7c4>
 800b540:	9b05      	ldr	r3, [sp, #20]
 800b542:	2b01      	cmp	r3, #1
 800b544:	dc18      	bgt.n	800b578 <_dtoa_r+0x910>
 800b546:	9b02      	ldr	r3, [sp, #8]
 800b548:	b9b3      	cbnz	r3, 800b578 <_dtoa_r+0x910>
 800b54a:	9b03      	ldr	r3, [sp, #12]
 800b54c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b550:	b9a3      	cbnz	r3, 800b57c <_dtoa_r+0x914>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b558:	0d1b      	lsrs	r3, r3, #20
 800b55a:	051b      	lsls	r3, r3, #20
 800b55c:	b12b      	cbz	r3, 800b56a <_dtoa_r+0x902>
 800b55e:	9b04      	ldr	r3, [sp, #16]
 800b560:	3301      	adds	r3, #1
 800b562:	9304      	str	r3, [sp, #16]
 800b564:	f108 0801 	add.w	r8, r8, #1
 800b568:	2301      	movs	r3, #1
 800b56a:	9306      	str	r3, [sp, #24]
 800b56c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b56e:	2b00      	cmp	r3, #0
 800b570:	f47f af74 	bne.w	800b45c <_dtoa_r+0x7f4>
 800b574:	2001      	movs	r0, #1
 800b576:	e779      	b.n	800b46c <_dtoa_r+0x804>
 800b578:	2300      	movs	r3, #0
 800b57a:	e7f6      	b.n	800b56a <_dtoa_r+0x902>
 800b57c:	9b02      	ldr	r3, [sp, #8]
 800b57e:	e7f4      	b.n	800b56a <_dtoa_r+0x902>
 800b580:	d085      	beq.n	800b48e <_dtoa_r+0x826>
 800b582:	4618      	mov	r0, r3
 800b584:	301c      	adds	r0, #28
 800b586:	e77d      	b.n	800b484 <_dtoa_r+0x81c>
 800b588:	40240000 	.word	0x40240000
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	dc38      	bgt.n	800b604 <_dtoa_r+0x99c>
 800b592:	9b05      	ldr	r3, [sp, #20]
 800b594:	2b02      	cmp	r3, #2
 800b596:	dd35      	ble.n	800b604 <_dtoa_r+0x99c>
 800b598:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	d10d      	bne.n	800b5be <_dtoa_r+0x956>
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	2205      	movs	r2, #5
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f9b7 	bl	800b91c <__multadd>
 800b5ae:	4601      	mov	r1, r0
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	4658      	mov	r0, fp
 800b5b4:	f000 fbce 	bl	800bd54 <__mcmp>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f73f adbd 	bgt.w	800b138 <_dtoa_r+0x4d0>
 800b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c0:	9d00      	ldr	r5, [sp, #0]
 800b5c2:	ea6f 0a03 	mvn.w	sl, r3
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	4631      	mov	r1, r6
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f000 f983 	bl	800b8d8 <_Bfree>
 800b5d2:	2f00      	cmp	r7, #0
 800b5d4:	f43f aeb4 	beq.w	800b340 <_dtoa_r+0x6d8>
 800b5d8:	f1b8 0f00 	cmp.w	r8, #0
 800b5dc:	d005      	beq.n	800b5ea <_dtoa_r+0x982>
 800b5de:	45b8      	cmp	r8, r7
 800b5e0:	d003      	beq.n	800b5ea <_dtoa_r+0x982>
 800b5e2:	4641      	mov	r1, r8
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f000 f977 	bl	800b8d8 <_Bfree>
 800b5ea:	4639      	mov	r1, r7
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 f973 	bl	800b8d8 <_Bfree>
 800b5f2:	e6a5      	b.n	800b340 <_dtoa_r+0x6d8>
 800b5f4:	2600      	movs	r6, #0
 800b5f6:	4637      	mov	r7, r6
 800b5f8:	e7e1      	b.n	800b5be <_dtoa_r+0x956>
 800b5fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b5fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b600:	4637      	mov	r7, r6
 800b602:	e599      	b.n	800b138 <_dtoa_r+0x4d0>
 800b604:	9b08      	ldr	r3, [sp, #32]
 800b606:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 80fd 	beq.w	800b80a <_dtoa_r+0xba2>
 800b610:	2d00      	cmp	r5, #0
 800b612:	dd05      	ble.n	800b620 <_dtoa_r+0x9b8>
 800b614:	4639      	mov	r1, r7
 800b616:	462a      	mov	r2, r5
 800b618:	4620      	mov	r0, r4
 800b61a:	f000 fb2f 	bl	800bc7c <__lshift>
 800b61e:	4607      	mov	r7, r0
 800b620:	9b06      	ldr	r3, [sp, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d05c      	beq.n	800b6e0 <_dtoa_r+0xa78>
 800b626:	6879      	ldr	r1, [r7, #4]
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 f915 	bl	800b858 <_Balloc>
 800b62e:	4605      	mov	r5, r0
 800b630:	b928      	cbnz	r0, 800b63e <_dtoa_r+0x9d6>
 800b632:	4b80      	ldr	r3, [pc, #512]	; (800b834 <_dtoa_r+0xbcc>)
 800b634:	4602      	mov	r2, r0
 800b636:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b63a:	f7ff bb2e 	b.w	800ac9a <_dtoa_r+0x32>
 800b63e:	693a      	ldr	r2, [r7, #16]
 800b640:	3202      	adds	r2, #2
 800b642:	0092      	lsls	r2, r2, #2
 800b644:	f107 010c 	add.w	r1, r7, #12
 800b648:	300c      	adds	r0, #12
 800b64a:	f7fe fdbf 	bl	800a1cc <memcpy>
 800b64e:	2201      	movs	r2, #1
 800b650:	4629      	mov	r1, r5
 800b652:	4620      	mov	r0, r4
 800b654:	f000 fb12 	bl	800bc7c <__lshift>
 800b658:	9b00      	ldr	r3, [sp, #0]
 800b65a:	3301      	adds	r3, #1
 800b65c:	9301      	str	r3, [sp, #4]
 800b65e:	9b00      	ldr	r3, [sp, #0]
 800b660:	444b      	add	r3, r9
 800b662:	9307      	str	r3, [sp, #28]
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	46b8      	mov	r8, r7
 800b66c:	9306      	str	r3, [sp, #24]
 800b66e:	4607      	mov	r7, r0
 800b670:	9b01      	ldr	r3, [sp, #4]
 800b672:	4631      	mov	r1, r6
 800b674:	3b01      	subs	r3, #1
 800b676:	4658      	mov	r0, fp
 800b678:	9302      	str	r3, [sp, #8]
 800b67a:	f7ff fa69 	bl	800ab50 <quorem>
 800b67e:	4603      	mov	r3, r0
 800b680:	3330      	adds	r3, #48	; 0x30
 800b682:	9004      	str	r0, [sp, #16]
 800b684:	4641      	mov	r1, r8
 800b686:	4658      	mov	r0, fp
 800b688:	9308      	str	r3, [sp, #32]
 800b68a:	f000 fb63 	bl	800bd54 <__mcmp>
 800b68e:	463a      	mov	r2, r7
 800b690:	4681      	mov	r9, r0
 800b692:	4631      	mov	r1, r6
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fb79 	bl	800bd8c <__mdiff>
 800b69a:	68c2      	ldr	r2, [r0, #12]
 800b69c:	9b08      	ldr	r3, [sp, #32]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	bb02      	cbnz	r2, 800b6e4 <_dtoa_r+0xa7c>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	f000 fb55 	bl	800bd54 <__mcmp>
 800b6aa:	9b08      	ldr	r3, [sp, #32]
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	4629      	mov	r1, r5
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b6b6:	f000 f90f 	bl	800b8d8 <_Bfree>
 800b6ba:	9b05      	ldr	r3, [sp, #20]
 800b6bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6be:	9d01      	ldr	r5, [sp, #4]
 800b6c0:	ea43 0102 	orr.w	r1, r3, r2
 800b6c4:	9b06      	ldr	r3, [sp, #24]
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	d10d      	bne.n	800b6e8 <_dtoa_r+0xa80>
 800b6cc:	2b39      	cmp	r3, #57	; 0x39
 800b6ce:	d029      	beq.n	800b724 <_dtoa_r+0xabc>
 800b6d0:	f1b9 0f00 	cmp.w	r9, #0
 800b6d4:	dd01      	ble.n	800b6da <_dtoa_r+0xa72>
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	3331      	adds	r3, #49	; 0x31
 800b6da:	9a02      	ldr	r2, [sp, #8]
 800b6dc:	7013      	strb	r3, [r2, #0]
 800b6de:	e774      	b.n	800b5ca <_dtoa_r+0x962>
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	e7b9      	b.n	800b658 <_dtoa_r+0x9f0>
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	e7e2      	b.n	800b6ae <_dtoa_r+0xa46>
 800b6e8:	f1b9 0f00 	cmp.w	r9, #0
 800b6ec:	db06      	blt.n	800b6fc <_dtoa_r+0xa94>
 800b6ee:	9905      	ldr	r1, [sp, #20]
 800b6f0:	ea41 0909 	orr.w	r9, r1, r9
 800b6f4:	9906      	ldr	r1, [sp, #24]
 800b6f6:	ea59 0101 	orrs.w	r1, r9, r1
 800b6fa:	d120      	bne.n	800b73e <_dtoa_r+0xad6>
 800b6fc:	2a00      	cmp	r2, #0
 800b6fe:	ddec      	ble.n	800b6da <_dtoa_r+0xa72>
 800b700:	4659      	mov	r1, fp
 800b702:	2201      	movs	r2, #1
 800b704:	4620      	mov	r0, r4
 800b706:	9301      	str	r3, [sp, #4]
 800b708:	f000 fab8 	bl	800bc7c <__lshift>
 800b70c:	4631      	mov	r1, r6
 800b70e:	4683      	mov	fp, r0
 800b710:	f000 fb20 	bl	800bd54 <__mcmp>
 800b714:	2800      	cmp	r0, #0
 800b716:	9b01      	ldr	r3, [sp, #4]
 800b718:	dc02      	bgt.n	800b720 <_dtoa_r+0xab8>
 800b71a:	d1de      	bne.n	800b6da <_dtoa_r+0xa72>
 800b71c:	07da      	lsls	r2, r3, #31
 800b71e:	d5dc      	bpl.n	800b6da <_dtoa_r+0xa72>
 800b720:	2b39      	cmp	r3, #57	; 0x39
 800b722:	d1d8      	bne.n	800b6d6 <_dtoa_r+0xa6e>
 800b724:	9a02      	ldr	r2, [sp, #8]
 800b726:	2339      	movs	r3, #57	; 0x39
 800b728:	7013      	strb	r3, [r2, #0]
 800b72a:	462b      	mov	r3, r5
 800b72c:	461d      	mov	r5, r3
 800b72e:	3b01      	subs	r3, #1
 800b730:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b734:	2a39      	cmp	r2, #57	; 0x39
 800b736:	d050      	beq.n	800b7da <_dtoa_r+0xb72>
 800b738:	3201      	adds	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	e745      	b.n	800b5ca <_dtoa_r+0x962>
 800b73e:	2a00      	cmp	r2, #0
 800b740:	dd03      	ble.n	800b74a <_dtoa_r+0xae2>
 800b742:	2b39      	cmp	r3, #57	; 0x39
 800b744:	d0ee      	beq.n	800b724 <_dtoa_r+0xabc>
 800b746:	3301      	adds	r3, #1
 800b748:	e7c7      	b.n	800b6da <_dtoa_r+0xa72>
 800b74a:	9a01      	ldr	r2, [sp, #4]
 800b74c:	9907      	ldr	r1, [sp, #28]
 800b74e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b752:	428a      	cmp	r2, r1
 800b754:	d02a      	beq.n	800b7ac <_dtoa_r+0xb44>
 800b756:	4659      	mov	r1, fp
 800b758:	2300      	movs	r3, #0
 800b75a:	220a      	movs	r2, #10
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 f8dd 	bl	800b91c <__multadd>
 800b762:	45b8      	cmp	r8, r7
 800b764:	4683      	mov	fp, r0
 800b766:	f04f 0300 	mov.w	r3, #0
 800b76a:	f04f 020a 	mov.w	r2, #10
 800b76e:	4641      	mov	r1, r8
 800b770:	4620      	mov	r0, r4
 800b772:	d107      	bne.n	800b784 <_dtoa_r+0xb1c>
 800b774:	f000 f8d2 	bl	800b91c <__multadd>
 800b778:	4680      	mov	r8, r0
 800b77a:	4607      	mov	r7, r0
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	3301      	adds	r3, #1
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	e775      	b.n	800b670 <_dtoa_r+0xa08>
 800b784:	f000 f8ca 	bl	800b91c <__multadd>
 800b788:	4639      	mov	r1, r7
 800b78a:	4680      	mov	r8, r0
 800b78c:	2300      	movs	r3, #0
 800b78e:	220a      	movs	r2, #10
 800b790:	4620      	mov	r0, r4
 800b792:	f000 f8c3 	bl	800b91c <__multadd>
 800b796:	4607      	mov	r7, r0
 800b798:	e7f0      	b.n	800b77c <_dtoa_r+0xb14>
 800b79a:	f1b9 0f00 	cmp.w	r9, #0
 800b79e:	9a00      	ldr	r2, [sp, #0]
 800b7a0:	bfcc      	ite	gt
 800b7a2:	464d      	movgt	r5, r9
 800b7a4:	2501      	movle	r5, #1
 800b7a6:	4415      	add	r5, r2
 800b7a8:	f04f 0800 	mov.w	r8, #0
 800b7ac:	4659      	mov	r1, fp
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	f000 fa62 	bl	800bc7c <__lshift>
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4683      	mov	fp, r0
 800b7bc:	f000 faca 	bl	800bd54 <__mcmp>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	dcb2      	bgt.n	800b72a <_dtoa_r+0xac2>
 800b7c4:	d102      	bne.n	800b7cc <_dtoa_r+0xb64>
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	07db      	lsls	r3, r3, #31
 800b7ca:	d4ae      	bmi.n	800b72a <_dtoa_r+0xac2>
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	461d      	mov	r5, r3
 800b7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7d4:	2a30      	cmp	r2, #48	; 0x30
 800b7d6:	d0fa      	beq.n	800b7ce <_dtoa_r+0xb66>
 800b7d8:	e6f7      	b.n	800b5ca <_dtoa_r+0x962>
 800b7da:	9a00      	ldr	r2, [sp, #0]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d1a5      	bne.n	800b72c <_dtoa_r+0xac4>
 800b7e0:	f10a 0a01 	add.w	sl, sl, #1
 800b7e4:	2331      	movs	r3, #49	; 0x31
 800b7e6:	e779      	b.n	800b6dc <_dtoa_r+0xa74>
 800b7e8:	4b13      	ldr	r3, [pc, #76]	; (800b838 <_dtoa_r+0xbd0>)
 800b7ea:	f7ff baaf 	b.w	800ad4c <_dtoa_r+0xe4>
 800b7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f47f aa86 	bne.w	800ad02 <_dtoa_r+0x9a>
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <_dtoa_r+0xbd4>)
 800b7f8:	f7ff baa8 	b.w	800ad4c <_dtoa_r+0xe4>
 800b7fc:	f1b9 0f00 	cmp.w	r9, #0
 800b800:	dc03      	bgt.n	800b80a <_dtoa_r+0xba2>
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	2b02      	cmp	r3, #2
 800b806:	f73f aec9 	bgt.w	800b59c <_dtoa_r+0x934>
 800b80a:	9d00      	ldr	r5, [sp, #0]
 800b80c:	4631      	mov	r1, r6
 800b80e:	4658      	mov	r0, fp
 800b810:	f7ff f99e 	bl	800ab50 <quorem>
 800b814:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b818:	f805 3b01 	strb.w	r3, [r5], #1
 800b81c:	9a00      	ldr	r2, [sp, #0]
 800b81e:	1aaa      	subs	r2, r5, r2
 800b820:	4591      	cmp	r9, r2
 800b822:	ddba      	ble.n	800b79a <_dtoa_r+0xb32>
 800b824:	4659      	mov	r1, fp
 800b826:	2300      	movs	r3, #0
 800b828:	220a      	movs	r2, #10
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f876 	bl	800b91c <__multadd>
 800b830:	4683      	mov	fp, r0
 800b832:	e7eb      	b.n	800b80c <_dtoa_r+0xba4>
 800b834:	0800d7f3 	.word	0x0800d7f3
 800b838:	0800d74c 	.word	0x0800d74c
 800b83c:	0800d770 	.word	0x0800d770

0800b840 <_localeconv_r>:
 800b840:	4800      	ldr	r0, [pc, #0]	; (800b844 <_localeconv_r+0x4>)
 800b842:	4770      	bx	lr
 800b844:	20000178 	.word	0x20000178

0800b848 <malloc>:
 800b848:	4b02      	ldr	r3, [pc, #8]	; (800b854 <malloc+0xc>)
 800b84a:	4601      	mov	r1, r0
 800b84c:	6818      	ldr	r0, [r3, #0]
 800b84e:	f000 bbe1 	b.w	800c014 <_malloc_r>
 800b852:	bf00      	nop
 800b854:	20000024 	.word	0x20000024

0800b858 <_Balloc>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b85c:	4604      	mov	r4, r0
 800b85e:	460d      	mov	r5, r1
 800b860:	b976      	cbnz	r6, 800b880 <_Balloc+0x28>
 800b862:	2010      	movs	r0, #16
 800b864:	f7ff fff0 	bl	800b848 <malloc>
 800b868:	4602      	mov	r2, r0
 800b86a:	6260      	str	r0, [r4, #36]	; 0x24
 800b86c:	b920      	cbnz	r0, 800b878 <_Balloc+0x20>
 800b86e:	4b18      	ldr	r3, [pc, #96]	; (800b8d0 <_Balloc+0x78>)
 800b870:	4818      	ldr	r0, [pc, #96]	; (800b8d4 <_Balloc+0x7c>)
 800b872:	2166      	movs	r1, #102	; 0x66
 800b874:	f000 fd94 	bl	800c3a0 <__assert_func>
 800b878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b87c:	6006      	str	r6, [r0, #0]
 800b87e:	60c6      	str	r6, [r0, #12]
 800b880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b882:	68f3      	ldr	r3, [r6, #12]
 800b884:	b183      	cbz	r3, 800b8a8 <_Balloc+0x50>
 800b886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b88e:	b9b8      	cbnz	r0, 800b8c0 <_Balloc+0x68>
 800b890:	2101      	movs	r1, #1
 800b892:	fa01 f605 	lsl.w	r6, r1, r5
 800b896:	1d72      	adds	r2, r6, #5
 800b898:	0092      	lsls	r2, r2, #2
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fb5a 	bl	800bf54 <_calloc_r>
 800b8a0:	b160      	cbz	r0, 800b8bc <_Balloc+0x64>
 800b8a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8a6:	e00e      	b.n	800b8c6 <_Balloc+0x6e>
 800b8a8:	2221      	movs	r2, #33	; 0x21
 800b8aa:	2104      	movs	r1, #4
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fb51 	bl	800bf54 <_calloc_r>
 800b8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b4:	60f0      	str	r0, [r6, #12]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e4      	bne.n	800b886 <_Balloc+0x2e>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	6802      	ldr	r2, [r0, #0]
 800b8c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8cc:	e7f7      	b.n	800b8be <_Balloc+0x66>
 800b8ce:	bf00      	nop
 800b8d0:	0800d77d 	.word	0x0800d77d
 800b8d4:	0800d804 	.word	0x0800d804

0800b8d8 <_Bfree>:
 800b8d8:	b570      	push	{r4, r5, r6, lr}
 800b8da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b8dc:	4605      	mov	r5, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	b976      	cbnz	r6, 800b900 <_Bfree+0x28>
 800b8e2:	2010      	movs	r0, #16
 800b8e4:	f7ff ffb0 	bl	800b848 <malloc>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	6268      	str	r0, [r5, #36]	; 0x24
 800b8ec:	b920      	cbnz	r0, 800b8f8 <_Bfree+0x20>
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <_Bfree+0x3c>)
 800b8f0:	4809      	ldr	r0, [pc, #36]	; (800b918 <_Bfree+0x40>)
 800b8f2:	218a      	movs	r1, #138	; 0x8a
 800b8f4:	f000 fd54 	bl	800c3a0 <__assert_func>
 800b8f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8fc:	6006      	str	r6, [r0, #0]
 800b8fe:	60c6      	str	r6, [r0, #12]
 800b900:	b13c      	cbz	r4, 800b912 <_Bfree+0x3a>
 800b902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b904:	6862      	ldr	r2, [r4, #4]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b90c:	6021      	str	r1, [r4, #0]
 800b90e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	0800d77d 	.word	0x0800d77d
 800b918:	0800d804 	.word	0x0800d804

0800b91c <__multadd>:
 800b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b920:	690e      	ldr	r6, [r1, #16]
 800b922:	4607      	mov	r7, r0
 800b924:	4698      	mov	r8, r3
 800b926:	460c      	mov	r4, r1
 800b928:	f101 0014 	add.w	r0, r1, #20
 800b92c:	2300      	movs	r3, #0
 800b92e:	6805      	ldr	r5, [r0, #0]
 800b930:	b2a9      	uxth	r1, r5
 800b932:	fb02 8101 	mla	r1, r2, r1, r8
 800b936:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b93a:	0c2d      	lsrs	r5, r5, #16
 800b93c:	fb02 c505 	mla	r5, r2, r5, ip
 800b940:	b289      	uxth	r1, r1
 800b942:	3301      	adds	r3, #1
 800b944:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b948:	429e      	cmp	r6, r3
 800b94a:	f840 1b04 	str.w	r1, [r0], #4
 800b94e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b952:	dcec      	bgt.n	800b92e <__multadd+0x12>
 800b954:	f1b8 0f00 	cmp.w	r8, #0
 800b958:	d022      	beq.n	800b9a0 <__multadd+0x84>
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	42b3      	cmp	r3, r6
 800b95e:	dc19      	bgt.n	800b994 <__multadd+0x78>
 800b960:	6861      	ldr	r1, [r4, #4]
 800b962:	4638      	mov	r0, r7
 800b964:	3101      	adds	r1, #1
 800b966:	f7ff ff77 	bl	800b858 <_Balloc>
 800b96a:	4605      	mov	r5, r0
 800b96c:	b928      	cbnz	r0, 800b97a <__multadd+0x5e>
 800b96e:	4602      	mov	r2, r0
 800b970:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <__multadd+0x8c>)
 800b972:	480e      	ldr	r0, [pc, #56]	; (800b9ac <__multadd+0x90>)
 800b974:	21b5      	movs	r1, #181	; 0xb5
 800b976:	f000 fd13 	bl	800c3a0 <__assert_func>
 800b97a:	6922      	ldr	r2, [r4, #16]
 800b97c:	3202      	adds	r2, #2
 800b97e:	f104 010c 	add.w	r1, r4, #12
 800b982:	0092      	lsls	r2, r2, #2
 800b984:	300c      	adds	r0, #12
 800b986:	f7fe fc21 	bl	800a1cc <memcpy>
 800b98a:	4621      	mov	r1, r4
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff ffa3 	bl	800b8d8 <_Bfree>
 800b992:	462c      	mov	r4, r5
 800b994:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b998:	3601      	adds	r6, #1
 800b99a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b99e:	6126      	str	r6, [r4, #16]
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800d7f3 	.word	0x0800d7f3
 800b9ac:	0800d804 	.word	0x0800d804

0800b9b0 <__hi0bits>:
 800b9b0:	0c03      	lsrs	r3, r0, #16
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	b9d3      	cbnz	r3, 800b9ec <__hi0bits+0x3c>
 800b9b6:	0400      	lsls	r0, r0, #16
 800b9b8:	2310      	movs	r3, #16
 800b9ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b9be:	bf04      	itt	eq
 800b9c0:	0200      	lsleq	r0, r0, #8
 800b9c2:	3308      	addeq	r3, #8
 800b9c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b9c8:	bf04      	itt	eq
 800b9ca:	0100      	lsleq	r0, r0, #4
 800b9cc:	3304      	addeq	r3, #4
 800b9ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b9d2:	bf04      	itt	eq
 800b9d4:	0080      	lsleq	r0, r0, #2
 800b9d6:	3302      	addeq	r3, #2
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	db05      	blt.n	800b9e8 <__hi0bits+0x38>
 800b9dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9e0:	f103 0301 	add.w	r3, r3, #1
 800b9e4:	bf08      	it	eq
 800b9e6:	2320      	moveq	r3, #32
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	4770      	bx	lr
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e7e4      	b.n	800b9ba <__hi0bits+0xa>

0800b9f0 <__lo0bits>:
 800b9f0:	6803      	ldr	r3, [r0, #0]
 800b9f2:	f013 0207 	ands.w	r2, r3, #7
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	d00b      	beq.n	800ba12 <__lo0bits+0x22>
 800b9fa:	07da      	lsls	r2, r3, #31
 800b9fc:	d424      	bmi.n	800ba48 <__lo0bits+0x58>
 800b9fe:	0798      	lsls	r0, r3, #30
 800ba00:	bf49      	itett	mi
 800ba02:	085b      	lsrmi	r3, r3, #1
 800ba04:	089b      	lsrpl	r3, r3, #2
 800ba06:	2001      	movmi	r0, #1
 800ba08:	600b      	strmi	r3, [r1, #0]
 800ba0a:	bf5c      	itt	pl
 800ba0c:	600b      	strpl	r3, [r1, #0]
 800ba0e:	2002      	movpl	r0, #2
 800ba10:	4770      	bx	lr
 800ba12:	b298      	uxth	r0, r3
 800ba14:	b9b0      	cbnz	r0, 800ba44 <__lo0bits+0x54>
 800ba16:	0c1b      	lsrs	r3, r3, #16
 800ba18:	2010      	movs	r0, #16
 800ba1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba1e:	bf04      	itt	eq
 800ba20:	0a1b      	lsreq	r3, r3, #8
 800ba22:	3008      	addeq	r0, #8
 800ba24:	071a      	lsls	r2, r3, #28
 800ba26:	bf04      	itt	eq
 800ba28:	091b      	lsreq	r3, r3, #4
 800ba2a:	3004      	addeq	r0, #4
 800ba2c:	079a      	lsls	r2, r3, #30
 800ba2e:	bf04      	itt	eq
 800ba30:	089b      	lsreq	r3, r3, #2
 800ba32:	3002      	addeq	r0, #2
 800ba34:	07da      	lsls	r2, r3, #31
 800ba36:	d403      	bmi.n	800ba40 <__lo0bits+0x50>
 800ba38:	085b      	lsrs	r3, r3, #1
 800ba3a:	f100 0001 	add.w	r0, r0, #1
 800ba3e:	d005      	beq.n	800ba4c <__lo0bits+0x5c>
 800ba40:	600b      	str	r3, [r1, #0]
 800ba42:	4770      	bx	lr
 800ba44:	4610      	mov	r0, r2
 800ba46:	e7e8      	b.n	800ba1a <__lo0bits+0x2a>
 800ba48:	2000      	movs	r0, #0
 800ba4a:	4770      	bx	lr
 800ba4c:	2020      	movs	r0, #32
 800ba4e:	4770      	bx	lr

0800ba50 <__i2b>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	460c      	mov	r4, r1
 800ba54:	2101      	movs	r1, #1
 800ba56:	f7ff feff 	bl	800b858 <_Balloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	b928      	cbnz	r0, 800ba6a <__i2b+0x1a>
 800ba5e:	4b05      	ldr	r3, [pc, #20]	; (800ba74 <__i2b+0x24>)
 800ba60:	4805      	ldr	r0, [pc, #20]	; (800ba78 <__i2b+0x28>)
 800ba62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba66:	f000 fc9b 	bl	800c3a0 <__assert_func>
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	6144      	str	r4, [r0, #20]
 800ba6e:	6103      	str	r3, [r0, #16]
 800ba70:	bd10      	pop	{r4, pc}
 800ba72:	bf00      	nop
 800ba74:	0800d7f3 	.word	0x0800d7f3
 800ba78:	0800d804 	.word	0x0800d804

0800ba7c <__multiply>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4614      	mov	r4, r2
 800ba82:	690a      	ldr	r2, [r1, #16]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	bfb8      	it	lt
 800ba8a:	460b      	movlt	r3, r1
 800ba8c:	460d      	mov	r5, r1
 800ba8e:	bfbc      	itt	lt
 800ba90:	4625      	movlt	r5, r4
 800ba92:	461c      	movlt	r4, r3
 800ba94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ba98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba9c:	68ab      	ldr	r3, [r5, #8]
 800ba9e:	6869      	ldr	r1, [r5, #4]
 800baa0:	eb0a 0709 	add.w	r7, sl, r9
 800baa4:	42bb      	cmp	r3, r7
 800baa6:	b085      	sub	sp, #20
 800baa8:	bfb8      	it	lt
 800baaa:	3101      	addlt	r1, #1
 800baac:	f7ff fed4 	bl	800b858 <_Balloc>
 800bab0:	b930      	cbnz	r0, 800bac0 <__multiply+0x44>
 800bab2:	4602      	mov	r2, r0
 800bab4:	4b42      	ldr	r3, [pc, #264]	; (800bbc0 <__multiply+0x144>)
 800bab6:	4843      	ldr	r0, [pc, #268]	; (800bbc4 <__multiply+0x148>)
 800bab8:	f240 115d 	movw	r1, #349	; 0x15d
 800babc:	f000 fc70 	bl	800c3a0 <__assert_func>
 800bac0:	f100 0614 	add.w	r6, r0, #20
 800bac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bac8:	4633      	mov	r3, r6
 800baca:	2200      	movs	r2, #0
 800bacc:	4543      	cmp	r3, r8
 800bace:	d31e      	bcc.n	800bb0e <__multiply+0x92>
 800bad0:	f105 0c14 	add.w	ip, r5, #20
 800bad4:	f104 0314 	add.w	r3, r4, #20
 800bad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800badc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bae0:	9202      	str	r2, [sp, #8]
 800bae2:	ebac 0205 	sub.w	r2, ip, r5
 800bae6:	3a15      	subs	r2, #21
 800bae8:	f022 0203 	bic.w	r2, r2, #3
 800baec:	3204      	adds	r2, #4
 800baee:	f105 0115 	add.w	r1, r5, #21
 800baf2:	458c      	cmp	ip, r1
 800baf4:	bf38      	it	cc
 800baf6:	2204      	movcc	r2, #4
 800baf8:	9201      	str	r2, [sp, #4]
 800bafa:	9a02      	ldr	r2, [sp, #8]
 800bafc:	9303      	str	r3, [sp, #12]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d808      	bhi.n	800bb14 <__multiply+0x98>
 800bb02:	2f00      	cmp	r7, #0
 800bb04:	dc55      	bgt.n	800bbb2 <__multiply+0x136>
 800bb06:	6107      	str	r7, [r0, #16]
 800bb08:	b005      	add	sp, #20
 800bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0e:	f843 2b04 	str.w	r2, [r3], #4
 800bb12:	e7db      	b.n	800bacc <__multiply+0x50>
 800bb14:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb18:	f1ba 0f00 	cmp.w	sl, #0
 800bb1c:	d020      	beq.n	800bb60 <__multiply+0xe4>
 800bb1e:	f105 0e14 	add.w	lr, r5, #20
 800bb22:	46b1      	mov	r9, r6
 800bb24:	2200      	movs	r2, #0
 800bb26:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bb2a:	f8d9 b000 	ldr.w	fp, [r9]
 800bb2e:	b2a1      	uxth	r1, r4
 800bb30:	fa1f fb8b 	uxth.w	fp, fp
 800bb34:	fb0a b101 	mla	r1, sl, r1, fp
 800bb38:	4411      	add	r1, r2
 800bb3a:	f8d9 2000 	ldr.w	r2, [r9]
 800bb3e:	0c24      	lsrs	r4, r4, #16
 800bb40:	0c12      	lsrs	r2, r2, #16
 800bb42:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb4a:	b289      	uxth	r1, r1
 800bb4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb50:	45f4      	cmp	ip, lr
 800bb52:	f849 1b04 	str.w	r1, [r9], #4
 800bb56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb5a:	d8e4      	bhi.n	800bb26 <__multiply+0xaa>
 800bb5c:	9901      	ldr	r1, [sp, #4]
 800bb5e:	5072      	str	r2, [r6, r1]
 800bb60:	9a03      	ldr	r2, [sp, #12]
 800bb62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb66:	3304      	adds	r3, #4
 800bb68:	f1b9 0f00 	cmp.w	r9, #0
 800bb6c:	d01f      	beq.n	800bbae <__multiply+0x132>
 800bb6e:	6834      	ldr	r4, [r6, #0]
 800bb70:	f105 0114 	add.w	r1, r5, #20
 800bb74:	46b6      	mov	lr, r6
 800bb76:	f04f 0a00 	mov.w	sl, #0
 800bb7a:	880a      	ldrh	r2, [r1, #0]
 800bb7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb80:	fb09 b202 	mla	r2, r9, r2, fp
 800bb84:	4492      	add	sl, r2
 800bb86:	b2a4      	uxth	r4, r4
 800bb88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bb8c:	f84e 4b04 	str.w	r4, [lr], #4
 800bb90:	f851 4b04 	ldr.w	r4, [r1], #4
 800bb94:	f8be 2000 	ldrh.w	r2, [lr]
 800bb98:	0c24      	lsrs	r4, r4, #16
 800bb9a:	fb09 2404 	mla	r4, r9, r4, r2
 800bb9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bba2:	458c      	cmp	ip, r1
 800bba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bba8:	d8e7      	bhi.n	800bb7a <__multiply+0xfe>
 800bbaa:	9a01      	ldr	r2, [sp, #4]
 800bbac:	50b4      	str	r4, [r6, r2]
 800bbae:	3604      	adds	r6, #4
 800bbb0:	e7a3      	b.n	800bafa <__multiply+0x7e>
 800bbb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1a5      	bne.n	800bb06 <__multiply+0x8a>
 800bbba:	3f01      	subs	r7, #1
 800bbbc:	e7a1      	b.n	800bb02 <__multiply+0x86>
 800bbbe:	bf00      	nop
 800bbc0:	0800d7f3 	.word	0x0800d7f3
 800bbc4:	0800d804 	.word	0x0800d804

0800bbc8 <__pow5mult>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	4615      	mov	r5, r2
 800bbce:	f012 0203 	ands.w	r2, r2, #3
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460f      	mov	r7, r1
 800bbd6:	d007      	beq.n	800bbe8 <__pow5mult+0x20>
 800bbd8:	4c25      	ldr	r4, [pc, #148]	; (800bc70 <__pow5mult+0xa8>)
 800bbda:	3a01      	subs	r2, #1
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbe2:	f7ff fe9b 	bl	800b91c <__multadd>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	10ad      	asrs	r5, r5, #2
 800bbea:	d03d      	beq.n	800bc68 <__pow5mult+0xa0>
 800bbec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbee:	b97c      	cbnz	r4, 800bc10 <__pow5mult+0x48>
 800bbf0:	2010      	movs	r0, #16
 800bbf2:	f7ff fe29 	bl	800b848 <malloc>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	6270      	str	r0, [r6, #36]	; 0x24
 800bbfa:	b928      	cbnz	r0, 800bc08 <__pow5mult+0x40>
 800bbfc:	4b1d      	ldr	r3, [pc, #116]	; (800bc74 <__pow5mult+0xac>)
 800bbfe:	481e      	ldr	r0, [pc, #120]	; (800bc78 <__pow5mult+0xb0>)
 800bc00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc04:	f000 fbcc 	bl	800c3a0 <__assert_func>
 800bc08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc0c:	6004      	str	r4, [r0, #0]
 800bc0e:	60c4      	str	r4, [r0, #12]
 800bc10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc18:	b94c      	cbnz	r4, 800bc2e <__pow5mult+0x66>
 800bc1a:	f240 2171 	movw	r1, #625	; 0x271
 800bc1e:	4630      	mov	r0, r6
 800bc20:	f7ff ff16 	bl	800ba50 <__i2b>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 0900 	mov.w	r9, #0
 800bc32:	07eb      	lsls	r3, r5, #31
 800bc34:	d50a      	bpl.n	800bc4c <__pow5mult+0x84>
 800bc36:	4639      	mov	r1, r7
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ff1e 	bl	800ba7c <__multiply>
 800bc40:	4639      	mov	r1, r7
 800bc42:	4680      	mov	r8, r0
 800bc44:	4630      	mov	r0, r6
 800bc46:	f7ff fe47 	bl	800b8d8 <_Bfree>
 800bc4a:	4647      	mov	r7, r8
 800bc4c:	106d      	asrs	r5, r5, #1
 800bc4e:	d00b      	beq.n	800bc68 <__pow5mult+0xa0>
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	b938      	cbnz	r0, 800bc64 <__pow5mult+0x9c>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4621      	mov	r1, r4
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f7ff ff0f 	bl	800ba7c <__multiply>
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	f8c0 9000 	str.w	r9, [r0]
 800bc64:	4604      	mov	r4, r0
 800bc66:	e7e4      	b.n	800bc32 <__pow5mult+0x6a>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc6e:	bf00      	nop
 800bc70:	0800d958 	.word	0x0800d958
 800bc74:	0800d77d 	.word	0x0800d77d
 800bc78:	0800d804 	.word	0x0800d804

0800bc7c <__lshift>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	460c      	mov	r4, r1
 800bc82:	6849      	ldr	r1, [r1, #4]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	4691      	mov	r9, r2
 800bc90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc94:	f108 0601 	add.w	r6, r8, #1
 800bc98:	42b3      	cmp	r3, r6
 800bc9a:	db0b      	blt.n	800bcb4 <__lshift+0x38>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff fddb 	bl	800b858 <_Balloc>
 800bca2:	4605      	mov	r5, r0
 800bca4:	b948      	cbnz	r0, 800bcba <__lshift+0x3e>
 800bca6:	4602      	mov	r2, r0
 800bca8:	4b28      	ldr	r3, [pc, #160]	; (800bd4c <__lshift+0xd0>)
 800bcaa:	4829      	ldr	r0, [pc, #164]	; (800bd50 <__lshift+0xd4>)
 800bcac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcb0:	f000 fb76 	bl	800c3a0 <__assert_func>
 800bcb4:	3101      	adds	r1, #1
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	e7ee      	b.n	800bc98 <__lshift+0x1c>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f100 0114 	add.w	r1, r0, #20
 800bcc0:	f100 0210 	add.w	r2, r0, #16
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	4553      	cmp	r3, sl
 800bcc8:	db33      	blt.n	800bd32 <__lshift+0xb6>
 800bcca:	6920      	ldr	r0, [r4, #16]
 800bccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcd0:	f104 0314 	add.w	r3, r4, #20
 800bcd4:	f019 091f 	ands.w	r9, r9, #31
 800bcd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bce0:	d02b      	beq.n	800bd3a <__lshift+0xbe>
 800bce2:	f1c9 0e20 	rsb	lr, r9, #32
 800bce6:	468a      	mov	sl, r1
 800bce8:	2200      	movs	r2, #0
 800bcea:	6818      	ldr	r0, [r3, #0]
 800bcec:	fa00 f009 	lsl.w	r0, r0, r9
 800bcf0:	4302      	orrs	r2, r0
 800bcf2:	f84a 2b04 	str.w	r2, [sl], #4
 800bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfa:	459c      	cmp	ip, r3
 800bcfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd00:	d8f3      	bhi.n	800bcea <__lshift+0x6e>
 800bd02:	ebac 0304 	sub.w	r3, ip, r4
 800bd06:	3b15      	subs	r3, #21
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	f104 0015 	add.w	r0, r4, #21
 800bd12:	4584      	cmp	ip, r0
 800bd14:	bf38      	it	cc
 800bd16:	2304      	movcc	r3, #4
 800bd18:	50ca      	str	r2, [r1, r3]
 800bd1a:	b10a      	cbz	r2, 800bd20 <__lshift+0xa4>
 800bd1c:	f108 0602 	add.w	r6, r8, #2
 800bd20:	3e01      	subs	r6, #1
 800bd22:	4638      	mov	r0, r7
 800bd24:	612e      	str	r6, [r5, #16]
 800bd26:	4621      	mov	r1, r4
 800bd28:	f7ff fdd6 	bl	800b8d8 <_Bfree>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd32:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd36:	3301      	adds	r3, #1
 800bd38:	e7c5      	b.n	800bcc6 <__lshift+0x4a>
 800bd3a:	3904      	subs	r1, #4
 800bd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd40:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd44:	459c      	cmp	ip, r3
 800bd46:	d8f9      	bhi.n	800bd3c <__lshift+0xc0>
 800bd48:	e7ea      	b.n	800bd20 <__lshift+0xa4>
 800bd4a:	bf00      	nop
 800bd4c:	0800d7f3 	.word	0x0800d7f3
 800bd50:	0800d804 	.word	0x0800d804

0800bd54 <__mcmp>:
 800bd54:	b530      	push	{r4, r5, lr}
 800bd56:	6902      	ldr	r2, [r0, #16]
 800bd58:	690c      	ldr	r4, [r1, #16]
 800bd5a:	1b12      	subs	r2, r2, r4
 800bd5c:	d10e      	bne.n	800bd7c <__mcmp+0x28>
 800bd5e:	f100 0314 	add.w	r3, r0, #20
 800bd62:	3114      	adds	r1, #20
 800bd64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd74:	42a5      	cmp	r5, r4
 800bd76:	d003      	beq.n	800bd80 <__mcmp+0x2c>
 800bd78:	d305      	bcc.n	800bd86 <__mcmp+0x32>
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	bd30      	pop	{r4, r5, pc}
 800bd80:	4283      	cmp	r3, r0
 800bd82:	d3f3      	bcc.n	800bd6c <__mcmp+0x18>
 800bd84:	e7fa      	b.n	800bd7c <__mcmp+0x28>
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8a:	e7f7      	b.n	800bd7c <__mcmp+0x28>

0800bd8c <__mdiff>:
 800bd8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	460c      	mov	r4, r1
 800bd92:	4606      	mov	r6, r0
 800bd94:	4611      	mov	r1, r2
 800bd96:	4620      	mov	r0, r4
 800bd98:	4617      	mov	r7, r2
 800bd9a:	f7ff ffdb 	bl	800bd54 <__mcmp>
 800bd9e:	1e05      	subs	r5, r0, #0
 800bda0:	d110      	bne.n	800bdc4 <__mdiff+0x38>
 800bda2:	4629      	mov	r1, r5
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7ff fd57 	bl	800b858 <_Balloc>
 800bdaa:	b930      	cbnz	r0, 800bdba <__mdiff+0x2e>
 800bdac:	4b39      	ldr	r3, [pc, #228]	; (800be94 <__mdiff+0x108>)
 800bdae:	4602      	mov	r2, r0
 800bdb0:	f240 2132 	movw	r1, #562	; 0x232
 800bdb4:	4838      	ldr	r0, [pc, #224]	; (800be98 <__mdiff+0x10c>)
 800bdb6:	f000 faf3 	bl	800c3a0 <__assert_func>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	bfa4      	itt	ge
 800bdc6:	463b      	movge	r3, r7
 800bdc8:	4627      	movge	r7, r4
 800bdca:	4630      	mov	r0, r6
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	bfa6      	itte	ge
 800bdd0:	461c      	movge	r4, r3
 800bdd2:	2500      	movge	r5, #0
 800bdd4:	2501      	movlt	r5, #1
 800bdd6:	f7ff fd3f 	bl	800b858 <_Balloc>
 800bdda:	b920      	cbnz	r0, 800bde6 <__mdiff+0x5a>
 800bddc:	4b2d      	ldr	r3, [pc, #180]	; (800be94 <__mdiff+0x108>)
 800bdde:	4602      	mov	r2, r0
 800bde0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bde4:	e7e6      	b.n	800bdb4 <__mdiff+0x28>
 800bde6:	693e      	ldr	r6, [r7, #16]
 800bde8:	60c5      	str	r5, [r0, #12]
 800bdea:	6925      	ldr	r5, [r4, #16]
 800bdec:	f107 0114 	add.w	r1, r7, #20
 800bdf0:	f104 0914 	add.w	r9, r4, #20
 800bdf4:	f100 0e14 	add.w	lr, r0, #20
 800bdf8:	f107 0210 	add.w	r2, r7, #16
 800bdfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800be00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800be04:	46f2      	mov	sl, lr
 800be06:	2700      	movs	r7, #0
 800be08:	f859 3b04 	ldr.w	r3, [r9], #4
 800be0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be10:	fa1f f883 	uxth.w	r8, r3
 800be14:	fa17 f78b 	uxtah	r7, r7, fp
 800be18:	0c1b      	lsrs	r3, r3, #16
 800be1a:	eba7 0808 	sub.w	r8, r7, r8
 800be1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be26:	fa1f f888 	uxth.w	r8, r8
 800be2a:	141f      	asrs	r7, r3, #16
 800be2c:	454d      	cmp	r5, r9
 800be2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be32:	f84a 3b04 	str.w	r3, [sl], #4
 800be36:	d8e7      	bhi.n	800be08 <__mdiff+0x7c>
 800be38:	1b2b      	subs	r3, r5, r4
 800be3a:	3b15      	subs	r3, #21
 800be3c:	f023 0303 	bic.w	r3, r3, #3
 800be40:	3304      	adds	r3, #4
 800be42:	3415      	adds	r4, #21
 800be44:	42a5      	cmp	r5, r4
 800be46:	bf38      	it	cc
 800be48:	2304      	movcc	r3, #4
 800be4a:	4419      	add	r1, r3
 800be4c:	4473      	add	r3, lr
 800be4e:	469e      	mov	lr, r3
 800be50:	460d      	mov	r5, r1
 800be52:	4565      	cmp	r5, ip
 800be54:	d30e      	bcc.n	800be74 <__mdiff+0xe8>
 800be56:	f10c 0203 	add.w	r2, ip, #3
 800be5a:	1a52      	subs	r2, r2, r1
 800be5c:	f022 0203 	bic.w	r2, r2, #3
 800be60:	3903      	subs	r1, #3
 800be62:	458c      	cmp	ip, r1
 800be64:	bf38      	it	cc
 800be66:	2200      	movcc	r2, #0
 800be68:	441a      	add	r2, r3
 800be6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be6e:	b17b      	cbz	r3, 800be90 <__mdiff+0x104>
 800be70:	6106      	str	r6, [r0, #16]
 800be72:	e7a5      	b.n	800bdc0 <__mdiff+0x34>
 800be74:	f855 8b04 	ldr.w	r8, [r5], #4
 800be78:	fa17 f488 	uxtah	r4, r7, r8
 800be7c:	1422      	asrs	r2, r4, #16
 800be7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800be82:	b2a4      	uxth	r4, r4
 800be84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800be88:	f84e 4b04 	str.w	r4, [lr], #4
 800be8c:	1417      	asrs	r7, r2, #16
 800be8e:	e7e0      	b.n	800be52 <__mdiff+0xc6>
 800be90:	3e01      	subs	r6, #1
 800be92:	e7ea      	b.n	800be6a <__mdiff+0xde>
 800be94:	0800d7f3 	.word	0x0800d7f3
 800be98:	0800d804 	.word	0x0800d804

0800be9c <__d2b>:
 800be9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bea0:	4689      	mov	r9, r1
 800bea2:	2101      	movs	r1, #1
 800bea4:	ec57 6b10 	vmov	r6, r7, d0
 800bea8:	4690      	mov	r8, r2
 800beaa:	f7ff fcd5 	bl	800b858 <_Balloc>
 800beae:	4604      	mov	r4, r0
 800beb0:	b930      	cbnz	r0, 800bec0 <__d2b+0x24>
 800beb2:	4602      	mov	r2, r0
 800beb4:	4b25      	ldr	r3, [pc, #148]	; (800bf4c <__d2b+0xb0>)
 800beb6:	4826      	ldr	r0, [pc, #152]	; (800bf50 <__d2b+0xb4>)
 800beb8:	f240 310a 	movw	r1, #778	; 0x30a
 800bebc:	f000 fa70 	bl	800c3a0 <__assert_func>
 800bec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bec8:	bb35      	cbnz	r5, 800bf18 <__d2b+0x7c>
 800beca:	2e00      	cmp	r6, #0
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	d028      	beq.n	800bf22 <__d2b+0x86>
 800bed0:	4668      	mov	r0, sp
 800bed2:	9600      	str	r6, [sp, #0]
 800bed4:	f7ff fd8c 	bl	800b9f0 <__lo0bits>
 800bed8:	9900      	ldr	r1, [sp, #0]
 800beda:	b300      	cbz	r0, 800bf1e <__d2b+0x82>
 800bedc:	9a01      	ldr	r2, [sp, #4]
 800bede:	f1c0 0320 	rsb	r3, r0, #32
 800bee2:	fa02 f303 	lsl.w	r3, r2, r3
 800bee6:	430b      	orrs	r3, r1
 800bee8:	40c2      	lsrs	r2, r0
 800beea:	6163      	str	r3, [r4, #20]
 800beec:	9201      	str	r2, [sp, #4]
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	61a3      	str	r3, [r4, #24]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bf14      	ite	ne
 800bef6:	2202      	movne	r2, #2
 800bef8:	2201      	moveq	r2, #1
 800befa:	6122      	str	r2, [r4, #16]
 800befc:	b1d5      	cbz	r5, 800bf34 <__d2b+0x98>
 800befe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf02:	4405      	add	r5, r0
 800bf04:	f8c9 5000 	str.w	r5, [r9]
 800bf08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf0c:	f8c8 0000 	str.w	r0, [r8]
 800bf10:	4620      	mov	r0, r4
 800bf12:	b003      	add	sp, #12
 800bf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf1c:	e7d5      	b.n	800beca <__d2b+0x2e>
 800bf1e:	6161      	str	r1, [r4, #20]
 800bf20:	e7e5      	b.n	800beee <__d2b+0x52>
 800bf22:	a801      	add	r0, sp, #4
 800bf24:	f7ff fd64 	bl	800b9f0 <__lo0bits>
 800bf28:	9b01      	ldr	r3, [sp, #4]
 800bf2a:	6163      	str	r3, [r4, #20]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	6122      	str	r2, [r4, #16]
 800bf30:	3020      	adds	r0, #32
 800bf32:	e7e3      	b.n	800befc <__d2b+0x60>
 800bf34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf3c:	f8c9 0000 	str.w	r0, [r9]
 800bf40:	6918      	ldr	r0, [r3, #16]
 800bf42:	f7ff fd35 	bl	800b9b0 <__hi0bits>
 800bf46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf4a:	e7df      	b.n	800bf0c <__d2b+0x70>
 800bf4c:	0800d7f3 	.word	0x0800d7f3
 800bf50:	0800d804 	.word	0x0800d804

0800bf54 <_calloc_r>:
 800bf54:	b513      	push	{r0, r1, r4, lr}
 800bf56:	434a      	muls	r2, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	9201      	str	r2, [sp, #4]
 800bf5c:	f000 f85a 	bl	800c014 <_malloc_r>
 800bf60:	4604      	mov	r4, r0
 800bf62:	b118      	cbz	r0, 800bf6c <_calloc_r+0x18>
 800bf64:	9a01      	ldr	r2, [sp, #4]
 800bf66:	2100      	movs	r1, #0
 800bf68:	f7fe f93e 	bl	800a1e8 <memset>
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	b002      	add	sp, #8
 800bf70:	bd10      	pop	{r4, pc}
	...

0800bf74 <_free_r>:
 800bf74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf76:	2900      	cmp	r1, #0
 800bf78:	d048      	beq.n	800c00c <_free_r+0x98>
 800bf7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf7e:	9001      	str	r0, [sp, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f1a1 0404 	sub.w	r4, r1, #4
 800bf86:	bfb8      	it	lt
 800bf88:	18e4      	addlt	r4, r4, r3
 800bf8a:	f000 fa65 	bl	800c458 <__malloc_lock>
 800bf8e:	4a20      	ldr	r2, [pc, #128]	; (800c010 <_free_r+0x9c>)
 800bf90:	9801      	ldr	r0, [sp, #4]
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	4615      	mov	r5, r2
 800bf96:	b933      	cbnz	r3, 800bfa6 <_free_r+0x32>
 800bf98:	6063      	str	r3, [r4, #4]
 800bf9a:	6014      	str	r4, [r2, #0]
 800bf9c:	b003      	add	sp, #12
 800bf9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfa2:	f000 ba5f 	b.w	800c464 <__malloc_unlock>
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	d90b      	bls.n	800bfc2 <_free_r+0x4e>
 800bfaa:	6821      	ldr	r1, [r4, #0]
 800bfac:	1862      	adds	r2, r4, r1
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	bf04      	itt	eq
 800bfb2:	681a      	ldreq	r2, [r3, #0]
 800bfb4:	685b      	ldreq	r3, [r3, #4]
 800bfb6:	6063      	str	r3, [r4, #4]
 800bfb8:	bf04      	itt	eq
 800bfba:	1852      	addeq	r2, r2, r1
 800bfbc:	6022      	streq	r2, [r4, #0]
 800bfbe:	602c      	str	r4, [r5, #0]
 800bfc0:	e7ec      	b.n	800bf9c <_free_r+0x28>
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	b10b      	cbz	r3, 800bfcc <_free_r+0x58>
 800bfc8:	42a3      	cmp	r3, r4
 800bfca:	d9fa      	bls.n	800bfc2 <_free_r+0x4e>
 800bfcc:	6811      	ldr	r1, [r2, #0]
 800bfce:	1855      	adds	r5, r2, r1
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	d10b      	bne.n	800bfec <_free_r+0x78>
 800bfd4:	6824      	ldr	r4, [r4, #0]
 800bfd6:	4421      	add	r1, r4
 800bfd8:	1854      	adds	r4, r2, r1
 800bfda:	42a3      	cmp	r3, r4
 800bfdc:	6011      	str	r1, [r2, #0]
 800bfde:	d1dd      	bne.n	800bf9c <_free_r+0x28>
 800bfe0:	681c      	ldr	r4, [r3, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	6053      	str	r3, [r2, #4]
 800bfe6:	4421      	add	r1, r4
 800bfe8:	6011      	str	r1, [r2, #0]
 800bfea:	e7d7      	b.n	800bf9c <_free_r+0x28>
 800bfec:	d902      	bls.n	800bff4 <_free_r+0x80>
 800bfee:	230c      	movs	r3, #12
 800bff0:	6003      	str	r3, [r0, #0]
 800bff2:	e7d3      	b.n	800bf9c <_free_r+0x28>
 800bff4:	6825      	ldr	r5, [r4, #0]
 800bff6:	1961      	adds	r1, r4, r5
 800bff8:	428b      	cmp	r3, r1
 800bffa:	bf04      	itt	eq
 800bffc:	6819      	ldreq	r1, [r3, #0]
 800bffe:	685b      	ldreq	r3, [r3, #4]
 800c000:	6063      	str	r3, [r4, #4]
 800c002:	bf04      	itt	eq
 800c004:	1949      	addeq	r1, r1, r5
 800c006:	6021      	streq	r1, [r4, #0]
 800c008:	6054      	str	r4, [r2, #4]
 800c00a:	e7c7      	b.n	800bf9c <_free_r+0x28>
 800c00c:	b003      	add	sp, #12
 800c00e:	bd30      	pop	{r4, r5, pc}
 800c010:	20000654 	.word	0x20000654

0800c014 <_malloc_r>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	1ccd      	adds	r5, r1, #3
 800c018:	f025 0503 	bic.w	r5, r5, #3
 800c01c:	3508      	adds	r5, #8
 800c01e:	2d0c      	cmp	r5, #12
 800c020:	bf38      	it	cc
 800c022:	250c      	movcc	r5, #12
 800c024:	2d00      	cmp	r5, #0
 800c026:	4606      	mov	r6, r0
 800c028:	db01      	blt.n	800c02e <_malloc_r+0x1a>
 800c02a:	42a9      	cmp	r1, r5
 800c02c:	d903      	bls.n	800c036 <_malloc_r+0x22>
 800c02e:	230c      	movs	r3, #12
 800c030:	6033      	str	r3, [r6, #0]
 800c032:	2000      	movs	r0, #0
 800c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c036:	f000 fa0f 	bl	800c458 <__malloc_lock>
 800c03a:	4921      	ldr	r1, [pc, #132]	; (800c0c0 <_malloc_r+0xac>)
 800c03c:	680a      	ldr	r2, [r1, #0]
 800c03e:	4614      	mov	r4, r2
 800c040:	b99c      	cbnz	r4, 800c06a <_malloc_r+0x56>
 800c042:	4f20      	ldr	r7, [pc, #128]	; (800c0c4 <_malloc_r+0xb0>)
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	b923      	cbnz	r3, 800c052 <_malloc_r+0x3e>
 800c048:	4621      	mov	r1, r4
 800c04a:	4630      	mov	r0, r6
 800c04c:	f000 f998 	bl	800c380 <_sbrk_r>
 800c050:	6038      	str	r0, [r7, #0]
 800c052:	4629      	mov	r1, r5
 800c054:	4630      	mov	r0, r6
 800c056:	f000 f993 	bl	800c380 <_sbrk_r>
 800c05a:	1c43      	adds	r3, r0, #1
 800c05c:	d123      	bne.n	800c0a6 <_malloc_r+0x92>
 800c05e:	230c      	movs	r3, #12
 800c060:	6033      	str	r3, [r6, #0]
 800c062:	4630      	mov	r0, r6
 800c064:	f000 f9fe 	bl	800c464 <__malloc_unlock>
 800c068:	e7e3      	b.n	800c032 <_malloc_r+0x1e>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	1b5b      	subs	r3, r3, r5
 800c06e:	d417      	bmi.n	800c0a0 <_malloc_r+0x8c>
 800c070:	2b0b      	cmp	r3, #11
 800c072:	d903      	bls.n	800c07c <_malloc_r+0x68>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	441c      	add	r4, r3
 800c078:	6025      	str	r5, [r4, #0]
 800c07a:	e004      	b.n	800c086 <_malloc_r+0x72>
 800c07c:	6863      	ldr	r3, [r4, #4]
 800c07e:	42a2      	cmp	r2, r4
 800c080:	bf0c      	ite	eq
 800c082:	600b      	streq	r3, [r1, #0]
 800c084:	6053      	strne	r3, [r2, #4]
 800c086:	4630      	mov	r0, r6
 800c088:	f000 f9ec 	bl	800c464 <__malloc_unlock>
 800c08c:	f104 000b 	add.w	r0, r4, #11
 800c090:	1d23      	adds	r3, r4, #4
 800c092:	f020 0007 	bic.w	r0, r0, #7
 800c096:	1ac2      	subs	r2, r0, r3
 800c098:	d0cc      	beq.n	800c034 <_malloc_r+0x20>
 800c09a:	1a1b      	subs	r3, r3, r0
 800c09c:	50a3      	str	r3, [r4, r2]
 800c09e:	e7c9      	b.n	800c034 <_malloc_r+0x20>
 800c0a0:	4622      	mov	r2, r4
 800c0a2:	6864      	ldr	r4, [r4, #4]
 800c0a4:	e7cc      	b.n	800c040 <_malloc_r+0x2c>
 800c0a6:	1cc4      	adds	r4, r0, #3
 800c0a8:	f024 0403 	bic.w	r4, r4, #3
 800c0ac:	42a0      	cmp	r0, r4
 800c0ae:	d0e3      	beq.n	800c078 <_malloc_r+0x64>
 800c0b0:	1a21      	subs	r1, r4, r0
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f000 f964 	bl	800c380 <_sbrk_r>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d1dd      	bne.n	800c078 <_malloc_r+0x64>
 800c0bc:	e7cf      	b.n	800c05e <_malloc_r+0x4a>
 800c0be:	bf00      	nop
 800c0c0:	20000654 	.word	0x20000654
 800c0c4:	20000658 	.word	0x20000658

0800c0c8 <__ssputs_r>:
 800c0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0cc:	688e      	ldr	r6, [r1, #8]
 800c0ce:	429e      	cmp	r6, r3
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	4690      	mov	r8, r2
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	d838      	bhi.n	800c14c <__ssputs_r+0x84>
 800c0da:	898a      	ldrh	r2, [r1, #12]
 800c0dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0e0:	d032      	beq.n	800c148 <__ssputs_r+0x80>
 800c0e2:	6825      	ldr	r5, [r4, #0]
 800c0e4:	6909      	ldr	r1, [r1, #16]
 800c0e6:	eba5 0901 	sub.w	r9, r5, r1
 800c0ea:	6965      	ldr	r5, [r4, #20]
 800c0ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	444b      	add	r3, r9
 800c0f8:	106d      	asrs	r5, r5, #1
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	bf38      	it	cc
 800c0fe:	461d      	movcc	r5, r3
 800c100:	0553      	lsls	r3, r2, #21
 800c102:	d531      	bpl.n	800c168 <__ssputs_r+0xa0>
 800c104:	4629      	mov	r1, r5
 800c106:	f7ff ff85 	bl	800c014 <_malloc_r>
 800c10a:	4606      	mov	r6, r0
 800c10c:	b950      	cbnz	r0, 800c124 <__ssputs_r+0x5c>
 800c10e:	230c      	movs	r3, #12
 800c110:	f8ca 3000 	str.w	r3, [sl]
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c124:	6921      	ldr	r1, [r4, #16]
 800c126:	464a      	mov	r2, r9
 800c128:	f7fe f850 	bl	800a1cc <memcpy>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	6126      	str	r6, [r4, #16]
 800c13a:	6165      	str	r5, [r4, #20]
 800c13c:	444e      	add	r6, r9
 800c13e:	eba5 0509 	sub.w	r5, r5, r9
 800c142:	6026      	str	r6, [r4, #0]
 800c144:	60a5      	str	r5, [r4, #8]
 800c146:	463e      	mov	r6, r7
 800c148:	42be      	cmp	r6, r7
 800c14a:	d900      	bls.n	800c14e <__ssputs_r+0x86>
 800c14c:	463e      	mov	r6, r7
 800c14e:	4632      	mov	r2, r6
 800c150:	6820      	ldr	r0, [r4, #0]
 800c152:	4641      	mov	r1, r8
 800c154:	f000 f966 	bl	800c424 <memmove>
 800c158:	68a3      	ldr	r3, [r4, #8]
 800c15a:	6822      	ldr	r2, [r4, #0]
 800c15c:	1b9b      	subs	r3, r3, r6
 800c15e:	4432      	add	r2, r6
 800c160:	60a3      	str	r3, [r4, #8]
 800c162:	6022      	str	r2, [r4, #0]
 800c164:	2000      	movs	r0, #0
 800c166:	e7db      	b.n	800c120 <__ssputs_r+0x58>
 800c168:	462a      	mov	r2, r5
 800c16a:	f000 f981 	bl	800c470 <_realloc_r>
 800c16e:	4606      	mov	r6, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d1e1      	bne.n	800c138 <__ssputs_r+0x70>
 800c174:	6921      	ldr	r1, [r4, #16]
 800c176:	4650      	mov	r0, sl
 800c178:	f7ff fefc 	bl	800bf74 <_free_r>
 800c17c:	e7c7      	b.n	800c10e <__ssputs_r+0x46>
	...

0800c180 <_svfiprintf_r>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4698      	mov	r8, r3
 800c186:	898b      	ldrh	r3, [r1, #12]
 800c188:	061b      	lsls	r3, r3, #24
 800c18a:	b09d      	sub	sp, #116	; 0x74
 800c18c:	4607      	mov	r7, r0
 800c18e:	460d      	mov	r5, r1
 800c190:	4614      	mov	r4, r2
 800c192:	d50e      	bpl.n	800c1b2 <_svfiprintf_r+0x32>
 800c194:	690b      	ldr	r3, [r1, #16]
 800c196:	b963      	cbnz	r3, 800c1b2 <_svfiprintf_r+0x32>
 800c198:	2140      	movs	r1, #64	; 0x40
 800c19a:	f7ff ff3b 	bl	800c014 <_malloc_r>
 800c19e:	6028      	str	r0, [r5, #0]
 800c1a0:	6128      	str	r0, [r5, #16]
 800c1a2:	b920      	cbnz	r0, 800c1ae <_svfiprintf_r+0x2e>
 800c1a4:	230c      	movs	r3, #12
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	e0d1      	b.n	800c352 <_svfiprintf_r+0x1d2>
 800c1ae:	2340      	movs	r3, #64	; 0x40
 800c1b0:	616b      	str	r3, [r5, #20]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1b6:	2320      	movs	r3, #32
 800c1b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1c0:	2330      	movs	r3, #48	; 0x30
 800c1c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c36c <_svfiprintf_r+0x1ec>
 800c1c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1ca:	f04f 0901 	mov.w	r9, #1
 800c1ce:	4623      	mov	r3, r4
 800c1d0:	469a      	mov	sl, r3
 800c1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1d6:	b10a      	cbz	r2, 800c1dc <_svfiprintf_r+0x5c>
 800c1d8:	2a25      	cmp	r2, #37	; 0x25
 800c1da:	d1f9      	bne.n	800c1d0 <_svfiprintf_r+0x50>
 800c1dc:	ebba 0b04 	subs.w	fp, sl, r4
 800c1e0:	d00b      	beq.n	800c1fa <_svfiprintf_r+0x7a>
 800c1e2:	465b      	mov	r3, fp
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7ff ff6d 	bl	800c0c8 <__ssputs_r>
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f000 80aa 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c1f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1f6:	445a      	add	r2, fp
 800c1f8:	9209      	str	r2, [sp, #36]	; 0x24
 800c1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	f000 80a2 	beq.w	800c348 <_svfiprintf_r+0x1c8>
 800c204:	2300      	movs	r3, #0
 800c206:	f04f 32ff 	mov.w	r2, #4294967295
 800c20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c20e:	f10a 0a01 	add.w	sl, sl, #1
 800c212:	9304      	str	r3, [sp, #16]
 800c214:	9307      	str	r3, [sp, #28]
 800c216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c21a:	931a      	str	r3, [sp, #104]	; 0x68
 800c21c:	4654      	mov	r4, sl
 800c21e:	2205      	movs	r2, #5
 800c220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c224:	4851      	ldr	r0, [pc, #324]	; (800c36c <_svfiprintf_r+0x1ec>)
 800c226:	f7f3 ffe3 	bl	80001f0 <memchr>
 800c22a:	9a04      	ldr	r2, [sp, #16]
 800c22c:	b9d8      	cbnz	r0, 800c266 <_svfiprintf_r+0xe6>
 800c22e:	06d0      	lsls	r0, r2, #27
 800c230:	bf44      	itt	mi
 800c232:	2320      	movmi	r3, #32
 800c234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c238:	0711      	lsls	r1, r2, #28
 800c23a:	bf44      	itt	mi
 800c23c:	232b      	movmi	r3, #43	; 0x2b
 800c23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c242:	f89a 3000 	ldrb.w	r3, [sl]
 800c246:	2b2a      	cmp	r3, #42	; 0x2a
 800c248:	d015      	beq.n	800c276 <_svfiprintf_r+0xf6>
 800c24a:	9a07      	ldr	r2, [sp, #28]
 800c24c:	4654      	mov	r4, sl
 800c24e:	2000      	movs	r0, #0
 800c250:	f04f 0c0a 	mov.w	ip, #10
 800c254:	4621      	mov	r1, r4
 800c256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c25a:	3b30      	subs	r3, #48	; 0x30
 800c25c:	2b09      	cmp	r3, #9
 800c25e:	d94e      	bls.n	800c2fe <_svfiprintf_r+0x17e>
 800c260:	b1b0      	cbz	r0, 800c290 <_svfiprintf_r+0x110>
 800c262:	9207      	str	r2, [sp, #28]
 800c264:	e014      	b.n	800c290 <_svfiprintf_r+0x110>
 800c266:	eba0 0308 	sub.w	r3, r0, r8
 800c26a:	fa09 f303 	lsl.w	r3, r9, r3
 800c26e:	4313      	orrs	r3, r2
 800c270:	9304      	str	r3, [sp, #16]
 800c272:	46a2      	mov	sl, r4
 800c274:	e7d2      	b.n	800c21c <_svfiprintf_r+0x9c>
 800c276:	9b03      	ldr	r3, [sp, #12]
 800c278:	1d19      	adds	r1, r3, #4
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	9103      	str	r1, [sp, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	bfbb      	ittet	lt
 800c282:	425b      	neglt	r3, r3
 800c284:	f042 0202 	orrlt.w	r2, r2, #2
 800c288:	9307      	strge	r3, [sp, #28]
 800c28a:	9307      	strlt	r3, [sp, #28]
 800c28c:	bfb8      	it	lt
 800c28e:	9204      	strlt	r2, [sp, #16]
 800c290:	7823      	ldrb	r3, [r4, #0]
 800c292:	2b2e      	cmp	r3, #46	; 0x2e
 800c294:	d10c      	bne.n	800c2b0 <_svfiprintf_r+0x130>
 800c296:	7863      	ldrb	r3, [r4, #1]
 800c298:	2b2a      	cmp	r3, #42	; 0x2a
 800c29a:	d135      	bne.n	800c308 <_svfiprintf_r+0x188>
 800c29c:	9b03      	ldr	r3, [sp, #12]
 800c29e:	1d1a      	adds	r2, r3, #4
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	9203      	str	r2, [sp, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	bfb8      	it	lt
 800c2a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2ac:	3402      	adds	r4, #2
 800c2ae:	9305      	str	r3, [sp, #20]
 800c2b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c37c <_svfiprintf_r+0x1fc>
 800c2b4:	7821      	ldrb	r1, [r4, #0]
 800c2b6:	2203      	movs	r2, #3
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	f7f3 ff99 	bl	80001f0 <memchr>
 800c2be:	b140      	cbz	r0, 800c2d2 <_svfiprintf_r+0x152>
 800c2c0:	2340      	movs	r3, #64	; 0x40
 800c2c2:	eba0 000a 	sub.w	r0, r0, sl
 800c2c6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2ca:	9b04      	ldr	r3, [sp, #16]
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	3401      	adds	r4, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2d6:	4826      	ldr	r0, [pc, #152]	; (800c370 <_svfiprintf_r+0x1f0>)
 800c2d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2dc:	2206      	movs	r2, #6
 800c2de:	f7f3 ff87 	bl	80001f0 <memchr>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d038      	beq.n	800c358 <_svfiprintf_r+0x1d8>
 800c2e6:	4b23      	ldr	r3, [pc, #140]	; (800c374 <_svfiprintf_r+0x1f4>)
 800c2e8:	bb1b      	cbnz	r3, 800c332 <_svfiprintf_r+0x1b2>
 800c2ea:	9b03      	ldr	r3, [sp, #12]
 800c2ec:	3307      	adds	r3, #7
 800c2ee:	f023 0307 	bic.w	r3, r3, #7
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	9303      	str	r3, [sp, #12]
 800c2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f8:	4433      	add	r3, r6
 800c2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c2fc:	e767      	b.n	800c1ce <_svfiprintf_r+0x4e>
 800c2fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800c302:	460c      	mov	r4, r1
 800c304:	2001      	movs	r0, #1
 800c306:	e7a5      	b.n	800c254 <_svfiprintf_r+0xd4>
 800c308:	2300      	movs	r3, #0
 800c30a:	3401      	adds	r4, #1
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	4619      	mov	r1, r3
 800c310:	f04f 0c0a 	mov.w	ip, #10
 800c314:	4620      	mov	r0, r4
 800c316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c31a:	3a30      	subs	r2, #48	; 0x30
 800c31c:	2a09      	cmp	r2, #9
 800c31e:	d903      	bls.n	800c328 <_svfiprintf_r+0x1a8>
 800c320:	2b00      	cmp	r3, #0
 800c322:	d0c5      	beq.n	800c2b0 <_svfiprintf_r+0x130>
 800c324:	9105      	str	r1, [sp, #20]
 800c326:	e7c3      	b.n	800c2b0 <_svfiprintf_r+0x130>
 800c328:	fb0c 2101 	mla	r1, ip, r1, r2
 800c32c:	4604      	mov	r4, r0
 800c32e:	2301      	movs	r3, #1
 800c330:	e7f0      	b.n	800c314 <_svfiprintf_r+0x194>
 800c332:	ab03      	add	r3, sp, #12
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	462a      	mov	r2, r5
 800c338:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c33a:	a904      	add	r1, sp, #16
 800c33c:	4638      	mov	r0, r7
 800c33e:	f7fd fffb 	bl	800a338 <_printf_float>
 800c342:	1c42      	adds	r2, r0, #1
 800c344:	4606      	mov	r6, r0
 800c346:	d1d6      	bne.n	800c2f6 <_svfiprintf_r+0x176>
 800c348:	89ab      	ldrh	r3, [r5, #12]
 800c34a:	065b      	lsls	r3, r3, #25
 800c34c:	f53f af2c 	bmi.w	800c1a8 <_svfiprintf_r+0x28>
 800c350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c352:	b01d      	add	sp, #116	; 0x74
 800c354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c358:	ab03      	add	r3, sp, #12
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	462a      	mov	r2, r5
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <_svfiprintf_r+0x1f8>)
 800c360:	a904      	add	r1, sp, #16
 800c362:	4638      	mov	r0, r7
 800c364:	f7fe fa8c 	bl	800a880 <_printf_i>
 800c368:	e7eb      	b.n	800c342 <_svfiprintf_r+0x1c2>
 800c36a:	bf00      	nop
 800c36c:	0800d964 	.word	0x0800d964
 800c370:	0800d96e 	.word	0x0800d96e
 800c374:	0800a339 	.word	0x0800a339
 800c378:	0800c0c9 	.word	0x0800c0c9
 800c37c:	0800d96a 	.word	0x0800d96a

0800c380 <_sbrk_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	; (800c39c <_sbrk_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f6 fe72 	bl	8003074 <_sbrk>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_sbrk_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_sbrk_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	200011d0 	.word	0x200011d0

0800c3a0 <__assert_func>:
 800c3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3a2:	4614      	mov	r4, r2
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b09      	ldr	r3, [pc, #36]	; (800c3cc <__assert_func+0x2c>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	68d8      	ldr	r0, [r3, #12]
 800c3ae:	b14c      	cbz	r4, 800c3c4 <__assert_func+0x24>
 800c3b0:	4b07      	ldr	r3, [pc, #28]	; (800c3d0 <__assert_func+0x30>)
 800c3b2:	9100      	str	r1, [sp, #0]
 800c3b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3b8:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <__assert_func+0x34>)
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	f000 f80e 	bl	800c3dc <fiprintf>
 800c3c0:	f000 faa4 	bl	800c90c <abort>
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <__assert_func+0x38>)
 800c3c6:	461c      	mov	r4, r3
 800c3c8:	e7f3      	b.n	800c3b2 <__assert_func+0x12>
 800c3ca:	bf00      	nop
 800c3cc:	20000024 	.word	0x20000024
 800c3d0:	0800d975 	.word	0x0800d975
 800c3d4:	0800d982 	.word	0x0800d982
 800c3d8:	0800d9b0 	.word	0x0800d9b0

0800c3dc <fiprintf>:
 800c3dc:	b40e      	push	{r1, r2, r3}
 800c3de:	b503      	push	{r0, r1, lr}
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	ab03      	add	r3, sp, #12
 800c3e4:	4805      	ldr	r0, [pc, #20]	; (800c3fc <fiprintf+0x20>)
 800c3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	9301      	str	r3, [sp, #4]
 800c3ee:	f000 f88f 	bl	800c510 <_vfiprintf_r>
 800c3f2:	b002      	add	sp, #8
 800c3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3f8:	b003      	add	sp, #12
 800c3fa:	4770      	bx	lr
 800c3fc:	20000024 	.word	0x20000024

0800c400 <__ascii_mbtowc>:
 800c400:	b082      	sub	sp, #8
 800c402:	b901      	cbnz	r1, 800c406 <__ascii_mbtowc+0x6>
 800c404:	a901      	add	r1, sp, #4
 800c406:	b142      	cbz	r2, 800c41a <__ascii_mbtowc+0x1a>
 800c408:	b14b      	cbz	r3, 800c41e <__ascii_mbtowc+0x1e>
 800c40a:	7813      	ldrb	r3, [r2, #0]
 800c40c:	600b      	str	r3, [r1, #0]
 800c40e:	7812      	ldrb	r2, [r2, #0]
 800c410:	1e10      	subs	r0, r2, #0
 800c412:	bf18      	it	ne
 800c414:	2001      	movne	r0, #1
 800c416:	b002      	add	sp, #8
 800c418:	4770      	bx	lr
 800c41a:	4610      	mov	r0, r2
 800c41c:	e7fb      	b.n	800c416 <__ascii_mbtowc+0x16>
 800c41e:	f06f 0001 	mvn.w	r0, #1
 800c422:	e7f8      	b.n	800c416 <__ascii_mbtowc+0x16>

0800c424 <memmove>:
 800c424:	4288      	cmp	r0, r1
 800c426:	b510      	push	{r4, lr}
 800c428:	eb01 0402 	add.w	r4, r1, r2
 800c42c:	d902      	bls.n	800c434 <memmove+0x10>
 800c42e:	4284      	cmp	r4, r0
 800c430:	4623      	mov	r3, r4
 800c432:	d807      	bhi.n	800c444 <memmove+0x20>
 800c434:	1e43      	subs	r3, r0, #1
 800c436:	42a1      	cmp	r1, r4
 800c438:	d008      	beq.n	800c44c <memmove+0x28>
 800c43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c43e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c442:	e7f8      	b.n	800c436 <memmove+0x12>
 800c444:	4402      	add	r2, r0
 800c446:	4601      	mov	r1, r0
 800c448:	428a      	cmp	r2, r1
 800c44a:	d100      	bne.n	800c44e <memmove+0x2a>
 800c44c:	bd10      	pop	{r4, pc}
 800c44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c456:	e7f7      	b.n	800c448 <memmove+0x24>

0800c458 <__malloc_lock>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__malloc_lock+0x8>)
 800c45a:	f000 bc17 	b.w	800cc8c <__retarget_lock_acquire_recursive>
 800c45e:	bf00      	nop
 800c460:	200011d8 	.word	0x200011d8

0800c464 <__malloc_unlock>:
 800c464:	4801      	ldr	r0, [pc, #4]	; (800c46c <__malloc_unlock+0x8>)
 800c466:	f000 bc12 	b.w	800cc8e <__retarget_lock_release_recursive>
 800c46a:	bf00      	nop
 800c46c:	200011d8 	.word	0x200011d8

0800c470 <_realloc_r>:
 800c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c472:	4607      	mov	r7, r0
 800c474:	4614      	mov	r4, r2
 800c476:	460e      	mov	r6, r1
 800c478:	b921      	cbnz	r1, 800c484 <_realloc_r+0x14>
 800c47a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c47e:	4611      	mov	r1, r2
 800c480:	f7ff bdc8 	b.w	800c014 <_malloc_r>
 800c484:	b922      	cbnz	r2, 800c490 <_realloc_r+0x20>
 800c486:	f7ff fd75 	bl	800bf74 <_free_r>
 800c48a:	4625      	mov	r5, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c490:	f000 fc62 	bl	800cd58 <_malloc_usable_size_r>
 800c494:	42a0      	cmp	r0, r4
 800c496:	d20f      	bcs.n	800c4b8 <_realloc_r+0x48>
 800c498:	4621      	mov	r1, r4
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff fdba 	bl	800c014 <_malloc_r>
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d0f2      	beq.n	800c48c <_realloc_r+0x1c>
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	f7fd fe8f 	bl	800a1cc <memcpy>
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff fd5f 	bl	800bf74 <_free_r>
 800c4b6:	e7e9      	b.n	800c48c <_realloc_r+0x1c>
 800c4b8:	4635      	mov	r5, r6
 800c4ba:	e7e7      	b.n	800c48c <_realloc_r+0x1c>

0800c4bc <__sfputc_r>:
 800c4bc:	6893      	ldr	r3, [r2, #8]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	b410      	push	{r4}
 800c4c4:	6093      	str	r3, [r2, #8]
 800c4c6:	da08      	bge.n	800c4da <__sfputc_r+0x1e>
 800c4c8:	6994      	ldr	r4, [r2, #24]
 800c4ca:	42a3      	cmp	r3, r4
 800c4cc:	db01      	blt.n	800c4d2 <__sfputc_r+0x16>
 800c4ce:	290a      	cmp	r1, #10
 800c4d0:	d103      	bne.n	800c4da <__sfputc_r+0x1e>
 800c4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4d6:	f000 b94b 	b.w	800c770 <__swbuf_r>
 800c4da:	6813      	ldr	r3, [r2, #0]
 800c4dc:	1c58      	adds	r0, r3, #1
 800c4de:	6010      	str	r0, [r2, #0]
 800c4e0:	7019      	strb	r1, [r3, #0]
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <__sfputs_r>:
 800c4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	460f      	mov	r7, r1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	18d5      	adds	r5, r2, r3
 800c4f4:	42ac      	cmp	r4, r5
 800c4f6:	d101      	bne.n	800c4fc <__sfputs_r+0x12>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	e007      	b.n	800c50c <__sfputs_r+0x22>
 800c4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c500:	463a      	mov	r2, r7
 800c502:	4630      	mov	r0, r6
 800c504:	f7ff ffda 	bl	800c4bc <__sfputc_r>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d1f3      	bne.n	800c4f4 <__sfputs_r+0xa>
 800c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c510 <_vfiprintf_r>:
 800c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c514:	460d      	mov	r5, r1
 800c516:	b09d      	sub	sp, #116	; 0x74
 800c518:	4614      	mov	r4, r2
 800c51a:	4698      	mov	r8, r3
 800c51c:	4606      	mov	r6, r0
 800c51e:	b118      	cbz	r0, 800c528 <_vfiprintf_r+0x18>
 800c520:	6983      	ldr	r3, [r0, #24]
 800c522:	b90b      	cbnz	r3, 800c528 <_vfiprintf_r+0x18>
 800c524:	f000 fb14 	bl	800cb50 <__sinit>
 800c528:	4b89      	ldr	r3, [pc, #548]	; (800c750 <_vfiprintf_r+0x240>)
 800c52a:	429d      	cmp	r5, r3
 800c52c:	d11b      	bne.n	800c566 <_vfiprintf_r+0x56>
 800c52e:	6875      	ldr	r5, [r6, #4]
 800c530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c532:	07d9      	lsls	r1, r3, #31
 800c534:	d405      	bmi.n	800c542 <_vfiprintf_r+0x32>
 800c536:	89ab      	ldrh	r3, [r5, #12]
 800c538:	059a      	lsls	r2, r3, #22
 800c53a:	d402      	bmi.n	800c542 <_vfiprintf_r+0x32>
 800c53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53e:	f000 fba5 	bl	800cc8c <__retarget_lock_acquire_recursive>
 800c542:	89ab      	ldrh	r3, [r5, #12]
 800c544:	071b      	lsls	r3, r3, #28
 800c546:	d501      	bpl.n	800c54c <_vfiprintf_r+0x3c>
 800c548:	692b      	ldr	r3, [r5, #16]
 800c54a:	b9eb      	cbnz	r3, 800c588 <_vfiprintf_r+0x78>
 800c54c:	4629      	mov	r1, r5
 800c54e:	4630      	mov	r0, r6
 800c550:	f000 f96e 	bl	800c830 <__swsetup_r>
 800c554:	b1c0      	cbz	r0, 800c588 <_vfiprintf_r+0x78>
 800c556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c558:	07dc      	lsls	r4, r3, #31
 800c55a:	d50e      	bpl.n	800c57a <_vfiprintf_r+0x6a>
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	b01d      	add	sp, #116	; 0x74
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c566:	4b7b      	ldr	r3, [pc, #492]	; (800c754 <_vfiprintf_r+0x244>)
 800c568:	429d      	cmp	r5, r3
 800c56a:	d101      	bne.n	800c570 <_vfiprintf_r+0x60>
 800c56c:	68b5      	ldr	r5, [r6, #8]
 800c56e:	e7df      	b.n	800c530 <_vfiprintf_r+0x20>
 800c570:	4b79      	ldr	r3, [pc, #484]	; (800c758 <_vfiprintf_r+0x248>)
 800c572:	429d      	cmp	r5, r3
 800c574:	bf08      	it	eq
 800c576:	68f5      	ldreq	r5, [r6, #12]
 800c578:	e7da      	b.n	800c530 <_vfiprintf_r+0x20>
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	0598      	lsls	r0, r3, #22
 800c57e:	d4ed      	bmi.n	800c55c <_vfiprintf_r+0x4c>
 800c580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c582:	f000 fb84 	bl	800cc8e <__retarget_lock_release_recursive>
 800c586:	e7e9      	b.n	800c55c <_vfiprintf_r+0x4c>
 800c588:	2300      	movs	r3, #0
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	2320      	movs	r3, #32
 800c58e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c592:	f8cd 800c 	str.w	r8, [sp, #12]
 800c596:	2330      	movs	r3, #48	; 0x30
 800c598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c75c <_vfiprintf_r+0x24c>
 800c59c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5a0:	f04f 0901 	mov.w	r9, #1
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	469a      	mov	sl, r3
 800c5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ac:	b10a      	cbz	r2, 800c5b2 <_vfiprintf_r+0xa2>
 800c5ae:	2a25      	cmp	r2, #37	; 0x25
 800c5b0:	d1f9      	bne.n	800c5a6 <_vfiprintf_r+0x96>
 800c5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b6:	d00b      	beq.n	800c5d0 <_vfiprintf_r+0xc0>
 800c5b8:	465b      	mov	r3, fp
 800c5ba:	4622      	mov	r2, r4
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f7ff ff93 	bl	800c4ea <__sfputs_r>
 800c5c4:	3001      	adds	r0, #1
 800c5c6:	f000 80aa 	beq.w	800c71e <_vfiprintf_r+0x20e>
 800c5ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5cc:	445a      	add	r2, fp
 800c5ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	f000 80a2 	beq.w	800c71e <_vfiprintf_r+0x20e>
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e4:	f10a 0a01 	add.w	sl, sl, #1
 800c5e8:	9304      	str	r3, [sp, #16]
 800c5ea:	9307      	str	r3, [sp, #28]
 800c5ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c5f2:	4654      	mov	r4, sl
 800c5f4:	2205      	movs	r2, #5
 800c5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fa:	4858      	ldr	r0, [pc, #352]	; (800c75c <_vfiprintf_r+0x24c>)
 800c5fc:	f7f3 fdf8 	bl	80001f0 <memchr>
 800c600:	9a04      	ldr	r2, [sp, #16]
 800c602:	b9d8      	cbnz	r0, 800c63c <_vfiprintf_r+0x12c>
 800c604:	06d1      	lsls	r1, r2, #27
 800c606:	bf44      	itt	mi
 800c608:	2320      	movmi	r3, #32
 800c60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c60e:	0713      	lsls	r3, r2, #28
 800c610:	bf44      	itt	mi
 800c612:	232b      	movmi	r3, #43	; 0x2b
 800c614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c618:	f89a 3000 	ldrb.w	r3, [sl]
 800c61c:	2b2a      	cmp	r3, #42	; 0x2a
 800c61e:	d015      	beq.n	800c64c <_vfiprintf_r+0x13c>
 800c620:	9a07      	ldr	r2, [sp, #28]
 800c622:	4654      	mov	r4, sl
 800c624:	2000      	movs	r0, #0
 800c626:	f04f 0c0a 	mov.w	ip, #10
 800c62a:	4621      	mov	r1, r4
 800c62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c630:	3b30      	subs	r3, #48	; 0x30
 800c632:	2b09      	cmp	r3, #9
 800c634:	d94e      	bls.n	800c6d4 <_vfiprintf_r+0x1c4>
 800c636:	b1b0      	cbz	r0, 800c666 <_vfiprintf_r+0x156>
 800c638:	9207      	str	r2, [sp, #28]
 800c63a:	e014      	b.n	800c666 <_vfiprintf_r+0x156>
 800c63c:	eba0 0308 	sub.w	r3, r0, r8
 800c640:	fa09 f303 	lsl.w	r3, r9, r3
 800c644:	4313      	orrs	r3, r2
 800c646:	9304      	str	r3, [sp, #16]
 800c648:	46a2      	mov	sl, r4
 800c64a:	e7d2      	b.n	800c5f2 <_vfiprintf_r+0xe2>
 800c64c:	9b03      	ldr	r3, [sp, #12]
 800c64e:	1d19      	adds	r1, r3, #4
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	9103      	str	r1, [sp, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bfbb      	ittet	lt
 800c658:	425b      	neglt	r3, r3
 800c65a:	f042 0202 	orrlt.w	r2, r2, #2
 800c65e:	9307      	strge	r3, [sp, #28]
 800c660:	9307      	strlt	r3, [sp, #28]
 800c662:	bfb8      	it	lt
 800c664:	9204      	strlt	r2, [sp, #16]
 800c666:	7823      	ldrb	r3, [r4, #0]
 800c668:	2b2e      	cmp	r3, #46	; 0x2e
 800c66a:	d10c      	bne.n	800c686 <_vfiprintf_r+0x176>
 800c66c:	7863      	ldrb	r3, [r4, #1]
 800c66e:	2b2a      	cmp	r3, #42	; 0x2a
 800c670:	d135      	bne.n	800c6de <_vfiprintf_r+0x1ce>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	1d1a      	adds	r2, r3, #4
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	9203      	str	r2, [sp, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfb8      	it	lt
 800c67e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c682:	3402      	adds	r4, #2
 800c684:	9305      	str	r3, [sp, #20]
 800c686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c76c <_vfiprintf_r+0x25c>
 800c68a:	7821      	ldrb	r1, [r4, #0]
 800c68c:	2203      	movs	r2, #3
 800c68e:	4650      	mov	r0, sl
 800c690:	f7f3 fdae 	bl	80001f0 <memchr>
 800c694:	b140      	cbz	r0, 800c6a8 <_vfiprintf_r+0x198>
 800c696:	2340      	movs	r3, #64	; 0x40
 800c698:	eba0 000a 	sub.w	r0, r0, sl
 800c69c:	fa03 f000 	lsl.w	r0, r3, r0
 800c6a0:	9b04      	ldr	r3, [sp, #16]
 800c6a2:	4303      	orrs	r3, r0
 800c6a4:	3401      	adds	r4, #1
 800c6a6:	9304      	str	r3, [sp, #16]
 800c6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ac:	482c      	ldr	r0, [pc, #176]	; (800c760 <_vfiprintf_r+0x250>)
 800c6ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6b2:	2206      	movs	r2, #6
 800c6b4:	f7f3 fd9c 	bl	80001f0 <memchr>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d03f      	beq.n	800c73c <_vfiprintf_r+0x22c>
 800c6bc:	4b29      	ldr	r3, [pc, #164]	; (800c764 <_vfiprintf_r+0x254>)
 800c6be:	bb1b      	cbnz	r3, 800c708 <_vfiprintf_r+0x1f8>
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	3307      	adds	r3, #7
 800c6c4:	f023 0307 	bic.w	r3, r3, #7
 800c6c8:	3308      	adds	r3, #8
 800c6ca:	9303      	str	r3, [sp, #12]
 800c6cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ce:	443b      	add	r3, r7
 800c6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d2:	e767      	b.n	800c5a4 <_vfiprintf_r+0x94>
 800c6d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6d8:	460c      	mov	r4, r1
 800c6da:	2001      	movs	r0, #1
 800c6dc:	e7a5      	b.n	800c62a <_vfiprintf_r+0x11a>
 800c6de:	2300      	movs	r3, #0
 800c6e0:	3401      	adds	r4, #1
 800c6e2:	9305      	str	r3, [sp, #20]
 800c6e4:	4619      	mov	r1, r3
 800c6e6:	f04f 0c0a 	mov.w	ip, #10
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6f0:	3a30      	subs	r2, #48	; 0x30
 800c6f2:	2a09      	cmp	r2, #9
 800c6f4:	d903      	bls.n	800c6fe <_vfiprintf_r+0x1ee>
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d0c5      	beq.n	800c686 <_vfiprintf_r+0x176>
 800c6fa:	9105      	str	r1, [sp, #20]
 800c6fc:	e7c3      	b.n	800c686 <_vfiprintf_r+0x176>
 800c6fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c702:	4604      	mov	r4, r0
 800c704:	2301      	movs	r3, #1
 800c706:	e7f0      	b.n	800c6ea <_vfiprintf_r+0x1da>
 800c708:	ab03      	add	r3, sp, #12
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	462a      	mov	r2, r5
 800c70e:	4b16      	ldr	r3, [pc, #88]	; (800c768 <_vfiprintf_r+0x258>)
 800c710:	a904      	add	r1, sp, #16
 800c712:	4630      	mov	r0, r6
 800c714:	f7fd fe10 	bl	800a338 <_printf_float>
 800c718:	4607      	mov	r7, r0
 800c71a:	1c78      	adds	r0, r7, #1
 800c71c:	d1d6      	bne.n	800c6cc <_vfiprintf_r+0x1bc>
 800c71e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c720:	07d9      	lsls	r1, r3, #31
 800c722:	d405      	bmi.n	800c730 <_vfiprintf_r+0x220>
 800c724:	89ab      	ldrh	r3, [r5, #12]
 800c726:	059a      	lsls	r2, r3, #22
 800c728:	d402      	bmi.n	800c730 <_vfiprintf_r+0x220>
 800c72a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72c:	f000 faaf 	bl	800cc8e <__retarget_lock_release_recursive>
 800c730:	89ab      	ldrh	r3, [r5, #12]
 800c732:	065b      	lsls	r3, r3, #25
 800c734:	f53f af12 	bmi.w	800c55c <_vfiprintf_r+0x4c>
 800c738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c73a:	e711      	b.n	800c560 <_vfiprintf_r+0x50>
 800c73c:	ab03      	add	r3, sp, #12
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	462a      	mov	r2, r5
 800c742:	4b09      	ldr	r3, [pc, #36]	; (800c768 <_vfiprintf_r+0x258>)
 800c744:	a904      	add	r1, sp, #16
 800c746:	4630      	mov	r0, r6
 800c748:	f7fe f89a 	bl	800a880 <_printf_i>
 800c74c:	e7e4      	b.n	800c718 <_vfiprintf_r+0x208>
 800c74e:	bf00      	nop
 800c750:	0800dadc 	.word	0x0800dadc
 800c754:	0800dafc 	.word	0x0800dafc
 800c758:	0800dabc 	.word	0x0800dabc
 800c75c:	0800d964 	.word	0x0800d964
 800c760:	0800d96e 	.word	0x0800d96e
 800c764:	0800a339 	.word	0x0800a339
 800c768:	0800c4eb 	.word	0x0800c4eb
 800c76c:	0800d96a 	.word	0x0800d96a

0800c770 <__swbuf_r>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	460e      	mov	r6, r1
 800c774:	4614      	mov	r4, r2
 800c776:	4605      	mov	r5, r0
 800c778:	b118      	cbz	r0, 800c782 <__swbuf_r+0x12>
 800c77a:	6983      	ldr	r3, [r0, #24]
 800c77c:	b90b      	cbnz	r3, 800c782 <__swbuf_r+0x12>
 800c77e:	f000 f9e7 	bl	800cb50 <__sinit>
 800c782:	4b21      	ldr	r3, [pc, #132]	; (800c808 <__swbuf_r+0x98>)
 800c784:	429c      	cmp	r4, r3
 800c786:	d12b      	bne.n	800c7e0 <__swbuf_r+0x70>
 800c788:	686c      	ldr	r4, [r5, #4]
 800c78a:	69a3      	ldr	r3, [r4, #24]
 800c78c:	60a3      	str	r3, [r4, #8]
 800c78e:	89a3      	ldrh	r3, [r4, #12]
 800c790:	071a      	lsls	r2, r3, #28
 800c792:	d52f      	bpl.n	800c7f4 <__swbuf_r+0x84>
 800c794:	6923      	ldr	r3, [r4, #16]
 800c796:	b36b      	cbz	r3, 800c7f4 <__swbuf_r+0x84>
 800c798:	6923      	ldr	r3, [r4, #16]
 800c79a:	6820      	ldr	r0, [r4, #0]
 800c79c:	1ac0      	subs	r0, r0, r3
 800c79e:	6963      	ldr	r3, [r4, #20]
 800c7a0:	b2f6      	uxtb	r6, r6
 800c7a2:	4283      	cmp	r3, r0
 800c7a4:	4637      	mov	r7, r6
 800c7a6:	dc04      	bgt.n	800c7b2 <__swbuf_r+0x42>
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f000 f93c 	bl	800ca28 <_fflush_r>
 800c7b0:	bb30      	cbnz	r0, 800c800 <__swbuf_r+0x90>
 800c7b2:	68a3      	ldr	r3, [r4, #8]
 800c7b4:	3b01      	subs	r3, #1
 800c7b6:	60a3      	str	r3, [r4, #8]
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	6022      	str	r2, [r4, #0]
 800c7be:	701e      	strb	r6, [r3, #0]
 800c7c0:	6963      	ldr	r3, [r4, #20]
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	4283      	cmp	r3, r0
 800c7c6:	d004      	beq.n	800c7d2 <__swbuf_r+0x62>
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	07db      	lsls	r3, r3, #31
 800c7cc:	d506      	bpl.n	800c7dc <__swbuf_r+0x6c>
 800c7ce:	2e0a      	cmp	r6, #10
 800c7d0:	d104      	bne.n	800c7dc <__swbuf_r+0x6c>
 800c7d2:	4621      	mov	r1, r4
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	f000 f927 	bl	800ca28 <_fflush_r>
 800c7da:	b988      	cbnz	r0, 800c800 <__swbuf_r+0x90>
 800c7dc:	4638      	mov	r0, r7
 800c7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7e0:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <__swbuf_r+0x9c>)
 800c7e2:	429c      	cmp	r4, r3
 800c7e4:	d101      	bne.n	800c7ea <__swbuf_r+0x7a>
 800c7e6:	68ac      	ldr	r4, [r5, #8]
 800c7e8:	e7cf      	b.n	800c78a <__swbuf_r+0x1a>
 800c7ea:	4b09      	ldr	r3, [pc, #36]	; (800c810 <__swbuf_r+0xa0>)
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	bf08      	it	eq
 800c7f0:	68ec      	ldreq	r4, [r5, #12]
 800c7f2:	e7ca      	b.n	800c78a <__swbuf_r+0x1a>
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	4628      	mov	r0, r5
 800c7f8:	f000 f81a 	bl	800c830 <__swsetup_r>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d0cb      	beq.n	800c798 <__swbuf_r+0x28>
 800c800:	f04f 37ff 	mov.w	r7, #4294967295
 800c804:	e7ea      	b.n	800c7dc <__swbuf_r+0x6c>
 800c806:	bf00      	nop
 800c808:	0800dadc 	.word	0x0800dadc
 800c80c:	0800dafc 	.word	0x0800dafc
 800c810:	0800dabc 	.word	0x0800dabc

0800c814 <__ascii_wctomb>:
 800c814:	b149      	cbz	r1, 800c82a <__ascii_wctomb+0x16>
 800c816:	2aff      	cmp	r2, #255	; 0xff
 800c818:	bf85      	ittet	hi
 800c81a:	238a      	movhi	r3, #138	; 0x8a
 800c81c:	6003      	strhi	r3, [r0, #0]
 800c81e:	700a      	strbls	r2, [r1, #0]
 800c820:	f04f 30ff 	movhi.w	r0, #4294967295
 800c824:	bf98      	it	ls
 800c826:	2001      	movls	r0, #1
 800c828:	4770      	bx	lr
 800c82a:	4608      	mov	r0, r1
 800c82c:	4770      	bx	lr
	...

0800c830 <__swsetup_r>:
 800c830:	4b32      	ldr	r3, [pc, #200]	; (800c8fc <__swsetup_r+0xcc>)
 800c832:	b570      	push	{r4, r5, r6, lr}
 800c834:	681d      	ldr	r5, [r3, #0]
 800c836:	4606      	mov	r6, r0
 800c838:	460c      	mov	r4, r1
 800c83a:	b125      	cbz	r5, 800c846 <__swsetup_r+0x16>
 800c83c:	69ab      	ldr	r3, [r5, #24]
 800c83e:	b913      	cbnz	r3, 800c846 <__swsetup_r+0x16>
 800c840:	4628      	mov	r0, r5
 800c842:	f000 f985 	bl	800cb50 <__sinit>
 800c846:	4b2e      	ldr	r3, [pc, #184]	; (800c900 <__swsetup_r+0xd0>)
 800c848:	429c      	cmp	r4, r3
 800c84a:	d10f      	bne.n	800c86c <__swsetup_r+0x3c>
 800c84c:	686c      	ldr	r4, [r5, #4]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c854:	0719      	lsls	r1, r3, #28
 800c856:	d42c      	bmi.n	800c8b2 <__swsetup_r+0x82>
 800c858:	06dd      	lsls	r5, r3, #27
 800c85a:	d411      	bmi.n	800c880 <__swsetup_r+0x50>
 800c85c:	2309      	movs	r3, #9
 800c85e:	6033      	str	r3, [r6, #0]
 800c860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c864:	81a3      	strh	r3, [r4, #12]
 800c866:	f04f 30ff 	mov.w	r0, #4294967295
 800c86a:	e03e      	b.n	800c8ea <__swsetup_r+0xba>
 800c86c:	4b25      	ldr	r3, [pc, #148]	; (800c904 <__swsetup_r+0xd4>)
 800c86e:	429c      	cmp	r4, r3
 800c870:	d101      	bne.n	800c876 <__swsetup_r+0x46>
 800c872:	68ac      	ldr	r4, [r5, #8]
 800c874:	e7eb      	b.n	800c84e <__swsetup_r+0x1e>
 800c876:	4b24      	ldr	r3, [pc, #144]	; (800c908 <__swsetup_r+0xd8>)
 800c878:	429c      	cmp	r4, r3
 800c87a:	bf08      	it	eq
 800c87c:	68ec      	ldreq	r4, [r5, #12]
 800c87e:	e7e6      	b.n	800c84e <__swsetup_r+0x1e>
 800c880:	0758      	lsls	r0, r3, #29
 800c882:	d512      	bpl.n	800c8aa <__swsetup_r+0x7a>
 800c884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c886:	b141      	cbz	r1, 800c89a <__swsetup_r+0x6a>
 800c888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c88c:	4299      	cmp	r1, r3
 800c88e:	d002      	beq.n	800c896 <__swsetup_r+0x66>
 800c890:	4630      	mov	r0, r6
 800c892:	f7ff fb6f 	bl	800bf74 <_free_r>
 800c896:	2300      	movs	r3, #0
 800c898:	6363      	str	r3, [r4, #52]	; 0x34
 800c89a:	89a3      	ldrh	r3, [r4, #12]
 800c89c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c8a0:	81a3      	strh	r3, [r4, #12]
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6063      	str	r3, [r4, #4]
 800c8a6:	6923      	ldr	r3, [r4, #16]
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	f043 0308 	orr.w	r3, r3, #8
 800c8b0:	81a3      	strh	r3, [r4, #12]
 800c8b2:	6923      	ldr	r3, [r4, #16]
 800c8b4:	b94b      	cbnz	r3, 800c8ca <__swsetup_r+0x9a>
 800c8b6:	89a3      	ldrh	r3, [r4, #12]
 800c8b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c8c0:	d003      	beq.n	800c8ca <__swsetup_r+0x9a>
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f000 fa07 	bl	800ccd8 <__smakebuf_r>
 800c8ca:	89a0      	ldrh	r0, [r4, #12]
 800c8cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8d0:	f010 0301 	ands.w	r3, r0, #1
 800c8d4:	d00a      	beq.n	800c8ec <__swsetup_r+0xbc>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60a3      	str	r3, [r4, #8]
 800c8da:	6963      	ldr	r3, [r4, #20]
 800c8dc:	425b      	negs	r3, r3
 800c8de:	61a3      	str	r3, [r4, #24]
 800c8e0:	6923      	ldr	r3, [r4, #16]
 800c8e2:	b943      	cbnz	r3, 800c8f6 <__swsetup_r+0xc6>
 800c8e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c8e8:	d1ba      	bne.n	800c860 <__swsetup_r+0x30>
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	0781      	lsls	r1, r0, #30
 800c8ee:	bf58      	it	pl
 800c8f0:	6963      	ldrpl	r3, [r4, #20]
 800c8f2:	60a3      	str	r3, [r4, #8]
 800c8f4:	e7f4      	b.n	800c8e0 <__swsetup_r+0xb0>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	e7f7      	b.n	800c8ea <__swsetup_r+0xba>
 800c8fa:	bf00      	nop
 800c8fc:	20000024 	.word	0x20000024
 800c900:	0800dadc 	.word	0x0800dadc
 800c904:	0800dafc 	.word	0x0800dafc
 800c908:	0800dabc 	.word	0x0800dabc

0800c90c <abort>:
 800c90c:	b508      	push	{r3, lr}
 800c90e:	2006      	movs	r0, #6
 800c910:	f000 fa52 	bl	800cdb8 <raise>
 800c914:	2001      	movs	r0, #1
 800c916:	f7f6 fb35 	bl	8002f84 <_exit>
	...

0800c91c <__sflush_r>:
 800c91c:	898a      	ldrh	r2, [r1, #12]
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	4605      	mov	r5, r0
 800c924:	0710      	lsls	r0, r2, #28
 800c926:	460c      	mov	r4, r1
 800c928:	d458      	bmi.n	800c9dc <__sflush_r+0xc0>
 800c92a:	684b      	ldr	r3, [r1, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dc05      	bgt.n	800c93c <__sflush_r+0x20>
 800c930:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c932:	2b00      	cmp	r3, #0
 800c934:	dc02      	bgt.n	800c93c <__sflush_r+0x20>
 800c936:	2000      	movs	r0, #0
 800c938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c93e:	2e00      	cmp	r6, #0
 800c940:	d0f9      	beq.n	800c936 <__sflush_r+0x1a>
 800c942:	2300      	movs	r3, #0
 800c944:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c948:	682f      	ldr	r7, [r5, #0]
 800c94a:	602b      	str	r3, [r5, #0]
 800c94c:	d032      	beq.n	800c9b4 <__sflush_r+0x98>
 800c94e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c950:	89a3      	ldrh	r3, [r4, #12]
 800c952:	075a      	lsls	r2, r3, #29
 800c954:	d505      	bpl.n	800c962 <__sflush_r+0x46>
 800c956:	6863      	ldr	r3, [r4, #4]
 800c958:	1ac0      	subs	r0, r0, r3
 800c95a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c95c:	b10b      	cbz	r3, 800c962 <__sflush_r+0x46>
 800c95e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	2300      	movs	r3, #0
 800c964:	4602      	mov	r2, r0
 800c966:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c968:	6a21      	ldr	r1, [r4, #32]
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b0      	blx	r6
 800c96e:	1c43      	adds	r3, r0, #1
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	d106      	bne.n	800c982 <__sflush_r+0x66>
 800c974:	6829      	ldr	r1, [r5, #0]
 800c976:	291d      	cmp	r1, #29
 800c978:	d82c      	bhi.n	800c9d4 <__sflush_r+0xb8>
 800c97a:	4a2a      	ldr	r2, [pc, #168]	; (800ca24 <__sflush_r+0x108>)
 800c97c:	40ca      	lsrs	r2, r1
 800c97e:	07d6      	lsls	r6, r2, #31
 800c980:	d528      	bpl.n	800c9d4 <__sflush_r+0xb8>
 800c982:	2200      	movs	r2, #0
 800c984:	6062      	str	r2, [r4, #4]
 800c986:	04d9      	lsls	r1, r3, #19
 800c988:	6922      	ldr	r2, [r4, #16]
 800c98a:	6022      	str	r2, [r4, #0]
 800c98c:	d504      	bpl.n	800c998 <__sflush_r+0x7c>
 800c98e:	1c42      	adds	r2, r0, #1
 800c990:	d101      	bne.n	800c996 <__sflush_r+0x7a>
 800c992:	682b      	ldr	r3, [r5, #0]
 800c994:	b903      	cbnz	r3, 800c998 <__sflush_r+0x7c>
 800c996:	6560      	str	r0, [r4, #84]	; 0x54
 800c998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99a:	602f      	str	r7, [r5, #0]
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d0ca      	beq.n	800c936 <__sflush_r+0x1a>
 800c9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a4:	4299      	cmp	r1, r3
 800c9a6:	d002      	beq.n	800c9ae <__sflush_r+0x92>
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f7ff fae3 	bl	800bf74 <_free_r>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c9b2:	e7c1      	b.n	800c938 <__sflush_r+0x1c>
 800c9b4:	6a21      	ldr	r1, [r4, #32]
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	47b0      	blx	r6
 800c9bc:	1c41      	adds	r1, r0, #1
 800c9be:	d1c7      	bne.n	800c950 <__sflush_r+0x34>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0c4      	beq.n	800c950 <__sflush_r+0x34>
 800c9c6:	2b1d      	cmp	r3, #29
 800c9c8:	d001      	beq.n	800c9ce <__sflush_r+0xb2>
 800c9ca:	2b16      	cmp	r3, #22
 800c9cc:	d101      	bne.n	800c9d2 <__sflush_r+0xb6>
 800c9ce:	602f      	str	r7, [r5, #0]
 800c9d0:	e7b1      	b.n	800c936 <__sflush_r+0x1a>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d8:	81a3      	strh	r3, [r4, #12]
 800c9da:	e7ad      	b.n	800c938 <__sflush_r+0x1c>
 800c9dc:	690f      	ldr	r7, [r1, #16]
 800c9de:	2f00      	cmp	r7, #0
 800c9e0:	d0a9      	beq.n	800c936 <__sflush_r+0x1a>
 800c9e2:	0793      	lsls	r3, r2, #30
 800c9e4:	680e      	ldr	r6, [r1, #0]
 800c9e6:	bf08      	it	eq
 800c9e8:	694b      	ldreq	r3, [r1, #20]
 800c9ea:	600f      	str	r7, [r1, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	2300      	movne	r3, #0
 800c9f0:	eba6 0807 	sub.w	r8, r6, r7
 800c9f4:	608b      	str	r3, [r1, #8]
 800c9f6:	f1b8 0f00 	cmp.w	r8, #0
 800c9fa:	dd9c      	ble.n	800c936 <__sflush_r+0x1a>
 800c9fc:	6a21      	ldr	r1, [r4, #32]
 800c9fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca00:	4643      	mov	r3, r8
 800ca02:	463a      	mov	r2, r7
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b0      	blx	r6
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	dc06      	bgt.n	800ca1a <__sflush_r+0xfe>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	e78e      	b.n	800c938 <__sflush_r+0x1c>
 800ca1a:	4407      	add	r7, r0
 800ca1c:	eba8 0800 	sub.w	r8, r8, r0
 800ca20:	e7e9      	b.n	800c9f6 <__sflush_r+0xda>
 800ca22:	bf00      	nop
 800ca24:	20400001 	.word	0x20400001

0800ca28 <_fflush_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	690b      	ldr	r3, [r1, #16]
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	460c      	mov	r4, r1
 800ca30:	b913      	cbnz	r3, 800ca38 <_fflush_r+0x10>
 800ca32:	2500      	movs	r5, #0
 800ca34:	4628      	mov	r0, r5
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	b118      	cbz	r0, 800ca42 <_fflush_r+0x1a>
 800ca3a:	6983      	ldr	r3, [r0, #24]
 800ca3c:	b90b      	cbnz	r3, 800ca42 <_fflush_r+0x1a>
 800ca3e:	f000 f887 	bl	800cb50 <__sinit>
 800ca42:	4b14      	ldr	r3, [pc, #80]	; (800ca94 <_fflush_r+0x6c>)
 800ca44:	429c      	cmp	r4, r3
 800ca46:	d11b      	bne.n	800ca80 <_fflush_r+0x58>
 800ca48:	686c      	ldr	r4, [r5, #4]
 800ca4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0ef      	beq.n	800ca32 <_fflush_r+0xa>
 800ca52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca54:	07d0      	lsls	r0, r2, #31
 800ca56:	d404      	bmi.n	800ca62 <_fflush_r+0x3a>
 800ca58:	0599      	lsls	r1, r3, #22
 800ca5a:	d402      	bmi.n	800ca62 <_fflush_r+0x3a>
 800ca5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca5e:	f000 f915 	bl	800cc8c <__retarget_lock_acquire_recursive>
 800ca62:	4628      	mov	r0, r5
 800ca64:	4621      	mov	r1, r4
 800ca66:	f7ff ff59 	bl	800c91c <__sflush_r>
 800ca6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca6c:	07da      	lsls	r2, r3, #31
 800ca6e:	4605      	mov	r5, r0
 800ca70:	d4e0      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	059b      	lsls	r3, r3, #22
 800ca76:	d4dd      	bmi.n	800ca34 <_fflush_r+0xc>
 800ca78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca7a:	f000 f908 	bl	800cc8e <__retarget_lock_release_recursive>
 800ca7e:	e7d9      	b.n	800ca34 <_fflush_r+0xc>
 800ca80:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <_fflush_r+0x70>)
 800ca82:	429c      	cmp	r4, r3
 800ca84:	d101      	bne.n	800ca8a <_fflush_r+0x62>
 800ca86:	68ac      	ldr	r4, [r5, #8]
 800ca88:	e7df      	b.n	800ca4a <_fflush_r+0x22>
 800ca8a:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <_fflush_r+0x74>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	bf08      	it	eq
 800ca90:	68ec      	ldreq	r4, [r5, #12]
 800ca92:	e7da      	b.n	800ca4a <_fflush_r+0x22>
 800ca94:	0800dadc 	.word	0x0800dadc
 800ca98:	0800dafc 	.word	0x0800dafc
 800ca9c:	0800dabc 	.word	0x0800dabc

0800caa0 <std>:
 800caa0:	2300      	movs	r3, #0
 800caa2:	b510      	push	{r4, lr}
 800caa4:	4604      	mov	r4, r0
 800caa6:	e9c0 3300 	strd	r3, r3, [r0]
 800caaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caae:	6083      	str	r3, [r0, #8]
 800cab0:	8181      	strh	r1, [r0, #12]
 800cab2:	6643      	str	r3, [r0, #100]	; 0x64
 800cab4:	81c2      	strh	r2, [r0, #14]
 800cab6:	6183      	str	r3, [r0, #24]
 800cab8:	4619      	mov	r1, r3
 800caba:	2208      	movs	r2, #8
 800cabc:	305c      	adds	r0, #92	; 0x5c
 800cabe:	f7fd fb93 	bl	800a1e8 <memset>
 800cac2:	4b05      	ldr	r3, [pc, #20]	; (800cad8 <std+0x38>)
 800cac4:	6263      	str	r3, [r4, #36]	; 0x24
 800cac6:	4b05      	ldr	r3, [pc, #20]	; (800cadc <std+0x3c>)
 800cac8:	62a3      	str	r3, [r4, #40]	; 0x28
 800caca:	4b05      	ldr	r3, [pc, #20]	; (800cae0 <std+0x40>)
 800cacc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cace:	4b05      	ldr	r3, [pc, #20]	; (800cae4 <std+0x44>)
 800cad0:	6224      	str	r4, [r4, #32]
 800cad2:	6323      	str	r3, [r4, #48]	; 0x30
 800cad4:	bd10      	pop	{r4, pc}
 800cad6:	bf00      	nop
 800cad8:	0800cdf1 	.word	0x0800cdf1
 800cadc:	0800ce13 	.word	0x0800ce13
 800cae0:	0800ce4b 	.word	0x0800ce4b
 800cae4:	0800ce6f 	.word	0x0800ce6f

0800cae8 <_cleanup_r>:
 800cae8:	4901      	ldr	r1, [pc, #4]	; (800caf0 <_cleanup_r+0x8>)
 800caea:	f000 b8af 	b.w	800cc4c <_fwalk_reent>
 800caee:	bf00      	nop
 800caf0:	0800ca29 	.word	0x0800ca29

0800caf4 <__sfmoreglue>:
 800caf4:	b570      	push	{r4, r5, r6, lr}
 800caf6:	1e4a      	subs	r2, r1, #1
 800caf8:	2568      	movs	r5, #104	; 0x68
 800cafa:	4355      	muls	r5, r2
 800cafc:	460e      	mov	r6, r1
 800cafe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb02:	f7ff fa87 	bl	800c014 <_malloc_r>
 800cb06:	4604      	mov	r4, r0
 800cb08:	b140      	cbz	r0, 800cb1c <__sfmoreglue+0x28>
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	e9c0 1600 	strd	r1, r6, [r0]
 800cb10:	300c      	adds	r0, #12
 800cb12:	60a0      	str	r0, [r4, #8]
 800cb14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb18:	f7fd fb66 	bl	800a1e8 <memset>
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	bd70      	pop	{r4, r5, r6, pc}

0800cb20 <__sfp_lock_acquire>:
 800cb20:	4801      	ldr	r0, [pc, #4]	; (800cb28 <__sfp_lock_acquire+0x8>)
 800cb22:	f000 b8b3 	b.w	800cc8c <__retarget_lock_acquire_recursive>
 800cb26:	bf00      	nop
 800cb28:	200011dc 	.word	0x200011dc

0800cb2c <__sfp_lock_release>:
 800cb2c:	4801      	ldr	r0, [pc, #4]	; (800cb34 <__sfp_lock_release+0x8>)
 800cb2e:	f000 b8ae 	b.w	800cc8e <__retarget_lock_release_recursive>
 800cb32:	bf00      	nop
 800cb34:	200011dc 	.word	0x200011dc

0800cb38 <__sinit_lock_acquire>:
 800cb38:	4801      	ldr	r0, [pc, #4]	; (800cb40 <__sinit_lock_acquire+0x8>)
 800cb3a:	f000 b8a7 	b.w	800cc8c <__retarget_lock_acquire_recursive>
 800cb3e:	bf00      	nop
 800cb40:	200011d7 	.word	0x200011d7

0800cb44 <__sinit_lock_release>:
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__sinit_lock_release+0x8>)
 800cb46:	f000 b8a2 	b.w	800cc8e <__retarget_lock_release_recursive>
 800cb4a:	bf00      	nop
 800cb4c:	200011d7 	.word	0x200011d7

0800cb50 <__sinit>:
 800cb50:	b510      	push	{r4, lr}
 800cb52:	4604      	mov	r4, r0
 800cb54:	f7ff fff0 	bl	800cb38 <__sinit_lock_acquire>
 800cb58:	69a3      	ldr	r3, [r4, #24]
 800cb5a:	b11b      	cbz	r3, 800cb64 <__sinit+0x14>
 800cb5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb60:	f7ff bff0 	b.w	800cb44 <__sinit_lock_release>
 800cb64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb68:	6523      	str	r3, [r4, #80]	; 0x50
 800cb6a:	4b13      	ldr	r3, [pc, #76]	; (800cbb8 <__sinit+0x68>)
 800cb6c:	4a13      	ldr	r2, [pc, #76]	; (800cbbc <__sinit+0x6c>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb72:	42a3      	cmp	r3, r4
 800cb74:	bf04      	itt	eq
 800cb76:	2301      	moveq	r3, #1
 800cb78:	61a3      	streq	r3, [r4, #24]
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f000 f820 	bl	800cbc0 <__sfp>
 800cb80:	6060      	str	r0, [r4, #4]
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f81c 	bl	800cbc0 <__sfp>
 800cb88:	60a0      	str	r0, [r4, #8]
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f000 f818 	bl	800cbc0 <__sfp>
 800cb90:	2200      	movs	r2, #0
 800cb92:	60e0      	str	r0, [r4, #12]
 800cb94:	2104      	movs	r1, #4
 800cb96:	6860      	ldr	r0, [r4, #4]
 800cb98:	f7ff ff82 	bl	800caa0 <std>
 800cb9c:	68a0      	ldr	r0, [r4, #8]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	2109      	movs	r1, #9
 800cba2:	f7ff ff7d 	bl	800caa0 <std>
 800cba6:	68e0      	ldr	r0, [r4, #12]
 800cba8:	2202      	movs	r2, #2
 800cbaa:	2112      	movs	r1, #18
 800cbac:	f7ff ff78 	bl	800caa0 <std>
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	61a3      	str	r3, [r4, #24]
 800cbb4:	e7d2      	b.n	800cb5c <__sinit+0xc>
 800cbb6:	bf00      	nop
 800cbb8:	0800d738 	.word	0x0800d738
 800cbbc:	0800cae9 	.word	0x0800cae9

0800cbc0 <__sfp>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	4607      	mov	r7, r0
 800cbc4:	f7ff ffac 	bl	800cb20 <__sfp_lock_acquire>
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <__sfp+0x84>)
 800cbca:	681e      	ldr	r6, [r3, #0]
 800cbcc:	69b3      	ldr	r3, [r6, #24]
 800cbce:	b913      	cbnz	r3, 800cbd6 <__sfp+0x16>
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7ff ffbd 	bl	800cb50 <__sinit>
 800cbd6:	3648      	adds	r6, #72	; 0x48
 800cbd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	d503      	bpl.n	800cbe8 <__sfp+0x28>
 800cbe0:	6833      	ldr	r3, [r6, #0]
 800cbe2:	b30b      	cbz	r3, 800cc28 <__sfp+0x68>
 800cbe4:	6836      	ldr	r6, [r6, #0]
 800cbe6:	e7f7      	b.n	800cbd8 <__sfp+0x18>
 800cbe8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbec:	b9d5      	cbnz	r5, 800cc24 <__sfp+0x64>
 800cbee:	4b16      	ldr	r3, [pc, #88]	; (800cc48 <__sfp+0x88>)
 800cbf0:	60e3      	str	r3, [r4, #12]
 800cbf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbf6:	6665      	str	r5, [r4, #100]	; 0x64
 800cbf8:	f000 f847 	bl	800cc8a <__retarget_lock_init_recursive>
 800cbfc:	f7ff ff96 	bl	800cb2c <__sfp_lock_release>
 800cc00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc08:	6025      	str	r5, [r4, #0]
 800cc0a:	61a5      	str	r5, [r4, #24]
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc14:	f7fd fae8 	bl	800a1e8 <memset>
 800cc18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc20:	4620      	mov	r0, r4
 800cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc24:	3468      	adds	r4, #104	; 0x68
 800cc26:	e7d9      	b.n	800cbdc <__sfp+0x1c>
 800cc28:	2104      	movs	r1, #4
 800cc2a:	4638      	mov	r0, r7
 800cc2c:	f7ff ff62 	bl	800caf4 <__sfmoreglue>
 800cc30:	4604      	mov	r4, r0
 800cc32:	6030      	str	r0, [r6, #0]
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1d5      	bne.n	800cbe4 <__sfp+0x24>
 800cc38:	f7ff ff78 	bl	800cb2c <__sfp_lock_release>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	603b      	str	r3, [r7, #0]
 800cc40:	e7ee      	b.n	800cc20 <__sfp+0x60>
 800cc42:	bf00      	nop
 800cc44:	0800d738 	.word	0x0800d738
 800cc48:	ffff0001 	.word	0xffff0001

0800cc4c <_fwalk_reent>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	4606      	mov	r6, r0
 800cc52:	4688      	mov	r8, r1
 800cc54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc58:	2700      	movs	r7, #0
 800cc5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc5e:	f1b9 0901 	subs.w	r9, r9, #1
 800cc62:	d505      	bpl.n	800cc70 <_fwalk_reent+0x24>
 800cc64:	6824      	ldr	r4, [r4, #0]
 800cc66:	2c00      	cmp	r4, #0
 800cc68:	d1f7      	bne.n	800cc5a <_fwalk_reent+0xe>
 800cc6a:	4638      	mov	r0, r7
 800cc6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc70:	89ab      	ldrh	r3, [r5, #12]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d907      	bls.n	800cc86 <_fwalk_reent+0x3a>
 800cc76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	d003      	beq.n	800cc86 <_fwalk_reent+0x3a>
 800cc7e:	4629      	mov	r1, r5
 800cc80:	4630      	mov	r0, r6
 800cc82:	47c0      	blx	r8
 800cc84:	4307      	orrs	r7, r0
 800cc86:	3568      	adds	r5, #104	; 0x68
 800cc88:	e7e9      	b.n	800cc5e <_fwalk_reent+0x12>

0800cc8a <__retarget_lock_init_recursive>:
 800cc8a:	4770      	bx	lr

0800cc8c <__retarget_lock_acquire_recursive>:
 800cc8c:	4770      	bx	lr

0800cc8e <__retarget_lock_release_recursive>:
 800cc8e:	4770      	bx	lr

0800cc90 <__swhatbuf_r>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	460e      	mov	r6, r1
 800cc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc98:	2900      	cmp	r1, #0
 800cc9a:	b096      	sub	sp, #88	; 0x58
 800cc9c:	4614      	mov	r4, r2
 800cc9e:	461d      	mov	r5, r3
 800cca0:	da07      	bge.n	800ccb2 <__swhatbuf_r+0x22>
 800cca2:	2300      	movs	r3, #0
 800cca4:	602b      	str	r3, [r5, #0]
 800cca6:	89b3      	ldrh	r3, [r6, #12]
 800cca8:	061a      	lsls	r2, r3, #24
 800ccaa:	d410      	bmi.n	800ccce <__swhatbuf_r+0x3e>
 800ccac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb0:	e00e      	b.n	800ccd0 <__swhatbuf_r+0x40>
 800ccb2:	466a      	mov	r2, sp
 800ccb4:	f000 f902 	bl	800cebc <_fstat_r>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	dbf2      	blt.n	800cca2 <__swhatbuf_r+0x12>
 800ccbc:	9a01      	ldr	r2, [sp, #4]
 800ccbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccc6:	425a      	negs	r2, r3
 800ccc8:	415a      	adcs	r2, r3
 800ccca:	602a      	str	r2, [r5, #0]
 800cccc:	e7ee      	b.n	800ccac <__swhatbuf_r+0x1c>
 800ccce:	2340      	movs	r3, #64	; 0x40
 800ccd0:	2000      	movs	r0, #0
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	b016      	add	sp, #88	; 0x58
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}

0800ccd8 <__smakebuf_r>:
 800ccd8:	898b      	ldrh	r3, [r1, #12]
 800ccda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccdc:	079d      	lsls	r5, r3, #30
 800ccde:	4606      	mov	r6, r0
 800cce0:	460c      	mov	r4, r1
 800cce2:	d507      	bpl.n	800ccf4 <__smakebuf_r+0x1c>
 800cce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	6123      	str	r3, [r4, #16]
 800ccec:	2301      	movs	r3, #1
 800ccee:	6163      	str	r3, [r4, #20]
 800ccf0:	b002      	add	sp, #8
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}
 800ccf4:	ab01      	add	r3, sp, #4
 800ccf6:	466a      	mov	r2, sp
 800ccf8:	f7ff ffca 	bl	800cc90 <__swhatbuf_r>
 800ccfc:	9900      	ldr	r1, [sp, #0]
 800ccfe:	4605      	mov	r5, r0
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7ff f987 	bl	800c014 <_malloc_r>
 800cd06:	b948      	cbnz	r0, 800cd1c <__smakebuf_r+0x44>
 800cd08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd0c:	059a      	lsls	r2, r3, #22
 800cd0e:	d4ef      	bmi.n	800ccf0 <__smakebuf_r+0x18>
 800cd10:	f023 0303 	bic.w	r3, r3, #3
 800cd14:	f043 0302 	orr.w	r3, r3, #2
 800cd18:	81a3      	strh	r3, [r4, #12]
 800cd1a:	e7e3      	b.n	800cce4 <__smakebuf_r+0xc>
 800cd1c:	4b0d      	ldr	r3, [pc, #52]	; (800cd54 <__smakebuf_r+0x7c>)
 800cd1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd20:	89a3      	ldrh	r3, [r4, #12]
 800cd22:	6020      	str	r0, [r4, #0]
 800cd24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	9b00      	ldr	r3, [sp, #0]
 800cd2c:	6163      	str	r3, [r4, #20]
 800cd2e:	9b01      	ldr	r3, [sp, #4]
 800cd30:	6120      	str	r0, [r4, #16]
 800cd32:	b15b      	cbz	r3, 800cd4c <__smakebuf_r+0x74>
 800cd34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd38:	4630      	mov	r0, r6
 800cd3a:	f000 f8d1 	bl	800cee0 <_isatty_r>
 800cd3e:	b128      	cbz	r0, 800cd4c <__smakebuf_r+0x74>
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f023 0303 	bic.w	r3, r3, #3
 800cd46:	f043 0301 	orr.w	r3, r3, #1
 800cd4a:	81a3      	strh	r3, [r4, #12]
 800cd4c:	89a0      	ldrh	r0, [r4, #12]
 800cd4e:	4305      	orrs	r5, r0
 800cd50:	81a5      	strh	r5, [r4, #12]
 800cd52:	e7cd      	b.n	800ccf0 <__smakebuf_r+0x18>
 800cd54:	0800cae9 	.word	0x0800cae9

0800cd58 <_malloc_usable_size_r>:
 800cd58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5c:	1f18      	subs	r0, r3, #4
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfbc      	itt	lt
 800cd62:	580b      	ldrlt	r3, [r1, r0]
 800cd64:	18c0      	addlt	r0, r0, r3
 800cd66:	4770      	bx	lr

0800cd68 <_raise_r>:
 800cd68:	291f      	cmp	r1, #31
 800cd6a:	b538      	push	{r3, r4, r5, lr}
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	d904      	bls.n	800cd7c <_raise_r+0x14>
 800cd72:	2316      	movs	r3, #22
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	f04f 30ff 	mov.w	r0, #4294967295
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cd7e:	b112      	cbz	r2, 800cd86 <_raise_r+0x1e>
 800cd80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd84:	b94b      	cbnz	r3, 800cd9a <_raise_r+0x32>
 800cd86:	4620      	mov	r0, r4
 800cd88:	f000 f830 	bl	800cdec <_getpid_r>
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	4601      	mov	r1, r0
 800cd90:	4620      	mov	r0, r4
 800cd92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd96:	f000 b817 	b.w	800cdc8 <_kill_r>
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d00a      	beq.n	800cdb4 <_raise_r+0x4c>
 800cd9e:	1c59      	adds	r1, r3, #1
 800cda0:	d103      	bne.n	800cdaa <_raise_r+0x42>
 800cda2:	2316      	movs	r3, #22
 800cda4:	6003      	str	r3, [r0, #0]
 800cda6:	2001      	movs	r0, #1
 800cda8:	e7e7      	b.n	800cd7a <_raise_r+0x12>
 800cdaa:	2400      	movs	r4, #0
 800cdac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	4798      	blx	r3
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7e0      	b.n	800cd7a <_raise_r+0x12>

0800cdb8 <raise>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <raise+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f7ff bfd3 	b.w	800cd68 <_raise_r>
 800cdc2:	bf00      	nop
 800cdc4:	20000024 	.word	0x20000024

0800cdc8 <_kill_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	; (800cde8 <_kill_r+0x20>)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	602b      	str	r3, [r5, #0]
 800cdd6:	f7f6 f8c5 	bl	8002f64 <_kill>
 800cdda:	1c43      	adds	r3, r0, #1
 800cddc:	d102      	bne.n	800cde4 <_kill_r+0x1c>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	b103      	cbz	r3, 800cde4 <_kill_r+0x1c>
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	bf00      	nop
 800cde8:	200011d0 	.word	0x200011d0

0800cdec <_getpid_r>:
 800cdec:	f7f6 b8b2 	b.w	8002f54 <_getpid>

0800cdf0 <__sread>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf8:	f000 f894 	bl	800cf24 <_read_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	bfab      	itete	ge
 800ce00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce02:	89a3      	ldrhlt	r3, [r4, #12]
 800ce04:	181b      	addge	r3, r3, r0
 800ce06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce0a:	bfac      	ite	ge
 800ce0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce0e:	81a3      	strhlt	r3, [r4, #12]
 800ce10:	bd10      	pop	{r4, pc}

0800ce12 <__swrite>:
 800ce12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	461f      	mov	r7, r3
 800ce18:	898b      	ldrh	r3, [r1, #12]
 800ce1a:	05db      	lsls	r3, r3, #23
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	4616      	mov	r6, r2
 800ce22:	d505      	bpl.n	800ce30 <__swrite+0x1e>
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	2302      	movs	r3, #2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f000 f868 	bl	800cf00 <_lseek_r>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce3a:	81a3      	strh	r3, [r4, #12]
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	463b      	mov	r3, r7
 800ce40:	4628      	mov	r0, r5
 800ce42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce46:	f000 b817 	b.w	800ce78 <_write_r>

0800ce4a <__sseek>:
 800ce4a:	b510      	push	{r4, lr}
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce52:	f000 f855 	bl	800cf00 <_lseek_r>
 800ce56:	1c43      	adds	r3, r0, #1
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	bf15      	itete	ne
 800ce5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce66:	81a3      	strheq	r3, [r4, #12]
 800ce68:	bf18      	it	ne
 800ce6a:	81a3      	strhne	r3, [r4, #12]
 800ce6c:	bd10      	pop	{r4, pc}

0800ce6e <__sclose>:
 800ce6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce72:	f000 b813 	b.w	800ce9c <_close_r>
	...

0800ce78 <_write_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	; (800ce98 <_write_r+0x20>)
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	4608      	mov	r0, r1
 800ce80:	4611      	mov	r1, r2
 800ce82:	2200      	movs	r2, #0
 800ce84:	602a      	str	r2, [r5, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	f7f6 f8a3 	bl	8002fd2 <_write>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	d102      	bne.n	800ce96 <_write_r+0x1e>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	b103      	cbz	r3, 800ce96 <_write_r+0x1e>
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	bd38      	pop	{r3, r4, r5, pc}
 800ce98:	200011d0 	.word	0x200011d0

0800ce9c <_close_r>:
 800ce9c:	b538      	push	{r3, r4, r5, lr}
 800ce9e:	4d06      	ldr	r5, [pc, #24]	; (800ceb8 <_close_r+0x1c>)
 800cea0:	2300      	movs	r3, #0
 800cea2:	4604      	mov	r4, r0
 800cea4:	4608      	mov	r0, r1
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	f7f6 f8af 	bl	800300a <_close>
 800ceac:	1c43      	adds	r3, r0, #1
 800ceae:	d102      	bne.n	800ceb6 <_close_r+0x1a>
 800ceb0:	682b      	ldr	r3, [r5, #0]
 800ceb2:	b103      	cbz	r3, 800ceb6 <_close_r+0x1a>
 800ceb4:	6023      	str	r3, [r4, #0]
 800ceb6:	bd38      	pop	{r3, r4, r5, pc}
 800ceb8:	200011d0 	.word	0x200011d0

0800cebc <_fstat_r>:
 800cebc:	b538      	push	{r3, r4, r5, lr}
 800cebe:	4d07      	ldr	r5, [pc, #28]	; (800cedc <_fstat_r+0x20>)
 800cec0:	2300      	movs	r3, #0
 800cec2:	4604      	mov	r4, r0
 800cec4:	4608      	mov	r0, r1
 800cec6:	4611      	mov	r1, r2
 800cec8:	602b      	str	r3, [r5, #0]
 800ceca:	f7f6 f8aa 	bl	8003022 <_fstat>
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d102      	bne.n	800ced8 <_fstat_r+0x1c>
 800ced2:	682b      	ldr	r3, [r5, #0]
 800ced4:	b103      	cbz	r3, 800ced8 <_fstat_r+0x1c>
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	bd38      	pop	{r3, r4, r5, pc}
 800ceda:	bf00      	nop
 800cedc:	200011d0 	.word	0x200011d0

0800cee0 <_isatty_r>:
 800cee0:	b538      	push	{r3, r4, r5, lr}
 800cee2:	4d06      	ldr	r5, [pc, #24]	; (800cefc <_isatty_r+0x1c>)
 800cee4:	2300      	movs	r3, #0
 800cee6:	4604      	mov	r4, r0
 800cee8:	4608      	mov	r0, r1
 800ceea:	602b      	str	r3, [r5, #0]
 800ceec:	f7f6 f8a9 	bl	8003042 <_isatty>
 800cef0:	1c43      	adds	r3, r0, #1
 800cef2:	d102      	bne.n	800cefa <_isatty_r+0x1a>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	b103      	cbz	r3, 800cefa <_isatty_r+0x1a>
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	bd38      	pop	{r3, r4, r5, pc}
 800cefc:	200011d0 	.word	0x200011d0

0800cf00 <_lseek_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d07      	ldr	r5, [pc, #28]	; (800cf20 <_lseek_r+0x20>)
 800cf04:	4604      	mov	r4, r0
 800cf06:	4608      	mov	r0, r1
 800cf08:	4611      	mov	r1, r2
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	602a      	str	r2, [r5, #0]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	f7f6 f8a2 	bl	8003058 <_lseek>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_lseek_r+0x1e>
 800cf18:	682b      	ldr	r3, [r5, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_lseek_r+0x1e>
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	200011d0 	.word	0x200011d0

0800cf24 <_read_r>:
 800cf24:	b538      	push	{r3, r4, r5, lr}
 800cf26:	4d07      	ldr	r5, [pc, #28]	; (800cf44 <_read_r+0x20>)
 800cf28:	4604      	mov	r4, r0
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	4611      	mov	r1, r2
 800cf2e:	2200      	movs	r2, #0
 800cf30:	602a      	str	r2, [r5, #0]
 800cf32:	461a      	mov	r2, r3
 800cf34:	f7f6 f830 	bl	8002f98 <_read>
 800cf38:	1c43      	adds	r3, r0, #1
 800cf3a:	d102      	bne.n	800cf42 <_read_r+0x1e>
 800cf3c:	682b      	ldr	r3, [r5, #0]
 800cf3e:	b103      	cbz	r3, 800cf42 <_read_r+0x1e>
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	bd38      	pop	{r3, r4, r5, pc}
 800cf44:	200011d0 	.word	0x200011d0

0800cf48 <_init>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	bf00      	nop
 800cf4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4e:	bc08      	pop	{r3}
 800cf50:	469e      	mov	lr, r3
 800cf52:	4770      	bx	lr

0800cf54 <_fini>:
 800cf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf56:	bf00      	nop
 800cf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5a:	bc08      	pop	{r3}
 800cf5c:	469e      	mov	lr, r3
 800cf5e:	4770      	bx	lr
