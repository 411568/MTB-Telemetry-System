
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fa0  08004fa0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fa0  08004fa0  00014fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fa4  08004fa4  00014fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000070  08005018  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  08005018  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117a8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  00031848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000343f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000350e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019adc  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d37  00000000  00000000  0004f73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009944a  00000000  00000000  00062473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb8bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  000fb910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049c8 	.word	0x080049c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049c8 	.word	0x080049c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d111      	bne.n	80005b0 <Brake_Sensor_Read+0x38>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 800058c:	2100      	movs	r1, #0
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <Brake_Sensor_Read+0x84>)
 8000590:	f000 f878 	bl	8000684 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <Brake_Sensor_Read+0x84>)
 8000596:	f001 f8f5 	bl	8001784 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 800059a:	f04f 31ff 	mov.w	r1, #4294967295
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005a0:	f001 f9d7 	bl	8001952 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005a6:	f001 fa5f 	bl	8001a68 <HAL_ADC_GetValue>
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	e017      	b.n	80005e0 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d111      	bne.n	80005da <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 80005b6:	2101      	movs	r1, #1
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005ba:	f000 f863 	bl	8000684 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005c0:	f001 f8e0 	bl	8001784 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005ca:	f001 f9c2 	bl	8001952 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005d0:	f001 fa4a 	bl	8001a68 <HAL_ADC_GetValue>
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
 80005d8:	e002      	b.n	80005e0 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 80005da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005de:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005e2:	f001 f983 	bl	80018ec <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 40;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <Brake_Sensor_Read+0x88>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 80005f2:	89fb      	ldrh	r3, [r7, #14]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000049c 	.word	0x2000049c
 8000600:	cccccccd 	.word	0xcccccccd

08000604 <HMC5883L_get_X>:
	HAL_I2C_Mem_Write(&hi2c3, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
	HAL_I2C_Mem_Write(&hi2c3, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
}

uint16_t HMC5883L_get_X(uint8_t sensor)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af04      	add	r7, sp, #16
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	uint8_t DataX[2];
	uint16_t Xaxis = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	81fb      	strh	r3, [r7, #14]

	// Read the register
	if(sensor == 0)
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d10d      	bne.n	8000634 <HMC5883L_get_X+0x30>
		HAL_I2C_Mem_Read(&handler_1_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2302      	movs	r3, #2
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2301      	movs	r3, #1
 8000628:	2283      	movs	r2, #131	; 0x83
 800062a:	213c      	movs	r1, #60	; 0x3c
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <HMC5883L_get_X+0x74>)
 800062e:	f002 f80f 	bl	8002650 <HAL_I2C_Mem_Read>
 8000632:	e00c      	b.n	800064e <HMC5883L_get_X+0x4a>
	else
		HAL_I2C_Mem_Read(&handler_2_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9302      	str	r3, [sp, #8]
 8000638:	2302      	movs	r3, #2
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2283      	movs	r2, #131	; 0x83
 8000646:	213c      	movs	r1, #60	; 0x3c
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <HMC5883L_get_X+0x78>)
 800064a:	f002 f801 	bl	8002650 <HAL_I2C_Mem_Read>

	Xaxis = ((DataX[1]<<8) | DataX[0]);
 800064e:	7b7b      	ldrb	r3, [r7, #13]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	7b3b      	ldrb	r3, [r7, #12]
 8000656:	b21b      	sxth	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b21b      	sxth	r3, r3
 800065c:	81fb      	strh	r3, [r7, #14]
	return Xaxis / 655;
 800065e:	89fa      	ldrh	r2, [r7, #14]
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <HMC5883L_get_X+0x7c>)
 8000662:	fba3 1302 	umull	r1, r3, r3, r2
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	0852      	lsrs	r2, r2, #1
 800066a:	4413      	add	r3, r2
 800066c:	0a5b      	lsrs	r3, r3, #9
 800066e:	b29b      	uxth	r3, r3
}
 8000670:	4618      	mov	r0, r3
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200004e4 	.word	0x200004e4
 800067c:	20000538 	.word	0x20000538
 8000680:	903847eb 	.word	0x903847eb

08000684 <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f001 f9e8 	bl	8001a84 <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 80006ba:	f000 fd81 	bl	80011c0 <Error_Handler>
	}
}
 80006be:	bf00      	nop
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	82fb      	strh	r3, [r7, #22]
	float battery_voltage = 0.0;
 80006d2:	f04f 0300 	mov.w	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
	const float voltage_divider = 0.5;
 80006d8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80006dc:	60fb      	str	r3, [r7, #12]
	const float adc_voltage = 3.3;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <Read_Battery_Voltage+0x84>)
 80006e0:	60bb      	str	r3, [r7, #8]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 80006e2:	2102      	movs	r1, #2
 80006e4:	481a      	ldr	r0, [pc, #104]	; (8000750 <Read_Battery_Voltage+0x88>)
 80006e6:	f7ff ffcd 	bl	8000684 <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 80006ea:	4819      	ldr	r0, [pc, #100]	; (8000750 <Read_Battery_Voltage+0x88>)
 80006ec:	f001 f84a 	bl	8001784 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <Read_Battery_Voltage+0x88>)
 80006f6:	f001 f92c 	bl	8001952 <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <Read_Battery_Voltage+0x88>)
 80006fc:	f001 f9b4 	bl	8001a68 <HAL_ADC_GetValue>
 8000700:	4603      	mov	r3, r0
 8000702:	82fb      	strh	r3, [r7, #22]

	// Convert to voltage
	battery_voltage = 10 * ADC_reading / 4096 * adc_voltage * voltage_divider;
 8000704:	8afa      	ldrh	r2, [r7, #22]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	2b00      	cmp	r3, #0
 8000710:	da01      	bge.n	8000716 <Read_Battery_Voltage+0x4e>
 8000712:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000716:	131b      	asrs	r3, r3, #12
 8000718:	ee07 3a90 	vmov	s15, r3
 800071c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000720:	edd7 7a02 	vldr	s15, [r7, #8]
 8000724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000728:	ed97 7a03 	vldr	s14, [r7, #12]
 800072c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000730:	edc7 7a04 	vstr	s15, [r7, #16]

	return (uint8_t)(battery_voltage);
 8000734:	edd7 7a04 	vldr	s15, [r7, #16]
 8000738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800073c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000740:	793b      	ldrb	r3, [r7, #4]
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40533333 	.word	0x40533333
 8000750:	2000049c 	.word	0x2000049c

08000754 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 8000754:	b490      	push	{r4, r7}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	4603      	mov	r3, r0
 8000768:	71bb      	strb	r3, [r7, #6]
 800076a:	460b      	mov	r3, r1
 800076c:	717b      	strb	r3, [r7, #5]
 800076e:	4613      	mov	r3, r2
 8000770:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <ST7565_updateBoundingBox+0x68>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	429a      	cmp	r2, r3
 800077a:	d202      	bcs.n	8000782 <ST7565_updateBoundingBox+0x2e>
 800077c:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <ST7565_updateBoundingBox+0x68>)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <ST7565_updateBoundingBox+0x6c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	797a      	ldrb	r2, [r7, #5]
 8000788:	429a      	cmp	r2, r3
 800078a:	d902      	bls.n	8000792 <ST7565_updateBoundingBox+0x3e>
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <ST7565_updateBoundingBox+0x6c>)
 800078e:	797b      	ldrb	r3, [r7, #5]
 8000790:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <ST7565_updateBoundingBox+0x70>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	429a      	cmp	r2, r3
 800079a:	d202      	bcs.n	80007a2 <ST7565_updateBoundingBox+0x4e>
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <ST7565_updateBoundingBox+0x70>)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <ST7565_updateBoundingBox+0x74>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	793a      	ldrb	r2, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d902      	bls.n	80007b2 <ST7565_updateBoundingBox+0x5e>
 80007ac:	4a06      	ldr	r2, [pc, #24]	; (80007c8 <ST7565_updateBoundingBox+0x74>)
 80007ae:	793b      	ldrb	r3, [r7, #4]
 80007b0:	7013      	strb	r3, [r2, #0]
	#endif
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc90      	pop	{r4, r7}
 80007ba:	4770      	bx	lr
 80007bc:	2000048c 	.word	0x2000048c
 80007c0:	2000048d 	.word	0x2000048d
 80007c4:	2000048e 	.word	0x2000048e
 80007c8:	2000048f 	.word	0x2000048f

080007cc <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	603a      	str	r2, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	460b      	mov	r3, r1
 80007da:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 80007dc:	e017      	b.n	800080e <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	79b9      	ldrb	r1, [r7, #6]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f81a 	bl	8000820 <ST7565_drawchar>
		c++;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	3306      	adds	r3, #6
 80007f6:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	2b79      	cmp	r3, #121	; 0x79
 80007fc:	d904      	bls.n	8000808 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 80007fe:	2300      	movs	r3, #0
 8000800:	71fb      	strb	r3, [r7, #7]
			line++;
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	3301      	adds	r3, #1
 8000806:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d804      	bhi.n	8000818 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1e3      	bne.n	80007de <ST7565_drawstring+0x12>
 8000816:	e000      	b.n	800081a <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8000818:	bf00      	nop
	}
}
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	460b      	mov	r3, r1
 800082c:	71bb      	strb	r3, [r7, #6]
 800082e:	4613      	mov	r3, r2
 8000830:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 8000832:	2300      	movs	r3, #0
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e013      	b.n	8000860 <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 8000838:	797a      	ldrb	r2, [r7, #5]
 800083a:	4613      	mov	r3, r2
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	441a      	add	r2, r3
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	441a      	add	r2, r3
 8000844:	79f9      	ldrb	r1, [r7, #7]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	01db      	lsls	r3, r3, #7
 800084a:	440b      	add	r3, r1
 800084c:	4910      	ldr	r1, [pc, #64]	; (8000890 <ST7565_drawchar+0x70>)
 800084e:	5c89      	ldrb	r1, [r1, r2]
 8000850:	4a10      	ldr	r2, [pc, #64]	; (8000894 <ST7565_drawchar+0x74>)
 8000852:	54d1      	strb	r1, [r2, r3]
		x++;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3301      	adds	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	3301      	adds	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b04      	cmp	r3, #4
 8000864:	d9e8      	bls.n	8000838 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3b05      	subs	r3, #5
 800086a:	b2d8      	uxtb	r0, r3
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	3b01      	subs	r3, #1
 8000876:	b2da      	uxtb	r2, r3
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	3301      	adds	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f7ff ff67 	bl	8000754 <ST7565_updateBoundingBox>
}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08004a50 	.word	0x08004a50
 8000894:	2000008c 	.word	0x2000008c

08000898 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 80008a2:	f000 f80f 	bl	80008c4 <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 80008a6:	20af      	movs	r0, #175	; 0xaf
 80008a8:	f000 f866 	bl	8000978 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 80008ac:	20a4      	movs	r0, #164	; 0xa4
 80008ae:	f000 f863 	bl	8000978 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f000 f887 	bl	80009c8 <ST7565_st7565_set_brightness>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2140      	movs	r1, #64	; 0x40
 80008cc:	481c      	ldr	r0, [pc, #112]	; (8000940 <ST7565_st7565_init+0x7c>)
 80008ce:	f001 fd61 	bl	8002394 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	481a      	ldr	r0, [pc, #104]	; (8000940 <ST7565_st7565_init+0x7c>)
 80008d8:	f001 fd5c 	bl	8002394 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e0:	f000 fee8 	bl	80016b4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	4815      	ldr	r0, [pc, #84]	; (8000940 <ST7565_st7565_init+0x7c>)
 80008ea:	f001 fd53 	bl	8002394 <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 80008ee:	20a3      	movs	r0, #163	; 0xa3
 80008f0:	f000 f842 	bl	8000978 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	f000 f83f 	bl	8000978 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 80008fa:	20c0      	movs	r0, #192	; 0xc0
 80008fc:	f000 f83c 	bl	8000978 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8000900:	2040      	movs	r0, #64	; 0x40
 8000902:	f000 f839 	bl	8000978 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 8000906:	202c      	movs	r0, #44	; 0x2c
 8000908:	f000 f836 	bl	8000978 <ST7565_st7565_command>
	HAL_Delay(50);
 800090c:	2032      	movs	r0, #50	; 0x32
 800090e:	f000 fed1 	bl	80016b4 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 8000912:	202e      	movs	r0, #46	; 0x2e
 8000914:	f000 f830 	bl	8000978 <ST7565_st7565_command>
	HAL_Delay(50);
 8000918:	2032      	movs	r0, #50	; 0x32
 800091a:	f000 fecb 	bl	80016b4 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 800091e:	202f      	movs	r0, #47	; 0x2f
 8000920:	f000 f82a 	bl	8000978 <ST7565_st7565_command>
	HAL_Delay(10);
 8000924:	200a      	movs	r0, #10
 8000926:	f000 fec5 	bl	80016b4 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 800092a:	2026      	movs	r0, #38	; 0x26
 800092c:	f000 f824 	bl	8000978 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 8000930:	233f      	movs	r3, #63	; 0x3f
 8000932:	227f      	movs	r2, #127	; 0x7f
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff0c 	bl	8000754 <ST7565_updateBoundingBox>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40020000 	.word	0x40020000

08000944 <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 800094e:	1df9      	adds	r1, r7, #7
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	2201      	movs	r2, #1
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <ST7565_spiwrite+0x30>)
 8000958:	f003 f9b4 	bl	8003cc4 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 800095c:	bf00      	nop
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <ST7565_spiwrite+0x30>)
 8000960:	f003 faec 	bl	8003f3c <HAL_SPI_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f9      	bne.n	800095e <ST7565_spiwrite+0x1a>
}
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000058c 	.word	0x2000058c

08000978 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <ST7565_st7565_command+0x24>)
 8000988:	f001 fd04 	bl	8002394 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffd8 	bl	8000944 <ST7565_spiwrite>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40020000 	.word	0x40020000

080009a0 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2110      	movs	r1, #16
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <ST7565_st7565_data+0x24>)
 80009b0:	f001 fcf0 	bl	8002394 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffc4 	bl	8000944 <ST7565_spiwrite>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40020000 	.word	0x40020000

080009c8 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 80009d2:	2081      	movs	r0, #129	; 0x81
 80009d4:	f7ff ffd0 	bl	8000978 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffc9 	bl	8000978 <ST7565_st7565_command>
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <ST7565_display>:

void ST7565_display(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	e055      	b.n	8000aa8 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 80009fc:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <ST7565_display+0xe4>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	79bb      	ldrb	r3, [r7, #6]
 8000a04:	3301      	adds	r3, #1
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	da49      	bge.n	8000aa0 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 8000a0c:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <ST7565_display+0xe8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	79bb      	ldrb	r3, [r7, #6]
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	429a      	cmp	r2, r3
 8000a18:	db4a      	blt.n	8000ab0 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fe4a 	bl	80016b4 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <ST7565_display+0xec>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffa3 	bl	8000978 <ST7565_st7565_command>
		HAL_Delay(1);
 8000a32:	2001      	movs	r0, #1
 8000a34:	f000 fe3e 	bl	80016b4 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <ST7565_display+0xf0>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <ST7565_display+0xf4>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff93 	bl	8000978 <ST7565_st7565_command>
		HAL_Delay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 fe2e 	bl	80016b4 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff87 	bl	8000978 <ST7565_st7565_command>
		HAL_Delay(1);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f000 fe22 	bl	80016b4 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 8000a70:	20e0      	movs	r0, #224	; 0xe0
 8000a72:	f7ff ff81 	bl	8000978 <ST7565_st7565_command>
		HAL_Delay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f000 fe1c 	bl	80016b4 <HAL_Delay>

		for (; col < maxcol; col++)
 8000a7c:	e00b      	b.n	8000a96 <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	01da      	lsls	r2, r3, #7
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <ST7565_display+0xf8>)
 8000a88:	5cd3      	ldrb	r3, [r2, r3]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff88 	bl	80009a0 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3301      	adds	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	797b      	ldrb	r3, [r7, #5]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3ef      	bcc.n	8000a7e <ST7565_display+0x8e>
 8000a9e:	e000      	b.n	8000aa2 <ST7565_display+0xb2>
				continue;   // nope, skip it!
 8000aa0:	bf00      	nop
	for (p = 0; p < 8; p++)
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	71bb      	strb	r3, [r7, #6]
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	2b07      	cmp	r3, #7
 8000aac:	d9a6      	bls.n	80009fc <ST7565_display+0xc>
 8000aae:	e000      	b.n	8000ab2 <ST7565_display+0xc2>
					break;
 8000ab0:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <ST7565_display+0xf0>)
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <ST7565_display+0xf4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <ST7565_display+0xe4>)
 8000ac0:	2240      	movs	r2, #64	; 0x40
 8000ac2:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <ST7565_display+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	#endif
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000048e 	.word	0x2000048e
 8000ad8:	2000048f 	.word	0x2000048f
 8000adc:	08004a48 	.word	0x08004a48
 8000ae0:	2000048c 	.word	0x2000048c
 8000ae4:	2000048d 	.word	0x2000048d
 8000ae8:	2000008c 	.word	0x2000008c

08000aec <ST7565_clear>:

void ST7565_clear(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8000af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af4:	2100      	movs	r1, #0
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <ST7565_clear+0x20>)
 8000af8:	f003 fb22 	bl	8004140 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	2100      	movs	r1, #0
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fe26 	bl	8000754 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000008c 	.word	0x2000008c

08000b10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b24:	4a21      	ldr	r2, [pc, #132]	; (8000bac <MX_ADC1_Init+0x9c>)
 8000b26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <MX_ADC1_Init+0xa0>)
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b6e:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b70:	f000 fdc4 	bl	80016fc <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b7a:	f000 fb21 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_ADC1_Init+0x98>)
 8000b90:	f000 ff78 	bl	8001a84 <HAL_ADC_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b9a:	f000 fb11 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000049c 	.word	0x2000049c
 8000bac:	40012000 	.word	0x40012000
 8000bb0:	0f000001 	.word	0x0f000001

08000bb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_ADC_MspInit+0x7c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d127      	bne.n	8000c26 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_ADC_MspInit+0x80>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 8000c0e:	2307      	movs	r3, #7
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c12:	2303      	movs	r3, #3
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <HAL_ADC_MspInit+0x84>)
 8000c22:	f001 fa33 	bl	800208c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012000 	.word	0x40012000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b3d      	ldr	r3, [pc, #244]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a3c      	ldr	r2, [pc, #240]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b3a      	ldr	r3, [pc, #232]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a2e      	ldr	r2, [pc, #184]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_GPIO_Init+0x110>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2158      	movs	r1, #88	; 0x58
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_GPIO_Init+0x114>)
 8000cc8:	f001 fb64 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <MX_GPIO_Init+0x118>)
 8000cd4:	f001 fb5e 	bl	8002394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8000cd8:	2358      	movs	r3, #88	; 0x58
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4818      	ldr	r0, [pc, #96]	; (8000d50 <MX_GPIO_Init+0x114>)
 8000cf0:	f001 f9cc 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4811      	ldr	r0, [pc, #68]	; (8000d54 <MX_GPIO_Init+0x118>)
 8000d0e:	f001 f9bd 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8000d12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480a      	ldr	r0, [pc, #40]	; (8000d50 <MX_GPIO_Init+0x114>)
 8000d28:	f001 f9b0 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8000d2c:	23e0      	movs	r3, #224	; 0xe0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_GPIO_Init+0x118>)
 8000d40:	f001 f9a4 	bl	800208c <HAL_GPIO_Init>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020400 	.word	0x40020400

08000d58 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <MX_I2C1_Init+0x54>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <MX_I2C1_Init+0x58>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d94:	4804      	ldr	r0, [pc, #16]	; (8000da8 <MX_I2C1_Init+0x50>)
 8000d96:	f001 fb17 	bl	80023c8 <HAL_I2C_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000da0:	f000 fa0e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200005e4 	.word	0x200005e4
 8000dac:	40005400 	.word	0x40005400
 8000db0:	000186a0 	.word	0x000186a0

08000db4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <MX_I2C2_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dc0:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_I2C2_Init+0x58>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_I2C2_Init+0x50>)
 8000df2:	f001 fae9 	bl	80023c8 <HAL_I2C_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 f9e0 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000538 	.word	0x20000538
 8000e08:	40005800 	.word	0x40005800
 8000e0c:	000186a0 	.word	0x000186a0

08000e10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 031c 	add.w	r3, r7, #28
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a3b      	ldr	r2, [pc, #236]	; (8000f1c <HAL_I2C_MspInit+0x10c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d12d      	bne.n	8000e8e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	2312      	movs	r3, #18
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e60:	2304      	movs	r3, #4
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	482e      	ldr	r0, [pc, #184]	; (8000f24 <HAL_I2C_MspInit+0x114>)
 8000e6c:	f001 f90e 	bl	800208c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e78:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e8c:	e041      	b.n	8000f12 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a25      	ldr	r2, [pc, #148]	; (8000f28 <HAL_I2C_MspInit+0x118>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d13c      	bne.n	8000f12 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eba:	2312      	movs	r3, #18
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4814      	ldr	r0, [pc, #80]	; (8000f24 <HAL_I2C_MspInit+0x114>)
 8000ed2:	f001 f8db 	bl	800208c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eda:	2312      	movs	r3, #18
 8000edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000ee6:	2309      	movs	r3, #9
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <HAL_I2C_MspInit+0x114>)
 8000ef2:	f001 f8cb 	bl	800208c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000f00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_I2C_MspInit+0x110>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40005800 	.word	0x40005800

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f32:	f000 fb4d 	bl	80015d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f36:	f000 f8e1 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3a:	f7ff fe7f 	bl	8000c3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f3e:	f7ff fde7 	bl	8000b10 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f42:	f7ff ff09 	bl	8000d58 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f46:	f7ff ff35 	bl	8000db4 <MX_I2C2_Init>
  MX_RTC_Init();
 8000f4a:	f000 f93f 	bl	80011cc <MX_RTC_Init>
  MX_SPI1_Init();
 8000f4e:	f000 f98f 	bl	8001270 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000f52:	f000 f9c5 	bl	80012e0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7565_begin(0x7); // initize display
 8000f56:	2007      	movs	r0, #7
 8000f58:	f7ff fc9e 	bl	8000898 <ST7565_begin>
  ST7565_clear(); // clear the display
 8000f5c:	f7ff fdc6 	bl	8000aec <ST7565_clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // TEST
		  //HAL_GPIO_TogglePin(DisplayRSE_GPIO_Port, DisplayRSE_Pin);
		  HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f64:	f000 fba6 	bl	80016b4 <HAL_Delay>
		  // TEST
		  ST7565_clear(); // clear the display
 8000f68:	f7ff fdc0 	bl	8000aec <ST7565_clear>
		  ST7565_drawstring(0, 0, "Hello world!");
 8000f6c:	4a5c      	ldr	r2, [pc, #368]	; (80010e0 <main+0x1b4>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc2b 	bl	80007cc <ST7565_drawstring>


		  // Read magnetometer data
		  uint16_t HMC_x_axis_front = HMC5883L_get_X(SENSOR_FRONT);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff fb44 	bl	8000604 <HMC5883L_get_X>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
		  uint16_t HMC_x_axis_rear = HMC5883L_get_X(SENSOR_REAR);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fb3f 	bl	8000604 <HMC5883L_get_X>
 8000f86:	4603      	mov	r3, r0
 8000f88:	84bb      	strh	r3, [r7, #36]	; 0x24
		  char str[10] = "";
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	f107 0318 	add.w	r3, r7, #24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]

		  sprintf(str, "%u", HMC_x_axis_front);
 8000fa8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	494d      	ldr	r1, [pc, #308]	; (80010e4 <main+0x1b8>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 f8cd 	bl	8004150 <siprintf>
		  strcpy(str_temp, "Travel front: ");
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4a4b      	ldr	r2, [pc, #300]	; (80010e8 <main+0x1bc>)
 8000fba:	461c      	mov	r4, r3
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	c407      	stmia	r4!, {r0, r1, r2}
 8000fc2:	8023      	strh	r3, [r4, #0]
 8000fc4:	3402      	adds	r4, #2
 8000fc6:	0c1b      	lsrs	r3, r3, #16
 8000fc8:	7023      	strb	r3, [r4, #0]
		  strcat(str_temp, str);
 8000fca:	f107 0214 	add.w	r2, r7, #20
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f8dc 	bl	8004190 <strcat>
		  ST7565_drawstring(0, 2, str_temp);
 8000fd8:	463b      	mov	r3, r7
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2102      	movs	r1, #2
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fbf4 	bl	80007cc <ST7565_drawstring>

		  sprintf(str, "%u", HMC_x_axis_rear);
 8000fe4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	493e      	ldr	r1, [pc, #248]	; (80010e4 <main+0x1b8>)
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f8af 	bl	8004150 <siprintf>
		  strcpy(str_temp, "Travel rear: ");
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4a3d      	ldr	r2, [pc, #244]	; (80010ec <main+0x1c0>)
 8000ff6:	461c      	mov	r4, r3
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffc:	c407      	stmia	r4!, {r0, r1, r2}
 8000ffe:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8001000:	f107 0214 	add.w	r2, r7, #20
 8001004:	463b      	mov	r3, r7
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f003 f8c1 	bl	8004190 <strcat>
		  ST7565_drawstring(0, 3, str_temp);
 800100e:	463b      	mov	r3, r7
 8001010:	461a      	mov	r2, r3
 8001012:	2103      	movs	r1, #3
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fbd9 	bl	80007cc <ST7565_drawstring>

		  // Read brake sensor ADC
		  uint16_t Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff faac 	bl	8000578 <Brake_Sensor_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	847b      	strh	r3, [r7, #34]	; 0x22
		  uint16_t Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff faa7 	bl	8000578 <Brake_Sensor_Read>
 800102a:	4603      	mov	r3, r0
 800102c:	843b      	strh	r3, [r7, #32]

		  sprintf(str, "%u", Brake_left);
 800102e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	492b      	ldr	r1, [pc, #172]	; (80010e4 <main+0x1b8>)
 8001036:	4618      	mov	r0, r3
 8001038:	f003 f88a 	bl	8004150 <siprintf>
		  strcpy(str_temp, "Brake left: ");
 800103c:	463b      	mov	r3, r7
 800103e:	4a2c      	ldr	r2, [pc, #176]	; (80010f0 <main+0x1c4>)
 8001040:	461c      	mov	r4, r3
 8001042:	4613      	mov	r3, r2
 8001044:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001046:	c407      	stmia	r4!, {r0, r1, r2}
 8001048:	7023      	strb	r3, [r4, #0]
		  strcat(str_temp, str);
 800104a:	f107 0214 	add.w	r2, r7, #20
 800104e:	463b      	mov	r3, r7
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f003 f89c 	bl	8004190 <strcat>
		  ST7565_drawstring(0, 4, str_temp);
 8001058:	463b      	mov	r3, r7
 800105a:	461a      	mov	r2, r3
 800105c:	2104      	movs	r1, #4
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fbb4 	bl	80007cc <ST7565_drawstring>

		  sprintf(str, "%u", Brake_right);
 8001064:	8c3a      	ldrh	r2, [r7, #32]
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <main+0x1b8>)
 800106c:	4618      	mov	r0, r3
 800106e:	f003 f86f 	bl	8004150 <siprintf>
		  strcpy(str_temp, "Brake right: ");
 8001072:	463b      	mov	r3, r7
 8001074:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <main+0x1c8>)
 8001076:	461c      	mov	r4, r3
 8001078:	4613      	mov	r3, r2
 800107a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800107c:	c407      	stmia	r4!, {r0, r1, r2}
 800107e:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8001080:	f107 0214 	add.w	r2, r7, #20
 8001084:	463b      	mov	r3, r7
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f003 f881 	bl	8004190 <strcat>
		  ST7565_drawstring(0, 5, str_temp);
 800108e:	463b      	mov	r3, r7
 8001090:	461a      	mov	r2, r3
 8001092:	2105      	movs	r1, #5
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fb99 	bl	80007cc <ST7565_drawstring>

		  // Read battery voltage
		  uint8_t battery_voltage = Read_Battery_Voltage();
 800109a:	f7ff fb15 	bl	80006c8 <Read_Battery_Voltage>
 800109e:	4603      	mov	r3, r0
 80010a0:	77fb      	strb	r3, [r7, #31]
		  sprintf(str, "%u", battery_voltage);
 80010a2:	7ffa      	ldrb	r2, [r7, #31]
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <main+0x1b8>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 f850 	bl	8004150 <siprintf>
		  strcpy(str_temp, "Battery voltage: ");
 80010b0:	463b      	mov	r3, r7
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <main+0x1cc>)
 80010b4:	461c      	mov	r4, r3
 80010b6:	4615      	mov	r5, r2
 80010b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010bc:	682b      	ldr	r3, [r5, #0]
 80010be:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 80010c0:	f107 0214 	add.w	r2, r7, #20
 80010c4:	463b      	mov	r3, r7
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 f861 	bl	8004190 <strcat>
		  ST7565_drawstring(0, 6, str_temp);
 80010ce:	463b      	mov	r3, r7
 80010d0:	461a      	mov	r2, r3
 80010d2:	2106      	movs	r1, #6
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fb79 	bl	80007cc <ST7565_drawstring>

		  // TODO
		  // Read accelerometer and gyroscpe

		  // Send data to display
		  ST7565_display();
 80010da:	f7ff fc89 	bl	80009f0 <ST7565_display>
  {
 80010de:	e73f      	b.n	8000f60 <main+0x34>
 80010e0:	080049e0 	.word	0x080049e0
 80010e4:	080049f0 	.word	0x080049f0
 80010e8:	080049f4 	.word	0x080049f4
 80010ec:	08004a04 	.word	0x08004a04
 80010f0:	08004a14 	.word	0x08004a14
 80010f4:	08004a24 	.word	0x08004a24
 80010f8:	08004a34 	.word	0x08004a34

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f003 f818 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <SystemClock_Config+0xbc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a23      	ldr	r2, [pc, #140]	; (80011b8 <SystemClock_Config+0xbc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <SystemClock_Config+0xbc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <SystemClock_Config+0xc0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001148:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <SystemClock_Config+0xc0>)
 800114a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <SystemClock_Config+0xc0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800115c:	230a      	movs	r3, #10
 800115e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4618      	mov	r0, r3
 8001176:	f001 ff15 	bl	8002fa4 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001180:	f000 f81e 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 f978 	bl	8003494 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011aa:	f000 f809 	bl	80011c0 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_RTC_Init+0x44>)
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <MX_RTC_Init+0x48>)
 80011d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_RTC_Init+0x44>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_RTC_Init+0x44>)
 80011de:	227f      	movs	r2, #127	; 0x7f
 80011e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_RTC_Init+0x44>)
 80011e4:	22ff      	movs	r2, #255	; 0xff
 80011e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_RTC_Init+0x44>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_RTC_Init+0x44>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_RTC_Init+0x44>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_RTC_Init+0x44>)
 80011fc:	f002 fbf4 	bl	80039e8 <HAL_RTC_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001206:	f7ff ffdb 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000638 	.word	0x20000638
 8001214:	40002800 	.word	0x40002800

08001218 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_RTC_MspInit+0x50>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d111      	bne.n	800125e <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800123a:	2302      	movs	r3, #2
 800123c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800123e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001242:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 030c 	add.w	r3, r7, #12
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fadf 	bl	800380c <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001254:	f7ff ffb4 	bl	80011c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_RTC_MspInit+0x54>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40002800 	.word	0x40002800
 800126c:	42470e3c 	.word	0x42470e3c

08001270 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_SPI1_Init+0x68>)
 8001276:	4a19      	ldr	r2, [pc, #100]	; (80012dc <MX_SPI1_Init+0x6c>)
 8001278:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_SPI1_Init+0x68>)
 800127c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001280:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_SPI1_Init+0x68>)
 8001284:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001288:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_SPI1_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_SPI1_Init+0x68>)
 8001292:	2202      	movs	r2, #2
 8001294:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_SPI1_Init+0x68>)
 8001298:	2201      	movs	r2, #1
 800129a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_SPI1_Init+0x68>)
 800129e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012a6:	2208      	movs	r2, #8
 80012a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012be:	220a      	movs	r2, #10
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_SPI1_Init+0x68>)
 80012c4:	f002 fc75 	bl	8003bb2 <HAL_SPI_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012ce:	f7ff ff77 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000058c 	.word	0x2000058c
 80012dc:	40013000 	.word	0x40013000

080012e0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_SPI2_Init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	; (8001348 <MX_SPI2_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_SPI2_Init+0x64>)
 80012ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_SPI2_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_SPI2_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_SPI2_Init+0x64>)
 800130c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001310:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_SPI2_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_SPI2_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_SPI2_Init+0x64>)
 800132c:	220a      	movs	r2, #10
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_SPI2_Init+0x64>)
 8001332:	f002 fc3e 	bl	8003bb2 <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800133c:	f7ff ff40 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000658 	.word	0x20000658
 8001348:	40003800 	.word	0x40003800

0800134c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	; 0x30
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 031c 	add.w	r3, r7, #28
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a32      	ldr	r2, [pc, #200]	; (8001434 <HAL_SPI_MspInit+0xe8>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a30      	ldr	r2, [pc, #192]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b27      	ldr	r3, [pc, #156]	; (8001438 <HAL_SPI_MspInit+0xec>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013a6:	23a0      	movs	r3, #160	; 0xa0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013b6:	2305      	movs	r3, #5
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	481e      	ldr	r0, [pc, #120]	; (800143c <HAL_SPI_MspInit+0xf0>)
 80013c2:	f000 fe63 	bl	800208c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80013c6:	e031      	b.n	800142c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <HAL_SPI_MspInit+0xf4>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d12c      	bne.n	800142c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_SPI_MspInit+0xec>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a17      	ldr	r2, [pc, #92]	; (8001438 <HAL_SPI_MspInit+0xec>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_SPI_MspInit+0xec>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_SPI_MspInit+0xec>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_SPI_MspInit+0xec>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_SPI_MspInit+0xec>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800140a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800140e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800141c:	2305      	movs	r3, #5
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <HAL_SPI_MspInit+0xf8>)
 8001428:	f000 fe30 	bl	800208c <HAL_GPIO_Init>
}
 800142c:	bf00      	nop
 800142e:	3730      	adds	r7, #48	; 0x30
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013000 	.word	0x40013000
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000
 8001440:	40003800 	.word	0x40003800
 8001444:	40020400 	.word	0x40020400

08001448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_MspInit+0x4c>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_MspInit+0x4c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_MspInit+0x4c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_MspInit+0x4c>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800149c:	e7fe      	b.n	800149c <NMI_Handler+0x4>

0800149e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <MemManage_Handler+0x4>

080014aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <BusFault_Handler+0x4>

080014b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <UsageFault_Handler+0x4>

080014b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e4:	f000 f8c6 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <_sbrk+0x5c>)
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <_sbrk+0x60>)
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001508:	4b11      	ldr	r3, [pc, #68]	; (8001550 <_sbrk+0x64>)
 800150a:	4a12      	ldr	r2, [pc, #72]	; (8001554 <_sbrk+0x68>)
 800150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	429a      	cmp	r2, r3
 800151a:	d207      	bcs.n	800152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800151c:	f002 fde6 	bl	80040ec <__errno>
 8001520:	4603      	mov	r3, r0
 8001522:	220c      	movs	r2, #12
 8001524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	e009      	b.n	8001540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <_sbrk+0x64>)
 800153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153e:	68fb      	ldr	r3, [r7, #12]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20010000 	.word	0x20010000
 800154c:	00000400 	.word	0x00000400
 8001550:	20000490 	.word	0x20000490
 8001554:	200006c8 	.word	0x200006c8

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <SystemInit+0x20>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <SystemInit+0x20>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800157c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001582:	490e      	ldr	r1, [pc, #56]	; (80015bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001598:	4c0b      	ldr	r4, [pc, #44]	; (80015c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a6:	f7ff ffd7 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015aa:	f002 fda5 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ae:	f7ff fcbd 	bl	8000f2c <main>
  bx  lr    
 80015b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015c0:	08004fa8 	.word	0x08004fa8
  ldr r2, =_sbss
 80015c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015c8:	200006c4 	.word	0x200006c4

080015cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015cc:	e7fe      	b.n	80015cc <ADC_IRQHandler>
	...

080015d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_Init+0x40>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_Init+0x40>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x40>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 fd13 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff ff20 	bl	8001448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd1d 	bl	8002072 <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f000 fcf3 	bl	800203a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	20000008 	.word	0x20000008
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008
 8001698:	200006b0 	.word	0x200006b0

0800169c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200006b0 	.word	0x200006b0

080016b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e033      	b.n	800177a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fa4a 	bl	8000bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	f043 0202 	orr.w	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 faba 	bl	8001cc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
 800176a:	e001      	b.n	8001770 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ADC_Start+0x1a>
 800179a:	2302      	movs	r3, #2
 800179c:	e097      	b.n	80018ce <HAL_ADC_Start+0x14a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d018      	beq.n	80017e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <HAL_ADC_Start+0x158>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a45      	ldr	r2, [pc, #276]	; (80018e0 <HAL_ADC_Start+0x15c>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9a      	lsrs	r2, r3, #18
 80017d0:	4613      	mov	r3, r2
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	4413      	add	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3b01      	subs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f9      	bne.n	80017da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d15f      	bne.n	80018b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800181e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	d106      	bne.n	8001842 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f023 0206 	bic.w	r2, r3, #6
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
 8001840:	e002      	b.n	8001848 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001850:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_ADC_Start+0x160>)
 8001852:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800185c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d129      	bne.n	80018cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	e020      	b.n	80018cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <HAL_ADC_Start+0x164>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d11b      	bne.n	80018cc <HAL_ADC_Start+0x148>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d114      	bne.n	80018cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	e00b      	b.n	80018cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f043 0210 	orr.w	r2, r3, #16
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f043 0201 	orr.w	r2, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	40012300 	.word	0x40012300
 80018e8:	40012000 	.word	0x40012000

080018ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Stop+0x16>
 80018fe:	2302      	movs	r3, #2
 8001900:	e021      	b.n	8001946 <HAL_ADC_Stop+0x5a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f043 0201 	orr.w	r2, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196e:	d113      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800197a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e063      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001998:	f7ff fe80 	bl	800169c <HAL_GetTick>
 800199c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800199e:	e021      	b.n	80019e4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a6:	d01d      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_ADC_PollForConversion+0x6c>
 80019ae:	f7ff fe75 	bl	800169c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d212      	bcs.n	80019e4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d00b      	beq.n	80019e4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f043 0204 	orr.w	r2, r3, #4
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e03d      	b.n	8001a60 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d1d6      	bne.n	80019a0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f06f 0212 	mvn.w	r2, #18
 80019fa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d123      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d11f      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a24:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d111      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1c>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e105      	b.n	8001cac <HAL_ADC_ConfigChannel+0x228>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b09      	cmp	r3, #9
 8001aae:	d925      	bls.n	8001afc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68d9      	ldr	r1, [r3, #12]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3b1e      	subs	r3, #30
 8001ac6:	2207      	movs	r2, #7
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43da      	mvns	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	400a      	ands	r2, r1
 8001ad4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68d9      	ldr	r1, [r3, #12]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4603      	mov	r3, r0
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4403      	add	r3, r0
 8001aee:	3b1e      	subs	r3, #30
 8001af0:	409a      	lsls	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	e022      	b.n	8001b42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6919      	ldr	r1, [r3, #16]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	2207      	movs	r2, #7
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4403      	add	r3, r0
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b06      	cmp	r3, #6
 8001b48:	d824      	bhi.n	8001b94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b05      	subs	r3, #5
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b05      	subs	r3, #5
 8001b86:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
 8001b92:	e04c      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	d824      	bhi.n	8001be6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b23      	subs	r3, #35	; 0x23
 8001bae:	221f      	movs	r2, #31
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	400a      	ands	r2, r1
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b23      	subs	r3, #35	; 0x23
 8001bd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
 8001be4:	e023      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3b41      	subs	r3, #65	; 0x41
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	400a      	ands	r2, r1
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	3b41      	subs	r3, #65	; 0x41
 8001c22:	fa00 f203 	lsl.w	r2, r0, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_ADC_ConfigChannel+0x234>)
 8001c30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_ADC_ConfigChannel+0x238>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1cc>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b12      	cmp	r3, #18
 8001c42:	d105      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_ADC_ConfigChannel+0x238>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d123      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d003      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x1e6>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b11      	cmp	r3, #17
 8001c68:	d11b      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d111      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_ADC_ConfigChannel+0x240>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9a      	lsrs	r2, r3, #18
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c94:	e002      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f9      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40012300 	.word	0x40012300
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	431bde83 	.word	0x431bde83

08001cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd0:	4b79      	ldr	r3, [pc, #484]	; (8001eb8 <ADC_Init+0x1f0>)
 8001cd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	021a      	lsls	r2, r3, #8
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6899      	ldr	r1, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <ADC_Init+0x1f4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d022      	beq.n	8001da6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6899      	ldr	r1, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6899      	ldr	r1, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e00f      	b.n	8001dc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0202 	bic.w	r2, r2, #2
 8001dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6899      	ldr	r1, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7e1b      	ldrb	r3, [r3, #24]
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01b      	beq.n	8001e2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6859      	ldr	r1, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	035a      	lsls	r2, r3, #13
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e007      	b.n	8001e3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	051a      	lsls	r2, r3, #20
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e7e:	025a      	lsls	r2, r3, #9
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	029a      	lsls	r2, r3, #10
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	609a      	str	r2, [r3, #8]
}
 8001eac:	bf00      	nop
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	0f000001 	.word	0x0f000001

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	db0a      	blt.n	8001f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	490c      	ldr	r1, [pc, #48]	; (8001f70 <__NVIC_SetPriority+0x4c>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	440b      	add	r3, r1
 8001f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f4c:	e00a      	b.n	8001f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4908      	ldr	r1, [pc, #32]	; (8001f74 <__NVIC_SetPriority+0x50>)
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	3b04      	subs	r3, #4
 8001f5c:	0112      	lsls	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	440b      	add	r3, r1
 8001f62:	761a      	strb	r2, [r3, #24]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000e100 	.word	0xe000e100
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b089      	sub	sp, #36	; 0x24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f1c3 0307 	rsb	r3, r3, #7
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf28      	it	cs
 8001f96:	2304      	movcs	r3, #4
 8001f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	2b06      	cmp	r3, #6
 8001fa0:	d902      	bls.n	8001fa8 <NVIC_EncodePriority+0x30>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3b03      	subs	r3, #3
 8001fa6:	e000      	b.n	8001faa <NVIC_EncodePriority+0x32>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	401a      	ands	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43d9      	mvns	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	4313      	orrs	r3, r2
         );
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff0:	d301      	bcc.n	8001ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00f      	b.n	8002016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <SysTick_Config+0x40>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ffe:	210f      	movs	r1, #15
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f7ff ff8e 	bl	8001f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <SysTick_Config+0x40>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SysTick_Config+0x40>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff47 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204c:	f7ff ff5c 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	6978      	ldr	r0, [r7, #20]
 8002058:	f7ff ff8e 	bl	8001f78 <NVIC_EncodePriority>
 800205c:	4602      	mov	r2, r0
 800205e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff5d 	bl	8001f24 <__NVIC_SetPriority>
}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff ffb0 	bl	8001fe0 <SysTick_Config>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	; 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e159      	b.n	800235c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 8148 	bne.w	8002356 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80a2 	beq.w	8002356 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b57      	ldr	r3, [pc, #348]	; (8002374 <HAL_GPIO_Init+0x2e8>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a56      	ldr	r2, [pc, #344]	; (8002374 <HAL_GPIO_Init+0x2e8>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_GPIO_Init+0x2e8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x2ec>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a49      	ldr	r2, [pc, #292]	; (800237c <HAL_GPIO_Init+0x2f0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x202>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a48      	ldr	r2, [pc, #288]	; (8002380 <HAL_GPIO_Init+0x2f4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x1fe>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a47      	ldr	r2, [pc, #284]	; (8002384 <HAL_GPIO_Init+0x2f8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x1fa>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <HAL_GPIO_Init+0x2fc>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x1f6>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a45      	ldr	r2, [pc, #276]	; (800238c <HAL_GPIO_Init+0x300>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x1f2>
 800227a:	2304      	movs	r3, #4
 800227c:	e008      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800227e:	2307      	movs	r3, #7
 8002280:	e006      	b.n	8002290 <HAL_GPIO_Init+0x204>
 8002282:	2303      	movs	r3, #3
 8002284:	e004      	b.n	8002290 <HAL_GPIO_Init+0x204>
 8002286:	2302      	movs	r3, #2
 8002288:	e002      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_GPIO_Init+0x204>
 800228e:	2300      	movs	r3, #0
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	f002 0203 	and.w	r2, r2, #3
 8002296:	0092      	lsls	r2, r2, #2
 8002298:	4093      	lsls	r3, r2
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a0:	4935      	ldr	r1, [pc, #212]	; (8002378 <HAL_GPIO_Init+0x2ec>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	089b      	lsrs	r3, r3, #2
 80022a6:	3302      	adds	r3, #2
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ae:	4b38      	ldr	r3, [pc, #224]	; (8002390 <HAL_GPIO_Init+0x304>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d2:	4a2f      	ldr	r2, [pc, #188]	; (8002390 <HAL_GPIO_Init+0x304>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_GPIO_Init+0x304>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <HAL_GPIO_Init+0x304>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_GPIO_Init+0x304>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002350:	4a0f      	ldr	r2, [pc, #60]	; (8002390 <HAL_GPIO_Init+0x304>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3301      	adds	r3, #1
 800235a:	61fb      	str	r3, [r7, #28]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	f67f aea2 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3724      	adds	r7, #36	; 0x24
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	40013800 	.word	0x40013800
 800237c:	40020000 	.word	0x40020000
 8002380:	40020400 	.word	0x40020400
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00
 800238c:	40021000 	.word	0x40021000
 8002390:	40013c00 	.word	0x40013c00

08002394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
 80023a0:	4613      	mov	r3, r2
 80023a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023aa:	887a      	ldrh	r2, [r7, #2]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023b0:	e003      	b.n	80023ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	041a      	lsls	r2, r3, #16
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e12b      	b.n	8002632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fd0e 	bl	8000e10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2224      	movs	r2, #36	; 0x24
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800241a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800242c:	f001 f9da 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4a81      	ldr	r2, [pc, #516]	; (800263c <HAL_I2C_Init+0x274>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d807      	bhi.n	800244c <HAL_I2C_Init+0x84>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <HAL_I2C_Init+0x278>)
 8002440:	4293      	cmp	r3, r2
 8002442:	bf94      	ite	ls
 8002444:	2301      	movls	r3, #1
 8002446:	2300      	movhi	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e006      	b.n	800245a <HAL_I2C_Init+0x92>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a7d      	ldr	r2, [pc, #500]	; (8002644 <HAL_I2C_Init+0x27c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	bf94      	ite	ls
 8002454:	2301      	movls	r3, #1
 8002456:	2300      	movhi	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0e7      	b.n	8002632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a78      	ldr	r2, [pc, #480]	; (8002648 <HAL_I2C_Init+0x280>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9b      	lsrs	r3, r3, #18
 800246c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a6a      	ldr	r2, [pc, #424]	; (800263c <HAL_I2C_Init+0x274>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d802      	bhi.n	800249c <HAL_I2C_Init+0xd4>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3301      	adds	r3, #1
 800249a:	e009      	b.n	80024b0 <HAL_I2C_Init+0xe8>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024a2:	fb02 f303 	mul.w	r3, r2, r3
 80024a6:	4a69      	ldr	r2, [pc, #420]	; (800264c <HAL_I2C_Init+0x284>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	3301      	adds	r3, #1
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	495c      	ldr	r1, [pc, #368]	; (800263c <HAL_I2C_Init+0x274>)
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d819      	bhi.n	8002504 <HAL_I2C_Init+0x13c>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e59      	subs	r1, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	fbb1 f3f3 	udiv	r3, r1, r3
 80024de:	1c59      	adds	r1, r3, #1
 80024e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024e4:	400b      	ands	r3, r1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_I2C_Init+0x138>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e59      	subs	r1, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f8:	3301      	adds	r3, #1
 80024fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fe:	e051      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002500:	2304      	movs	r3, #4
 8002502:	e04f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d111      	bne.n	8002530 <HAL_I2C_Init+0x168>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e58      	subs	r0, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	440b      	add	r3, r1
 800251a:	fbb0 f3f3 	udiv	r3, r0, r3
 800251e:	3301      	adds	r3, #1
 8002520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf0c      	ite	eq
 8002528:	2301      	moveq	r3, #1
 800252a:	2300      	movne	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e012      	b.n	8002556 <HAL_I2C_Init+0x18e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Init+0x196>
 800255a:	2301      	movs	r3, #1
 800255c:	e022      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10e      	bne.n	8002584 <HAL_I2C_Init+0x1bc>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e58      	subs	r0, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	440b      	add	r3, r1
 8002574:	fbb0 f3f3 	udiv	r3, r0, r3
 8002578:	3301      	adds	r3, #1
 800257a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002582:	e00f      	b.n	80025a4 <HAL_I2C_Init+0x1dc>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	1e58      	subs	r0, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	0099      	lsls	r1, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	6809      	ldr	r1, [r1, #0]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6911      	ldr	r1, [r2, #16]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	000186a0 	.word	0x000186a0
 8002640:	001e847f 	.word	0x001e847f
 8002644:	003d08ff 	.word	0x003d08ff
 8002648:	431bde83 	.word	0x431bde83
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	817b      	strh	r3, [r7, #10]
 8002662:	460b      	mov	r3, r1
 8002664:	813b      	strh	r3, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800266a:	f7ff f817 	bl	800169c <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b20      	cmp	r3, #32
 800267a:	f040 8208 	bne.w	8002a8e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2319      	movs	r3, #25
 8002684:	2201      	movs	r2, #1
 8002686:	497b      	ldr	r1, [pc, #492]	; (8002874 <HAL_I2C_Mem_Read+0x224>)
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 faef 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	e1fb      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Mem_Read+0x56>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e1f4      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d007      	beq.n	80026cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2222      	movs	r2, #34	; 0x22
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29a      	uxth	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a5b      	ldr	r2, [pc, #364]	; (8002878 <HAL_I2C_Mem_Read+0x228>)
 800270c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800270e:	88f8      	ldrh	r0, [r7, #6]
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4603      	mov	r3, r0
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 f9bc 	bl	8002a9c <I2C_RequestMemoryRead>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1b0      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d113      	bne.n	800275e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e184      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11b      	bne.n	800279e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e164      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d11b      	bne.n	80027de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	e144      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027f4:	e138      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f200 80f1 	bhi.w	80029e2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b01      	cmp	r3, #1
 8002806:	d123      	bne.n	8002850 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 fb44 	bl	8002e9a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e139      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691a      	ldr	r2, [r3, #16]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	3b01      	subs	r3, #1
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800284e:	e10b      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002854:	2b02      	cmp	r3, #2
 8002856:	d14e      	bne.n	80028f6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	2200      	movs	r2, #0
 8002860:	4906      	ldr	r1, [pc, #24]	; (800287c <HAL_I2C_Mem_Read+0x22c>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fa02 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e10e      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
 8002872:	bf00      	nop
 8002874:	00100002 	.word	0x00100002
 8002878:	ffff0000 	.word	0xffff0000
 800287c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028f4:	e0b8      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fc:	2200      	movs	r2, #0
 80028fe:	4966      	ldr	r1, [pc, #408]	; (8002a98 <HAL_I2C_Mem_Read+0x448>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f9b3 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0bf      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	2200      	movs	r2, #0
 800295a:	494f      	ldr	r1, [pc, #316]	; (8002a98 <HAL_I2C_Mem_Read+0x448>)
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f985 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e091      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	1c5a      	adds	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	3b01      	subs	r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029e0:	e042      	b.n	8002a68 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fa57 	bl	8002e9a <I2C_WaitOnRXNEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e04c      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d118      	bne.n	8002a68 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f aec2 	bne.w	80027f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	00010004 	.word	0x00010004

08002a9c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	817b      	strh	r3, [r7, #10]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8c2 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00d      	beq.n	8002b0a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d103      	bne.n	8002b06 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0aa      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	6a3a      	ldr	r2, [r7, #32]
 8002b1e:	4952      	ldr	r1, [pc, #328]	; (8002c68 <I2C_RequestMemoryRead+0x1cc>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f8fa 	bl	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e097      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	6a39      	ldr	r1, [r7, #32]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f964 	bl	8002e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d107      	bne.n	8002b6e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e076      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b72:	88fb      	ldrh	r3, [r7, #6]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b78:	893b      	ldrh	r3, [r7, #8]
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e021      	b.n	8002bc8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b84:	893b      	ldrh	r3, [r7, #8]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f93e 	bl	8002e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e050      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bbe:	893b      	ldrh	r3, [r7, #8]
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	6a39      	ldr	r1, [r7, #32]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f923 	bl	8002e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d107      	bne.n	8002bf0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e035      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f82b 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2a:	d103      	bne.n	8002c34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e013      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	6a3a      	ldr	r2, [r7, #32]
 8002c4c:	4906      	ldr	r1, [pc, #24]	; (8002c68 <I2C_RequestMemoryRead+0x1cc>)
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f863 	bl	8002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e025      	b.n	8002cca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d021      	beq.n	8002cca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fd09 	bl	800169c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e023      	b.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10d      	bne.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	e00c      	b.n	8002d0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	bf0c      	ite	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	2300      	movne	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d0b6      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d28:	e051      	b.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d38:	d123      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e046      	b.n	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d021      	beq.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fe fc87 	bl	800169c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d116      	bne.n	8002dce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f043 0220 	orr.w	r2, r3, #32
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e020      	b.n	8002e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10c      	bne.n	8002df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4013      	ands	r3, r2
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e00b      	b.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf14      	ite	ne
 8002e04:	2301      	movne	r3, #1
 8002e06:	2300      	moveq	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d18d      	bne.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e24:	e02d      	b.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f88d 	bl	8002f46 <I2C_IsAcknowledgeFailed>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e02d      	b.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d021      	beq.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fe fc2d 	bl	800169c <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d116      	bne.n	8002e82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f043 0220 	orr.w	r2, r3, #32
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e007      	b.n	8002e92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8c:	2b80      	cmp	r3, #128	; 0x80
 8002e8e:	d1ca      	bne.n	8002e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea6:	e042      	b.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d119      	bne.n	8002eea <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0210 	mvn.w	r2, #16
 8002ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e029      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fbd7 	bl	800169c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d1b5      	bne.n	8002ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d11b      	bne.n	8002f96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e264      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d075      	beq.n	80030ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d112      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05b      	beq.n	80030ac <HAL_RCC_OscConfig+0x108>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d157      	bne.n	80030ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e23f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x74>
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a8a      	ldr	r2, [pc, #552]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a87      	ldr	r2, [pc, #540]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe fb1e 	bl	800169c <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fb1a 	bl	800169c <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e204      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xc0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fb0a 	bl	800169c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe fb06 	bl	800169c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1f0      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0xe8>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1c4      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fabf 	bl	800169c <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fabb 	bl	800169c <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1a5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fa9e 	bl	800169c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fa9a 	bl	800169c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e184      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d030      	beq.n	80031f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fa7e 	bl	800169c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe fa7a 	bl	800169c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e164      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x200>
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe fa67 	bl	800169c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe fa63 	bl	800169c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e14d      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a0 	beq.w	800333e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d121      	bne.n	800327e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe fa29 	bl	800169c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e011      	b.n	8003272 <HAL_RCC_OscConfig+0x2ce>
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	42470000 	.word	0x42470000
 8003258:	42470e80 	.word	0x42470e80
 800325c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe fa1c 	bl	800169c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e106      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4e4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x2f0>
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a80      	ldr	r2, [pc, #512]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x312>
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 80032b6:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe f9e1 	bl	800169c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f9dd 	bl	800169c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0c5      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b65      	ldr	r3, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x33a>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe f9cb 	bl	800169c <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe f9c7 	bl	800169c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0af      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a55      	ldr	r2, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 809b 	beq.w	800347e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d05c      	beq.n	800340e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d141      	bne.n	80033e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe f99b 	bl	800169c <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe f997 	bl	800169c <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e081      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	019b      	lsls	r3, r3, #6
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b2:	4b37      	ldr	r3, [pc, #220]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe f970 	bl	800169c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe f96c 	bl	800169c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e056      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 80033de:	e04e      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x4ec>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe f959 	bl	800169c <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe f955 	bl	800169c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e03f      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x44a>
 800340c:	e037      	b.n	800347e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e032      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341a:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_RCC_OscConfig+0x4e8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d028      	beq.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d121      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d11a      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003450:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003452:	4293      	cmp	r3, r2
 8003454:	d111      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	085b      	lsrs	r3, r3, #1
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d107      	bne.n	800347a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40007000 	.word	0x40007000
 800348c:	40023800 	.word	0x40023800
 8003490:	42470060 	.word	0x42470060

08003494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0cc      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034a8:	4b68      	ldr	r3, [pc, #416]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d90c      	bls.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b6:	4b65      	ldr	r3, [pc, #404]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b63      	ldr	r3, [pc, #396]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0b8      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034e8:	4b59      	ldr	r3, [pc, #356]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a58      	ldr	r2, [pc, #352]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003500:	4b53      	ldr	r3, [pc, #332]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	4a52      	ldr	r2, [pc, #328]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800350a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	494d      	ldr	r1, [pc, #308]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d044      	beq.n	80035b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	4b47      	ldr	r3, [pc, #284]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d119      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e07f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d003      	beq.n	8003552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e06f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003562:	4b3b      	ldr	r3, [pc, #236]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e067      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003572:	4b37      	ldr	r3, [pc, #220]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f023 0203 	bic.w	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003584:	f7fe f88a 	bl	800169c <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fe f886 	bl	800169c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e04f      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	4b2b      	ldr	r3, [pc, #172]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 020c 	and.w	r2, r3, #12
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d1eb      	bne.n	800358c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d20c      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b22      	ldr	r3, [pc, #136]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b20      	ldr	r3, [pc, #128]	; (800364c <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e032      	b.n	8003642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b19      	ldr	r3, [pc, #100]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4916      	ldr	r1, [pc, #88]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490e      	ldr	r1, [pc, #56]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800361a:	f000 f821 	bl	8003660 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490a      	ldr	r1, [pc, #40]	; (8003654 <HAL_RCC_ClockConfig+0x1c0>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	4a09      	ldr	r2, [pc, #36]	; (8003658 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_RCC_ClockConfig+0x1c8>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd ffea 	bl	8001614 <HAL_InitTick>

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00
 8003650:	40023800 	.word	0x40023800
 8003654:	08004f4c 	.word	0x08004f4c
 8003658:	20000000 	.word	0x20000000
 800365c:	20000004 	.word	0x20000004

08003660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003666:	2100      	movs	r1, #0
 8003668:	6079      	str	r1, [r7, #4]
 800366a:	2100      	movs	r1, #0
 800366c:	60f9      	str	r1, [r7, #12]
 800366e:	2100      	movs	r1, #0
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003672:	2100      	movs	r1, #0
 8003674:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003676:	4952      	ldr	r1, [pc, #328]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003678:	6889      	ldr	r1, [r1, #8]
 800367a:	f001 010c 	and.w	r1, r1, #12
 800367e:	2908      	cmp	r1, #8
 8003680:	d00d      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x3e>
 8003682:	2908      	cmp	r1, #8
 8003684:	f200 8094 	bhi.w	80037b0 <HAL_RCC_GetSysClockFreq+0x150>
 8003688:	2900      	cmp	r1, #0
 800368a:	d002      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x32>
 800368c:	2904      	cmp	r1, #4
 800368e:	d003      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x38>
 8003690:	e08e      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003692:	4b4c      	ldr	r3, [pc, #304]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003694:	60bb      	str	r3, [r7, #8]
       break;
 8003696:	e08e      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003698:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800369a:	60bb      	str	r3, [r7, #8]
      break;
 800369c:	e08b      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800369e:	4948      	ldr	r1, [pc, #288]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036a0:	6849      	ldr	r1, [r1, #4]
 80036a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80036a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036a8:	4945      	ldr	r1, [pc, #276]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036aa:	6849      	ldr	r1, [r1, #4]
 80036ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80036b0:	2900      	cmp	r1, #0
 80036b2:	d024      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4942      	ldr	r1, [pc, #264]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036b6:	6849      	ldr	r1, [r1, #4]
 80036b8:	0989      	lsrs	r1, r1, #6
 80036ba:	4608      	mov	r0, r1
 80036bc:	f04f 0100 	mov.w	r1, #0
 80036c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80036c4:	f04f 0500 	mov.w	r5, #0
 80036c8:	ea00 0204 	and.w	r2, r0, r4
 80036cc:	ea01 0305 	and.w	r3, r1, r5
 80036d0:	493d      	ldr	r1, [pc, #244]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036d2:	fb01 f003 	mul.w	r0, r1, r3
 80036d6:	2100      	movs	r1, #0
 80036d8:	fb01 f102 	mul.w	r1, r1, r2
 80036dc:	1844      	adds	r4, r0, r1
 80036de:	493a      	ldr	r1, [pc, #232]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80036e0:	fba2 0101 	umull	r0, r1, r2, r1
 80036e4:	1863      	adds	r3, r4, r1
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	f7fc fdc6 	bl	8000280 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4613      	mov	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e04a      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	461a      	mov	r2, r3
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800370e:	f04f 0100 	mov.w	r1, #0
 8003712:	ea02 0400 	and.w	r4, r2, r0
 8003716:	ea03 0501 	and.w	r5, r3, r1
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	014b      	lsls	r3, r1, #5
 8003728:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800372c:	0142      	lsls	r2, r0, #5
 800372e:	4610      	mov	r0, r2
 8003730:	4619      	mov	r1, r3
 8003732:	1b00      	subs	r0, r0, r4
 8003734:	eb61 0105 	sbc.w	r1, r1, r5
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	018b      	lsls	r3, r1, #6
 8003742:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003746:	0182      	lsls	r2, r0, #6
 8003748:	1a12      	subs	r2, r2, r0
 800374a:	eb63 0301 	sbc.w	r3, r3, r1
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	00d9      	lsls	r1, r3, #3
 8003758:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800375c:	00d0      	lsls	r0, r2, #3
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	1912      	adds	r2, r2, r4
 8003764:	eb45 0303 	adc.w	r3, r5, r3
 8003768:	f04f 0000 	mov.w	r0, #0
 800376c:	f04f 0100 	mov.w	r1, #0
 8003770:	0299      	lsls	r1, r3, #10
 8003772:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003776:	0290      	lsls	r0, r2, #10
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	461a      	mov	r2, r3
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f7fc fd7a 	bl	8000280 <__aeabi_uldivmod>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4613      	mov	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0c1b      	lsrs	r3, r3, #16
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	60bb      	str	r3, [r7, #8]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x164>)
 80037b2:	60bb      	str	r3, [r7, #8]
      break;
 80037b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037b6:	68bb      	ldr	r3, [r7, #8]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bdb0      	pop	{r4, r5, r7, pc}
 80037c0:	40023800 	.word	0x40023800
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	017d7840 	.word	0x017d7840

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003800:	4618      	mov	r0, r3
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40023800 	.word	0x40023800
 8003808:	08004f5c 	.word	0x08004f5c

0800380c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d105      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d035      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003834:	4b67      	ldr	r3, [pc, #412]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800383a:	f7fd ff2f 	bl	800169c <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003842:	f7fd ff2b 	bl	800169c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0ba      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003854:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	019a      	lsls	r2, r3, #6
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	071b      	lsls	r3, r3, #28
 800386c:	495a      	ldr	r1, [pc, #360]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003874:	4b57      	ldr	r3, [pc, #348]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387a:	f7fd ff0f 	bl	800169c <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003882:	f7fd ff0b 	bl	800169c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e09a      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8083 	beq.w	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6413      	str	r3, [r2, #64]	; 0x40
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038ca:	4b44      	ldr	r3, [pc, #272]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a43      	ldr	r2, [pc, #268]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fee1 	bl	800169c <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038de:	f7fd fedd 	bl	800169c <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e06c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038f0:	4b3a      	ldr	r3, [pc, #232]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fc:	4b36      	ldr	r3, [pc, #216]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02f      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	429a      	cmp	r2, r3
 8003918:	d028      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392a:	4b2d      	ldr	r3, [pc, #180]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003930:	4a29      	ldr	r2, [pc, #164]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003936:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d114      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd feab 	bl	800169c <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd fea7 	bl	800169c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e034      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003978:	d10d      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800397a:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	4912      	ldr	r1, [pc, #72]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
 8003994:	e005      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800399c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039a0:	6093      	str	r3, [r2, #8]
 80039a2:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ae:	490a      	ldr	r1, [pc, #40]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	7c1a      	ldrb	r2, [r3, #16]
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039c6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	42470068 	.word	0x42470068
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42470e40 	.word	0x42470e40
 80039e4:	424711e0 	.word	0x424711e0

080039e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e083      	b.n	8003b02 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7f5b      	ldrb	r3, [r3, #29]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d105      	bne.n	8003a10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7fd fc04 	bl	8001218 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	22ca      	movs	r2, #202	; 0xca
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2253      	movs	r2, #83	; 0x53
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f897 	bl	8003b5a <RTC_EnterInitMode>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e05e      	b.n	8003b02 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a56:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68d2      	ldr	r2, [r2, #12]
 8003a7e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6919      	ldr	r1, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	041a      	lsls	r2, r3, #16
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f829 	bl	8003b0a <HAL_RTC_WaitForSynchro>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	22ff      	movs	r2, #255	; 0xff
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2204      	movs	r2, #4
 8003aca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e018      	b.n	8003b02 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fd fdb9 	bl	800169c <HAL_GetTick>
 8003b2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b2c:	e009      	b.n	8003b42 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b2e:	f7fd fdb5 	bl	800169c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b3c:	d901      	bls.n	8003b42 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e007      	b.n	8003b52 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ee      	beq.n	8003b2e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d119      	bne.n	8003ba8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b7e:	f7fd fd8d 	bl	800169c <HAL_GetTick>
 8003b82:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b84:	e009      	b.n	8003b9a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003b86:	f7fd fd89 	bl	800169c <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b94:	d901      	bls.n	8003b9a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e007      	b.n	8003baa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e07b      	b.n	8003cbc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d108      	bne.n	8003bde <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd4:	d009      	beq.n	8003bea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61da      	str	r2, [r3, #28]
 8003bdc:	e005      	b.n	8003bea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d106      	bne.n	8003c0a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7fd fba1 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	ea42 0103 	orr.w	r1, r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	f003 0104 	and.w	r1, r3, #4
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	f003 0210 	and.w	r2, r3, #16
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003caa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3708      	adds	r7, #8
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_SPI_Transmit+0x22>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e126      	b.n	8003f34 <HAL_SPI_Transmit+0x270>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cee:	f7fd fcd5 	bl	800169c <HAL_GetTick>
 8003cf2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d002      	beq.n	8003d0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
 8003d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d08:	e10b      	b.n	8003f22 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_SPI_Transmit+0x52>
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d102      	bne.n	8003d1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d1a:	e102      	b.n	8003f22 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d62:	d10f      	bne.n	8003d84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d007      	beq.n	8003da2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d14b      	bne.n	8003e44 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <HAL_SPI_Transmit+0xf6>
 8003db4:	8afb      	ldrh	r3, [r7, #22]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d13e      	bne.n	8003e38 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	1c9a      	adds	r2, r3, #2
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dde:	e02b      	b.n	8003e38 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d112      	bne.n	8003e14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e12:	e011      	b.n	8003e38 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e14:	f7fd fc42 	bl	800169c <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d803      	bhi.n	8003e2c <HAL_SPI_Transmit+0x168>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2a:	d102      	bne.n	8003e32 <HAL_SPI_Transmit+0x16e>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e36:	e074      	b.n	8003f22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ce      	bne.n	8003de0 <HAL_SPI_Transmit+0x11c>
 8003e42:	e04c      	b.n	8003ede <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_Transmit+0x18e>
 8003e4c:	8afb      	ldrh	r3, [r7, #22]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d140      	bne.n	8003ed4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e78:	e02c      	b.n	8003ed4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d113      	bne.n	8003eb0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	330c      	adds	r3, #12
 8003e92:	7812      	ldrb	r2, [r2, #0]
 8003e94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eae:	e011      	b.n	8003ed4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb0:	f7fd fbf4 	bl	800169c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d803      	bhi.n	8003ec8 <HAL_SPI_Transmit+0x204>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Transmit+0x20a>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed2:	e026      	b.n	8003f22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1cd      	bne.n	8003e7a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f8c0 	bl	8004068 <SPI_EndRxTxTransaction>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10a      	bne.n	8003f12 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003efc:	2300      	movs	r3, #0
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e000      	b.n	8003f22 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4a:	b2db      	uxtb	r3, r3
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	4613      	mov	r3, r2
 8003f66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f68:	f7fd fb98 	bl	800169c <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4413      	add	r3, r2
 8003f76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f78:	f7fd fb90 	bl	800169c <HAL_GetTick>
 8003f7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	015b      	lsls	r3, r3, #5
 8003f84:	0d1b      	lsrs	r3, r3, #20
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	fb02 f303 	mul.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8e:	e054      	b.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d050      	beq.n	800403a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f98:	f7fd fb80 	bl	800169c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d902      	bls.n	8003fae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d13d      	bne.n	800402a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc6:	d111      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	d004      	beq.n	8003fdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fda:	d107      	bne.n	8003fec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d10f      	bne.n	8004016 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004014:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e017      	b.n	800405a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3b01      	subs	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4013      	ands	r3, r2
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	429a      	cmp	r2, r3
 8004048:	bf0c      	ite	eq
 800404a:	2301      	moveq	r3, #1
 800404c:	2300      	movne	r3, #0
 800404e:	b2db      	uxtb	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	429a      	cmp	r2, r3
 8004056:	d19b      	bne.n	8003f90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000000 	.word	0x20000000

08004068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <SPI_EndRxTxTransaction+0x7c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <SPI_EndRxTxTransaction+0x80>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0d5b      	lsrs	r3, r3, #21
 8004080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004092:	d112      	bne.n	80040ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff ff5a 	bl	8003f58 <SPI_WaitFlagStateUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e00f      	b.n	80040da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d0f2      	beq.n	80040ba <SPI_EndRxTxTransaction+0x52>
 80040d4:	e000      	b.n	80040d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80040d6:	bf00      	nop
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000000 	.word	0x20000000
 80040e8:	165e9f81 	.word	0x165e9f81

080040ec <__errno>:
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <__errno+0x8>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4d0d      	ldr	r5, [pc, #52]	; (8004130 <__libc_init_array+0x38>)
 80040fc:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	2600      	movs	r6, #0
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	4d0b      	ldr	r5, [pc, #44]	; (8004138 <__libc_init_array+0x40>)
 800410a:	4c0c      	ldr	r4, [pc, #48]	; (800413c <__libc_init_array+0x44>)
 800410c:	f000 fc5c 	bl	80049c8 <_init>
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	2600      	movs	r6, #0
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f855 3b04 	ldr.w	r3, [r5], #4
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	08004fa0 	.word	0x08004fa0
 8004134:	08004fa0 	.word	0x08004fa0
 8004138:	08004fa0 	.word	0x08004fa0
 800413c:	08004fa4 	.word	0x08004fa4

08004140 <memset>:
 8004140:	4402      	add	r2, r0
 8004142:	4603      	mov	r3, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <siprintf>:
 8004150:	b40e      	push	{r1, r2, r3}
 8004152:	b500      	push	{lr}
 8004154:	b09c      	sub	sp, #112	; 0x70
 8004156:	ab1d      	add	r3, sp, #116	; 0x74
 8004158:	9002      	str	r0, [sp, #8]
 800415a:	9006      	str	r0, [sp, #24]
 800415c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <siprintf+0x38>)
 8004162:	9107      	str	r1, [sp, #28]
 8004164:	9104      	str	r1, [sp, #16]
 8004166:	4909      	ldr	r1, [pc, #36]	; (800418c <siprintf+0x3c>)
 8004168:	f853 2b04 	ldr.w	r2, [r3], #4
 800416c:	9105      	str	r1, [sp, #20]
 800416e:	6800      	ldr	r0, [r0, #0]
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	a902      	add	r1, sp, #8
 8004174:	f000 f876 	bl	8004264 <_svfiprintf_r>
 8004178:	9b02      	ldr	r3, [sp, #8]
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	b01c      	add	sp, #112	; 0x70
 8004180:	f85d eb04 	ldr.w	lr, [sp], #4
 8004184:	b003      	add	sp, #12
 8004186:	4770      	bx	lr
 8004188:	2000000c 	.word	0x2000000c
 800418c:	ffff0208 	.word	0xffff0208

08004190 <strcat>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4602      	mov	r2, r0
 8004194:	7814      	ldrb	r4, [r2, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	3201      	adds	r2, #1
 800419a:	2c00      	cmp	r4, #0
 800419c:	d1fa      	bne.n	8004194 <strcat+0x4>
 800419e:	3b01      	subs	r3, #1
 80041a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	d1f9      	bne.n	80041a0 <strcat+0x10>
 80041ac:	bd10      	pop	{r4, pc}

080041ae <__ssputs_r>:
 80041ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b2:	688e      	ldr	r6, [r1, #8]
 80041b4:	429e      	cmp	r6, r3
 80041b6:	4682      	mov	sl, r0
 80041b8:	460c      	mov	r4, r1
 80041ba:	4690      	mov	r8, r2
 80041bc:	461f      	mov	r7, r3
 80041be:	d838      	bhi.n	8004232 <__ssputs_r+0x84>
 80041c0:	898a      	ldrh	r2, [r1, #12]
 80041c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041c6:	d032      	beq.n	800422e <__ssputs_r+0x80>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	6909      	ldr	r1, [r1, #16]
 80041cc:	eba5 0901 	sub.w	r9, r5, r1
 80041d0:	6965      	ldr	r5, [r4, #20]
 80041d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041da:	3301      	adds	r3, #1
 80041dc:	444b      	add	r3, r9
 80041de:	106d      	asrs	r5, r5, #1
 80041e0:	429d      	cmp	r5, r3
 80041e2:	bf38      	it	cc
 80041e4:	461d      	movcc	r5, r3
 80041e6:	0553      	lsls	r3, r2, #21
 80041e8:	d531      	bpl.n	800424e <__ssputs_r+0xa0>
 80041ea:	4629      	mov	r1, r5
 80041ec:	f000 fb46 	bl	800487c <_malloc_r>
 80041f0:	4606      	mov	r6, r0
 80041f2:	b950      	cbnz	r0, 800420a <__ssputs_r+0x5c>
 80041f4:	230c      	movs	r3, #12
 80041f6:	f8ca 3000 	str.w	r3, [sl]
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	f04f 30ff 	mov.w	r0, #4294967295
 8004206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420a:	6921      	ldr	r1, [r4, #16]
 800420c:	464a      	mov	r2, r9
 800420e:	f000 fabd 	bl	800478c <memcpy>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	6126      	str	r6, [r4, #16]
 8004220:	6165      	str	r5, [r4, #20]
 8004222:	444e      	add	r6, r9
 8004224:	eba5 0509 	sub.w	r5, r5, r9
 8004228:	6026      	str	r6, [r4, #0]
 800422a:	60a5      	str	r5, [r4, #8]
 800422c:	463e      	mov	r6, r7
 800422e:	42be      	cmp	r6, r7
 8004230:	d900      	bls.n	8004234 <__ssputs_r+0x86>
 8004232:	463e      	mov	r6, r7
 8004234:	4632      	mov	r2, r6
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	4641      	mov	r1, r8
 800423a:	f000 fab5 	bl	80047a8 <memmove>
 800423e:	68a3      	ldr	r3, [r4, #8]
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	1b9b      	subs	r3, r3, r6
 8004244:	4432      	add	r2, r6
 8004246:	60a3      	str	r3, [r4, #8]
 8004248:	6022      	str	r2, [r4, #0]
 800424a:	2000      	movs	r0, #0
 800424c:	e7db      	b.n	8004206 <__ssputs_r+0x58>
 800424e:	462a      	mov	r2, r5
 8004250:	f000 fb6e 	bl	8004930 <_realloc_r>
 8004254:	4606      	mov	r6, r0
 8004256:	2800      	cmp	r0, #0
 8004258:	d1e1      	bne.n	800421e <__ssputs_r+0x70>
 800425a:	6921      	ldr	r1, [r4, #16]
 800425c:	4650      	mov	r0, sl
 800425e:	f000 fabd 	bl	80047dc <_free_r>
 8004262:	e7c7      	b.n	80041f4 <__ssputs_r+0x46>

08004264 <_svfiprintf_r>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	4698      	mov	r8, r3
 800426a:	898b      	ldrh	r3, [r1, #12]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	b09d      	sub	sp, #116	; 0x74
 8004270:	4607      	mov	r7, r0
 8004272:	460d      	mov	r5, r1
 8004274:	4614      	mov	r4, r2
 8004276:	d50e      	bpl.n	8004296 <_svfiprintf_r+0x32>
 8004278:	690b      	ldr	r3, [r1, #16]
 800427a:	b963      	cbnz	r3, 8004296 <_svfiprintf_r+0x32>
 800427c:	2140      	movs	r1, #64	; 0x40
 800427e:	f000 fafd 	bl	800487c <_malloc_r>
 8004282:	6028      	str	r0, [r5, #0]
 8004284:	6128      	str	r0, [r5, #16]
 8004286:	b920      	cbnz	r0, 8004292 <_svfiprintf_r+0x2e>
 8004288:	230c      	movs	r3, #12
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295
 8004290:	e0d1      	b.n	8004436 <_svfiprintf_r+0x1d2>
 8004292:	2340      	movs	r3, #64	; 0x40
 8004294:	616b      	str	r3, [r5, #20]
 8004296:	2300      	movs	r3, #0
 8004298:	9309      	str	r3, [sp, #36]	; 0x24
 800429a:	2320      	movs	r3, #32
 800429c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a4:	2330      	movs	r3, #48	; 0x30
 80042a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004450 <_svfiprintf_r+0x1ec>
 80042aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042ae:	f04f 0901 	mov.w	r9, #1
 80042b2:	4623      	mov	r3, r4
 80042b4:	469a      	mov	sl, r3
 80042b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ba:	b10a      	cbz	r2, 80042c0 <_svfiprintf_r+0x5c>
 80042bc:	2a25      	cmp	r2, #37	; 0x25
 80042be:	d1f9      	bne.n	80042b4 <_svfiprintf_r+0x50>
 80042c0:	ebba 0b04 	subs.w	fp, sl, r4
 80042c4:	d00b      	beq.n	80042de <_svfiprintf_r+0x7a>
 80042c6:	465b      	mov	r3, fp
 80042c8:	4622      	mov	r2, r4
 80042ca:	4629      	mov	r1, r5
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff ff6e 	bl	80041ae <__ssputs_r>
 80042d2:	3001      	adds	r0, #1
 80042d4:	f000 80aa 	beq.w	800442c <_svfiprintf_r+0x1c8>
 80042d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042da:	445a      	add	r2, fp
 80042dc:	9209      	str	r2, [sp, #36]	; 0x24
 80042de:	f89a 3000 	ldrb.w	r3, [sl]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80a2 	beq.w	800442c <_svfiprintf_r+0x1c8>
 80042e8:	2300      	movs	r3, #0
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295
 80042ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042f2:	f10a 0a01 	add.w	sl, sl, #1
 80042f6:	9304      	str	r3, [sp, #16]
 80042f8:	9307      	str	r3, [sp, #28]
 80042fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004300:	4654      	mov	r4, sl
 8004302:	2205      	movs	r2, #5
 8004304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004308:	4851      	ldr	r0, [pc, #324]	; (8004450 <_svfiprintf_r+0x1ec>)
 800430a:	f7fb ff69 	bl	80001e0 <memchr>
 800430e:	9a04      	ldr	r2, [sp, #16]
 8004310:	b9d8      	cbnz	r0, 800434a <_svfiprintf_r+0xe6>
 8004312:	06d0      	lsls	r0, r2, #27
 8004314:	bf44      	itt	mi
 8004316:	2320      	movmi	r3, #32
 8004318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431c:	0711      	lsls	r1, r2, #28
 800431e:	bf44      	itt	mi
 8004320:	232b      	movmi	r3, #43	; 0x2b
 8004322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004326:	f89a 3000 	ldrb.w	r3, [sl]
 800432a:	2b2a      	cmp	r3, #42	; 0x2a
 800432c:	d015      	beq.n	800435a <_svfiprintf_r+0xf6>
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	4654      	mov	r4, sl
 8004332:	2000      	movs	r0, #0
 8004334:	f04f 0c0a 	mov.w	ip, #10
 8004338:	4621      	mov	r1, r4
 800433a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800433e:	3b30      	subs	r3, #48	; 0x30
 8004340:	2b09      	cmp	r3, #9
 8004342:	d94e      	bls.n	80043e2 <_svfiprintf_r+0x17e>
 8004344:	b1b0      	cbz	r0, 8004374 <_svfiprintf_r+0x110>
 8004346:	9207      	str	r2, [sp, #28]
 8004348:	e014      	b.n	8004374 <_svfiprintf_r+0x110>
 800434a:	eba0 0308 	sub.w	r3, r0, r8
 800434e:	fa09 f303 	lsl.w	r3, r9, r3
 8004352:	4313      	orrs	r3, r2
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	46a2      	mov	sl, r4
 8004358:	e7d2      	b.n	8004300 <_svfiprintf_r+0x9c>
 800435a:	9b03      	ldr	r3, [sp, #12]
 800435c:	1d19      	adds	r1, r3, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	9103      	str	r1, [sp, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	bfbb      	ittet	lt
 8004366:	425b      	neglt	r3, r3
 8004368:	f042 0202 	orrlt.w	r2, r2, #2
 800436c:	9307      	strge	r3, [sp, #28]
 800436e:	9307      	strlt	r3, [sp, #28]
 8004370:	bfb8      	it	lt
 8004372:	9204      	strlt	r2, [sp, #16]
 8004374:	7823      	ldrb	r3, [r4, #0]
 8004376:	2b2e      	cmp	r3, #46	; 0x2e
 8004378:	d10c      	bne.n	8004394 <_svfiprintf_r+0x130>
 800437a:	7863      	ldrb	r3, [r4, #1]
 800437c:	2b2a      	cmp	r3, #42	; 0x2a
 800437e:	d135      	bne.n	80043ec <_svfiprintf_r+0x188>
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	1d1a      	adds	r2, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	9203      	str	r2, [sp, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	bfb8      	it	lt
 800438c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004390:	3402      	adds	r4, #2
 8004392:	9305      	str	r3, [sp, #20]
 8004394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004460 <_svfiprintf_r+0x1fc>
 8004398:	7821      	ldrb	r1, [r4, #0]
 800439a:	2203      	movs	r2, #3
 800439c:	4650      	mov	r0, sl
 800439e:	f7fb ff1f 	bl	80001e0 <memchr>
 80043a2:	b140      	cbz	r0, 80043b6 <_svfiprintf_r+0x152>
 80043a4:	2340      	movs	r3, #64	; 0x40
 80043a6:	eba0 000a 	sub.w	r0, r0, sl
 80043aa:	fa03 f000 	lsl.w	r0, r3, r0
 80043ae:	9b04      	ldr	r3, [sp, #16]
 80043b0:	4303      	orrs	r3, r0
 80043b2:	3401      	adds	r4, #1
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ba:	4826      	ldr	r0, [pc, #152]	; (8004454 <_svfiprintf_r+0x1f0>)
 80043bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043c0:	2206      	movs	r2, #6
 80043c2:	f7fb ff0d 	bl	80001e0 <memchr>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d038      	beq.n	800443c <_svfiprintf_r+0x1d8>
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <_svfiprintf_r+0x1f4>)
 80043cc:	bb1b      	cbnz	r3, 8004416 <_svfiprintf_r+0x1b2>
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	3307      	adds	r3, #7
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	3308      	adds	r3, #8
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043dc:	4433      	add	r3, r6
 80043de:	9309      	str	r3, [sp, #36]	; 0x24
 80043e0:	e767      	b.n	80042b2 <_svfiprintf_r+0x4e>
 80043e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e6:	460c      	mov	r4, r1
 80043e8:	2001      	movs	r0, #1
 80043ea:	e7a5      	b.n	8004338 <_svfiprintf_r+0xd4>
 80043ec:	2300      	movs	r3, #0
 80043ee:	3401      	adds	r4, #1
 80043f0:	9305      	str	r3, [sp, #20]
 80043f2:	4619      	mov	r1, r3
 80043f4:	f04f 0c0a 	mov.w	ip, #10
 80043f8:	4620      	mov	r0, r4
 80043fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043fe:	3a30      	subs	r2, #48	; 0x30
 8004400:	2a09      	cmp	r2, #9
 8004402:	d903      	bls.n	800440c <_svfiprintf_r+0x1a8>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0c5      	beq.n	8004394 <_svfiprintf_r+0x130>
 8004408:	9105      	str	r1, [sp, #20]
 800440a:	e7c3      	b.n	8004394 <_svfiprintf_r+0x130>
 800440c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004410:	4604      	mov	r4, r0
 8004412:	2301      	movs	r3, #1
 8004414:	e7f0      	b.n	80043f8 <_svfiprintf_r+0x194>
 8004416:	ab03      	add	r3, sp, #12
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	462a      	mov	r2, r5
 800441c:	4b0f      	ldr	r3, [pc, #60]	; (800445c <_svfiprintf_r+0x1f8>)
 800441e:	a904      	add	r1, sp, #16
 8004420:	4638      	mov	r0, r7
 8004422:	f3af 8000 	nop.w
 8004426:	1c42      	adds	r2, r0, #1
 8004428:	4606      	mov	r6, r0
 800442a:	d1d6      	bne.n	80043da <_svfiprintf_r+0x176>
 800442c:	89ab      	ldrh	r3, [r5, #12]
 800442e:	065b      	lsls	r3, r3, #25
 8004430:	f53f af2c 	bmi.w	800428c <_svfiprintf_r+0x28>
 8004434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004436:	b01d      	add	sp, #116	; 0x74
 8004438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443c:	ab03      	add	r3, sp, #12
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	462a      	mov	r2, r5
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <_svfiprintf_r+0x1f8>)
 8004444:	a904      	add	r1, sp, #16
 8004446:	4638      	mov	r0, r7
 8004448:	f000 f87a 	bl	8004540 <_printf_i>
 800444c:	e7eb      	b.n	8004426 <_svfiprintf_r+0x1c2>
 800444e:	bf00      	nop
 8004450:	08004f64 	.word	0x08004f64
 8004454:	08004f6e 	.word	0x08004f6e
 8004458:	00000000 	.word	0x00000000
 800445c:	080041af 	.word	0x080041af
 8004460:	08004f6a 	.word	0x08004f6a

08004464 <_printf_common>:
 8004464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004468:	4616      	mov	r6, r2
 800446a:	4699      	mov	r9, r3
 800446c:	688a      	ldr	r2, [r1, #8]
 800446e:	690b      	ldr	r3, [r1, #16]
 8004470:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004474:	4293      	cmp	r3, r2
 8004476:	bfb8      	it	lt
 8004478:	4613      	movlt	r3, r2
 800447a:	6033      	str	r3, [r6, #0]
 800447c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004480:	4607      	mov	r7, r0
 8004482:	460c      	mov	r4, r1
 8004484:	b10a      	cbz	r2, 800448a <_printf_common+0x26>
 8004486:	3301      	adds	r3, #1
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	0699      	lsls	r1, r3, #26
 800448e:	bf42      	ittt	mi
 8004490:	6833      	ldrmi	r3, [r6, #0]
 8004492:	3302      	addmi	r3, #2
 8004494:	6033      	strmi	r3, [r6, #0]
 8004496:	6825      	ldr	r5, [r4, #0]
 8004498:	f015 0506 	ands.w	r5, r5, #6
 800449c:	d106      	bne.n	80044ac <_printf_common+0x48>
 800449e:	f104 0a19 	add.w	sl, r4, #25
 80044a2:	68e3      	ldr	r3, [r4, #12]
 80044a4:	6832      	ldr	r2, [r6, #0]
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	42ab      	cmp	r3, r5
 80044aa:	dc26      	bgt.n	80044fa <_printf_common+0x96>
 80044ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044b0:	1e13      	subs	r3, r2, #0
 80044b2:	6822      	ldr	r2, [r4, #0]
 80044b4:	bf18      	it	ne
 80044b6:	2301      	movne	r3, #1
 80044b8:	0692      	lsls	r2, r2, #26
 80044ba:	d42b      	bmi.n	8004514 <_printf_common+0xb0>
 80044bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044c0:	4649      	mov	r1, r9
 80044c2:	4638      	mov	r0, r7
 80044c4:	47c0      	blx	r8
 80044c6:	3001      	adds	r0, #1
 80044c8:	d01e      	beq.n	8004508 <_printf_common+0xa4>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	68e5      	ldr	r5, [r4, #12]
 80044ce:	6832      	ldr	r2, [r6, #0]
 80044d0:	f003 0306 	and.w	r3, r3, #6
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	bf08      	it	eq
 80044d8:	1aad      	subeq	r5, r5, r2
 80044da:	68a3      	ldr	r3, [r4, #8]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	bf0c      	ite	eq
 80044e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e4:	2500      	movne	r5, #0
 80044e6:	4293      	cmp	r3, r2
 80044e8:	bfc4      	itt	gt
 80044ea:	1a9b      	subgt	r3, r3, r2
 80044ec:	18ed      	addgt	r5, r5, r3
 80044ee:	2600      	movs	r6, #0
 80044f0:	341a      	adds	r4, #26
 80044f2:	42b5      	cmp	r5, r6
 80044f4:	d11a      	bne.n	800452c <_printf_common+0xc8>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e008      	b.n	800450c <_printf_common+0xa8>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4652      	mov	r2, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	4638      	mov	r0, r7
 8004502:	47c0      	blx	r8
 8004504:	3001      	adds	r0, #1
 8004506:	d103      	bne.n	8004510 <_printf_common+0xac>
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	3501      	adds	r5, #1
 8004512:	e7c6      	b.n	80044a2 <_printf_common+0x3e>
 8004514:	18e1      	adds	r1, r4, r3
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	2030      	movs	r0, #48	; 0x30
 800451a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800451e:	4422      	add	r2, r4
 8004520:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004524:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004528:	3302      	adds	r3, #2
 800452a:	e7c7      	b.n	80044bc <_printf_common+0x58>
 800452c:	2301      	movs	r3, #1
 800452e:	4622      	mov	r2, r4
 8004530:	4649      	mov	r1, r9
 8004532:	4638      	mov	r0, r7
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0e6      	beq.n	8004508 <_printf_common+0xa4>
 800453a:	3601      	adds	r6, #1
 800453c:	e7d9      	b.n	80044f2 <_printf_common+0x8e>
	...

08004540 <_printf_i>:
 8004540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004544:	460c      	mov	r4, r1
 8004546:	4691      	mov	r9, r2
 8004548:	7e27      	ldrb	r7, [r4, #24]
 800454a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800454c:	2f78      	cmp	r7, #120	; 0x78
 800454e:	4680      	mov	r8, r0
 8004550:	469a      	mov	sl, r3
 8004552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004556:	d807      	bhi.n	8004568 <_printf_i+0x28>
 8004558:	2f62      	cmp	r7, #98	; 0x62
 800455a:	d80a      	bhi.n	8004572 <_printf_i+0x32>
 800455c:	2f00      	cmp	r7, #0
 800455e:	f000 80d8 	beq.w	8004712 <_printf_i+0x1d2>
 8004562:	2f58      	cmp	r7, #88	; 0x58
 8004564:	f000 80a3 	beq.w	80046ae <_printf_i+0x16e>
 8004568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800456c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004570:	e03a      	b.n	80045e8 <_printf_i+0xa8>
 8004572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004576:	2b15      	cmp	r3, #21
 8004578:	d8f6      	bhi.n	8004568 <_printf_i+0x28>
 800457a:	a001      	add	r0, pc, #4	; (adr r0, 8004580 <_printf_i+0x40>)
 800457c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045ed 	.word	0x080045ed
 8004588:	08004569 	.word	0x08004569
 800458c:	08004569 	.word	0x08004569
 8004590:	08004569 	.word	0x08004569
 8004594:	08004569 	.word	0x08004569
 8004598:	080045ed 	.word	0x080045ed
 800459c:	08004569 	.word	0x08004569
 80045a0:	08004569 	.word	0x08004569
 80045a4:	08004569 	.word	0x08004569
 80045a8:	08004569 	.word	0x08004569
 80045ac:	080046f9 	.word	0x080046f9
 80045b0:	0800461d 	.word	0x0800461d
 80045b4:	080046db 	.word	0x080046db
 80045b8:	08004569 	.word	0x08004569
 80045bc:	08004569 	.word	0x08004569
 80045c0:	0800471b 	.word	0x0800471b
 80045c4:	08004569 	.word	0x08004569
 80045c8:	0800461d 	.word	0x0800461d
 80045cc:	08004569 	.word	0x08004569
 80045d0:	08004569 	.word	0x08004569
 80045d4:	080046e3 	.word	0x080046e3
 80045d8:	680b      	ldr	r3, [r1, #0]
 80045da:	1d1a      	adds	r2, r3, #4
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	600a      	str	r2, [r1, #0]
 80045e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a3      	b.n	8004734 <_printf_i+0x1f4>
 80045ec:	6825      	ldr	r5, [r4, #0]
 80045ee:	6808      	ldr	r0, [r1, #0]
 80045f0:	062e      	lsls	r6, r5, #24
 80045f2:	f100 0304 	add.w	r3, r0, #4
 80045f6:	d50a      	bpl.n	800460e <_printf_i+0xce>
 80045f8:	6805      	ldr	r5, [r0, #0]
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	da03      	bge.n	8004608 <_printf_i+0xc8>
 8004600:	232d      	movs	r3, #45	; 0x2d
 8004602:	426d      	negs	r5, r5
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	485e      	ldr	r0, [pc, #376]	; (8004784 <_printf_i+0x244>)
 800460a:	230a      	movs	r3, #10
 800460c:	e019      	b.n	8004642 <_printf_i+0x102>
 800460e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004612:	6805      	ldr	r5, [r0, #0]
 8004614:	600b      	str	r3, [r1, #0]
 8004616:	bf18      	it	ne
 8004618:	b22d      	sxthne	r5, r5
 800461a:	e7ef      	b.n	80045fc <_printf_i+0xbc>
 800461c:	680b      	ldr	r3, [r1, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	1d18      	adds	r0, r3, #4
 8004622:	6008      	str	r0, [r1, #0]
 8004624:	0628      	lsls	r0, r5, #24
 8004626:	d501      	bpl.n	800462c <_printf_i+0xec>
 8004628:	681d      	ldr	r5, [r3, #0]
 800462a:	e002      	b.n	8004632 <_printf_i+0xf2>
 800462c:	0669      	lsls	r1, r5, #25
 800462e:	d5fb      	bpl.n	8004628 <_printf_i+0xe8>
 8004630:	881d      	ldrh	r5, [r3, #0]
 8004632:	4854      	ldr	r0, [pc, #336]	; (8004784 <_printf_i+0x244>)
 8004634:	2f6f      	cmp	r7, #111	; 0x6f
 8004636:	bf0c      	ite	eq
 8004638:	2308      	moveq	r3, #8
 800463a:	230a      	movne	r3, #10
 800463c:	2100      	movs	r1, #0
 800463e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004642:	6866      	ldr	r6, [r4, #4]
 8004644:	60a6      	str	r6, [r4, #8]
 8004646:	2e00      	cmp	r6, #0
 8004648:	bfa2      	ittt	ge
 800464a:	6821      	ldrge	r1, [r4, #0]
 800464c:	f021 0104 	bicge.w	r1, r1, #4
 8004650:	6021      	strge	r1, [r4, #0]
 8004652:	b90d      	cbnz	r5, 8004658 <_printf_i+0x118>
 8004654:	2e00      	cmp	r6, #0
 8004656:	d04d      	beq.n	80046f4 <_printf_i+0x1b4>
 8004658:	4616      	mov	r6, r2
 800465a:	fbb5 f1f3 	udiv	r1, r5, r3
 800465e:	fb03 5711 	mls	r7, r3, r1, r5
 8004662:	5dc7      	ldrb	r7, [r0, r7]
 8004664:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004668:	462f      	mov	r7, r5
 800466a:	42bb      	cmp	r3, r7
 800466c:	460d      	mov	r5, r1
 800466e:	d9f4      	bls.n	800465a <_printf_i+0x11a>
 8004670:	2b08      	cmp	r3, #8
 8004672:	d10b      	bne.n	800468c <_printf_i+0x14c>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	07df      	lsls	r7, r3, #31
 8004678:	d508      	bpl.n	800468c <_printf_i+0x14c>
 800467a:	6923      	ldr	r3, [r4, #16]
 800467c:	6861      	ldr	r1, [r4, #4]
 800467e:	4299      	cmp	r1, r3
 8004680:	bfde      	ittt	le
 8004682:	2330      	movle	r3, #48	; 0x30
 8004684:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004688:	f106 36ff 	addle.w	r6, r6, #4294967295
 800468c:	1b92      	subs	r2, r2, r6
 800468e:	6122      	str	r2, [r4, #16]
 8004690:	f8cd a000 	str.w	sl, [sp]
 8004694:	464b      	mov	r3, r9
 8004696:	aa03      	add	r2, sp, #12
 8004698:	4621      	mov	r1, r4
 800469a:	4640      	mov	r0, r8
 800469c:	f7ff fee2 	bl	8004464 <_printf_common>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d14c      	bne.n	800473e <_printf_i+0x1fe>
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	b004      	add	sp, #16
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	4835      	ldr	r0, [pc, #212]	; (8004784 <_printf_i+0x244>)
 80046b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	680e      	ldr	r6, [r1, #0]
 80046b8:	061f      	lsls	r7, r3, #24
 80046ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80046be:	600e      	str	r6, [r1, #0]
 80046c0:	d514      	bpl.n	80046ec <_printf_i+0x1ac>
 80046c2:	07d9      	lsls	r1, r3, #31
 80046c4:	bf44      	itt	mi
 80046c6:	f043 0320 	orrmi.w	r3, r3, #32
 80046ca:	6023      	strmi	r3, [r4, #0]
 80046cc:	b91d      	cbnz	r5, 80046d6 <_printf_i+0x196>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	f023 0320 	bic.w	r3, r3, #32
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	2310      	movs	r3, #16
 80046d8:	e7b0      	b.n	800463c <_printf_i+0xfc>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	2378      	movs	r3, #120	; 0x78
 80046e4:	4828      	ldr	r0, [pc, #160]	; (8004788 <_printf_i+0x248>)
 80046e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046ea:	e7e3      	b.n	80046b4 <_printf_i+0x174>
 80046ec:	065e      	lsls	r6, r3, #25
 80046ee:	bf48      	it	mi
 80046f0:	b2ad      	uxthmi	r5, r5
 80046f2:	e7e6      	b.n	80046c2 <_printf_i+0x182>
 80046f4:	4616      	mov	r6, r2
 80046f6:	e7bb      	b.n	8004670 <_printf_i+0x130>
 80046f8:	680b      	ldr	r3, [r1, #0]
 80046fa:	6826      	ldr	r6, [r4, #0]
 80046fc:	6960      	ldr	r0, [r4, #20]
 80046fe:	1d1d      	adds	r5, r3, #4
 8004700:	600d      	str	r5, [r1, #0]
 8004702:	0635      	lsls	r5, r6, #24
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	d501      	bpl.n	800470c <_printf_i+0x1cc>
 8004708:	6018      	str	r0, [r3, #0]
 800470a:	e002      	b.n	8004712 <_printf_i+0x1d2>
 800470c:	0671      	lsls	r1, r6, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0x1c8>
 8004710:	8018      	strh	r0, [r3, #0]
 8004712:	2300      	movs	r3, #0
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	4616      	mov	r6, r2
 8004718:	e7ba      	b.n	8004690 <_printf_i+0x150>
 800471a:	680b      	ldr	r3, [r1, #0]
 800471c:	1d1a      	adds	r2, r3, #4
 800471e:	600a      	str	r2, [r1, #0]
 8004720:	681e      	ldr	r6, [r3, #0]
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	2100      	movs	r1, #0
 8004726:	4630      	mov	r0, r6
 8004728:	f7fb fd5a 	bl	80001e0 <memchr>
 800472c:	b108      	cbz	r0, 8004732 <_printf_i+0x1f2>
 800472e:	1b80      	subs	r0, r0, r6
 8004730:	6060      	str	r0, [r4, #4]
 8004732:	6863      	ldr	r3, [r4, #4]
 8004734:	6123      	str	r3, [r4, #16]
 8004736:	2300      	movs	r3, #0
 8004738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473c:	e7a8      	b.n	8004690 <_printf_i+0x150>
 800473e:	6923      	ldr	r3, [r4, #16]
 8004740:	4632      	mov	r2, r6
 8004742:	4649      	mov	r1, r9
 8004744:	4640      	mov	r0, r8
 8004746:	47d0      	blx	sl
 8004748:	3001      	adds	r0, #1
 800474a:	d0ab      	beq.n	80046a4 <_printf_i+0x164>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	079b      	lsls	r3, r3, #30
 8004750:	d413      	bmi.n	800477a <_printf_i+0x23a>
 8004752:	68e0      	ldr	r0, [r4, #12]
 8004754:	9b03      	ldr	r3, [sp, #12]
 8004756:	4298      	cmp	r0, r3
 8004758:	bfb8      	it	lt
 800475a:	4618      	movlt	r0, r3
 800475c:	e7a4      	b.n	80046a8 <_printf_i+0x168>
 800475e:	2301      	movs	r3, #1
 8004760:	4632      	mov	r2, r6
 8004762:	4649      	mov	r1, r9
 8004764:	4640      	mov	r0, r8
 8004766:	47d0      	blx	sl
 8004768:	3001      	adds	r0, #1
 800476a:	d09b      	beq.n	80046a4 <_printf_i+0x164>
 800476c:	3501      	adds	r5, #1
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	9903      	ldr	r1, [sp, #12]
 8004772:	1a5b      	subs	r3, r3, r1
 8004774:	42ab      	cmp	r3, r5
 8004776:	dcf2      	bgt.n	800475e <_printf_i+0x21e>
 8004778:	e7eb      	b.n	8004752 <_printf_i+0x212>
 800477a:	2500      	movs	r5, #0
 800477c:	f104 0619 	add.w	r6, r4, #25
 8004780:	e7f5      	b.n	800476e <_printf_i+0x22e>
 8004782:	bf00      	nop
 8004784:	08004f75 	.word	0x08004f75
 8004788:	08004f86 	.word	0x08004f86

0800478c <memcpy>:
 800478c:	440a      	add	r2, r1
 800478e:	4291      	cmp	r1, r2
 8004790:	f100 33ff 	add.w	r3, r0, #4294967295
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	4770      	bx	lr
 8004798:	b510      	push	{r4, lr}
 800479a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a2:	4291      	cmp	r1, r2
 80047a4:	d1f9      	bne.n	800479a <memcpy+0xe>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <memmove>:
 80047a8:	4288      	cmp	r0, r1
 80047aa:	b510      	push	{r4, lr}
 80047ac:	eb01 0402 	add.w	r4, r1, r2
 80047b0:	d902      	bls.n	80047b8 <memmove+0x10>
 80047b2:	4284      	cmp	r4, r0
 80047b4:	4623      	mov	r3, r4
 80047b6:	d807      	bhi.n	80047c8 <memmove+0x20>
 80047b8:	1e43      	subs	r3, r0, #1
 80047ba:	42a1      	cmp	r1, r4
 80047bc:	d008      	beq.n	80047d0 <memmove+0x28>
 80047be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047c6:	e7f8      	b.n	80047ba <memmove+0x12>
 80047c8:	4402      	add	r2, r0
 80047ca:	4601      	mov	r1, r0
 80047cc:	428a      	cmp	r2, r1
 80047ce:	d100      	bne.n	80047d2 <memmove+0x2a>
 80047d0:	bd10      	pop	{r4, pc}
 80047d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047da:	e7f7      	b.n	80047cc <memmove+0x24>

080047dc <_free_r>:
 80047dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047de:	2900      	cmp	r1, #0
 80047e0:	d048      	beq.n	8004874 <_free_r+0x98>
 80047e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e6:	9001      	str	r0, [sp, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f1a1 0404 	sub.w	r4, r1, #4
 80047ee:	bfb8      	it	lt
 80047f0:	18e4      	addlt	r4, r4, r3
 80047f2:	f000 f8d3 	bl	800499c <__malloc_lock>
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <_free_r+0x9c>)
 80047f8:	9801      	ldr	r0, [sp, #4]
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	4615      	mov	r5, r2
 80047fe:	b933      	cbnz	r3, 800480e <_free_r+0x32>
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6014      	str	r4, [r2, #0]
 8004804:	b003      	add	sp, #12
 8004806:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800480a:	f000 b8cd 	b.w	80049a8 <__malloc_unlock>
 800480e:	42a3      	cmp	r3, r4
 8004810:	d90b      	bls.n	800482a <_free_r+0x4e>
 8004812:	6821      	ldr	r1, [r4, #0]
 8004814:	1862      	adds	r2, r4, r1
 8004816:	4293      	cmp	r3, r2
 8004818:	bf04      	itt	eq
 800481a:	681a      	ldreq	r2, [r3, #0]
 800481c:	685b      	ldreq	r3, [r3, #4]
 800481e:	6063      	str	r3, [r4, #4]
 8004820:	bf04      	itt	eq
 8004822:	1852      	addeq	r2, r2, r1
 8004824:	6022      	streq	r2, [r4, #0]
 8004826:	602c      	str	r4, [r5, #0]
 8004828:	e7ec      	b.n	8004804 <_free_r+0x28>
 800482a:	461a      	mov	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b10b      	cbz	r3, 8004834 <_free_r+0x58>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d9fa      	bls.n	800482a <_free_r+0x4e>
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	1855      	adds	r5, r2, r1
 8004838:	42a5      	cmp	r5, r4
 800483a:	d10b      	bne.n	8004854 <_free_r+0x78>
 800483c:	6824      	ldr	r4, [r4, #0]
 800483e:	4421      	add	r1, r4
 8004840:	1854      	adds	r4, r2, r1
 8004842:	42a3      	cmp	r3, r4
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	d1dd      	bne.n	8004804 <_free_r+0x28>
 8004848:	681c      	ldr	r4, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	4421      	add	r1, r4
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	e7d7      	b.n	8004804 <_free_r+0x28>
 8004854:	d902      	bls.n	800485c <_free_r+0x80>
 8004856:	230c      	movs	r3, #12
 8004858:	6003      	str	r3, [r0, #0]
 800485a:	e7d3      	b.n	8004804 <_free_r+0x28>
 800485c:	6825      	ldr	r5, [r4, #0]
 800485e:	1961      	adds	r1, r4, r5
 8004860:	428b      	cmp	r3, r1
 8004862:	bf04      	itt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	bf04      	itt	eq
 800486c:	1949      	addeq	r1, r1, r5
 800486e:	6021      	streq	r1, [r4, #0]
 8004870:	6054      	str	r4, [r2, #4]
 8004872:	e7c7      	b.n	8004804 <_free_r+0x28>
 8004874:	b003      	add	sp, #12
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	20000494 	.word	0x20000494

0800487c <_malloc_r>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	1ccd      	adds	r5, r1, #3
 8004880:	f025 0503 	bic.w	r5, r5, #3
 8004884:	3508      	adds	r5, #8
 8004886:	2d0c      	cmp	r5, #12
 8004888:	bf38      	it	cc
 800488a:	250c      	movcc	r5, #12
 800488c:	2d00      	cmp	r5, #0
 800488e:	4606      	mov	r6, r0
 8004890:	db01      	blt.n	8004896 <_malloc_r+0x1a>
 8004892:	42a9      	cmp	r1, r5
 8004894:	d903      	bls.n	800489e <_malloc_r+0x22>
 8004896:	230c      	movs	r3, #12
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	2000      	movs	r0, #0
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489e:	f000 f87d 	bl	800499c <__malloc_lock>
 80048a2:	4921      	ldr	r1, [pc, #132]	; (8004928 <_malloc_r+0xac>)
 80048a4:	680a      	ldr	r2, [r1, #0]
 80048a6:	4614      	mov	r4, r2
 80048a8:	b99c      	cbnz	r4, 80048d2 <_malloc_r+0x56>
 80048aa:	4f20      	ldr	r7, [pc, #128]	; (800492c <_malloc_r+0xb0>)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b923      	cbnz	r3, 80048ba <_malloc_r+0x3e>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 f862 	bl	800497c <_sbrk_r>
 80048b8:	6038      	str	r0, [r7, #0]
 80048ba:	4629      	mov	r1, r5
 80048bc:	4630      	mov	r0, r6
 80048be:	f000 f85d 	bl	800497c <_sbrk_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d123      	bne.n	800490e <_malloc_r+0x92>
 80048c6:	230c      	movs	r3, #12
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	4630      	mov	r0, r6
 80048cc:	f000 f86c 	bl	80049a8 <__malloc_unlock>
 80048d0:	e7e3      	b.n	800489a <_malloc_r+0x1e>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	1b5b      	subs	r3, r3, r5
 80048d6:	d417      	bmi.n	8004908 <_malloc_r+0x8c>
 80048d8:	2b0b      	cmp	r3, #11
 80048da:	d903      	bls.n	80048e4 <_malloc_r+0x68>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	441c      	add	r4, r3
 80048e0:	6025      	str	r5, [r4, #0]
 80048e2:	e004      	b.n	80048ee <_malloc_r+0x72>
 80048e4:	6863      	ldr	r3, [r4, #4]
 80048e6:	42a2      	cmp	r2, r4
 80048e8:	bf0c      	ite	eq
 80048ea:	600b      	streq	r3, [r1, #0]
 80048ec:	6053      	strne	r3, [r2, #4]
 80048ee:	4630      	mov	r0, r6
 80048f0:	f000 f85a 	bl	80049a8 <__malloc_unlock>
 80048f4:	f104 000b 	add.w	r0, r4, #11
 80048f8:	1d23      	adds	r3, r4, #4
 80048fa:	f020 0007 	bic.w	r0, r0, #7
 80048fe:	1ac2      	subs	r2, r0, r3
 8004900:	d0cc      	beq.n	800489c <_malloc_r+0x20>
 8004902:	1a1b      	subs	r3, r3, r0
 8004904:	50a3      	str	r3, [r4, r2]
 8004906:	e7c9      	b.n	800489c <_malloc_r+0x20>
 8004908:	4622      	mov	r2, r4
 800490a:	6864      	ldr	r4, [r4, #4]
 800490c:	e7cc      	b.n	80048a8 <_malloc_r+0x2c>
 800490e:	1cc4      	adds	r4, r0, #3
 8004910:	f024 0403 	bic.w	r4, r4, #3
 8004914:	42a0      	cmp	r0, r4
 8004916:	d0e3      	beq.n	80048e0 <_malloc_r+0x64>
 8004918:	1a21      	subs	r1, r4, r0
 800491a:	4630      	mov	r0, r6
 800491c:	f000 f82e 	bl	800497c <_sbrk_r>
 8004920:	3001      	adds	r0, #1
 8004922:	d1dd      	bne.n	80048e0 <_malloc_r+0x64>
 8004924:	e7cf      	b.n	80048c6 <_malloc_r+0x4a>
 8004926:	bf00      	nop
 8004928:	20000494 	.word	0x20000494
 800492c:	20000498 	.word	0x20000498

08004930 <_realloc_r>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	4607      	mov	r7, r0
 8004934:	4614      	mov	r4, r2
 8004936:	460e      	mov	r6, r1
 8004938:	b921      	cbnz	r1, 8004944 <_realloc_r+0x14>
 800493a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800493e:	4611      	mov	r1, r2
 8004940:	f7ff bf9c 	b.w	800487c <_malloc_r>
 8004944:	b922      	cbnz	r2, 8004950 <_realloc_r+0x20>
 8004946:	f7ff ff49 	bl	80047dc <_free_r>
 800494a:	4625      	mov	r5, r4
 800494c:	4628      	mov	r0, r5
 800494e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004950:	f000 f830 	bl	80049b4 <_malloc_usable_size_r>
 8004954:	42a0      	cmp	r0, r4
 8004956:	d20f      	bcs.n	8004978 <_realloc_r+0x48>
 8004958:	4621      	mov	r1, r4
 800495a:	4638      	mov	r0, r7
 800495c:	f7ff ff8e 	bl	800487c <_malloc_r>
 8004960:	4605      	mov	r5, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	d0f2      	beq.n	800494c <_realloc_r+0x1c>
 8004966:	4631      	mov	r1, r6
 8004968:	4622      	mov	r2, r4
 800496a:	f7ff ff0f 	bl	800478c <memcpy>
 800496e:	4631      	mov	r1, r6
 8004970:	4638      	mov	r0, r7
 8004972:	f7ff ff33 	bl	80047dc <_free_r>
 8004976:	e7e9      	b.n	800494c <_realloc_r+0x1c>
 8004978:	4635      	mov	r5, r6
 800497a:	e7e7      	b.n	800494c <_realloc_r+0x1c>

0800497c <_sbrk_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d06      	ldr	r5, [pc, #24]	; (8004998 <_sbrk_r+0x1c>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	f7fc fdb0 	bl	80014ec <_sbrk>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_sbrk_r+0x1a>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_sbrk_r+0x1a>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	200006b4 	.word	0x200006b4

0800499c <__malloc_lock>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__malloc_lock+0x8>)
 800499e:	f000 b811 	b.w	80049c4 <__retarget_lock_acquire_recursive>
 80049a2:	bf00      	nop
 80049a4:	200006bc 	.word	0x200006bc

080049a8 <__malloc_unlock>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__malloc_unlock+0x8>)
 80049aa:	f000 b80c 	b.w	80049c6 <__retarget_lock_release_recursive>
 80049ae:	bf00      	nop
 80049b0:	200006bc 	.word	0x200006bc

080049b4 <_malloc_usable_size_r>:
 80049b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b8:	1f18      	subs	r0, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfbc      	itt	lt
 80049be:	580b      	ldrlt	r3, [r1, r0]
 80049c0:	18c0      	addlt	r0, r0, r3
 80049c2:	4770      	bx	lr

080049c4 <__retarget_lock_acquire_recursive>:
 80049c4:	4770      	bx	lr

080049c6 <__retarget_lock_release_recursive>:
 80049c6:	4770      	bx	lr

080049c8 <_init>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr

080049d4 <_fini>:
 80049d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d6:	bf00      	nop
 80049d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049da:	bc08      	pop	{r3}
 80049dc:	469e      	mov	lr, r3
 80049de:	4770      	bx	lr
