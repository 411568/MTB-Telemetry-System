
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a34  08009280  08009280  00019280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cb4  08009cb4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009cb4  08009cb4  00019cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cbc  08009cbc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc0  08009cc0  00019cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  200001dc  08009ea0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  08009ea0  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b13  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  00038d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003c4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  0003d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8c2  00000000  00000000  0003e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a2f  00000000  00000000  0005a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2d4e  00000000  00000000  00073c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001169df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060bc  00000000  00000000  00116a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009264 	.word	0x08009264

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08009264 	.word	0x08009264

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <Brake_Sensor_Read+0x38>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 8000f04:	2100      	movs	r1, #0
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f08:	f000 f970 	bl	80011ec <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f0e:	f001 fd77 	bl	8002a00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f18:	f001 fe59 	bl	8002bce <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f1e:	f001 fee1 	bl	8002ce4 <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	81fb      	strh	r3, [r7, #14]
 8000f26:	e017      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d111      	bne.n	8000f52 <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f32:	f000 f95b 	bl	80011ec <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f38:	f001 fd62 	bl	8002a00 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f42:	f001 fe44 	bl	8002bce <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f48:	f001 fecc 	bl	8002ce4 <HAL_ADC_GetValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
 8000f50:	e002      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 8000f52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f56:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f5a:	f001 fe05 	bl	8002b68 <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 40;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <Brake_Sensor_Read+0x88>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000060c 	.word	0x2000060c
 8000f78:	cccccccd 	.word	0xcccccccd

08000f7c <HMC5883L_initialize>:
#include "HMC5883L.h"

void HMC5883L_initialize(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
	uint8_t RegSettingA = HMC5883l_Enable_A;
 8000f82:	2378      	movs	r3, #120	; 0x78
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t RegSettingB = HMC5883l_Enable_B;
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t RegSettingMR = HMC5883l_MR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	717b      	strb	r3, [r7, #5]

	// Sensor 1
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	213c      	movs	r1, #60	; 0x3c
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fa2:	f002 fcd7 	bl	8003954 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	213c      	movs	r1, #60	; 0x3c
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fba:	f002 fccb 	bl	8003954 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1d7b      	adds	r3, r7, #5
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	213c      	movs	r1, #60	; 0x3c
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fd2:	f002 fcbf 	bl	8003954 <HAL_I2C_Mem_Write>

	// Sensor 2
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	213c      	movs	r1, #60	; 0x3c
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <HMC5883L_initialize+0xb0>)
 8000fea:	f002 fcb3 	bl	8003954 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	213c      	movs	r1, #60	; 0x3c
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <HMC5883L_initialize+0xb0>)
 8001002:	f002 fca7 	bl	8003954 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1d7b      	adds	r3, r7, #5
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2202      	movs	r2, #2
 8001016:	213c      	movs	r1, #60	; 0x3c
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <HMC5883L_initialize+0xb0>)
 800101a:	f002 fc9b 	bl	8003954 <HAL_I2C_Mem_Write>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000654 	.word	0x20000654
 800102c:	200006a8 	.word	0x200006a8

08001030 <HMC5883L_get_X>:

uint16_t HMC5883L_get_X(uint8_t sensor)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	uint8_t DataX[2];
	uint16_t Xaxis = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	81fb      	strh	r3, [r7, #14]
	uint8_t temp[2];

	// Read the register
	if(sensor == 0)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d127      	bne.n	8001094 <HMC5883L_get_X+0x64>
	{
		// RECEIVE X_axis
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2302      	movs	r3, #2
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2283      	movs	r2, #131	; 0x83
 8001056:	213c      	movs	r1, #60	; 0x3c
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <HMC5883L_get_X+0xdc>)
 800105a:	f002 fd75 	bl	8003b48 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	2302      	movs	r3, #2
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2287      	movs	r2, #135	; 0x87
 8001070:	213c      	movs	r1, #60	; 0x3c
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <HMC5883L_get_X+0xdc>)
 8001074:	f002 fd68 	bl	8003b48 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2302      	movs	r3, #2
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2285      	movs	r2, #133	; 0x85
 800108a:	213c      	movs	r1, #60	; 0x3c
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <HMC5883L_get_X+0xdc>)
 800108e:	f002 fd5b 	bl	8003b48 <HAL_I2C_Mem_Read>
 8001092:	e026      	b.n	80010e2 <HMC5883L_get_X+0xb2>
	}
	//	HAL_I2C_Mem_Read(&handler_1_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
	else
	{
		//HAL_I2C_Mem_Read(&handler_2_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2302      	movs	r3, #2
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2283      	movs	r2, #131	; 0x83
 80010a6:	213c      	movs	r1, #60	; 0x3c
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010aa:	f002 fd4d 	bl	8003b48 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2287      	movs	r2, #135	; 0x87
 80010c0:	213c      	movs	r1, #60	; 0x3c
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010c4:	f002 fd40 	bl	8003b48 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2302      	movs	r3, #2
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2285      	movs	r2, #133	; 0x85
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010de:	f002 fd33 	bl	8003b48 <HAL_I2C_Mem_Read>
	}

	Xaxis = ((DataX[1]<<8) | DataX[0]);
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	81fb      	strh	r3, [r7, #14]
	return Xaxis / 655;
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HMC5883L_get_X+0xe4>)
 80010f6:	fba3 1302 	umull	r1, r3, r3, r2
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	0852      	lsrs	r2, r2, #1
 80010fe:	4413      	add	r3, r2
 8001100:	0a5b      	lsrs	r3, r3, #9
 8001102:	b29b      	uxth	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000654 	.word	0x20000654
 8001110:	200006a8 	.word	0x200006a8
 8001114:	903847eb 	.word	0x903847eb

08001118 <MPU6050_initialize>:
#include "MPU6050.h"

uint8_t MPU6050_initialize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
	uint8_t check;

	// Check the device id
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2275      	movs	r2, #117	; 0x75
 8001132:	21d0      	movs	r1, #208	; 0xd0
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MPU6050_initialize+0xd0>)
 8001136:	f002 fd07 	bl	8003b48 <HAL_I2C_Mem_Read>

	if (check == 104)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b68      	cmp	r3, #104	; 0x68
 800113e:	d14e      	bne.n	80011de <MPU6050_initialize+0xc6>
	{
		// Set power register to 0
		uint8_t command = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &command, 1, 1000);
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 030e 	add.w	r3, r7, #14
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	226b      	movs	r2, #107	; 0x6b
 8001158:	21d0      	movs	r1, #208	; 0xd0
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MPU6050_initialize+0xd0>)
 800115c:	f002 fbfa 	bl	8003954 <HAL_I2C_Mem_Write>

		// Set data rate of 1kHz
		command = 0x07;
 8001160:	2307      	movs	r3, #7
 8001162:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &command, 1, 1000);
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f107 030e 	add.w	r3, r7, #14
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2219      	movs	r2, #25
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	481b      	ldr	r0, [pc, #108]	; (80011e8 <MPU6050_initialize+0xd0>)
 800117c:	f002 fbea 	bl	8003954 <HAL_I2C_Mem_Write>

		// Accelerometer configuration
		command = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &command, 1, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 030e 	add.w	r3, r7, #14
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221c      	movs	r2, #28
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MPU6050_initialize+0xd0>)
 800119c:	f002 fbda 	bl	8003954 <HAL_I2C_Mem_Write>

		// Gyroscope config
		command = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &command, 1, 1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f107 030e 	add.w	r3, r7, #14
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	221b      	movs	r2, #27
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MPU6050_initialize+0xd0>)
 80011bc:	f002 fbca 	bl	8003954 <HAL_I2C_Mem_Write>

		// Read all data from sensor
		uint8_t Rec_Data[14];
		HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	230e      	movs	r3, #14
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	463b      	mov	r3, r7
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	223b      	movs	r2, #59	; 0x3b
 80011d2:	21d0      	movs	r1, #208	; 0xd0
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MPU6050_initialize+0xd0>)
 80011d6:	f002 fcb7 	bl	8003b48 <HAL_I2C_Mem_Read>

		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <MPU6050_initialize+0xc8>
	}
	else
	{
		return 1; // error
 80011de:	2301      	movs	r3, #1
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000654 	.word	0x20000654

080011ec <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fd72 	bl	8002d00 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 8001222:	f000 ffbf 	bl	80021a4 <Error_Handler>
	}
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	80bb      	strh	r3, [r7, #4]
	uint8_t battery_out = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
	const uint16_t bat_min = 2172; // minimum battery reading (about 3.5V)
 800123e:	f640 037c 	movw	r3, #2172	; 0x87c
 8001242:	807b      	strh	r3, [r7, #2]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 8001244:	2102      	movs	r1, #2
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <Read_Battery_Voltage+0x6c>)
 8001248:	f7ff ffd0 	bl	80011ec <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <Read_Battery_Voltage+0x6c>)
 800124e:	f001 fbd7 	bl	8002a00 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 8001252:	f04f 31ff 	mov.w	r1, #4294967295
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <Read_Battery_Voltage+0x6c>)
 8001258:	f001 fcb9 	bl	8002bce <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <Read_Battery_Voltage+0x6c>)
 800125e:	f001 fd41 	bl	8002ce4 <HAL_ADC_GetValue>
 8001262:	4603      	mov	r3, r0
 8001264:	80bb      	strh	r3, [r7, #4]

	// Return the battery %
	if (ADC_reading < bat_min)
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	429a      	cmp	r2, r3
 800126c:	d202      	bcs.n	8001274 <Read_Battery_Voltage+0x44>
	{
		battery_out = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e00e      	b.n	8001292 <Read_Battery_Voltage+0x62>
	}
	else
	{
		battery_out = (ADC_reading - bat_min) / 5;
 8001274:	88ba      	ldrh	r2, [r7, #4]
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <Read_Battery_Voltage+0x70>)
 800127c:	fb82 1203 	smull	r1, r2, r2, r3
 8001280:	1052      	asrs	r2, r2, #1
 8001282:	17db      	asrs	r3, r3, #31
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	71fb      	strb	r3, [r7, #7]
		if (battery_out > 100) // if the voltage exceeds about 4.15 V (depends on the ADC supply voltage, so it might shift a little)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <Read_Battery_Voltage+0x62>
		{
			battery_out = 100;
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	71fb      	strb	r3, [r7, #7]
		}
	}

	return battery_out;
 8001292:	79fb      	ldrb	r3, [r7, #7]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000060c 	.word	0x2000060c
 80012a0:	66666667 	.word	0x66666667

080012a4 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80012a4:	b490      	push	{r4, r7}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4603      	mov	r3, r0
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	460b      	mov	r3, r1
 80012bc:	717b      	strb	r3, [r7, #5]
 80012be:	4613      	mov	r3, r2
 80012c0:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <ST7565_updateBoundingBox+0x68>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d202      	bcs.n	80012d2 <ST7565_updateBoundingBox+0x2e>
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <ST7565_updateBoundingBox+0x68>)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <ST7565_updateBoundingBox+0x6c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	797a      	ldrb	r2, [r7, #5]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d902      	bls.n	80012e2 <ST7565_updateBoundingBox+0x3e>
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <ST7565_updateBoundingBox+0x6c>)
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <ST7565_updateBoundingBox+0x70>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d202      	bcs.n	80012f2 <ST7565_updateBoundingBox+0x4e>
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <ST7565_updateBoundingBox+0x70>)
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <ST7565_updateBoundingBox+0x74>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	793a      	ldrb	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d902      	bls.n	8001302 <ST7565_updateBoundingBox+0x5e>
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <ST7565_updateBoundingBox+0x74>)
 80012fe:	793b      	ldrb	r3, [r7, #4]
 8001300:	7013      	strb	r3, [r2, #0]
	#endif
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bc90      	pop	{r4, r7}
 800130a:	4770      	bx	lr
 800130c:	200005f8 	.word	0x200005f8
 8001310:	200005f9 	.word	0x200005f9
 8001314:	200005fa 	.word	0x200005fa
 8001318:	200005fb 	.word	0x200005fb

0800131c <ST7565_drawbitmap>:

void ST7565_drawbitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	603a      	str	r2, [r7, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	4613      	mov	r3, r2
 8001330:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;
	for (j = 0; j < h; j++)
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]
 8001336:	e030      	b.n	800139a <ST7565_drawbitmap+0x7e>
	{
		for (i = 0; i < w; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e026      	b.n	800138c <ST7565_drawbitmap+0x70>
		{
			if (bitmap[i + (j / 8) * w] & (1 << (j % 8)))
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	fb03 f301 	mul.w	r3, r3, r1
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	fa42 f303 	asr.w	r3, r2, r3
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <ST7565_drawbitmap+0x6a>
			{
				ST7565_my_setpixel(x + i, y + j, color);
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	4413      	add	r3, r2
 8001372:	b2d8      	uxtb	r0, r3
 8001374:	79ba      	ldrb	r2, [r7, #6]
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	4413      	add	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	f000 f8c7 	bl	8001514 <ST7565_my_setpixel>
		for (i = 0; i < w; i++)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	797b      	ldrb	r3, [r7, #5]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3d4      	bcc.n	800133e <ST7565_drawbitmap+0x22>
	for (j = 0; j < h; j++)
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	3301      	adds	r3, #1
 8001398:	73bb      	strb	r3, [r7, #14]
 800139a:	7bba      	ldrb	r2, [r7, #14]
 800139c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3c9      	bcc.n	8001338 <ST7565_drawbitmap+0x1c>
			}
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	797b      	ldrb	r3, [r7, #5]
 80013a8:	4413      	add	r3, r2
 80013aa:	b2dc      	uxtb	r4, r3
 80013ac:	79ba      	ldrb	r2, [r7, #6]
 80013ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b2:	4413      	add	r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	79b9      	ldrb	r1, [r7, #6]
 80013b8:	79f8      	ldrb	r0, [r7, #7]
 80013ba:	4622      	mov	r2, r4
 80013bc:	f7ff ff72 	bl	80012a4 <ST7565_updateBoundingBox>
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	603a      	str	r2, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	460b      	mov	r3, r1
 80013d6:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 80013d8:	e017      	b.n	800140a <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	79b9      	ldrb	r1, [r7, #6]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f81a 	bl	800141c <ST7565_drawchar>
		c++;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	3306      	adds	r3, #6
 80013f2:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b79      	cmp	r3, #121	; 0x79
 80013f8:	d904      	bls.n	8001404 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
			line++;
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	3301      	adds	r3, #1
 8001402:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d804      	bhi.n	8001414 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e3      	bne.n	80013da <ST7565_drawstring+0x12>
 8001412:	e000      	b.n	8001416 <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8001414:	bf00      	nop
	}
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	460b      	mov	r3, r1
 8001428:	71bb      	strb	r3, [r7, #6]
 800142a:	4613      	mov	r3, r2
 800142c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e013      	b.n	800145c <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 8001434:	797a      	ldrb	r2, [r7, #5]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	441a      	add	r2, r3
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	441a      	add	r2, r3
 8001440:	79f9      	ldrb	r1, [r7, #7]
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	01db      	lsls	r3, r3, #7
 8001446:	440b      	add	r3, r1
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <ST7565_drawchar+0x70>)
 800144a:	5c89      	ldrb	r1, [r1, r2]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <ST7565_drawchar+0x74>)
 800144e:	54d1      	strb	r1, [r2, r3]
		x++;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3301      	adds	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3301      	adds	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d9e8      	bls.n	8001434 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b05      	subs	r3, #5
 8001466:	b2d8      	uxtb	r0, r3
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3b01      	subs	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	3301      	adds	r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f7ff ff11 	bl	80012a4 <ST7565_updateBoundingBox>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	080092b4 	.word	0x080092b4
 8001490:	200001f8 	.word	0x200001f8

08001494 <ST7565_fillrect>:
		}
	}
}

void ST7565_fillrect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	4603      	mov	r3, r0
 80014a8:	71bb      	strb	r3, [r7, #6]
 80014aa:	460b      	mov	r3, r1
 80014ac:	717b      	strb	r3, [r7, #5]
 80014ae:	4613      	mov	r3, r2
 80014b0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;

	for (i = x; i < x + w; i++)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e015      	b.n	80014e4 <ST7565_fillrect+0x50>
	{
		for (j = y; j < y + h; j++)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	73bb      	strb	r3, [r7, #14]
 80014bc:	e009      	b.n	80014d2 <ST7565_fillrect+0x3e>
		{
			ST7565_my_setpixel(i, j, color);
 80014be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014c2:	7bb9      	ldrb	r1, [r7, #14]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f824 	bl	8001514 <ST7565_my_setpixel>
		for (j = y; j < y + h; j++)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	79b9      	ldrb	r1, [r7, #6]
 80014d6:	793b      	ldrb	r3, [r7, #4]
 80014d8:	440b      	add	r3, r1
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbef      	blt.n	80014be <ST7565_fillrect+0x2a>
	for (i = x; i < x + w; i++)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	79f9      	ldrb	r1, [r7, #7]
 80014e8:	797b      	ldrb	r3, [r7, #5]
 80014ea:	440b      	add	r3, r1
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbe3      	blt.n	80014b8 <ST7565_fillrect+0x24>
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	797b      	ldrb	r3, [r7, #5]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2dc      	uxtb	r4, r3
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	79b9      	ldrb	r1, [r7, #6]
 8001502:	79f8      	ldrb	r0, [r7, #7]
 8001504:	4622      	mov	r2, r4
 8001506:	f7ff fecd 	bl	80012a4 <ST7565_updateBoundingBox>
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
	...

08001514 <ST7565_my_setpixel>:
		}
	}
}

void ST7565_my_setpixel(uint8_t x, uint8_t y, uint8_t color)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	460b      	mov	r3, r1
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db3f      	blt.n	80015ae <ST7565_my_setpixel+0x9a>
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	2b3f      	cmp	r3, #63	; 0x3f
 8001532:	d83c      	bhi.n	80015ae <ST7565_my_setpixel+0x9a>
		return;

	if (color)
 8001534:	797b      	ldrb	r3, [r7, #5]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01b      	beq.n	8001572 <ST7565_my_setpixel+0x5e>
		st7565_buffer[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	01db      	lsls	r3, r3, #7
 8001546:	4413      	add	r3, r2
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <ST7565_my_setpixel+0xa8>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	43db      	mvns	r3, r3
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b259      	sxtb	r1, r3
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	4603      	mov	r3, r0
 8001566:	01db      	lsls	r3, r3, #7
 8001568:	4413      	add	r3, r2
 800156a:	b2c9      	uxtb	r1, r1
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <ST7565_my_setpixel+0xa8>)
 800156e:	54d1      	strb	r1, [r2, r3]
 8001570:	e01e      	b.n	80015b0 <ST7565_my_setpixel+0x9c>
	else
		st7565_buffer[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4603      	mov	r3, r0
 800157c:	01db      	lsls	r3, r3, #7
 800157e:	4413      	add	r3, r2
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <ST7565_my_setpixel+0xa8>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	43db      	mvns	r3, r3
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	b25b      	sxtb	r3, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4013      	ands	r3, r2
 800159c:	b259      	sxtb	r1, r3
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	4603      	mov	r3, r0
 80015a2:	01db      	lsls	r3, r3, #7
 80015a4:	4413      	add	r3, r2
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <ST7565_my_setpixel+0xa8>)
 80015aa:	54d1      	strb	r1, [r2, r3]
 80015ac:	e000      	b.n	80015b0 <ST7565_my_setpixel+0x9c>
		return;
 80015ae:	bf00      	nop
}
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200001f8 	.word	0x200001f8

080015c0 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 80015ca:	f000 f80f 	bl	80015ec <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 80015ce:	20af      	movs	r0, #175	; 0xaf
 80015d0:	f000 f866 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 80015d4:	20a4      	movs	r0, #164	; 0xa4
 80015d6:	f000 f863 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f887 	bl	80016f0 <ST7565_st7565_set_brightness>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <ST7565_st7565_init+0x7c>)
 80015f6:	f002 f837 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	481a      	ldr	r0, [pc, #104]	; (8001668 <ST7565_st7565_init+0x7c>)
 8001600:	f002 f832 	bl	8003668 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001608:	f001 f992 	bl	8002930 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2108      	movs	r1, #8
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <ST7565_st7565_init+0x7c>)
 8001612:	f002 f829 	bl	8003668 <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 8001616:	20a3      	movs	r0, #163	; 0xa3
 8001618:	f000 f842 	bl	80016a0 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 800161c:	20a0      	movs	r0, #160	; 0xa0
 800161e:	f000 f83f 	bl	80016a0 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 8001622:	20c0      	movs	r0, #192	; 0xc0
 8001624:	f000 f83c 	bl	80016a0 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8001628:	2040      	movs	r0, #64	; 0x40
 800162a:	f000 f839 	bl	80016a0 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f000 f836 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001634:	2032      	movs	r0, #50	; 0x32
 8001636:	f001 f97b 	bl	8002930 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 800163a:	202e      	movs	r0, #46	; 0x2e
 800163c:	f000 f830 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f001 f975 	bl	8002930 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 8001646:	202f      	movs	r0, #47	; 0x2f
 8001648:	f000 f82a 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f001 f96f 	bl	8002930 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 8001652:	2026      	movs	r0, #38	; 0x26
 8001654:	f000 f824 	bl	80016a0 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 8001658:	233f      	movs	r3, #63	; 0x3f
 800165a:	227f      	movs	r2, #127	; 0x7f
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fe20 	bl	80012a4 <ST7565_updateBoundingBox>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020000 	.word	0x40020000

0800166c <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 8001676:	1df9      	adds	r1, r7, #7
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	2201      	movs	r2, #1
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <ST7565_spiwrite+0x30>)
 8001680:	f004 f8c1 	bl	8005806 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 8001684:	bf00      	nop
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <ST7565_spiwrite+0x30>)
 8001688:	f004 f9f9 	bl	8005a7e <HAL_SPI_GetState>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d1f9      	bne.n	8001686 <ST7565_spiwrite+0x1a>
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200006fc 	.word	0x200006fc

080016a0 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2110      	movs	r1, #16
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <ST7565_st7565_command+0x24>)
 80016b0:	f001 ffda 	bl	8003668 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ffd8 	bl	800166c <ST7565_spiwrite>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020000 	.word	0x40020000

080016c8 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <ST7565_st7565_data+0x24>)
 80016d8:	f001 ffc6 	bl	8003668 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffc4 	bl	800166c <ST7565_spiwrite>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40020000 	.word	0x40020000

080016f0 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 80016fa:	2081      	movs	r0, #129	; 0x81
 80016fc:	f7ff ffd0 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffc9 	bl	80016a0 <ST7565_st7565_command>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <ST7565_display>:

void ST7565_display(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 800171e:	2300      	movs	r3, #0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	e055      	b.n	80017d0 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <ST7565_display+0xe4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3301      	adds	r3, #1
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	429a      	cmp	r2, r3
 8001732:	da49      	bge.n	80017c8 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <ST7565_display+0xe8>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	429a      	cmp	r2, r3
 8001740:	db4a      	blt.n	80017d8 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 f8f4 	bl	8002930 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <ST7565_display+0xec>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffa3 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f001 f8e8 	bl	8002930 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <ST7565_display+0xf0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <ST7565_display+0xf4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff93 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f001 f8d8 	bl	8002930 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff87 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f001 f8cc 	bl	8002930 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 8001798:	20e0      	movs	r0, #224	; 0xe0
 800179a:	f7ff ff81 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f001 f8c6 	bl	8002930 <HAL_Delay>

		for (; col < maxcol; col++)
 80017a4:	e00b      	b.n	80017be <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	01da      	lsls	r2, r3, #7
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <ST7565_display+0xf8>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff88 	bl	80016c8 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	3301      	adds	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3ef      	bcc.n	80017a6 <ST7565_display+0x8e>
 80017c6:	e000      	b.n	80017ca <ST7565_display+0xb2>
				continue;   // nope, skip it!
 80017c8:	bf00      	nop
	for (p = 0; p < 8; p++)
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	3301      	adds	r3, #1
 80017ce:	71bb      	strb	r3, [r7, #6]
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d9a6      	bls.n	8001724 <ST7565_display+0xc>
 80017d6:	e000      	b.n	80017da <ST7565_display+0xc2>
					break;
 80017d8:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <ST7565_display+0xf0>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <ST7565_display+0xf4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <ST7565_display+0xe4>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <ST7565_display+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	#endif
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200005fa 	.word	0x200005fa
 8001800:	200005fb 	.word	0x200005fb
 8001804:	080092ac 	.word	0x080092ac
 8001808:	200005f8 	.word	0x200005f8
 800180c:	200005f9 	.word	0x200005f9
 8001810:	200001f8 	.word	0x200001f8

08001814 <ST7565_clear>:

void ST7565_clear(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <ST7565_clear+0x20>)
 8001820:	f004 fe76 	bl	8006510 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	2100      	movs	r1, #0
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fd3a 	bl	80012a4 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200001f8 	.word	0x200001f8

08001838 <ST7565_get_big_font_bmp>:
		}
	}
}

void ST7565_get_big_font_bmp(uint8_t number, uint8_t* buffer)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 22; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e00e      	b.n	8001868 <ST7565_get_big_font_bmp+0x30>
	{
		buffer[i] = font12x16[i + number * 22];
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2216      	movs	r2, #22
 800184e:	fb02 f203 	mul.w	r2, r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	441a      	add	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	440b      	add	r3, r1
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <ST7565_get_big_font_bmp+0x44>)
 800185e:	5c8a      	ldrb	r2, [r1, r2]
 8001860:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b15      	cmp	r3, #21
 800186c:	dded      	ble.n	800184a <ST7565_get_big_font_bmp+0x12>
	}
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	080097b0 	.word	0x080097b0

08001880 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_ADC1_Init+0x98>)
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <MX_ADC1_Init+0x9c>)
 8001896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_ADC1_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_ADC1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_ADC1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_ADC1_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_ADC1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_ADC1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_ADC1_Init+0x98>)
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <MX_ADC1_Init+0xa0>)
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_ADC1_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_ADC1_Init+0x98>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_ADC1_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_ADC1_Init+0x98>)
 80018da:	2201      	movs	r2, #1
 80018dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <MX_ADC1_Init+0x98>)
 80018e0:	f001 f84a 	bl	8002978 <HAL_ADC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 fc5b 	bl	80021a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_ADC1_Init+0x98>)
 8001900:	f001 f9fe 	bl	8002d00 <HAL_ADC_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800190a:	f000 fc4b 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000060c 	.word	0x2000060c
 800191c:	40012000 	.word	0x40012000
 8001920:	0f000001 	.word	0x0f000001

08001924 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ADC_MspInit+0x7c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d127      	bne.n	8001996 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 800197e:	2307      	movs	r3, #7
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_ADC_MspInit+0x84>)
 8001992:	f001 fce5 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b45      	ldr	r3, [pc, #276]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2158      	movs	r1, #88	; 0x58
 8001a36:	482d      	ldr	r0, [pc, #180]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a38:	f001 fe16 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a42:	482b      	ldr	r0, [pc, #172]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001a44:	f001 fe10 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8001a48:	2358      	movs	r3, #88	; 0x58
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a60:	f001 fc7e 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481c      	ldr	r0, [pc, #112]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001a7e:	f001 fc6f 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4814      	ldr	r0, [pc, #80]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a9a:	f001 fc61 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001a9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <MX_GPIO_Init+0x140>)
 8001ab4:	f001 fc54 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8001ab8:	23e0      	movs	r3, #224	; 0xe0
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001acc:	f001 fc48 	bl	8003360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2028      	movs	r0, #40	; 0x28
 8001ad6:	f001 fc0c 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ada:	2028      	movs	r0, #40	; 0x28
 8001adc:	f001 fc25 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400

08001af4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C1_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C1_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b32:	f001 fdcb 	bl	80036cc <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 fb32 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000654 	.word	0x20000654
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	000186a0 	.word	0x000186a0

08001b50 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <MX_I2C2_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_I2C2_Init+0x58>)
 8001b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b8e:	f001 fd9d 	bl	80036cc <HAL_I2C_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 fb04 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200006a8 	.word	0x200006a8
 8001ba4:	40005800 	.word	0x40005800
 8001ba8:	000186a0 	.word	0x000186a0

08001bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_I2C_MspInit+0x10c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12d      	bne.n	8001c2a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a39      	ldr	r2, [pc, #228]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c08:	f001 fbaa 	bl	8003360 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c28:	e041      	b.n	8001cae <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_I2C_MspInit+0x118>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d13c      	bne.n	8001cae <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6313      	str	r3, [r2, #48]	; 0x30
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c56:	2312      	movs	r3, #18
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c62:	2304      	movs	r3, #4
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c6e:	f001 fb77 	bl	8003360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c72:	2308      	movs	r3, #8
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c76:	2312      	movs	r3, #18
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c82:	2309      	movs	r3, #9
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c8e:	f001 fb67 	bl	8003360 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40005800 	.word	0x40005800

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b092      	sub	sp, #72	; 0x48
 8001ccc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cce:	f000 fdbd 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f9a7 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f7ff fe69 	bl	80019ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cda:	f7ff fdd1 	bl	8001880 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cde:	f7ff ff09 	bl	8001af4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ce2:	f7ff ff35 	bl	8001b50 <MX_I2C2_Init>
  MX_RTC_Init();
 8001ce6:	f000 fa63 	bl	80021b0 <MX_RTC_Init>
  MX_SPI1_Init();
 8001cea:	f000 fae7 	bl	80022bc <MX_SPI1_Init>
  MX_SPI2_Init();
 8001cee:	f000 fb1d 	bl	800232c <MX_SPI2_Init>
  MX_TIM4_Init();
 8001cf2:	f000 fd0b 	bl	800270c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  ST7565_begin(0x7); // Initialize display
 8001cf6:	2007      	movs	r0, #7
 8001cf8:	f7ff fc62 	bl	80015c0 <ST7565_begin>
  ST7565_clear(); // Clear the display
 8001cfc:	f7ff fd8a 	bl	8001814 <ST7565_clear>

  HMC5883L_initialize(); // Initialize magnetometers
 8001d00:	f7ff f93c 	bl	8000f7c <HMC5883L_initialize>

  uint8_t check = MPU6050_initialize(); // Initialize MPU6050
 8001d04:	f7ff fa08 	bl	8001118 <MPU6050_initialize>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (check == 1)
 8001d0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <main+0x52>
  {
	  Error_Handler();
 8001d16:	f000 fa45 	bl	80021a4 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim4);
 8001d1a:	48b3      	ldr	r0, [pc, #716]	; (8001fe8 <main+0x320>)
 8001d1c:	f003 ffd8 	bl	8005cd0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_Delay(100);
 8001d20:	2064      	movs	r0, #100	; 0x64
 8001d22:	f000 fe05 	bl	8002930 <HAL_Delay>
		  ST7565_clear(); // clear the display
 8001d26:	f7ff fd75 	bl	8001814 <ST7565_clear>

		  char str[10] = "";
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	f107 0320 	add.w	r3, r7, #32
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]

		  // Brake lever bar graph
		  Brake_left = (uint16_t)(Brake_left / 2.3);
 8001d4a:	4ba8      	ldr	r3, [pc, #672]	; (8001fec <main+0x324>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbf0 	bl	8000534 <__aeabi_i2d>
 8001d54:	a3a2      	add	r3, pc, #648	; (adr r3, 8001fe0 <main+0x318>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fd7f 	bl	800085c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff27 	bl	8000bb8 <__aeabi_d2uiz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <main+0x324>)
 8001d70:	801a      	strh	r2, [r3, #0]
		  Brake_right = (uint16_t)(Brake_right / 2.3);
 8001d72:	4b9f      	ldr	r3, [pc, #636]	; (8001ff0 <main+0x328>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbdc 	bl	8000534 <__aeabi_i2d>
 8001d7c:	a398      	add	r3, pc, #608	; (adr r3, 8001fe0 <main+0x318>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fd6b 	bl	800085c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff13 	bl	8000bb8 <__aeabi_d2uiz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b96      	ldr	r3, [pc, #600]	; (8001ff0 <main+0x328>)
 8001d98:	801a      	strh	r2, [r3, #0]
		  ST7565_fillrect(0, 0, Brake_left, 10, BLACK);
 8001d9a:	4b94      	ldr	r3, [pc, #592]	; (8001fec <main+0x324>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	2301      	movs	r3, #1
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	230a      	movs	r3, #10
 8001da6:	2100      	movs	r1, #0
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff fb73 	bl	8001494 <ST7565_fillrect>
		  ST7565_fillrect((128-Brake_right), 0, Brake_right, 10, BLACK);
 8001dae:	4b90      	ldr	r3, [pc, #576]	; (8001ff0 <main+0x328>)
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	b2d8      	uxtb	r0, r3
 8001dbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ff0 <main+0x328>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	2100      	movs	r1, #0
 8001dca:	f7ff fb63 	bl	8001494 <ST7565_fillrect>
		  ST7565_drawstring(50, 0, "BRAKE");
 8001dce:	4a89      	ldr	r2, [pc, #548]	; (8001ff4 <main+0x32c>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	2032      	movs	r0, #50	; 0x32
 8001dd4:	f7ff faf8 	bl	80013c8 <ST7565_drawstring>

		  // Suspension percent
		  ST7565_drawstring(48, 2, "TRAVEL");
 8001dd8:	4a87      	ldr	r2, [pc, #540]	; (8001ff8 <main+0x330>)
 8001dda:	2102      	movs	r1, #2
 8001ddc:	2030      	movs	r0, #48	; 0x30
 8001dde:	f7ff faf3 	bl	80013c8 <ST7565_drawstring>
		  uint8_t suspension_front_1 = HMC_x_axis_front % 10;
 8001de2:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <main+0x334>)
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	4b86      	ldr	r3, [pc, #536]	; (8002000 <main+0x338>)
 8001de8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dec:	08d9      	lsrs	r1, r3, #3
 8001dee:	460b      	mov	r3, r1
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  uint8_t suspension_front_10 = HMC_x_axis_front / 10;
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <main+0x334>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	4a7f      	ldr	r2, [pc, #508]	; (8002000 <main+0x338>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  uint8_t suspension_rear_1 = HMC_x_axis_rear % 10;
 8001e10:	4b7c      	ldr	r3, [pc, #496]	; (8002004 <main+0x33c>)
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <main+0x338>)
 8001e16:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1a:	08d9      	lsrs	r1, r3, #3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  uint8_t suspension_rear_10 = HMC_x_axis_rear / 10;
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <main+0x33c>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	4a73      	ldr	r2, [pc, #460]	; (8002000 <main+0x338>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	08db      	lsrs	r3, r3, #3
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  uint8_t buffer[22];

		  ST7565_get_big_font_bmp(suspension_front_10, buffer);
 8001e3e:	1d3a      	adds	r2, r7, #4
 8001e40:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcf6 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(10, 15, buffer, 11, 16, BLACK);
 8001e4c:	1d3a      	adds	r2, r7, #4
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2310      	movs	r3, #16
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	230b      	movs	r3, #11
 8001e58:	210f      	movs	r1, #15
 8001e5a:	200a      	movs	r0, #10
 8001e5c:	f7ff fa5e 	bl	800131c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_front_1, buffer);
 8001e60:	1d3a      	adds	r2, r7, #4
 8001e62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fce5 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(25, 15, buffer, 11, 16, BLACK);
 8001e6e:	1d3a      	adds	r2, r7, #4
 8001e70:	2301      	movs	r3, #1
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2310      	movs	r3, #16
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	230b      	movs	r3, #11
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	2019      	movs	r0, #25
 8001e7e:	f7ff fa4d 	bl	800131c <ST7565_drawbitmap>

		  ST7565_get_big_font_bmp(suspension_rear_10, buffer);
 8001e82:	1d3a      	adds	r2, r7, #4
 8001e84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fcd4 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(90, 15, buffer, 11, 16, BLACK);
 8001e90:	1d3a      	adds	r2, r7, #4
 8001e92:	2301      	movs	r3, #1
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2310      	movs	r3, #16
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	230b      	movs	r3, #11
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	205a      	movs	r0, #90	; 0x5a
 8001ea0:	f7ff fa3c 	bl	800131c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_rear_1, buffer);
 8001ea4:	1d3a      	adds	r2, r7, #4
 8001ea6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fcc3 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(105, 15, buffer, 11, 16, BLACK);
 8001eb2:	1d3a      	adds	r2, r7, #4
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	2310      	movs	r3, #16
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	230b      	movs	r3, #11
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	2069      	movs	r0, #105	; 0x69
 8001ec2:	f7ff fa2b 	bl	800131c <ST7565_drawbitmap>

		  // Current time
		  ST7565_drawstring(10, 6, "TIME");
 8001ec6:	4a50      	ldr	r2, [pc, #320]	; (8002008 <main+0x340>)
 8001ec8:	2106      	movs	r1, #6
 8001eca:	200a      	movs	r0, #10
 8001ecc:	f7ff fa7c 	bl	80013c8 <ST7565_drawstring>
		  sprintf(str, "%02u", time.Hours);
 8001ed0:	4b4e      	ldr	r3, [pc, #312]	; (800200c <main+0x344>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eda:	494d      	ldr	r1, [pc, #308]	; (8002010 <main+0x348>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 ff89 	bl	8006df4 <siprintf>
		  strcat(str_temp, str);
 8001ee2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f004 ffa1 	bl	8006e34 <strcat>
		  strcpy(str, ":");
 8001ef2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ef6:	223a      	movs	r2, #58	; 0x3a
 8001ef8:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 8001efa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 ff95 	bl	8006e34 <strcat>
		  sprintf(str, "%02u", time.Minutes);
 8001f0a:	4b40      	ldr	r3, [pc, #256]	; (800200c <main+0x344>)
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f14:	493e      	ldr	r1, [pc, #248]	; (8002010 <main+0x348>)
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 ff6c 	bl	8006df4 <siprintf>
		  strcat(str_temp, str);
 8001f1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 ff84 	bl	8006e34 <strcat>
		  strcpy(str, ":");
 8001f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f30:	223a      	movs	r2, #58	; 0x3a
 8001f32:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 8001f34:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f004 ff78 	bl	8006e34 <strcat>
		  sprintf(str, "%02u", time.Seconds);
 8001f44:	4b31      	ldr	r3, [pc, #196]	; (800200c <main+0x344>)
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f4e:	4930      	ldr	r1, [pc, #192]	; (8002010 <main+0x348>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 ff4f 	bl	8006df4 <siprintf>
		  strcat(str_temp, str);
 8001f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f004 ff67 	bl	8006e34 <strcat>
		  ST7565_drawstring(0, 7, str_temp);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2107      	movs	r1, #7
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fa2a 	bl	80013c8 <ST7565_drawstring>

		  // Battery %
		  ST7565_drawstring(95, 6, "BATT");
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <main+0x34c>)
 8001f76:	2106      	movs	r1, #6
 8001f78:	205f      	movs	r0, #95	; 0x5f
 8001f7a:	f7ff fa25 	bl	80013c8 <ST7565_drawstring>
		  sprintf(str, "%u", battery_voltage);
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <main+0x350>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f88:	4924      	ldr	r1, [pc, #144]	; (800201c <main+0x354>)
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f004 ff32 	bl	8006df4 <siprintf>
		  strcpy(str_temp, "%");
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2225      	movs	r2, #37	; 0x25
 8001f96:	801a      	strh	r2, [r3, #0]
		  strcat(str, str_temp);
 8001f98:	f107 021c 	add.w	r2, r7, #28
 8001f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 ff46 	bl	8006e34 <strcat>
		  ST7565_drawstring(105, 7, str);
 8001fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fac:	461a      	mov	r2, r3
 8001fae:	2107      	movs	r1, #7
 8001fb0:	2069      	movs	r0, #105	; 0x69
 8001fb2:	f7ff fa09 	bl	80013c8 <ST7565_drawstring>

		  //TEST
		  sprintf(str, "%u", test);
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <main+0x358>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <main+0x354>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 ff16 	bl	8006df4 <siprintf>
		  ST7565_drawstring(0, 5, str);
 8001fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2105      	movs	r1, #5
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff f9f9 	bl	80013c8 <ST7565_drawstring>
		  // Send data to display
		  ST7565_display();
 8001fd6:	f7ff fb9f 	bl	8001718 <ST7565_display>
  {
 8001fda:	e6a1      	b.n	8001d20 <main+0x58>
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	66666666 	.word	0x66666666
 8001fe4:	40026666 	.word	0x40026666
 8001fe8:	200007f8 	.word	0x200007f8
 8001fec:	2000075e 	.word	0x2000075e
 8001ff0:	20000758 	.word	0x20000758
 8001ff4:	08009280 	.word	0x08009280
 8001ff8:	08009288 	.word	0x08009288
 8001ffc:	20000760 	.word	0x20000760
 8002000:	cccccccd 	.word	0xcccccccd
 8002004:	2000075c 	.word	0x2000075c
 8002008:	08009290 	.word	0x08009290
 800200c:	20000764 	.word	0x20000764
 8002010:	08009298 	.word	0x08009298
 8002014:	080092a0 	.word	0x080092a0
 8002018:	2000075a 	.word	0x2000075a
 800201c:	080092a8 	.word	0x080092a8
 8002020:	200005fc 	.word	0x200005fc

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b094      	sub	sp, #80	; 0x50
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	2230      	movs	r2, #48	; 0x30
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f004 fa6c 	bl	8006510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <SystemClock_Config+0xbc>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <SystemClock_Config+0xbc>)
 8002052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	; 0x40
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <SystemClock_Config+0xbc>)
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002064:	2300      	movs	r3, #0
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <SystemClock_Config+0xc0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002070:	4a1c      	ldr	r2, [pc, #112]	; (80020e4 <SystemClock_Config+0xc0>)
 8002072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <SystemClock_Config+0xc0>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002084:	2306      	movs	r3, #6
 8002086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002088:	2301      	movs	r3, #1
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800208c:	2301      	movs	r3, #1
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002090:	2310      	movs	r3, #16
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002098:	f107 0320 	add.w	r3, r7, #32
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fad5 	bl	800464c <HAL_RCC_OscConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020a8:	f000 f87c 	bl	80021a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ac:	230f      	movs	r3, #15
 80020ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 fd38 	bl	8004b3c <HAL_RCC_ClockConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020d2:	f000 f867 	bl	80021a4 <Error_Handler>
  }
}
 80020d6:	bf00      	nop
 80020d8:	3750      	adds	r7, #80	; 0x50
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

// Timer interrupt
// On every timer interrupt read the current sensor states and write to SD card
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d12b      	bne.n	8002150 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
	  // Read magnetometer data
	  HMC_x_axis_front = HMC5883L_get_X(1);
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe ff99 	bl	8001030 <HMC5883L_get_X>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002104:	801a      	strh	r2, [r3, #0]
	  HMC_x_axis_rear = HMC5883L_get_X(0);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe ff92 	bl	8001030 <HMC5883L_get_X>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002112:	801a      	strh	r2, [r3, #0]

	  // Read brake sensor ADC
	  Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 8002114:	2000      	movs	r0, #0
 8002116:	f7fe feeb 	bl	8000ef0 <Brake_Sensor_Read>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002120:	801a      	strh	r2, [r3, #0]
	  Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8002122:	2001      	movs	r0, #1
 8002124:	f7fe fee4 	bl	8000ef0 <Brake_Sensor_Read>
 8002128:	4603      	mov	r3, r0
 800212a:	461a      	mov	r2, r3
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800212e:	801a      	strh	r2, [r3, #0]

	  // Read battery voltage
	  battery_voltage = Read_Battery_Voltage();
 8002130:	f7ff f87e 	bl	8001230 <Read_Battery_Voltage>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800213a:	701a      	strb	r2, [r3, #0]
	  // Read accelerometer and gyroscpe
	  //float accel_x = MPU6050_accel_read(Xaxis);
	  //float gyro_x = MPU6050_gyro_read(Zaxis);

	  // Get current time
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800213c:	2200      	movs	r2, #0
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002142:	f003 f8f3 	bl	800532c <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002146:	2200      	movs	r2, #0
 8002148:	490b      	ldr	r1, [pc, #44]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800214a:	480a      	ldr	r0, [pc, #40]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800214c:	f003 f9f3 	bl	8005536 <HAL_RTC_GetDate>

	  // Write to SD card
	  // TODO
  }
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200007f8 	.word	0x200007f8
 800215c:	20000760 	.word	0x20000760
 8002160:	2000075c 	.word	0x2000075c
 8002164:	2000075e 	.word	0x2000075e
 8002168:	20000758 	.word	0x20000758
 800216c:	2000075a 	.word	0x2000075a
 8002170:	20000764 	.word	0x20000764
 8002174:	20000780 	.word	0x20000780
 8002178:	2000077c 	.word	0x2000077c

0800217c <HAL_GPIO_EXTI_Callback>:


// Button interrupt
// Disables all interrupts, stops main loop, shows basic menu
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	80fb      	strh	r3, [r7, #6]
	// Check the interrupt source
    if(GPIO_Pin == SW1_Pin)
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218c:	d102      	bne.n	8002194 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	test = 1;
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_GPIO_EXTI_Callback+0x24>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
    }
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	200005fc 	.word	0x200005fc

080021a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a8:	b672      	cpsid	i
}
 80021aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021ac:	e7fe      	b.n	80021ac <Error_Handler+0x8>
	...

080021b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021c4:	2300      	movs	r3, #0
 80021c6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <MX_RTC_Init+0xac>)
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <MX_RTC_Init+0xb0>)
 80021cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021ce:	4b23      	ldr	r3, [pc, #140]	; (800225c <MX_RTC_Init+0xac>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <MX_RTC_Init+0xac>)
 80021d6:	227f      	movs	r2, #127	; 0x7f
 80021d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <MX_RTC_Init+0xac>)
 80021dc:	22ff      	movs	r2, #255	; 0xff
 80021de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021e0:	4b1e      	ldr	r3, [pc, #120]	; (800225c <MX_RTC_Init+0xac>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <MX_RTC_Init+0xac>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_RTC_Init+0xac>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021f2:	481a      	ldr	r0, [pc, #104]	; (800225c <MX_RTC_Init+0xac>)
 80021f4:	f002 ff4c 	bl	8005090 <HAL_RTC_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80021fe:	f7ff ffd1 	bl	80021a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8002202:	2312      	movs	r3, #18
 8002204:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002206:	2300      	movs	r3, #0
 8002208:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800220a:	2300      	movs	r3, #0
 800220c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2201      	movs	r2, #1
 800221a:	4619      	mov	r1, r3
 800221c:	480f      	ldr	r0, [pc, #60]	; (800225c <MX_RTC_Init+0xac>)
 800221e:	f002 ffc8 	bl	80051b2 <HAL_RTC_SetTime>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002228:	f7ff ffbc 	bl	80021a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800222c:	2301      	movs	r3, #1
 800222e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002230:	2301      	movs	r3, #1
 8002232:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002234:	2301      	movs	r3, #1
 8002236:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002238:	2300      	movs	r3, #0
 800223a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800223c:	463b      	mov	r3, r7
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	4806      	ldr	r0, [pc, #24]	; (800225c <MX_RTC_Init+0xac>)
 8002244:	f003 f8d0 	bl	80053e8 <HAL_RTC_SetDate>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800224e:	f7ff ffa9 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000780 	.word	0x20000780
 8002260:	40002800 	.word	0x40002800

08002264 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0c      	ldr	r2, [pc, #48]	; (80022b4 <HAL_RTC_MspInit+0x50>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d111      	bne.n	80022aa <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002286:	2302      	movs	r3, #2
 8002288:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800228a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800228e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	4618      	mov	r0, r3
 8002296:	f002 fe0d 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022a0:	f7ff ff80 	bl	80021a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <HAL_RTC_MspInit+0x54>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40002800 	.word	0x40002800
 80022b8:	42470e3c 	.word	0x42470e3c

080022bc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_SPI1_Init+0x68>)
 80022c2:	4a19      	ldr	r2, [pc, #100]	; (8002328 <MX_SPI1_Init+0x6c>)
 80022c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_SPI1_Init+0x68>)
 80022c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_SPI1_Init+0x68>)
 80022d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_SPI1_Init+0x68>)
 80022d8:	2200      	movs	r2, #0
 80022da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_SPI1_Init+0x68>)
 80022de:	2202      	movs	r2, #2
 80022e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_SPI1_Init+0x68>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022e8:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_SPI1_Init+0x68>)
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_SPI1_Init+0x68>)
 80022f2:	2208      	movs	r2, #8
 80022f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_SPI1_Init+0x68>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_SPI1_Init+0x68>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_SPI1_Init+0x68>)
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_SPI1_Init+0x68>)
 800230a:	220a      	movs	r2, #10
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_SPI1_Init+0x68>)
 8002310:	f003 f9f0 	bl	80056f4 <HAL_SPI_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800231a:	f7ff ff43 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200006fc 	.word	0x200006fc
 8002328:	40013000 	.word	0x40013000

0800232c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_SPI2_Init+0x64>)
 8002332:	4a18      	ldr	r2, [pc, #96]	; (8002394 <MX_SPI2_Init+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_SPI2_Init+0x64>)
 8002338:	f44f 7282 	mov.w	r2, #260	; 0x104
 800233c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_SPI2_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <MX_SPI2_Init+0x64>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_SPI2_Init+0x64>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_SPI2_Init+0x64>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <MX_SPI2_Init+0x64>)
 8002358:	f44f 7200 	mov.w	r2, #512	; 0x200
 800235c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_SPI2_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <MX_SPI2_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_SPI2_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_SPI2_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_SPI2_Init+0x64>)
 8002378:	220a      	movs	r2, #10
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_SPI2_Init+0x64>)
 800237e:	f003 f9b9 	bl	80056f4 <HAL_SPI_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002388:	f7ff ff0c 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200007a0 	.word	0x200007a0
 8002394:	40003800 	.word	0x40003800

08002398 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a32      	ldr	r2, [pc, #200]	; (8002480 <HAL_SPI_MspInit+0xe8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12c      	bne.n	8002414 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	4a30      	ldr	r2, [pc, #192]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023c8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_SPI_MspInit+0xec>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002402:	2305      	movs	r3, #5
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	481e      	ldr	r0, [pc, #120]	; (8002488 <HAL_SPI_MspInit+0xf0>)
 800240e:	f000 ffa7 	bl	8003360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002412:	e031      	b.n	8002478 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_SPI_MspInit+0xf4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12c      	bne.n	8002478 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_SPI_MspInit+0xec>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_SPI_MspInit+0xec>)
 8002428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_SPI_MspInit+0xec>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_SPI_MspInit+0xec>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	4a10      	ldr	r2, [pc, #64]	; (8002484 <HAL_SPI_MspInit+0xec>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6313      	str	r3, [r2, #48]	; 0x30
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_SPI_MspInit+0xec>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002456:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800245a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002468:	2305      	movs	r3, #5
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	4619      	mov	r1, r3
 8002472:	4807      	ldr	r0, [pc, #28]	; (8002490 <HAL_SPI_MspInit+0xf8>)
 8002474:	f000 ff74 	bl	8003360 <HAL_GPIO_Init>
}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013000 	.word	0x40013000
 8002484:	40023800 	.word	0x40023800
 8002488:	40020000 	.word	0x40020000
 800248c:	40003800 	.word	0x40003800
 8002490:	40020400 	.word	0x40020400

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_MspInit+0x4c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_MspInit+0x4c>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <NMI_Handler+0x4>

080024ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <MemManage_Handler+0x4>

080024f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <UsageFault_Handler+0x4>

08002502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002530:	f000 f9de 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}

08002538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM4_IRQHandler+0x10>)
 800253e:	f003 fc29 	bl	8005d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200007f8 	.word	0x200007f8

0800254c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002550:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002554:	f001 f8a2 	bl	800369c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}

0800255c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	return 1;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_kill>:

int _kill(int pid, int sig)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002576:	f003 ffa1 	bl	80064bc <__errno>
 800257a:	4603      	mov	r3, r0
 800257c:	2216      	movs	r2, #22
 800257e:	601a      	str	r2, [r3, #0]
	return -1;
 8002580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <_exit>:

void _exit (int status)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffe7 	bl	800256c <_kill>
	while (1) {}		/* Make sure we hang here */
 800259e:	e7fe      	b.n	800259e <_exit+0x12>

080025a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e00a      	b.n	80025c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b2:	f3af 8000 	nop.w
 80025b6:	4601      	mov	r1, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	60ba      	str	r2, [r7, #8]
 80025be:	b2ca      	uxtb	r2, r1
 80025c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3301      	adds	r3, #1
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	dbf0      	blt.n	80025b2 <_read+0x12>
	}

return len;
 80025d0:	687b      	ldr	r3, [r7, #4]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e009      	b.n	8002600 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	dbf1      	blt.n	80025ec <_write+0x12>
	}
	return len;
 8002608:	687b      	ldr	r3, [r7, #4]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_close>:

int _close(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263a:	605a      	str	r2, [r3, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_isatty>:

int _isatty(int file)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
	return 1;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <_sbrk+0x5c>)
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <_sbrk+0x60>)
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <_sbrk+0x64>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <_sbrk+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d207      	bcs.n	80026bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026ac:	f003 ff06 	bl	80064bc <__errno>
 80026b0:	4603      	mov	r3, r0
 80026b2:	220c      	movs	r2, #12
 80026b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e009      	b.n	80026d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026bc:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <_sbrk+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20010000 	.word	0x20010000
 80026dc:	00000400 	.word	0x00000400
 80026e0:	20000600 	.word	0x20000600
 80026e4:	20000858 	.word	0x20000858

080026e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <SystemInit+0x20>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	4a05      	ldr	r2, [pc, #20]	; (8002708 <SystemInit+0x20>)
 80026f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <MX_TIM4_Init+0x94>)
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <MX_TIM4_Init+0x98>)
 800272c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 800272e:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <MX_TIM4_Init+0x94>)
 8002730:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002734:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b1a      	ldr	r3, [pc, #104]	; (80027a0 <MX_TIM4_Init+0x94>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 639;
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <MX_TIM4_Init+0x94>)
 800273e:	f240 227f 	movw	r2, #639	; 0x27f
 8002742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_TIM4_Init+0x94>)
 8002746:	2200      	movs	r2, #0
 8002748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <MX_TIM4_Init+0x94>)
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002750:	4813      	ldr	r0, [pc, #76]	; (80027a0 <MX_TIM4_Init+0x94>)
 8002752:	f003 fa6d 	bl	8005c30 <HAL_TIM_Base_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800275c:	f7ff fd22 	bl	80021a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	4619      	mov	r1, r3
 800276c:	480c      	ldr	r0, [pc, #48]	; (80027a0 <MX_TIM4_Init+0x94>)
 800276e:	f003 fc19 	bl	8005fa4 <HAL_TIM_ConfigClockSource>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002778:	f7ff fd14 	bl	80021a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002780:	2300      	movs	r3, #0
 8002782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_TIM4_Init+0x94>)
 800278a:	f003 fe15 	bl	80063b8 <HAL_TIMEx_MasterConfigSynchronization>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002794:	f7ff fd06 	bl	80021a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200007f8 	.word	0x200007f8
 80027a4:	40000800 	.word	0x40000800

080027a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <HAL_TIM_Base_MspInit+0x48>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d115      	bne.n	80027e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_TIM_Base_MspInit+0x4c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_TIM_Base_MspInit+0x4c>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_TIM_Base_MspInit+0x4c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	201e      	movs	r0, #30
 80027dc:	f000 fd89 	bl	80032f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027e0:	201e      	movs	r0, #30
 80027e2:	f000 fda2 	bl	800332a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40000800 	.word	0x40000800
 80027f4:	40023800 	.word	0x40023800

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027fe:	490e      	ldr	r1, [pc, #56]	; (8002838 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002804:	e002      	b.n	800280c <LoopCopyDataInit>

08002806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280a:	3304      	adds	r3, #4

0800280c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800280c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800280e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002810:	d3f9      	bcc.n	8002806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002814:	4c0b      	ldr	r4, [pc, #44]	; (8002844 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002818:	e001      	b.n	800281e <LoopFillZerobss>

0800281a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800281c:	3204      	adds	r2, #4

0800281e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800281e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002820:	d3fb      	bcc.n	800281a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002822:	f7ff ff61 	bl	80026e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002826:	f003 fe4f 	bl	80064c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff fa4d 	bl	8001cc8 <main>
  bx  lr    
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002838:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800283c:	08009cc4 	.word	0x08009cc4
  ldr r2, =_sbss
 8002840:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002844:	20000854 	.word	0x20000854

08002848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <HAL_Init+0x40>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_Init+0x40>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_Init+0x40>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 fd31 	bl	80032dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	200f      	movs	r0, #15
 800287c:	f000 f808 	bl	8002890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002880:	f7ff fe08 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00

08002890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x54>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <HAL_InitTick+0x58>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fd49 	bl	8003346 <HAL_SYSTICK_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00e      	b.n	80028dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b0f      	cmp	r3, #15
 80028c2:	d80a      	bhi.n	80028da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c4:	2200      	movs	r2, #0
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295
 80028cc:	f000 fd11 	bl	80032f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4a06      	ldr	r2, [pc, #24]	; (80028ec <HAL_InitTick+0x5c>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000008 	.word	0x20000008
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x20>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_IncTick+0x24>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_IncTick+0x24>)
 8002902:	6013      	str	r3, [r2, #0]
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000008 	.word	0x20000008
 8002914:	20000840 	.word	0x20000840

08002918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return uwTick;
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <HAL_GetTick+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000840 	.word	0x20000840

08002930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff ffee 	bl	8002918 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d005      	beq.n	8002956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_Delay+0x44>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002956:	bf00      	nop
 8002958:	f7ff ffde 	bl	8002918 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d8f7      	bhi.n	8002958 <HAL_Delay+0x28>
  {
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000008 	.word	0x20000008

08002978 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e033      	b.n	80029f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fe ffc4 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d118      	bne.n	80029e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029be:	f023 0302 	bic.w	r3, r3, #2
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 faba 	bl	8002f44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
 80029e6:	e001      	b.n	80029ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_Start+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e097      	b.n	8002b4a <HAL_ADC_Start+0x14a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d018      	beq.n	8002a62 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a40:	4b45      	ldr	r3, [pc, #276]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <HAL_ADC_Start+0x15c>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0c9a      	lsrs	r2, r3, #18
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d15f      	bne.n	8002b30 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a78:	f023 0301 	bic.w	r3, r3, #1
 8002a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f023 0206 	bic.w	r2, r3, #6
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_ADC_Start+0x160>)
 8002ace:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ad8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d129      	bne.n	8002b48 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e020      	b.n	8002b48 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_ADC_Start+0x164>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d11b      	bne.n	8002b48 <HAL_ADC_Start+0x148>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d114      	bne.n	8002b48 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	e00b      	b.n	8002b48 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	40012300 	.word	0x40012300
 8002b64:	40012000 	.word	0x40012000

08002b68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Stop+0x16>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e021      	b.n	8002bc2 <HAL_ADC_Stop+0x5a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d109      	bne.n	8002bb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bea:	d113      	bne.n	8002c14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bfa:	d10b      	bne.n	8002c14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	f043 0220 	orr.w	r2, r3, #32
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e063      	b.n	8002cdc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002c14:	f7ff fe80 	bl	8002918 <HAL_GetTick>
 8002c18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c1a:	e021      	b.n	8002c60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c22:	d01d      	beq.n	8002c60 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_ADC_PollForConversion+0x6c>
 8002c2a:	f7ff fe75 	bl	8002918 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d212      	bcs.n	8002c60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d00b      	beq.n	8002c60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0204 	orr.w	r2, r3, #4
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e03d      	b.n	8002cdc <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d1d6      	bne.n	8002c1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f06f 0212 	mvn.w	r2, #18
 8002c76:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d123      	bne.n	8002cda <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11f      	bne.n	8002cda <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1c>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e105      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x228>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d925      	bls.n	8002d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68d9      	ldr	r1, [r3, #12]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b1e      	subs	r3, #30
 8002d42:	2207      	movs	r2, #7
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43da      	mvns	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	400a      	ands	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68d9      	ldr	r1, [r3, #12]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	4603      	mov	r3, r0
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4403      	add	r3, r0
 8002d6a:	3b1e      	subs	r3, #30
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	e022      	b.n	8002dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	400a      	ands	r2, r1
 8002d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4403      	add	r3, r0
 8002db4:	409a      	lsls	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d824      	bhi.n	8002e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b05      	subs	r3, #5
 8002dd8:	221f      	movs	r2, #31
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	400a      	ands	r2, r1
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b05      	subs	r3, #5
 8002e02:	fa00 f203 	lsl.w	r2, r0, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e0e:	e04c      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b0c      	cmp	r3, #12
 8002e16:	d824      	bhi.n	8002e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	3b23      	subs	r3, #35	; 0x23
 8002e2a:	221f      	movs	r2, #31
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43da      	mvns	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	400a      	ands	r2, r1
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	4618      	mov	r0, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	3b23      	subs	r3, #35	; 0x23
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e60:	e023      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	3b41      	subs	r3, #65	; 0x41
 8002e74:	221f      	movs	r2, #31
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	400a      	ands	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b41      	subs	r3, #65	; 0x41
 8002e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_ADC_ConfigChannel+0x234>)
 8002eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_ADC_ConfigChannel+0x238>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d109      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1cc>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b12      	cmp	r3, #18
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_ADC_ConfigChannel+0x238>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d123      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d003      	beq.n	8002ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d11b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b10      	cmp	r3, #16
 8002ef8:	d111      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_ADC_ConfigChannel+0x23c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_ADC_ConfigChannel+0x240>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9a      	lsrs	r2, r3, #18
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	431bde83 	.word	0x431bde83

08002f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <ADC_Init+0x1f0>)
 8002f4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	021a      	lsls	r2, r3, #8
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	4a58      	ldr	r2, [pc, #352]	; (8003138 <ADC_Init+0x1f4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d022      	beq.n	8003022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6899      	ldr	r1, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800300c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6899      	ldr	r1, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e00f      	b.n	8003042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003040:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0202 	bic.w	r2, r2, #2
 8003050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6899      	ldr	r1, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7e1b      	ldrb	r3, [r3, #24]
 800305c:	005a      	lsls	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800308e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	3b01      	subs	r3, #1
 800309c:	035a      	lsls	r2, r3, #13
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	e007      	b.n	80030b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	051a      	lsls	r2, r3, #20
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030fa:	025a      	lsls	r2, r3, #9
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	029a      	lsls	r2, r3, #10
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40012300 	.word	0x40012300
 8003138:	0f000001 	.word	0x0f000001

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316e:	4a04      	ldr	r2, [pc, #16]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	60d3      	str	r3, [r2, #12]
}
 8003174:	bf00      	nop
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a8:	d301      	bcc.n	80032ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <SysTick_Config+0x40>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b6:	210f      	movs	r1, #15
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295
 80032bc:	f7ff ff8e 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SysTick_Config+0x40>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <SysTick_Config+0x40>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff29 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff3e 	bl	8003184 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff8e 	bl	8003230 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff31 	bl	80031a0 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffa2 	bl	8003298 <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b089      	sub	sp, #36	; 0x24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
 800337a:	e159      	b.n	8003630 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800337c:	2201      	movs	r2, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	f040 8148 	bne.w	800362a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d005      	beq.n	80033b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d130      	bne.n	8003414 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	2203      	movs	r2, #3
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e8:	2201      	movs	r2, #1
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0201 	and.w	r2, r3, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b03      	cmp	r3, #3
 800341e:	d017      	beq.n	8003450 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d123      	bne.n	80034a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	08da      	lsrs	r2, r3, #3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3208      	adds	r2, #8
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	08da      	lsrs	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4013      	ands	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0203 	and.w	r2, r3, #3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a2 	beq.w	800362a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f4:	6453      	str	r3, [r2, #68]	; 0x44
 80034f6:	4b54      	ldr	r3, [pc, #336]	; (8003648 <HAL_GPIO_Init+0x2e8>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003502:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_GPIO_Init+0x2ec>)
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a49      	ldr	r2, [pc, #292]	; (8003650 <HAL_GPIO_Init+0x2f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d019      	beq.n	8003562 <HAL_GPIO_Init+0x202>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a48      	ldr	r2, [pc, #288]	; (8003654 <HAL_GPIO_Init+0x2f4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_GPIO_Init+0x1fe>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_GPIO_Init+0x2f8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00d      	beq.n	800355a <HAL_GPIO_Init+0x1fa>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_GPIO_Init+0x2fc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <HAL_GPIO_Init+0x1f6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_GPIO_Init+0x300>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_GPIO_Init+0x1f2>
 800354e:	2304      	movs	r3, #4
 8003550:	e008      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003552:	2307      	movs	r3, #7
 8003554:	e006      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003556:	2303      	movs	r3, #3
 8003558:	e004      	b.n	8003564 <HAL_GPIO_Init+0x204>
 800355a:	2302      	movs	r3, #2
 800355c:	e002      	b.n	8003564 <HAL_GPIO_Init+0x204>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <HAL_GPIO_Init+0x204>
 8003562:	2300      	movs	r3, #0
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f002 0203 	and.w	r2, r2, #3
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	4093      	lsls	r3, r2
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003574:	4935      	ldr	r1, [pc, #212]	; (800364c <HAL_GPIO_Init+0x2ec>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	089b      	lsrs	r3, r3, #2
 800357a:	3302      	adds	r3, #2
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003582:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	43db      	mvns	r3, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4013      	ands	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a6:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035ac:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d0:	4a24      	ldr	r2, [pc, #144]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	43db      	mvns	r3, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4013      	ands	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035fa:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x304>)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003600:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	43db      	mvns	r3, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003624:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_GPIO_Init+0x304>)
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	3301      	adds	r3, #1
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	f67f aea2 	bls.w	800337c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	3724      	adds	r7, #36	; 0x24
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	40013800 	.word	0x40013800
 8003650:	40020000 	.word	0x40020000
 8003654:	40020400 	.word	0x40020400
 8003658:	40020800 	.word	0x40020800
 800365c:	40020c00 	.word	0x40020c00
 8003660:	40021000 	.word	0x40021000
 8003664:	40013c00 	.word	0x40013c00

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003684:	e003      	b.n	800368e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003686:	887b      	ldrh	r3, [r7, #2]
 8003688:	041a      	lsls	r2, r3, #16
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	619a      	str	r2, [r3, #24]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	695a      	ldr	r2, [r3, #20]
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b2:	4a05      	ldr	r2, [pc, #20]	; (80036c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe fd5e 	bl	800217c <HAL_GPIO_EXTI_Callback>
  }
}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e12b      	b.n	8003936 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d106      	bne.n	80036f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7fe fa5a 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2224      	movs	r2, #36	; 0x24
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800372e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003730:	f001 fbac 	bl	8004e8c <HAL_RCC_GetPCLK1Freq>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4a81      	ldr	r2, [pc, #516]	; (8003940 <HAL_I2C_Init+0x274>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d807      	bhi.n	8003750 <HAL_I2C_Init+0x84>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a80      	ldr	r2, [pc, #512]	; (8003944 <HAL_I2C_Init+0x278>)
 8003744:	4293      	cmp	r3, r2
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e006      	b.n	800375e <HAL_I2C_Init+0x92>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4a7d      	ldr	r2, [pc, #500]	; (8003948 <HAL_I2C_Init+0x27c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	bf94      	ite	ls
 8003758:	2301      	movls	r3, #1
 800375a:	2300      	movhi	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e0e7      	b.n	8003936 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4a78      	ldr	r2, [pc, #480]	; (800394c <HAL_I2C_Init+0x280>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0c9b      	lsrs	r3, r3, #18
 8003770:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <HAL_I2C_Init+0x274>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d802      	bhi.n	80037a0 <HAL_I2C_Init+0xd4>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	3301      	adds	r3, #1
 800379e:	e009      	b.n	80037b4 <HAL_I2C_Init+0xe8>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037a6:	fb02 f303 	mul.w	r3, r2, r3
 80037aa:	4a69      	ldr	r2, [pc, #420]	; (8003950 <HAL_I2C_Init+0x284>)
 80037ac:	fba2 2303 	umull	r2, r3, r2, r3
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	3301      	adds	r3, #1
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	495c      	ldr	r1, [pc, #368]	; (8003940 <HAL_I2C_Init+0x274>)
 80037d0:	428b      	cmp	r3, r1
 80037d2:	d819      	bhi.n	8003808 <HAL_I2C_Init+0x13c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e59      	subs	r1, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e2:	1c59      	adds	r1, r3, #1
 80037e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037e8:	400b      	ands	r3, r1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_I2C_Init+0x138>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1e59      	subs	r1, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003802:	e051      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003804:	2304      	movs	r3, #4
 8003806:	e04f      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d111      	bne.n	8003834 <HAL_I2C_Init+0x168>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	440b      	add	r3, r1
 800381e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003822:	3301      	adds	r3, #1
 8003824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e012      	b.n	800385a <HAL_I2C_Init+0x18e>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e58      	subs	r0, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	0099      	lsls	r1, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Init+0x196>
 800385e:	2301      	movs	r3, #1
 8003860:	e022      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <HAL_I2C_Init+0x1bc>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1e58      	subs	r0, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	460b      	mov	r3, r1
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	440b      	add	r3, r1
 8003878:	fbb0 f3f3 	udiv	r3, r0, r3
 800387c:	3301      	adds	r3, #1
 800387e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Init+0x1dc>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	6809      	ldr	r1, [r1, #0]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6911      	ldr	r1, [r2, #16]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	000186a0 	.word	0x000186a0
 8003944:	001e847f 	.word	0x001e847f
 8003948:	003d08ff 	.word	0x003d08ff
 800394c:	431bde83 	.word	0x431bde83
 8003950:	10624dd3 	.word	0x10624dd3

08003954 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800396e:	f7fe ffd3 	bl	8002918 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b20      	cmp	r3, #32
 800397e:	f040 80d9 	bne.w	8003b34 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2319      	movs	r3, #25
 8003988:	2201      	movs	r2, #1
 800398a:	496d      	ldr	r1, [pc, #436]	; (8003b40 <HAL_I2C_Mem_Write+0x1ec>)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 fc7f 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
 800399a:	e0cc      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_I2C_Mem_Write+0x56>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0c5      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d007      	beq.n	80039d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2221      	movs	r2, #33	; 0x21
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2240      	movs	r2, #64	; 0x40
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a3a      	ldr	r2, [r7, #32]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a4d      	ldr	r2, [pc, #308]	; (8003b44 <HAL_I2C_Mem_Write+0x1f0>)
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a12:	88f8      	ldrh	r0, [r7, #6]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	8979      	ldrh	r1, [r7, #10]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	4603      	mov	r3, r0
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fab6 	bl	8003f94 <I2C_RequestMemoryWrite>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d052      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e081      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fd00 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1aa      	bne.n	8003a32 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 fcec 	bl	80044be <I2C_WaitOnBTFFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00d      	beq.n	8003b08 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d107      	bne.n	8003b04 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b02:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e016      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b62:	f7fe fed9 	bl	8002918 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	f040 8208 	bne.w	8003f86 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2319      	movs	r3, #25
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	497b      	ldr	r1, [pc, #492]	; (8003d6c <HAL_I2C_Mem_Read+0x224>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb85 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e1fb      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Mem_Read+0x56>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e1f4      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d007      	beq.n	8003bc4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0201 	orr.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2222      	movs	r2, #34	; 0x22
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2240      	movs	r2, #64	; 0x40
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a5b      	ldr	r2, [pc, #364]	; (8003d70 <HAL_I2C_Mem_Read+0x228>)
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c06:	88f8      	ldrh	r0, [r7, #6]
 8003c08:	893a      	ldrh	r2, [r7, #8]
 8003c0a:	8979      	ldrh	r1, [r7, #10]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	4603      	mov	r3, r0
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa52 	bl	80040c0 <I2C_RequestMemoryRead>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e1b0      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2e:	2300      	movs	r3, #0
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e184      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d11b      	bne.n	8003c96 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e164      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11b      	bne.n	8003cd6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61bb      	str	r3, [r7, #24]
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	e144      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	617b      	str	r3, [r7, #20]
 8003cea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cec:	e138      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	f200 80f1 	bhi.w	8003eda <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d123      	bne.n	8003d48 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fc1b 	bl	8004540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e139      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d46:	e10b      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d14e      	bne.n	8003dee <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	2200      	movs	r2, #0
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <HAL_I2C_Mem_Read+0x22c>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa98 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e10e      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
 8003d6a:	bf00      	nop
 8003d6c:	00100002 	.word	0x00100002
 8003d70:	ffff0000 	.word	0xffff0000
 8003d74:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b2d2      	uxtb	r2, r2
 8003d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dec:	e0b8      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	2200      	movs	r2, #0
 8003df6:	4966      	ldr	r1, [pc, #408]	; (8003f90 <HAL_I2C_Mem_Read+0x448>)
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fa49 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0bf      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2200      	movs	r2, #0
 8003e52:	494f      	ldr	r1, [pc, #316]	; (8003f90 <HAL_I2C_Mem_Read+0x448>)
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 fa1b 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e091      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ed8:	e042      	b.n	8003f60 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fb2e 	bl	8004540 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e04c      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d118      	bne.n	8003f60 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f47f aec2 	bne.w	8003cee <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	; 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	00010004 	.word	0x00010004

08003f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	813b      	strh	r3, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f960 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe4:	d103      	bne.n	8003fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e05f      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ff2:	897b      	ldrh	r3, [r7, #10]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	6a3a      	ldr	r2, [r7, #32]
 8004006:	492d      	ldr	r1, [pc, #180]	; (80040bc <I2C_RequestMemoryWrite+0x128>)
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f998 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e04c      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004030:	6a39      	ldr	r1, [r7, #32]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fa02 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00d      	beq.n	800405a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	2b04      	cmp	r3, #4
 8004044:	d107      	bne.n	8004056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e02b      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800405a:	88fb      	ldrh	r3, [r7, #6]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d105      	bne.n	800406c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004060:	893b      	ldrh	r3, [r7, #8]
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]
 800406a:	e021      	b.n	80040b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800406c:	893b      	ldrh	r3, [r7, #8]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f9dc 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b04      	cmp	r3, #4
 8004090:	d107      	bne.n	80040a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e005      	b.n	80040b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a6:	893b      	ldrh	r3, [r7, #8]
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	00010002 	.word	0x00010002

080040c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2200      	movs	r2, #0
 8004102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8c2 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d103      	bne.n	800412a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e0aa      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800413c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	4952      	ldr	r1, [pc, #328]	; (800428c <I2C_RequestMemoryRead+0x1cc>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f8fa 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e097      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	6a39      	ldr	r1, [r7, #32]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f964 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b04      	cmp	r3, #4
 8004180:	d107      	bne.n	8004192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e076      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	e021      	b.n	80041ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6a39      	ldr	r1, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 f93e 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e050      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	6a39      	ldr	r1, [r7, #32]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f923 	bl	800443c <I2C_WaitOnTXEFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00d      	beq.n	8004218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	2b04      	cmp	r3, #4
 8004202:	d107      	bne.n	8004214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e035      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	2200      	movs	r2, #0
 8004230:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f82b 	bl	8004290 <I2C_WaitOnFlagUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424e:	d103      	bne.n	8004258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e013      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800425c:	897b      	ldrh	r3, [r7, #10]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	b2da      	uxtb	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <I2C_RequestMemoryRead+0x1cc>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f863 	bl	800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	00010002 	.word	0x00010002

08004290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a0:	e025      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d021      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042aa:	f7fe fb35 	bl	8002918 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d302      	bcc.n	80042c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d116      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e023      	b.n	8004336 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4013      	ands	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	bf0c      	ite	eq
 800430a:	2301      	moveq	r3, #1
 800430c:	2300      	movne	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	461a      	mov	r2, r3
 8004312:	e00c      	b.n	800432e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	429a      	cmp	r2, r3
 8004332:	d0b6      	beq.n	80042a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
 800434a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800434c:	e051      	b.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800435c:	d123      	bne.n	80043a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800436c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004376:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0204 	orr.w	r2, r3, #4
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e046      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fe fab3 	bl	8002918 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e020      	b.n	8004434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10c      	bne.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e00b      	b.n	800442e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	43da      	mvns	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d18d      	bne.n	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004448:	e02d      	b.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f8ce 	bl	80045ec <I2C_IsAcknowledgeFailed>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e02d      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004460:	d021      	beq.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004462:	f7fe fa59 	bl	8002918 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d302      	bcc.n	8004478 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d116      	bne.n	80044a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b80      	cmp	r3, #128	; 0x80
 80044b2:	d1ca      	bne.n	800444a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044ca:	e02d      	b.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 f88d 	bl	80045ec <I2C_IsAcknowledgeFailed>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e02d      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e2:	d021      	beq.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e4:	f7fe fa18 	bl	8002918 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d116      	bne.n	8004528 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d1ca      	bne.n	80044cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800454c:	e042      	b.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	d119      	bne.n	8004590 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2220      	movs	r2, #32
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e029      	b.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004590:	f7fe f9c2 	bl	8002918 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e007      	b.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d1b5      	bne.n	800454e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d11b      	bne.n	800463c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	f043 0204 	orr.w	r2, r3, #4
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e264      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d075      	beq.n	8004756 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800466a:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d00c      	beq.n	8004690 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004676:	4ba0      	ldr	r3, [pc, #640]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800467e:	2b08      	cmp	r3, #8
 8004680:	d112      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004682:	4b9d      	ldr	r3, [pc, #628]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d10b      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004690:	4b99      	ldr	r3, [pc, #612]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05b      	beq.n	8004754 <HAL_RCC_OscConfig+0x108>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d157      	bne.n	8004754 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e23f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b0:	d106      	bne.n	80046c0 <HAL_RCC_OscConfig+0x74>
 80046b2:	4b91      	ldr	r3, [pc, #580]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a90      	ldr	r2, [pc, #576]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	e01d      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046c8:	d10c      	bne.n	80046e4 <HAL_RCC_OscConfig+0x98>
 80046ca:	4b8b      	ldr	r3, [pc, #556]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a8a      	ldr	r2, [pc, #552]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b88      	ldr	r3, [pc, #544]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a87      	ldr	r2, [pc, #540]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e00b      	b.n	80046fc <HAL_RCC_OscConfig+0xb0>
 80046e4:	4b84      	ldr	r3, [pc, #528]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a83      	ldr	r2, [pc, #524]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	4b81      	ldr	r3, [pc, #516]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a80      	ldr	r2, [pc, #512]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fe f908 	bl	8002918 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800470c:	f7fe f904 	bl	8002918 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e204      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	4b76      	ldr	r3, [pc, #472]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0xc0>
 800472a:	e014      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fe f8f4 	bl	8002918 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe f8f0 	bl	8002918 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e1f0      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	4b6c      	ldr	r3, [pc, #432]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0xe8>
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d063      	beq.n	800482a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	4b65      	ldr	r3, [pc, #404]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00b      	beq.n	8004786 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476e:	4b62      	ldr	r3, [pc, #392]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004776:	2b08      	cmp	r3, #8
 8004778:	d11c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800477a:	4b5f      	ldr	r3, [pc, #380]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d116      	bne.n	80047b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	4b5c      	ldr	r3, [pc, #368]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d005      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d001      	beq.n	800479e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e1c4      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479e:	4b56      	ldr	r3, [pc, #344]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4952      	ldr	r1, [pc, #328]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	e03a      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047bc:	4b4f      	ldr	r3, [pc, #316]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 80047be:	2201      	movs	r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c2:	f7fe f8a9 	bl	8002918 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ca:	f7fe f8a5 	bl	8002918 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e1a5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047dc:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b43      	ldr	r3, [pc, #268]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4940      	ldr	r1, [pc, #256]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
 80047fc:	e015      	b.n	800482a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	4b3f      	ldr	r3, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe f888 	bl	8002918 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480c:	f7fe f884 	bl	8002918 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e184      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481e:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d030      	beq.n	8004898 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483e:	4b30      	ldr	r3, [pc, #192]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 8004840:	2201      	movs	r2, #1
 8004842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fe f868 	bl	8002918 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484c:	f7fe f864 	bl	8002918 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e164      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485e:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x200>
 800486a:	e015      	b.n	8004898 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCC_OscConfig+0x2b4>)
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004872:	f7fe f851 	bl	8002918 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800487a:	f7fe f84d 	bl	8002918 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14d      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a0 	beq.w	80049e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
 80048ba:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	6413      	str	r3, [r2, #64]	; 0x40
 80048c6:	4b0c      	ldr	r3, [pc, #48]	; (80048f8 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <HAL_RCC_OscConfig+0x2b8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fe f813 	bl	8002918 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e011      	b.n	800491a <HAL_RCC_OscConfig+0x2ce>
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800
 80048fc:	42470000 	.word	0x42470000
 8004900:	42470e80 	.word	0x42470e80
 8004904:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fe f806 	bl	8002918 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e106      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <HAL_RCC_OscConfig+0x4e4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x2f0>
 800492e:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a80      	ldr	r2, [pc, #512]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	e01c      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b05      	cmp	r3, #5
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x312>
 8004944:	4b7b      	ldr	r3, [pc, #492]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004948:	4a7a      	ldr	r2, [pc, #488]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800494a:	f043 0304 	orr.w	r3, r3, #4
 800494e:	6713      	str	r3, [r2, #112]	; 0x70
 8004950:	4b78      	ldr	r3, [pc, #480]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004956:	f043 0301 	orr.w	r3, r3, #1
 800495a:	6713      	str	r3, [r2, #112]	; 0x70
 800495c:	e00b      	b.n	8004976 <HAL_RCC_OscConfig+0x32a>
 800495e:	4b75      	ldr	r3, [pc, #468]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	4a74      	ldr	r2, [pc, #464]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	6713      	str	r3, [r2, #112]	; 0x70
 800496a:	4b72      	ldr	r3, [pc, #456]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a71      	ldr	r2, [pc, #452]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd ffcb 	bl	8002918 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd ffc7 	bl	8002918 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e0c5      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCC_OscConfig+0x33a>
 80049a8:	e014      	b.n	80049d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049aa:	f7fd ffb5 	bl	8002918 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fd ffb1 	bl	8002918 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e0af      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c8:	4b5a      	ldr	r3, [pc, #360]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049da:	4b56      	ldr	r3, [pc, #344]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 809b 	beq.w	8004b26 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d05c      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d141      	bne.n	8004a88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0a:	f7fd ff85 	bl	8002918 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fd ff81 	bl	8002918 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e081      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a24:	4b43      	ldr	r3, [pc, #268]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	019b      	lsls	r3, r3, #6
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	4937      	ldr	r1, [pc, #220]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b37      	ldr	r3, [pc, #220]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a60:	f7fd ff5a 	bl	8002918 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd ff56 	bl	8002918 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e056      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b2e      	ldr	r3, [pc, #184]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x41c>
 8004a86:	e04e      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b2b      	ldr	r3, [pc, #172]	; (8004b38 <HAL_RCC_OscConfig+0x4ec>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fd ff43 	bl	8002918 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd ff3f 	bl	8002918 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03f      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b22      	ldr	r3, [pc, #136]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x44a>
 8004ab4:	e037      	b.n	8004b26 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e032      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	; (8004b34 <HAL_RCC_OscConfig+0x4e8>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d028      	beq.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d121      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d11a      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004af8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d111      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40007000 	.word	0x40007000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	42470060 	.word	0x42470060

08004b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cc      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b50:	4b68      	ldr	r3, [pc, #416]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d90c      	bls.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b66:	4b63      	ldr	r3, [pc, #396]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d001      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0b8      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b90:	4b59      	ldr	r3, [pc, #356]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a58      	ldr	r2, [pc, #352]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d005      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	4a52      	ldr	r2, [pc, #328]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b50      	ldr	r3, [pc, #320]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	494d      	ldr	r1, [pc, #308]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d044      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bda:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d119      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e07f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e06f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e067      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c1a:	4b37      	ldr	r3, [pc, #220]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4934      	ldr	r1, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fd fe74 	bl	8002918 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fd fe70 	bl	8002918 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e04f      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 020c 	and.w	r2, r3, #12
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d1eb      	bne.n	8004c34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c5c:	4b25      	ldr	r3, [pc, #148]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d20c      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6a:	4b22      	ldr	r3, [pc, #136]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c72:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e032      	b.n	8004cea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d008      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c90:	4b19      	ldr	r3, [pc, #100]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4916      	ldr	r1, [pc, #88]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	490e      	ldr	r1, [pc, #56]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cc2:	f000 f821 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	490a      	ldr	r1, [pc, #40]	; (8004cfc <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	5ccb      	ldrb	r3, [r1, r3]
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <HAL_RCC_ClockConfig+0x1c4>)
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cde:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fd fdd4 	bl	8002890 <HAL_InitTick>

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	080098b8 	.word	0x080098b8
 8004d00:	20000000 	.word	0x20000000
 8004d04:	20000004 	.word	0x20000004

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6079      	str	r1, [r7, #4]
 8004d12:	2100      	movs	r1, #0
 8004d14:	60f9      	str	r1, [r7, #12]
 8004d16:	2100      	movs	r1, #0
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d1e:	4952      	ldr	r1, [pc, #328]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d20:	6889      	ldr	r1, [r1, #8]
 8004d22:	f001 010c 	and.w	r1, r1, #12
 8004d26:	2908      	cmp	r1, #8
 8004d28:	d00d      	beq.n	8004d46 <HAL_RCC_GetSysClockFreq+0x3e>
 8004d2a:	2908      	cmp	r1, #8
 8004d2c:	f200 8094 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x32>
 8004d34:	2904      	cmp	r1, #4
 8004d36:	d003      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x38>
 8004d38:	e08e      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d3a:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d3c:	60bb      	str	r3, [r7, #8]
       break;
 8004d3e:	e08e      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d42:	60bb      	str	r3, [r7, #8]
      break;
 8004d44:	e08b      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d46:	4948      	ldr	r1, [pc, #288]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d48:	6849      	ldr	r1, [r1, #4]
 8004d4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004d4e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d50:	4945      	ldr	r1, [pc, #276]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d52:	6849      	ldr	r1, [r1, #4]
 8004d54:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d024      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5c:	4942      	ldr	r1, [pc, #264]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d5e:	6849      	ldr	r1, [r1, #4]
 8004d60:	0989      	lsrs	r1, r1, #6
 8004d62:	4608      	mov	r0, r1
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d6c:	f04f 0500 	mov.w	r5, #0
 8004d70:	ea00 0204 	and.w	r2, r0, r4
 8004d74:	ea01 0305 	and.w	r3, r1, r5
 8004d78:	493d      	ldr	r1, [pc, #244]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d7a:	fb01 f003 	mul.w	r0, r1, r3
 8004d7e:	2100      	movs	r1, #0
 8004d80:	fb01 f102 	mul.w	r1, r1, r2
 8004d84:	1844      	adds	r4, r0, r1
 8004d86:	493a      	ldr	r1, [pc, #232]	; (8004e70 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d88:	fba2 0101 	umull	r0, r1, r2, r1
 8004d8c:	1863      	adds	r3, r4, r1
 8004d8e:	4619      	mov	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	f7fb ff2e 	bl	8000bf8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e04a      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	461a      	mov	r2, r3
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	ea02 0400 	and.w	r4, r2, r0
 8004dbe:	ea03 0501 	and.w	r5, r3, r1
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	014b      	lsls	r3, r1, #5
 8004dd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dd4:	0142      	lsls	r2, r0, #5
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	4619      	mov	r1, r3
 8004dda:	1b00      	subs	r0, r0, r4
 8004ddc:	eb61 0105 	sbc.w	r1, r1, r5
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	018b      	lsls	r3, r1, #6
 8004dea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dee:	0182      	lsls	r2, r0, #6
 8004df0:	1a12      	subs	r2, r2, r0
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	00d9      	lsls	r1, r3, #3
 8004e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e04:	00d0      	lsls	r0, r2, #3
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	1912      	adds	r2, r2, r4
 8004e0c:	eb45 0303 	adc.w	r3, r5, r3
 8004e10:	f04f 0000 	mov.w	r0, #0
 8004e14:	f04f 0100 	mov.w	r1, #0
 8004e18:	0299      	lsls	r1, r3, #10
 8004e1a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e1e:	0290      	lsls	r0, r2, #10
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f7fb fee2 	bl	8000bf8 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4613      	mov	r3, r2
 8004e3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e3c:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	3301      	adds	r3, #1
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e54:	60bb      	str	r3, [r7, #8]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCC_GetSysClockFreq+0x164>)
 8004e5a:	60bb      	str	r3, [r7, #8]
      break;
 8004e5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bdb0      	pop	{r4, r5, r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	017d7840 	.word	0x017d7840

08004e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e78:	4b03      	ldr	r3, [pc, #12]	; (8004e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000000 	.word	0x20000000

08004e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e90:	f7ff fff0 	bl	8004e74 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0a9b      	lsrs	r3, r3, #10
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	080098c8 	.word	0x080098c8

08004eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d035      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004edc:	4b67      	ldr	r3, [pc, #412]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee2:	f7fd fd19 	bl	8002918 <HAL_GetTick>
 8004ee6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eea:	f7fd fd15 	bl	8002918 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e0ba      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004efc:	4b60      	ldr	r3, [pc, #384]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	019a      	lsls	r2, r3, #6
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	071b      	lsls	r3, r3, #28
 8004f14:	495a      	ldr	r1, [pc, #360]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f1c:	4b57      	ldr	r3, [pc, #348]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f22:	f7fd fcf9 	bl	8002918 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f2a:	f7fd fcf5 	bl	8002918 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e09a      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f3c:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8083 	beq.w	800505c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60fb      	str	r3, [r7, #12]
 8004f5a:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a48      	ldr	r2, [pc, #288]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b46      	ldr	r3, [pc, #280]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f72:	4b44      	ldr	r3, [pc, #272]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a43      	ldr	r2, [pc, #268]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f7e:	f7fd fccb 	bl	8002918 <HAL_GetTick>
 8004f82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f86:	f7fd fcc7 	bl	8002918 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e06c      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f98:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004fa4:	4b36      	ldr	r3, [pc, #216]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02f      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d028      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fcc:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fd2:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fd8:	4a29      	ldr	r2, [pc, #164]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fde:	4b28      	ldr	r3, [pc, #160]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d114      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fea:	f7fd fc95 	bl	8002918 <HAL_GetTick>
 8004fee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fd fc91 	bl	8002918 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e034      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	4b1d      	ldr	r3, [pc, #116]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0ee      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005020:	d10d      	bne.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005022:	4b17      	ldr	r3, [pc, #92]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005036:	4912      	ldr	r1, [pc, #72]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005038:	4313      	orrs	r3, r2
 800503a:	608b      	str	r3, [r1, #8]
 800503c:	e005      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005044:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005048:	6093      	str	r3, [r2, #8]
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800504c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005056:	490a      	ldr	r1, [pc, #40]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005058:	4313      	orrs	r3, r2
 800505a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0308 	and.w	r3, r3, #8
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7c1a      	ldrb	r2, [r3, #16]
 800506c:	4b07      	ldr	r3, [pc, #28]	; (800508c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800506e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	42470068 	.word	0x42470068
 8005080:	40023800 	.word	0x40023800
 8005084:	40007000 	.word	0x40007000
 8005088:	42470e40 	.word	0x42470e40
 800508c:	424711e0 	.word	0x424711e0

08005090 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e083      	b.n	80051aa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7f5b      	ldrb	r3, [r3, #29]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fd f8d6 	bl	8002264 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	22ca      	movs	r2, #202	; 0xca
 80050c4:	625a      	str	r2, [r3, #36]	; 0x24
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2253      	movs	r2, #83	; 0x53
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 faa8 	bl	8005624 <RTC_EnterInitMode>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2204      	movs	r2, #4
 80050e6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e05e      	b.n	80051aa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6812      	ldr	r2, [r2, #0]
 80050f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	68d2      	ldr	r2, [r2, #12]
 8005126:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6919      	ldr	r1, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	041a      	lsls	r2, r3, #16
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10e      	bne.n	8005178 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa3a 	bl	80055d4 <HAL_RTC_WaitForSynchro>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	22ff      	movs	r2, #255	; 0xff
 800516c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2204      	movs	r2, #4
 8005172:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e018      	b.n	80051aa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005186:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	699a      	ldr	r2, [r3, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	22ff      	movs	r2, #255	; 0xff
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80051a8:	2300      	movs	r3, #0
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051b2:	b590      	push	{r4, r7, lr}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	7f1b      	ldrb	r3, [r3, #28]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_RTC_SetTime+0x1c>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e0aa      	b.n	8005324 <HAL_RTC_SetTime+0x172>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2202      	movs	r2, #2
 80051d8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d126      	bne.n	800522e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fa3f 	bl	800567c <RTC_ByteToBcd2>
 80051fe:	4603      	mov	r3, r0
 8005200:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fa38 	bl	800567c <RTC_ByteToBcd2>
 800520c:	4603      	mov	r3, r0
 800520e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005210:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	789b      	ldrb	r3, [r3, #2]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fa30 	bl	800567c <RTC_ByteToBcd2>
 800521c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800521e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	78db      	ldrb	r3, [r3, #3]
 8005226:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e018      	b.n	8005260 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800524e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005254:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	78db      	ldrb	r3, [r3, #3]
 800525a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	22ca      	movs	r2, #202	; 0xca
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2253      	movs	r2, #83	; 0x53
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f9d7 	bl	8005624 <RTC_EnterInitMode>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	22ff      	movs	r2, #255	; 0xff
 8005282:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2204      	movs	r2, #4
 8005288:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e047      	b.n	8005324 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800529e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80052a2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052b2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d111      	bne.n	800530e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f972 	bl	80055d4 <HAL_RTC_WaitForSynchro>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2204      	movs	r2, #4
 8005302:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e00a      	b.n	8005324 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005322:	2300      	movs	r3, #0
  }
}
 8005324:	4618      	mov	r0, r3
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd90      	pop	{r4, r7, pc}

0800532c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800535e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005362:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	0c1b      	lsrs	r3, r3, #16
 8005368:	b2db      	uxtb	r3, r3
 800536a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11a      	bne.n	80053de <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f983 	bl	80056b8 <RTC_Bcd2ToByte>
 80053b2:	4603      	mov	r3, r0
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f97a 	bl	80056b8 <RTC_Bcd2ToByte>
 80053c4:	4603      	mov	r3, r0
 80053c6:	461a      	mov	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f971 	bl	80056b8 <RTC_Bcd2ToByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	7f1b      	ldrb	r3, [r3, #28]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_RTC_SetDate+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e094      	b.n	800552e <HAL_RTC_SetDate+0x146>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2202      	movs	r2, #2
 800540e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <HAL_RTC_SetDate+0x4c>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	b2db      	uxtb	r3, r3
 800542c:	330a      	adds	r3, #10
 800542e:	b2da      	uxtb	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d11c      	bne.n	8005474 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	78db      	ldrb	r3, [r3, #3]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f91c 	bl	800567c <RTC_ByteToBcd2>
 8005444:	4603      	mov	r3, r0
 8005446:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f915 	bl	800567c <RTC_ByteToBcd2>
 8005452:	4603      	mov	r3, r0
 8005454:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005456:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	789b      	ldrb	r3, [r3, #2]
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f90d 	bl	800567c <RTC_ByteToBcd2>
 8005462:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005464:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e00e      	b.n	8005492 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	785b      	ldrb	r3, [r3, #1]
 800547e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005480:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005486:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800548e:	4313      	orrs	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	22ca      	movs	r2, #202	; 0xca
 8005498:	625a      	str	r2, [r3, #36]	; 0x24
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2253      	movs	r2, #83	; 0x53
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f8be 	bl	8005624 <RTC_EnterInitMode>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	22ff      	movs	r2, #255	; 0xff
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2204      	movs	r2, #4
 80054ba:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e033      	b.n	800552e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80054d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d111      	bne.n	8005518 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f86d 	bl	80055d4 <HAL_RTC_WaitForSynchro>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2204      	movs	r2, #4
 800550c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e00a      	b.n	800552e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}

08005536 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005550:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005554:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	0a1b      	lsrs	r3, r3, #8
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	0b5b      	lsrs	r3, r3, #13
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	b2da      	uxtb	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11a      	bne.n	80055ca <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	78db      	ldrb	r3, [r3, #3]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f88d 	bl	80056b8 <RTC_Bcd2ToByte>
 800559e:	4603      	mov	r3, r0
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f884 	bl	80056b8 <RTC_Bcd2ToByte>
 80055b0:	4603      	mov	r3, r0
 80055b2:	461a      	mov	r2, r3
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	789b      	ldrb	r3, [r3, #2]
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f87b 	bl	80056b8 <RTC_Bcd2ToByte>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055f0:	f7fd f992 	bl	8002918 <HAL_GetTick>
 80055f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80055f6:	e009      	b.n	800560c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80055f8:	f7fd f98e 	bl	8002918 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005606:	d901      	bls.n	800560c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e007      	b.n	800561c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ee      	beq.n	80055f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d119      	bne.n	8005672 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f04f 32ff 	mov.w	r2, #4294967295
 8005646:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005648:	f7fd f966 	bl	8002918 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800564e:	e009      	b.n	8005664 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005650:	f7fd f962 	bl	8002918 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565e:	d901      	bls.n	8005664 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e007      	b.n	8005674 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0ee      	beq.n	8005650 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800568a:	e005      	b.n	8005698 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	3b0a      	subs	r3, #10
 8005696:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b09      	cmp	r3, #9
 800569c:	d8f6      	bhi.n	800568c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b2db      	uxtb	r3, r3
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	4613      	mov	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	4413      	add	r3, r2
 80056e6:	b2db      	uxtb	r3, r3
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e07b      	b.n	80057fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005716:	d009      	beq.n	800572c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
 800571e:	e005      	b.n	800572c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fe26 	bl	8002398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b0:	ea42 0103 	orr.w	r1, r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	f003 0104 	and.w	r1, r3, #4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	f003 0210 	and.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b088      	sub	sp, #32
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_SPI_Transmit+0x22>
 8005824:	2302      	movs	r3, #2
 8005826:	e126      	b.n	8005a76 <HAL_SPI_Transmit+0x270>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005830:	f7fd f872 	bl	8002918 <HAL_GetTick>
 8005834:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b01      	cmp	r3, #1
 8005844:	d002      	beq.n	800584c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005846:	2302      	movs	r3, #2
 8005848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800584a:	e10b      	b.n	8005a64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Transmit+0x52>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d102      	bne.n	800585e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800585c:	e102      	b.n	8005a64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2203      	movs	r2, #3
 8005862:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a4:	d10f      	bne.n	80058c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d0:	2b40      	cmp	r3, #64	; 0x40
 80058d2:	d007      	beq.n	80058e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ec:	d14b      	bne.n	8005986 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_SPI_Transmit+0xf6>
 80058f6:	8afb      	ldrh	r3, [r7, #22]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d13e      	bne.n	800597a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	881a      	ldrh	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	1c9a      	adds	r2, r3, #2
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005920:	e02b      	b.n	800597a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b02      	cmp	r3, #2
 800592e:	d112      	bne.n	8005956 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
 8005954:	e011      	b.n	800597a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005956:	f7fc ffdf 	bl	8002918 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d803      	bhi.n	800596e <HAL_SPI_Transmit+0x168>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Transmit+0x16e>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005978:	e074      	b.n	8005a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ce      	bne.n	8005922 <HAL_SPI_Transmit+0x11c>
 8005984:	e04c      	b.n	8005a20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x18e>
 800598e:	8afb      	ldrh	r3, [r7, #22]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d140      	bne.n	8005a16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	330c      	adds	r3, #12
 800599e:	7812      	ldrb	r2, [r2, #0]
 80059a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059ba:	e02c      	b.n	8005a16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d113      	bne.n	80059f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80059f0:	e011      	b.n	8005a16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f2:	f7fc ff91 	bl	8002918 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d803      	bhi.n	8005a0a <HAL_SPI_Transmit+0x204>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a08:	d102      	bne.n	8005a10 <HAL_SPI_Transmit+0x20a>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a14:	e026      	b.n	8005a64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1cd      	bne.n	80059bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 f8c1 	bl	8005bac <SPI_EndRxTxTransaction>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	e000      	b.n	8005a64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a8c:	b2db      	uxtb	r3, r3
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005aac:	f7fc ff34 	bl	8002918 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4413      	add	r3, r2
 8005aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005abc:	f7fc ff2c 	bl	8002918 <HAL_GetTick>
 8005ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ac2:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	015b      	lsls	r3, r3, #5
 8005ac8:	0d1b      	lsrs	r3, r3, #20
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	fb02 f303 	mul.w	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ad2:	e054      	b.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d050      	beq.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005adc:	f7fc ff1c 	bl	8002918 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d13d      	bne.n	8005b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b0a:	d111      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b14:	d004      	beq.n	8005b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b1e:	d107      	bne.n	8005b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d10f      	bne.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e017      	b.n	8005b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	bf0c      	ite	eq
 8005b8e:	2301      	moveq	r3, #1
 8005b90:	2300      	movne	r3, #0
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d19b      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000000 	.word	0x20000000

08005bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bb8:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <SPI_EndRxTxTransaction+0x7c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <SPI_EndRxTxTransaction+0x80>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	0d5b      	lsrs	r3, r3, #21
 8005bc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd6:	d112      	bne.n	8005bfe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2200      	movs	r2, #0
 8005be0:	2180      	movs	r1, #128	; 0x80
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff ff5a 	bl	8005a9c <SPI_WaitFlagStateUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00f      	b.n	8005c1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00a      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c14:	2b80      	cmp	r3, #128	; 0x80
 8005c16:	d0f2      	beq.n	8005bfe <SPI_EndRxTxTransaction+0x52>
 8005c18:	e000      	b.n	8005c1c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c1a:	bf00      	nop
  }

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000000 	.word	0x20000000
 8005c2c:	165e9f81 	.word	0x165e9f81

08005c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e041      	b.n	8005cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fc fda6 	bl	80027a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fa88 	bl	8006184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d001      	beq.n	8005ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e044      	b.n	8005d72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d018      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d013      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1a      	ldr	r2, [pc, #104]	; (8005d84 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00e      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a19      	ldr	r2, [pc, #100]	; (8005d88 <HAL_TIM_Base_Start_IT+0xb8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d009      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x6c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d111      	bne.n	8005d60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b06      	cmp	r3, #6
 8005d4c:	d010      	beq.n	8005d70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 0201 	orr.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5e:	e007      	b.n	8005d70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40010000 	.word	0x40010000
 8005d84:	40000400 	.word	0x40000400
 8005d88:	40000800 	.word	0x40000800
 8005d8c:	40000c00 	.word	0x40000c00
 8005d90:	40014000 	.word	0x40014000

08005d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0202 	mvn.w	r2, #2
 8005dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9b5 	bl	8006146 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f9a7 	bl	8006132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f9b8 	bl	800615a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0304 	and.w	r3, r3, #4
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0204 	mvn.w	r2, #4
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f98b 	bl	8006146 <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f97d 	bl	8006132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f98e 	bl	800615a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0308 	and.w	r3, r3, #8
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0208 	mvn.w	r2, #8
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f961 	bl	8006146 <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f953 	bl	8006132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f964 	bl	800615a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b10      	cmp	r3, #16
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b10      	cmp	r3, #16
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0210 	mvn.w	r2, #16
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f937 	bl	8006146 <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f929 	bl	8006132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f93a 	bl	800615a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d10e      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d107      	bne.n	8005f18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0201 	mvn.w	r2, #1
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc f8e8 	bl	80020e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f22:	2b80      	cmp	r3, #128	; 0x80
 8005f24:	d10e      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f30:	2b80      	cmp	r3, #128	; 0x80
 8005f32:	d107      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fab2 	bl	80064a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4e:	2b40      	cmp	r3, #64	; 0x40
 8005f50:	d10e      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d107      	bne.n	8005f70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8ff 	bl	800616e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d10e      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b20      	cmp	r3, #32
 8005f8a:	d107      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0220 	mvn.w	r2, #32
 8005f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fa7c 	bl	8006494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e0b4      	b.n	800612a <HAL_TIM_ConfigClockSource+0x186>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff8:	d03e      	beq.n	8006078 <HAL_TIM_ConfigClockSource+0xd4>
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	f200 8087 	bhi.w	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	f000 8086 	beq.w	8006116 <HAL_TIM_ConfigClockSource+0x172>
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d87f      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b70      	cmp	r3, #112	; 0x70
 8006012:	d01a      	beq.n	800604a <HAL_TIM_ConfigClockSource+0xa6>
 8006014:	2b70      	cmp	r3, #112	; 0x70
 8006016:	d87b      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b60      	cmp	r3, #96	; 0x60
 800601a:	d050      	beq.n	80060be <HAL_TIM_ConfigClockSource+0x11a>
 800601c:	2b60      	cmp	r3, #96	; 0x60
 800601e:	d877      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b50      	cmp	r3, #80	; 0x50
 8006022:	d03c      	beq.n	800609e <HAL_TIM_ConfigClockSource+0xfa>
 8006024:	2b50      	cmp	r3, #80	; 0x50
 8006026:	d873      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d058      	beq.n	80060de <HAL_TIM_ConfigClockSource+0x13a>
 800602c:	2b40      	cmp	r3, #64	; 0x40
 800602e:	d86f      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006030:	2b30      	cmp	r3, #48	; 0x30
 8006032:	d064      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x15a>
 8006034:	2b30      	cmp	r3, #48	; 0x30
 8006036:	d86b      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d060      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x15a>
 800603c:	2b20      	cmp	r3, #32
 800603e:	d867      	bhi.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d05c      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x15a>
 8006044:	2b10      	cmp	r3, #16
 8006046:	d05a      	beq.n	80060fe <HAL_TIM_ConfigClockSource+0x15a>
 8006048:	e062      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6818      	ldr	r0, [r3, #0]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	6899      	ldr	r1, [r3, #8]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f000 f98d 	bl	8006378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800606c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	609a      	str	r2, [r3, #8]
      break;
 8006076:	e04f      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6899      	ldr	r1, [r3, #8]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f000 f976 	bl	8006378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800609a:	609a      	str	r2, [r3, #8]
      break;
 800609c:	e03c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	6859      	ldr	r1, [r3, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	f000 f8ea 	bl	8006284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2150      	movs	r1, #80	; 0x50
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 f943 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 80060bc:	e02c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6818      	ldr	r0, [r3, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6859      	ldr	r1, [r3, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	461a      	mov	r2, r3
 80060cc:	f000 f909 	bl	80062e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2160      	movs	r1, #96	; 0x60
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 f933 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 80060dc:	e01c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6859      	ldr	r1, [r3, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f000 f8ca 	bl	8006284 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2140      	movs	r1, #64	; 0x40
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f923 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 80060fc:	e00c      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4619      	mov	r1, r3
 8006108:	4610      	mov	r0, r2
 800610a:	f000 f91a 	bl	8006342 <TIM_ITRx_SetConfig>
      break;
 800610e:	e003      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e000      	b.n	8006118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006128:	7bfb      	ldrb	r3, [r7, #15]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	370c      	adds	r7, #12
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a34      	ldr	r2, [pc, #208]	; (8006268 <TIM_Base_SetConfig+0xe4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00f      	beq.n	80061bc <TIM_Base_SetConfig+0x38>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d00b      	beq.n	80061bc <TIM_Base_SetConfig+0x38>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a31      	ldr	r2, [pc, #196]	; (800626c <TIM_Base_SetConfig+0xe8>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d007      	beq.n	80061bc <TIM_Base_SetConfig+0x38>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a30      	ldr	r2, [pc, #192]	; (8006270 <TIM_Base_SetConfig+0xec>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_Base_SetConfig+0x38>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a2f      	ldr	r2, [pc, #188]	; (8006274 <TIM_Base_SetConfig+0xf0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d108      	bne.n	80061ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a25      	ldr	r2, [pc, #148]	; (8006268 <TIM_Base_SetConfig+0xe4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01b      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061dc:	d017      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a22      	ldr	r2, [pc, #136]	; (800626c <TIM_Base_SetConfig+0xe8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a21      	ldr	r2, [pc, #132]	; (8006270 <TIM_Base_SetConfig+0xec>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00f      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a20      	ldr	r2, [pc, #128]	; (8006274 <TIM_Base_SetConfig+0xf0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00b      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <TIM_Base_SetConfig+0xf4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d007      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a1e      	ldr	r2, [pc, #120]	; (800627c <TIM_Base_SetConfig+0xf8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d003      	beq.n	800620e <TIM_Base_SetConfig+0x8a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a1d      	ldr	r2, [pc, #116]	; (8006280 <TIM_Base_SetConfig+0xfc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d108      	bne.n	8006220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a08      	ldr	r2, [pc, #32]	; (8006268 <TIM_Base_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d103      	bne.n	8006254 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	615a      	str	r2, [r3, #20]
}
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000
 800626c:	40000400 	.word	0x40000400
 8006270:	40000800 	.word	0x40000800
 8006274:	40000c00 	.word	0x40000c00
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800

08006284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	f023 0201 	bic.w	r2, r3, #1
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f023 030a 	bic.w	r3, r3, #10
 80062c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	621a      	str	r2, [r3, #32]
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b087      	sub	sp, #28
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	f023 0210 	bic.w	r2, r3, #16
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800630c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	031b      	lsls	r3, r3, #12
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800631e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	4313      	orrs	r3, r2
 8006328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006342:	b480      	push	{r7}
 8006344:	b085      	sub	sp, #20
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4313      	orrs	r3, r2
 8006360:	f043 0307 	orr.w	r3, r3, #7
 8006364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	609a      	str	r2, [r3, #8]
}
 800636c:	bf00      	nop
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	431a      	orrs	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4313      	orrs	r3, r2
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d101      	bne.n	80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063cc:	2302      	movs	r3, #2
 80063ce:	e050      	b.n	8006472 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1c      	ldr	r2, [pc, #112]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641c:	d013      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a16      	ldr	r2, [pc, #88]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d10c      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800644c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	4313      	orrs	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800
 800648c:	40000c00 	.word	0x40000c00
 8006490:	40014000 	.word	0x40014000

08006494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <__errno>:
 80064bc:	4b01      	ldr	r3, [pc, #4]	; (80064c4 <__errno+0x8>)
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	2000000c 	.word	0x2000000c

080064c8 <__libc_init_array>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4d0d      	ldr	r5, [pc, #52]	; (8006500 <__libc_init_array+0x38>)
 80064cc:	4c0d      	ldr	r4, [pc, #52]	; (8006504 <__libc_init_array+0x3c>)
 80064ce:	1b64      	subs	r4, r4, r5
 80064d0:	10a4      	asrs	r4, r4, #2
 80064d2:	2600      	movs	r6, #0
 80064d4:	42a6      	cmp	r6, r4
 80064d6:	d109      	bne.n	80064ec <__libc_init_array+0x24>
 80064d8:	4d0b      	ldr	r5, [pc, #44]	; (8006508 <__libc_init_array+0x40>)
 80064da:	4c0c      	ldr	r4, [pc, #48]	; (800650c <__libc_init_array+0x44>)
 80064dc:	f002 fec2 	bl	8009264 <_init>
 80064e0:	1b64      	subs	r4, r4, r5
 80064e2:	10a4      	asrs	r4, r4, #2
 80064e4:	2600      	movs	r6, #0
 80064e6:	42a6      	cmp	r6, r4
 80064e8:	d105      	bne.n	80064f6 <__libc_init_array+0x2e>
 80064ea:	bd70      	pop	{r4, r5, r6, pc}
 80064ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f0:	4798      	blx	r3
 80064f2:	3601      	adds	r6, #1
 80064f4:	e7ee      	b.n	80064d4 <__libc_init_array+0xc>
 80064f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064fa:	4798      	blx	r3
 80064fc:	3601      	adds	r6, #1
 80064fe:	e7f2      	b.n	80064e6 <__libc_init_array+0x1e>
 8006500:	08009cbc 	.word	0x08009cbc
 8006504:	08009cbc 	.word	0x08009cbc
 8006508:	08009cbc 	.word	0x08009cbc
 800650c:	08009cc0 	.word	0x08009cc0

08006510 <memset>:
 8006510:	4402      	add	r2, r0
 8006512:	4603      	mov	r3, r0
 8006514:	4293      	cmp	r3, r2
 8006516:	d100      	bne.n	800651a <memset+0xa>
 8006518:	4770      	bx	lr
 800651a:	f803 1b01 	strb.w	r1, [r3], #1
 800651e:	e7f9      	b.n	8006514 <memset+0x4>

08006520 <__cvt>:
 8006520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	ec55 4b10 	vmov	r4, r5, d0
 8006528:	2d00      	cmp	r5, #0
 800652a:	460e      	mov	r6, r1
 800652c:	4619      	mov	r1, r3
 800652e:	462b      	mov	r3, r5
 8006530:	bfbb      	ittet	lt
 8006532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006536:	461d      	movlt	r5, r3
 8006538:	2300      	movge	r3, #0
 800653a:	232d      	movlt	r3, #45	; 0x2d
 800653c:	700b      	strb	r3, [r1, #0]
 800653e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006540:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006544:	4691      	mov	r9, r2
 8006546:	f023 0820 	bic.w	r8, r3, #32
 800654a:	bfbc      	itt	lt
 800654c:	4622      	movlt	r2, r4
 800654e:	4614      	movlt	r4, r2
 8006550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006554:	d005      	beq.n	8006562 <__cvt+0x42>
 8006556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800655a:	d100      	bne.n	800655e <__cvt+0x3e>
 800655c:	3601      	adds	r6, #1
 800655e:	2102      	movs	r1, #2
 8006560:	e000      	b.n	8006564 <__cvt+0x44>
 8006562:	2103      	movs	r1, #3
 8006564:	ab03      	add	r3, sp, #12
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	ab02      	add	r3, sp, #8
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	ec45 4b10 	vmov	d0, r4, r5
 8006570:	4653      	mov	r3, sl
 8006572:	4632      	mov	r2, r6
 8006574:	f000 fcf8 	bl	8006f68 <_dtoa_r>
 8006578:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800657c:	4607      	mov	r7, r0
 800657e:	d102      	bne.n	8006586 <__cvt+0x66>
 8006580:	f019 0f01 	tst.w	r9, #1
 8006584:	d022      	beq.n	80065cc <__cvt+0xac>
 8006586:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800658a:	eb07 0906 	add.w	r9, r7, r6
 800658e:	d110      	bne.n	80065b2 <__cvt+0x92>
 8006590:	783b      	ldrb	r3, [r7, #0]
 8006592:	2b30      	cmp	r3, #48	; 0x30
 8006594:	d10a      	bne.n	80065ac <__cvt+0x8c>
 8006596:	2200      	movs	r2, #0
 8006598:	2300      	movs	r3, #0
 800659a:	4620      	mov	r0, r4
 800659c:	4629      	mov	r1, r5
 800659e:	f7fa fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a2:	b918      	cbnz	r0, 80065ac <__cvt+0x8c>
 80065a4:	f1c6 0601 	rsb	r6, r6, #1
 80065a8:	f8ca 6000 	str.w	r6, [sl]
 80065ac:	f8da 3000 	ldr.w	r3, [sl]
 80065b0:	4499      	add	r9, r3
 80065b2:	2200      	movs	r2, #0
 80065b4:	2300      	movs	r3, #0
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7fa fa8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80065be:	b108      	cbz	r0, 80065c4 <__cvt+0xa4>
 80065c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c4:	2230      	movs	r2, #48	; 0x30
 80065c6:	9b03      	ldr	r3, [sp, #12]
 80065c8:	454b      	cmp	r3, r9
 80065ca:	d307      	bcc.n	80065dc <__cvt+0xbc>
 80065cc:	9b03      	ldr	r3, [sp, #12]
 80065ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065d0:	1bdb      	subs	r3, r3, r7
 80065d2:	4638      	mov	r0, r7
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	b004      	add	sp, #16
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	1c59      	adds	r1, r3, #1
 80065de:	9103      	str	r1, [sp, #12]
 80065e0:	701a      	strb	r2, [r3, #0]
 80065e2:	e7f0      	b.n	80065c6 <__cvt+0xa6>

080065e4 <__exponent>:
 80065e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065e6:	4603      	mov	r3, r0
 80065e8:	2900      	cmp	r1, #0
 80065ea:	bfb8      	it	lt
 80065ec:	4249      	neglt	r1, r1
 80065ee:	f803 2b02 	strb.w	r2, [r3], #2
 80065f2:	bfb4      	ite	lt
 80065f4:	222d      	movlt	r2, #45	; 0x2d
 80065f6:	222b      	movge	r2, #43	; 0x2b
 80065f8:	2909      	cmp	r1, #9
 80065fa:	7042      	strb	r2, [r0, #1]
 80065fc:	dd2a      	ble.n	8006654 <__exponent+0x70>
 80065fe:	f10d 0407 	add.w	r4, sp, #7
 8006602:	46a4      	mov	ip, r4
 8006604:	270a      	movs	r7, #10
 8006606:	46a6      	mov	lr, r4
 8006608:	460a      	mov	r2, r1
 800660a:	fb91 f6f7 	sdiv	r6, r1, r7
 800660e:	fb07 1516 	mls	r5, r7, r6, r1
 8006612:	3530      	adds	r5, #48	; 0x30
 8006614:	2a63      	cmp	r2, #99	; 0x63
 8006616:	f104 34ff 	add.w	r4, r4, #4294967295
 800661a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800661e:	4631      	mov	r1, r6
 8006620:	dcf1      	bgt.n	8006606 <__exponent+0x22>
 8006622:	3130      	adds	r1, #48	; 0x30
 8006624:	f1ae 0502 	sub.w	r5, lr, #2
 8006628:	f804 1c01 	strb.w	r1, [r4, #-1]
 800662c:	1c44      	adds	r4, r0, #1
 800662e:	4629      	mov	r1, r5
 8006630:	4561      	cmp	r1, ip
 8006632:	d30a      	bcc.n	800664a <__exponent+0x66>
 8006634:	f10d 0209 	add.w	r2, sp, #9
 8006638:	eba2 020e 	sub.w	r2, r2, lr
 800663c:	4565      	cmp	r5, ip
 800663e:	bf88      	it	hi
 8006640:	2200      	movhi	r2, #0
 8006642:	4413      	add	r3, r2
 8006644:	1a18      	subs	r0, r3, r0
 8006646:	b003      	add	sp, #12
 8006648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800664e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006652:	e7ed      	b.n	8006630 <__exponent+0x4c>
 8006654:	2330      	movs	r3, #48	; 0x30
 8006656:	3130      	adds	r1, #48	; 0x30
 8006658:	7083      	strb	r3, [r0, #2]
 800665a:	70c1      	strb	r1, [r0, #3]
 800665c:	1d03      	adds	r3, r0, #4
 800665e:	e7f1      	b.n	8006644 <__exponent+0x60>

08006660 <_printf_float>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	ed2d 8b02 	vpush	{d8}
 8006668:	b08d      	sub	sp, #52	; 0x34
 800666a:	460c      	mov	r4, r1
 800666c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006670:	4616      	mov	r6, r2
 8006672:	461f      	mov	r7, r3
 8006674:	4605      	mov	r5, r0
 8006676:	f001 fa63 	bl	8007b40 <_localeconv_r>
 800667a:	f8d0 a000 	ldr.w	sl, [r0]
 800667e:	4650      	mov	r0, sl
 8006680:	f7f9 fdae 	bl	80001e0 <strlen>
 8006684:	2300      	movs	r3, #0
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	9305      	str	r3, [sp, #20]
 800668c:	f8d8 3000 	ldr.w	r3, [r8]
 8006690:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006694:	3307      	adds	r3, #7
 8006696:	f023 0307 	bic.w	r3, r3, #7
 800669a:	f103 0208 	add.w	r2, r3, #8
 800669e:	f8c8 2000 	str.w	r2, [r8]
 80066a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80066b8:	ee08 0a10 	vmov	s16, r0
 80066bc:	4b9f      	ldr	r3, [pc, #636]	; (800693c <_printf_float+0x2dc>)
 80066be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	f7fa fa39 	bl	8000b3c <__aeabi_dcmpun>
 80066ca:	bb88      	cbnz	r0, 8006730 <_printf_float+0xd0>
 80066cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d0:	4b9a      	ldr	r3, [pc, #616]	; (800693c <_printf_float+0x2dc>)
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	f7fa fa13 	bl	8000b00 <__aeabi_dcmple>
 80066da:	bb48      	cbnz	r0, 8006730 <_printf_float+0xd0>
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7fa fa02 	bl	8000aec <__aeabi_dcmplt>
 80066e8:	b110      	cbz	r0, 80066f0 <_printf_float+0x90>
 80066ea:	232d      	movs	r3, #45	; 0x2d
 80066ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f0:	4b93      	ldr	r3, [pc, #588]	; (8006940 <_printf_float+0x2e0>)
 80066f2:	4894      	ldr	r0, [pc, #592]	; (8006944 <_printf_float+0x2e4>)
 80066f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066f8:	bf94      	ite	ls
 80066fa:	4698      	movls	r8, r3
 80066fc:	4680      	movhi	r8, r0
 80066fe:	2303      	movs	r3, #3
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	f023 0204 	bic.w	r2, r3, #4
 8006708:	6022      	str	r2, [r4, #0]
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	9700      	str	r7, [sp, #0]
 8006710:	4633      	mov	r3, r6
 8006712:	aa0b      	add	r2, sp, #44	; 0x2c
 8006714:	4621      	mov	r1, r4
 8006716:	4628      	mov	r0, r5
 8006718:	f000 f9d8 	bl	8006acc <_printf_common>
 800671c:	3001      	adds	r0, #1
 800671e:	f040 8090 	bne.w	8006842 <_printf_float+0x1e2>
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b00d      	add	sp, #52	; 0x34
 8006728:	ecbd 8b02 	vpop	{d8}
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7fa fa00 	bl	8000b3c <__aeabi_dcmpun>
 800673c:	b140      	cbz	r0, 8006750 <_printf_float+0xf0>
 800673e:	464b      	mov	r3, r9
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfbc      	itt	lt
 8006744:	232d      	movlt	r3, #45	; 0x2d
 8006746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674a:	487f      	ldr	r0, [pc, #508]	; (8006948 <_printf_float+0x2e8>)
 800674c:	4b7f      	ldr	r3, [pc, #508]	; (800694c <_printf_float+0x2ec>)
 800674e:	e7d1      	b.n	80066f4 <_printf_float+0x94>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006756:	9206      	str	r2, [sp, #24]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	d13f      	bne.n	80067dc <_printf_float+0x17c>
 800675c:	2306      	movs	r3, #6
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	9b05      	ldr	r3, [sp, #20]
 8006762:	6861      	ldr	r1, [r4, #4]
 8006764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006768:	2300      	movs	r3, #0
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	ab0a      	add	r3, sp, #40	; 0x28
 800676e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006772:	ab09      	add	r3, sp, #36	; 0x24
 8006774:	ec49 8b10 	vmov	d0, r8, r9
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fecd 	bl	8006520 <__cvt>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678a:	2b47      	cmp	r3, #71	; 0x47
 800678c:	4680      	mov	r8, r0
 800678e:	d108      	bne.n	80067a2 <_printf_float+0x142>
 8006790:	1cc8      	adds	r0, r1, #3
 8006792:	db02      	blt.n	800679a <_printf_float+0x13a>
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	4299      	cmp	r1, r3
 8006798:	dd41      	ble.n	800681e <_printf_float+0x1be>
 800679a:	f1ab 0b02 	sub.w	fp, fp, #2
 800679e:	fa5f fb8b 	uxtb.w	fp, fp
 80067a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067a6:	d820      	bhi.n	80067ea <_printf_float+0x18a>
 80067a8:	3901      	subs	r1, #1
 80067aa:	465a      	mov	r2, fp
 80067ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b0:	9109      	str	r1, [sp, #36]	; 0x24
 80067b2:	f7ff ff17 	bl	80065e4 <__exponent>
 80067b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	4681      	mov	r9, r0
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	dc02      	bgt.n	80067c8 <_printf_float+0x168>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d2      	lsls	r2, r2, #31
 80067c6:	d501      	bpl.n	80067cc <_printf_float+0x16c>
 80067c8:	3301      	adds	r3, #1
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d09c      	beq.n	800670e <_printf_float+0xae>
 80067d4:	232d      	movs	r3, #45	; 0x2d
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067da:	e798      	b.n	800670e <_printf_float+0xae>
 80067dc:	9a06      	ldr	r2, [sp, #24]
 80067de:	2a47      	cmp	r2, #71	; 0x47
 80067e0:	d1be      	bne.n	8006760 <_printf_float+0x100>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1bc      	bne.n	8006760 <_printf_float+0x100>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7b9      	b.n	800675e <_printf_float+0xfe>
 80067ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067ee:	d118      	bne.n	8006822 <_printf_float+0x1c2>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	dd0b      	ble.n	800680e <_printf_float+0x1ae>
 80067f6:	6121      	str	r1, [r4, #16]
 80067f8:	b913      	cbnz	r3, 8006800 <_printf_float+0x1a0>
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	07d0      	lsls	r0, r2, #31
 80067fe:	d502      	bpl.n	8006806 <_printf_float+0x1a6>
 8006800:	3301      	adds	r3, #1
 8006802:	440b      	add	r3, r1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	65a1      	str	r1, [r4, #88]	; 0x58
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	e7de      	b.n	80067cc <_printf_float+0x16c>
 800680e:	b913      	cbnz	r3, 8006816 <_printf_float+0x1b6>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	07d2      	lsls	r2, r2, #31
 8006814:	d501      	bpl.n	800681a <_printf_float+0x1ba>
 8006816:	3302      	adds	r3, #2
 8006818:	e7f4      	b.n	8006804 <_printf_float+0x1a4>
 800681a:	2301      	movs	r3, #1
 800681c:	e7f2      	b.n	8006804 <_printf_float+0x1a4>
 800681e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006824:	4299      	cmp	r1, r3
 8006826:	db05      	blt.n	8006834 <_printf_float+0x1d4>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	6121      	str	r1, [r4, #16]
 800682c:	07d8      	lsls	r0, r3, #31
 800682e:	d5ea      	bpl.n	8006806 <_printf_float+0x1a6>
 8006830:	1c4b      	adds	r3, r1, #1
 8006832:	e7e7      	b.n	8006804 <_printf_float+0x1a4>
 8006834:	2900      	cmp	r1, #0
 8006836:	bfd4      	ite	le
 8006838:	f1c1 0202 	rsble	r2, r1, #2
 800683c:	2201      	movgt	r2, #1
 800683e:	4413      	add	r3, r2
 8006840:	e7e0      	b.n	8006804 <_printf_float+0x1a4>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	055a      	lsls	r2, r3, #21
 8006846:	d407      	bmi.n	8006858 <_printf_float+0x1f8>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	4642      	mov	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d12c      	bne.n	80068b0 <_printf_float+0x250>
 8006856:	e764      	b.n	8006722 <_printf_float+0xc2>
 8006858:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800685c:	f240 80e0 	bls.w	8006a20 <_printf_float+0x3c0>
 8006860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f936 	bl	8000ad8 <__aeabi_dcmpeq>
 800686c:	2800      	cmp	r0, #0
 800686e:	d034      	beq.n	80068da <_printf_float+0x27a>
 8006870:	4a37      	ldr	r2, [pc, #220]	; (8006950 <_printf_float+0x2f0>)
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af51 	beq.w	8006722 <_printf_float+0xc2>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	429a      	cmp	r2, r3
 8006886:	db02      	blt.n	800688e <_printf_float+0x22e>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07d8      	lsls	r0, r3, #31
 800688c:	d510      	bpl.n	80068b0 <_printf_float+0x250>
 800688e:	ee18 3a10 	vmov	r3, s16
 8006892:	4652      	mov	r2, sl
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af41 	beq.w	8006722 <_printf_float+0xc2>
 80068a0:	f04f 0800 	mov.w	r8, #0
 80068a4:	f104 091a 	add.w	r9, r4, #26
 80068a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4543      	cmp	r3, r8
 80068ae:	dc09      	bgt.n	80068c4 <_printf_float+0x264>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	079b      	lsls	r3, r3, #30
 80068b4:	f100 8105 	bmi.w	8006ac2 <_printf_float+0x462>
 80068b8:	68e0      	ldr	r0, [r4, #12]
 80068ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068bc:	4298      	cmp	r0, r3
 80068be:	bfb8      	it	lt
 80068c0:	4618      	movlt	r0, r3
 80068c2:	e730      	b.n	8006726 <_printf_float+0xc6>
 80068c4:	2301      	movs	r3, #1
 80068c6:	464a      	mov	r2, r9
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f af27 	beq.w	8006722 <_printf_float+0xc2>
 80068d4:	f108 0801 	add.w	r8, r8, #1
 80068d8:	e7e6      	b.n	80068a8 <_printf_float+0x248>
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc39      	bgt.n	8006954 <_printf_float+0x2f4>
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <_printf_float+0x2f0>)
 80068e2:	2301      	movs	r3, #1
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af19 	beq.w	8006722 <_printf_float+0xc2>
 80068f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068f4:	4313      	orrs	r3, r2
 80068f6:	d102      	bne.n	80068fe <_printf_float+0x29e>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	d5d8      	bpl.n	80068b0 <_printf_float+0x250>
 80068fe:	ee18 3a10 	vmov	r3, s16
 8006902:	4652      	mov	r2, sl
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af09 	beq.w	8006722 <_printf_float+0xc2>
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	f104 0a1a 	add.w	sl, r4, #26
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	425b      	negs	r3, r3
 800691c:	454b      	cmp	r3, r9
 800691e:	dc01      	bgt.n	8006924 <_printf_float+0x2c4>
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	e792      	b.n	800684a <_printf_float+0x1ea>
 8006924:	2301      	movs	r3, #1
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f aef7 	beq.w	8006722 <_printf_float+0xc2>
 8006934:	f109 0901 	add.w	r9, r9, #1
 8006938:	e7ee      	b.n	8006918 <_printf_float+0x2b8>
 800693a:	bf00      	nop
 800693c:	7fefffff 	.word	0x7fefffff
 8006940:	080098d4 	.word	0x080098d4
 8006944:	080098d8 	.word	0x080098d8
 8006948:	080098e0 	.word	0x080098e0
 800694c:	080098dc 	.word	0x080098dc
 8006950:	080098e4 	.word	0x080098e4
 8006954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006958:	429a      	cmp	r2, r3
 800695a:	bfa8      	it	ge
 800695c:	461a      	movge	r2, r3
 800695e:	2a00      	cmp	r2, #0
 8006960:	4691      	mov	r9, r2
 8006962:	dc37      	bgt.n	80069d4 <_printf_float+0x374>
 8006964:	f04f 0b00 	mov.w	fp, #0
 8006968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800696c:	f104 021a 	add.w	r2, r4, #26
 8006970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	eba3 0309 	sub.w	r3, r3, r9
 8006978:	455b      	cmp	r3, fp
 800697a:	dc33      	bgt.n	80069e4 <_printf_float+0x384>
 800697c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006980:	429a      	cmp	r2, r3
 8006982:	db3b      	blt.n	80069fc <_printf_float+0x39c>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	07da      	lsls	r2, r3, #31
 8006988:	d438      	bmi.n	80069fc <_printf_float+0x39c>
 800698a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800698c:	9b05      	ldr	r3, [sp, #20]
 800698e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	eba2 0901 	sub.w	r9, r2, r1
 8006996:	4599      	cmp	r9, r3
 8006998:	bfa8      	it	ge
 800699a:	4699      	movge	r9, r3
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	dc35      	bgt.n	8006a0e <_printf_float+0x3ae>
 80069a2:	f04f 0800 	mov.w	r8, #0
 80069a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069aa:	f104 0a1a 	add.w	sl, r4, #26
 80069ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	eba3 0309 	sub.w	r3, r3, r9
 80069b8:	4543      	cmp	r3, r8
 80069ba:	f77f af79 	ble.w	80068b0 <_printf_float+0x250>
 80069be:	2301      	movs	r3, #1
 80069c0:	4652      	mov	r2, sl
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	f43f aeaa 	beq.w	8006722 <_printf_float+0xc2>
 80069ce:	f108 0801 	add.w	r8, r8, #1
 80069d2:	e7ec      	b.n	80069ae <_printf_float+0x34e>
 80069d4:	4613      	mov	r3, r2
 80069d6:	4631      	mov	r1, r6
 80069d8:	4642      	mov	r2, r8
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	d1c0      	bne.n	8006964 <_printf_float+0x304>
 80069e2:	e69e      	b.n	8006722 <_printf_float+0xc2>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	9205      	str	r2, [sp, #20]
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f43f ae97 	beq.w	8006722 <_printf_float+0xc2>
 80069f4:	9a05      	ldr	r2, [sp, #20]
 80069f6:	f10b 0b01 	add.w	fp, fp, #1
 80069fa:	e7b9      	b.n	8006970 <_printf_float+0x310>
 80069fc:	ee18 3a10 	vmov	r3, s16
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1be      	bne.n	800698a <_printf_float+0x32a>
 8006a0c:	e689      	b.n	8006722 <_printf_float+0xc2>
 8006a0e:	9a05      	ldr	r2, [sp, #20]
 8006a10:	464b      	mov	r3, r9
 8006a12:	4442      	add	r2, r8
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d1c1      	bne.n	80069a2 <_printf_float+0x342>
 8006a1e:	e680      	b.n	8006722 <_printf_float+0xc2>
 8006a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a22:	2a01      	cmp	r2, #1
 8006a24:	dc01      	bgt.n	8006a2a <_printf_float+0x3ca>
 8006a26:	07db      	lsls	r3, r3, #31
 8006a28:	d538      	bpl.n	8006a9c <_printf_float+0x43c>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f ae74 	beq.w	8006722 <_printf_float+0xc2>
 8006a3a:	ee18 3a10 	vmov	r3, s16
 8006a3e:	4652      	mov	r2, sl
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f ae6b 	beq.w	8006722 <_printf_float+0xc2>
 8006a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f7fa f840 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a58:	b9d8      	cbnz	r0, 8006a92 <_printf_float+0x432>
 8006a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5c:	f108 0201 	add.w	r2, r8, #1
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d10e      	bne.n	8006a8a <_printf_float+0x42a>
 8006a6c:	e659      	b.n	8006722 <_printf_float+0xc2>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4631      	mov	r1, r6
 8006a74:	4628      	mov	r0, r5
 8006a76:	47b8      	blx	r7
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f43f ae52 	beq.w	8006722 <_printf_float+0xc2>
 8006a7e:	f108 0801 	add.w	r8, r8, #1
 8006a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a84:	3b01      	subs	r3, #1
 8006a86:	4543      	cmp	r3, r8
 8006a88:	dcf1      	bgt.n	8006a6e <_printf_float+0x40e>
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a90:	e6dc      	b.n	800684c <_printf_float+0x1ec>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	f104 0a1a 	add.w	sl, r4, #26
 8006a9a:	e7f2      	b.n	8006a82 <_printf_float+0x422>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	e7df      	b.n	8006a62 <_printf_float+0x402>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae38 	beq.w	8006722 <_printf_float+0xc2>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	4543      	cmp	r3, r8
 8006abe:	dcf0      	bgt.n	8006aa2 <_printf_float+0x442>
 8006ac0:	e6fa      	b.n	80068b8 <_printf_float+0x258>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f104 0919 	add.w	r9, r4, #25
 8006aca:	e7f4      	b.n	8006ab6 <_printf_float+0x456>

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfb8      	it	lt
 8006ae0:	4613      	movlt	r3, r2
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc26      	bgt.n	8006b62 <_printf_common+0x96>
 8006b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b18:	1e13      	subs	r3, r2, #0
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d42b      	bmi.n	8006b7c <_printf_common+0xb0>
 8006b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d01e      	beq.n	8006b70 <_printf_common+0xa4>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	68e5      	ldr	r5, [r4, #12]
 8006b36:	6832      	ldr	r2, [r6, #0]
 8006b38:	f003 0306 	and.w	r3, r3, #6
 8006b3c:	2b04      	cmp	r3, #4
 8006b3e:	bf08      	it	eq
 8006b40:	1aad      	subeq	r5, r5, r2
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	bf0c      	ite	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	2500      	movne	r5, #0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bfc4      	itt	gt
 8006b52:	1a9b      	subgt	r3, r3, r2
 8006b54:	18ed      	addgt	r5, r5, r3
 8006b56:	2600      	movs	r6, #0
 8006b58:	341a      	adds	r4, #26
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d11a      	bne.n	8006b94 <_printf_common+0xc8>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e008      	b.n	8006b74 <_printf_common+0xa8>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4649      	mov	r1, r9
 8006b68:	4638      	mov	r0, r7
 8006b6a:	47c0      	blx	r8
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d103      	bne.n	8006b78 <_printf_common+0xac>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7c6      	b.n	8006b0a <_printf_common+0x3e>
 8006b7c:	18e1      	adds	r1, r4, r3
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	2030      	movs	r0, #48	; 0x30
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b86:	4422      	add	r2, r4
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b90:	3302      	adds	r3, #2
 8006b92:	e7c7      	b.n	8006b24 <_printf_common+0x58>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4622      	mov	r2, r4
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c0      	blx	r8
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0e6      	beq.n	8006b70 <_printf_common+0xa4>
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7d9      	b.n	8006b5a <_printf_common+0x8e>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	460c      	mov	r4, r1
 8006bae:	4691      	mov	r9, r2
 8006bb0:	7e27      	ldrb	r7, [r4, #24]
 8006bb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4680      	mov	r8, r0
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	; 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d8 	beq.w	8006d7a <_printf_i+0x1d2>
 8006bca:	2f58      	cmp	r7, #88	; 0x58
 8006bcc:	f000 80a3 	beq.w	8006d16 <_printf_i+0x16e>
 8006bd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a001      	add	r0, pc, #4	; (adr r0, 8006be8 <_printf_i+0x40>)
 8006be4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d61 	.word	0x08006d61
 8006c18:	08006c85 	.word	0x08006c85
 8006c1c:	08006d43 	.word	0x08006d43
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d83 	.word	0x08006d83
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d4b 	.word	0x08006d4b
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	600a      	str	r2, [r1, #0]
 8006c48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0a3      	b.n	8006d9c <_printf_i+0x1f4>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	6808      	ldr	r0, [r1, #0]
 8006c58:	062e      	lsls	r6, r5, #24
 8006c5a:	f100 0304 	add.w	r3, r0, #4
 8006c5e:	d50a      	bpl.n	8006c76 <_printf_i+0xce>
 8006c60:	6805      	ldr	r5, [r0, #0]
 8006c62:	600b      	str	r3, [r1, #0]
 8006c64:	2d00      	cmp	r5, #0
 8006c66:	da03      	bge.n	8006c70 <_printf_i+0xc8>
 8006c68:	232d      	movs	r3, #45	; 0x2d
 8006c6a:	426d      	negs	r5, r5
 8006c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c70:	485e      	ldr	r0, [pc, #376]	; (8006dec <_printf_i+0x244>)
 8006c72:	230a      	movs	r3, #10
 8006c74:	e019      	b.n	8006caa <_printf_i+0x102>
 8006c76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c7a:	6805      	ldr	r5, [r0, #0]
 8006c7c:	600b      	str	r3, [r1, #0]
 8006c7e:	bf18      	it	ne
 8006c80:	b22d      	sxthne	r5, r5
 8006c82:	e7ef      	b.n	8006c64 <_printf_i+0xbc>
 8006c84:	680b      	ldr	r3, [r1, #0]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	1d18      	adds	r0, r3, #4
 8006c8a:	6008      	str	r0, [r1, #0]
 8006c8c:	0628      	lsls	r0, r5, #24
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0xec>
 8006c90:	681d      	ldr	r5, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0xf2>
 8006c94:	0669      	lsls	r1, r5, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0xe8>
 8006c98:	881d      	ldrh	r5, [r3, #0]
 8006c9a:	4854      	ldr	r0, [pc, #336]	; (8006dec <_printf_i+0x244>)
 8006c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	230a      	movne	r3, #10
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006caa:	6866      	ldr	r6, [r4, #4]
 8006cac:	60a6      	str	r6, [r4, #8]
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	bfa2      	ittt	ge
 8006cb2:	6821      	ldrge	r1, [r4, #0]
 8006cb4:	f021 0104 	bicge.w	r1, r1, #4
 8006cb8:	6021      	strge	r1, [r4, #0]
 8006cba:	b90d      	cbnz	r5, 8006cc0 <_printf_i+0x118>
 8006cbc:	2e00      	cmp	r6, #0
 8006cbe:	d04d      	beq.n	8006d5c <_printf_i+0x1b4>
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cc6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cca:	5dc7      	ldrb	r7, [r0, r7]
 8006ccc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cd0:	462f      	mov	r7, r5
 8006cd2:	42bb      	cmp	r3, r7
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	d9f4      	bls.n	8006cc2 <_printf_i+0x11a>
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10b      	bne.n	8006cf4 <_printf_i+0x14c>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07df      	lsls	r7, r3, #31
 8006ce0:	d508      	bpl.n	8006cf4 <_printf_i+0x14c>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bfde      	ittt	le
 8006cea:	2330      	movle	r3, #48	; 0x30
 8006cec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cf4:	1b92      	subs	r2, r2, r6
 8006cf6:	6122      	str	r2, [r4, #16]
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	aa03      	add	r2, sp, #12
 8006d00:	4621      	mov	r1, r4
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7ff fee2 	bl	8006acc <_printf_common>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d14c      	bne.n	8006da6 <_printf_i+0x1fe>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	4835      	ldr	r0, [pc, #212]	; (8006dec <_printf_i+0x244>)
 8006d18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	680e      	ldr	r6, [r1, #0]
 8006d20:	061f      	lsls	r7, r3, #24
 8006d22:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d26:	600e      	str	r6, [r1, #0]
 8006d28:	d514      	bpl.n	8006d54 <_printf_i+0x1ac>
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	bf44      	itt	mi
 8006d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d32:	6023      	strmi	r3, [r4, #0]
 8006d34:	b91d      	cbnz	r5, 8006d3e <_printf_i+0x196>
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f023 0320 	bic.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	2310      	movs	r3, #16
 8006d40:	e7b0      	b.n	8006ca4 <_printf_i+0xfc>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f043 0320 	orr.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	2378      	movs	r3, #120	; 0x78
 8006d4c:	4828      	ldr	r0, [pc, #160]	; (8006df0 <_printf_i+0x248>)
 8006d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d52:	e7e3      	b.n	8006d1c <_printf_i+0x174>
 8006d54:	065e      	lsls	r6, r3, #25
 8006d56:	bf48      	it	mi
 8006d58:	b2ad      	uxthmi	r5, r5
 8006d5a:	e7e6      	b.n	8006d2a <_printf_i+0x182>
 8006d5c:	4616      	mov	r6, r2
 8006d5e:	e7bb      	b.n	8006cd8 <_printf_i+0x130>
 8006d60:	680b      	ldr	r3, [r1, #0]
 8006d62:	6826      	ldr	r6, [r4, #0]
 8006d64:	6960      	ldr	r0, [r4, #20]
 8006d66:	1d1d      	adds	r5, r3, #4
 8006d68:	600d      	str	r5, [r1, #0]
 8006d6a:	0635      	lsls	r5, r6, #24
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	d501      	bpl.n	8006d74 <_printf_i+0x1cc>
 8006d70:	6018      	str	r0, [r3, #0]
 8006d72:	e002      	b.n	8006d7a <_printf_i+0x1d2>
 8006d74:	0671      	lsls	r1, r6, #25
 8006d76:	d5fb      	bpl.n	8006d70 <_printf_i+0x1c8>
 8006d78:	8018      	strh	r0, [r3, #0]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	4616      	mov	r6, r2
 8006d80:	e7ba      	b.n	8006cf8 <_printf_i+0x150>
 8006d82:	680b      	ldr	r3, [r1, #0]
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	600a      	str	r2, [r1, #0]
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4630      	mov	r0, r6
 8006d90:	f7f9 fa2e 	bl	80001f0 <memchr>
 8006d94:	b108      	cbz	r0, 8006d9a <_printf_i+0x1f2>
 8006d96:	1b80      	subs	r0, r0, r6
 8006d98:	6060      	str	r0, [r4, #4]
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da4:	e7a8      	b.n	8006cf8 <_printf_i+0x150>
 8006da6:	6923      	ldr	r3, [r4, #16]
 8006da8:	4632      	mov	r2, r6
 8006daa:	4649      	mov	r1, r9
 8006dac:	4640      	mov	r0, r8
 8006dae:	47d0      	blx	sl
 8006db0:	3001      	adds	r0, #1
 8006db2:	d0ab      	beq.n	8006d0c <_printf_i+0x164>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	079b      	lsls	r3, r3, #30
 8006db8:	d413      	bmi.n	8006de2 <_printf_i+0x23a>
 8006dba:	68e0      	ldr	r0, [r4, #12]
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	4298      	cmp	r0, r3
 8006dc0:	bfb8      	it	lt
 8006dc2:	4618      	movlt	r0, r3
 8006dc4:	e7a4      	b.n	8006d10 <_printf_i+0x168>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4632      	mov	r2, r6
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	47d0      	blx	sl
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d09b      	beq.n	8006d0c <_printf_i+0x164>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dcf2      	bgt.n	8006dc6 <_printf_i+0x21e>
 8006de0:	e7eb      	b.n	8006dba <_printf_i+0x212>
 8006de2:	2500      	movs	r5, #0
 8006de4:	f104 0619 	add.w	r6, r4, #25
 8006de8:	e7f5      	b.n	8006dd6 <_printf_i+0x22e>
 8006dea:	bf00      	nop
 8006dec:	080098e6 	.word	0x080098e6
 8006df0:	080098f7 	.word	0x080098f7

08006df4 <siprintf>:
 8006df4:	b40e      	push	{r1, r2, r3}
 8006df6:	b500      	push	{lr}
 8006df8:	b09c      	sub	sp, #112	; 0x70
 8006dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8006dfc:	9002      	str	r0, [sp, #8]
 8006dfe:	9006      	str	r0, [sp, #24]
 8006e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e04:	4809      	ldr	r0, [pc, #36]	; (8006e2c <siprintf+0x38>)
 8006e06:	9107      	str	r1, [sp, #28]
 8006e08:	9104      	str	r1, [sp, #16]
 8006e0a:	4909      	ldr	r1, [pc, #36]	; (8006e30 <siprintf+0x3c>)
 8006e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e10:	9105      	str	r1, [sp, #20]
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	a902      	add	r1, sp, #8
 8006e18:	f001 fb40 	bl	800849c <_svfiprintf_r>
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	b01c      	add	sp, #112	; 0x70
 8006e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e28:	b003      	add	sp, #12
 8006e2a:	4770      	bx	lr
 8006e2c:	2000000c 	.word	0x2000000c
 8006e30:	ffff0208 	.word	0xffff0208

08006e34 <strcat>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4602      	mov	r2, r0
 8006e38:	7814      	ldrb	r4, [r2, #0]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	3201      	adds	r2, #1
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	d1fa      	bne.n	8006e38 <strcat+0x4>
 8006e42:	3b01      	subs	r3, #1
 8006e44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e4c:	2a00      	cmp	r2, #0
 8006e4e:	d1f9      	bne.n	8006e44 <strcat+0x10>
 8006e50:	bd10      	pop	{r4, pc}

08006e52 <quorem>:
 8006e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e56:	6903      	ldr	r3, [r0, #16]
 8006e58:	690c      	ldr	r4, [r1, #16]
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	f2c0 8081 	blt.w	8006f64 <quorem+0x112>
 8006e62:	3c01      	subs	r4, #1
 8006e64:	f101 0814 	add.w	r8, r1, #20
 8006e68:	f100 0514 	add.w	r5, r0, #20
 8006e6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e86:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e8a:	d331      	bcc.n	8006ef0 <quorem+0x9e>
 8006e8c:	f04f 0e00 	mov.w	lr, #0
 8006e90:	4640      	mov	r0, r8
 8006e92:	46ac      	mov	ip, r5
 8006e94:	46f2      	mov	sl, lr
 8006e96:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e9a:	b293      	uxth	r3, r2
 8006e9c:	fb06 e303 	mla	r3, r6, r3, lr
 8006ea0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8006eaa:	0c12      	lsrs	r2, r2, #16
 8006eac:	f8dc a000 	ldr.w	sl, [ip]
 8006eb0:	fb06 e202 	mla	r2, r6, r2, lr
 8006eb4:	fa13 f38a 	uxtah	r3, r3, sl
 8006eb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ebc:	fa1f fa82 	uxth.w	sl, r2
 8006ec0:	f8dc 2000 	ldr.w	r2, [ip]
 8006ec4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed2:	4581      	cmp	r9, r0
 8006ed4:	f84c 3b04 	str.w	r3, [ip], #4
 8006ed8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006edc:	d2db      	bcs.n	8006e96 <quorem+0x44>
 8006ede:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ee2:	b92b      	cbnz	r3, 8006ef0 <quorem+0x9e>
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	3b04      	subs	r3, #4
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	d32e      	bcc.n	8006f4c <quorem+0xfa>
 8006eee:	613c      	str	r4, [r7, #16]
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f001 f8bd 	bl	8008070 <__mcmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	db24      	blt.n	8006f44 <quorem+0xf2>
 8006efa:	3601      	adds	r6, #1
 8006efc:	4628      	mov	r0, r5
 8006efe:	f04f 0c00 	mov.w	ip, #0
 8006f02:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f06:	f8d0 e000 	ldr.w	lr, [r0]
 8006f0a:	b293      	uxth	r3, r2
 8006f0c:	ebac 0303 	sub.w	r3, ip, r3
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	fa13 f38e 	uxtah	r3, r3, lr
 8006f16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f24:	45c1      	cmp	r9, r8
 8006f26:	f840 3b04 	str.w	r3, [r0], #4
 8006f2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f2e:	d2e8      	bcs.n	8006f02 <quorem+0xb0>
 8006f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f38:	b922      	cbnz	r2, 8006f44 <quorem+0xf2>
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	d30a      	bcc.n	8006f58 <quorem+0x106>
 8006f42:	613c      	str	r4, [r7, #16]
 8006f44:	4630      	mov	r0, r6
 8006f46:	b003      	add	sp, #12
 8006f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4c:	6812      	ldr	r2, [r2, #0]
 8006f4e:	3b04      	subs	r3, #4
 8006f50:	2a00      	cmp	r2, #0
 8006f52:	d1cc      	bne.n	8006eee <quorem+0x9c>
 8006f54:	3c01      	subs	r4, #1
 8006f56:	e7c7      	b.n	8006ee8 <quorem+0x96>
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	3b04      	subs	r3, #4
 8006f5c:	2a00      	cmp	r2, #0
 8006f5e:	d1f0      	bne.n	8006f42 <quorem+0xf0>
 8006f60:	3c01      	subs	r4, #1
 8006f62:	e7eb      	b.n	8006f3c <quorem+0xea>
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7ee      	b.n	8006f46 <quorem+0xf4>

08006f68 <_dtoa_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	ed2d 8b02 	vpush	{d8}
 8006f70:	ec57 6b10 	vmov	r6, r7, d0
 8006f74:	b095      	sub	sp, #84	; 0x54
 8006f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f7c:	9105      	str	r1, [sp, #20]
 8006f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006f82:	4604      	mov	r4, r0
 8006f84:	9209      	str	r2, [sp, #36]	; 0x24
 8006f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f88:	b975      	cbnz	r5, 8006fa8 <_dtoa_r+0x40>
 8006f8a:	2010      	movs	r0, #16
 8006f8c:	f000 fddc 	bl	8007b48 <malloc>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6260      	str	r0, [r4, #36]	; 0x24
 8006f94:	b920      	cbnz	r0, 8006fa0 <_dtoa_r+0x38>
 8006f96:	4bb2      	ldr	r3, [pc, #712]	; (8007260 <_dtoa_r+0x2f8>)
 8006f98:	21ea      	movs	r1, #234	; 0xea
 8006f9a:	48b2      	ldr	r0, [pc, #712]	; (8007264 <_dtoa_r+0x2fc>)
 8006f9c:	f001 fb8e 	bl	80086bc <__assert_func>
 8006fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fa4:	6005      	str	r5, [r0, #0]
 8006fa6:	60c5      	str	r5, [r0, #12]
 8006fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006faa:	6819      	ldr	r1, [r3, #0]
 8006fac:	b151      	cbz	r1, 8006fc4 <_dtoa_r+0x5c>
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	604a      	str	r2, [r1, #4]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4093      	lsls	r3, r2
 8006fb6:	608b      	str	r3, [r1, #8]
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f000 fe1b 	bl	8007bf4 <_Bfree>
 8006fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	1e3b      	subs	r3, r7, #0
 8006fc6:	bfb9      	ittee	lt
 8006fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	9303      	strlt	r3, [sp, #12]
 8006fce:	2300      	movge	r3, #0
 8006fd0:	f8c8 3000 	strge.w	r3, [r8]
 8006fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006fd8:	4ba3      	ldr	r3, [pc, #652]	; (8007268 <_dtoa_r+0x300>)
 8006fda:	bfbc      	itt	lt
 8006fdc:	2201      	movlt	r2, #1
 8006fde:	f8c8 2000 	strlt.w	r2, [r8]
 8006fe2:	ea33 0309 	bics.w	r3, r3, r9
 8006fe6:	d11b      	bne.n	8007020 <_dtoa_r+0xb8>
 8006fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ff4:	4333      	orrs	r3, r6
 8006ff6:	f000 857a 	beq.w	8007aee <_dtoa_r+0xb86>
 8006ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ffc:	b963      	cbnz	r3, 8007018 <_dtoa_r+0xb0>
 8006ffe:	4b9b      	ldr	r3, [pc, #620]	; (800726c <_dtoa_r+0x304>)
 8007000:	e024      	b.n	800704c <_dtoa_r+0xe4>
 8007002:	4b9b      	ldr	r3, [pc, #620]	; (8007270 <_dtoa_r+0x308>)
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	3308      	adds	r3, #8
 8007008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	9800      	ldr	r0, [sp, #0]
 800700e:	b015      	add	sp, #84	; 0x54
 8007010:	ecbd 8b02 	vpop	{d8}
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	4b94      	ldr	r3, [pc, #592]	; (800726c <_dtoa_r+0x304>)
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	3303      	adds	r3, #3
 800701e:	e7f3      	b.n	8007008 <_dtoa_r+0xa0>
 8007020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	ec51 0b17 	vmov	r0, r1, d7
 800702a:	2300      	movs	r3, #0
 800702c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007030:	f7f9 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007034:	4680      	mov	r8, r0
 8007036:	b158      	cbz	r0, 8007050 <_dtoa_r+0xe8>
 8007038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800703a:	2301      	movs	r3, #1
 800703c:	6013      	str	r3, [r2, #0]
 800703e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 8551 	beq.w	8007ae8 <_dtoa_r+0xb80>
 8007046:	488b      	ldr	r0, [pc, #556]	; (8007274 <_dtoa_r+0x30c>)
 8007048:	6018      	str	r0, [r3, #0]
 800704a:	1e43      	subs	r3, r0, #1
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	e7dd      	b.n	800700c <_dtoa_r+0xa4>
 8007050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007054:	aa12      	add	r2, sp, #72	; 0x48
 8007056:	a913      	add	r1, sp, #76	; 0x4c
 8007058:	4620      	mov	r0, r4
 800705a:	f001 f8ad 	bl	80081b8 <__d2b>
 800705e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007062:	4683      	mov	fp, r0
 8007064:	2d00      	cmp	r5, #0
 8007066:	d07c      	beq.n	8007162 <_dtoa_r+0x1fa>
 8007068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800706a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800706e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800707a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800707e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007082:	4b7d      	ldr	r3, [pc, #500]	; (8007278 <_dtoa_r+0x310>)
 8007084:	2200      	movs	r2, #0
 8007086:	4630      	mov	r0, r6
 8007088:	4639      	mov	r1, r7
 800708a:	f7f9 f905 	bl	8000298 <__aeabi_dsub>
 800708e:	a36e      	add	r3, pc, #440	; (adr r3, 8007248 <_dtoa_r+0x2e0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 fab8 	bl	8000608 <__aeabi_dmul>
 8007098:	a36d      	add	r3, pc, #436	; (adr r3, 8007250 <_dtoa_r+0x2e8>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 f8fd 	bl	800029c <__adddf3>
 80070a2:	4606      	mov	r6, r0
 80070a4:	4628      	mov	r0, r5
 80070a6:	460f      	mov	r7, r1
 80070a8:	f7f9 fa44 	bl	8000534 <__aeabi_i2d>
 80070ac:	a36a      	add	r3, pc, #424	; (adr r3, 8007258 <_dtoa_r+0x2f0>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 faa9 	bl	8000608 <__aeabi_dmul>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	4630      	mov	r0, r6
 80070bc:	4639      	mov	r1, r7
 80070be:	f7f9 f8ed 	bl	800029c <__adddf3>
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	f7f9 fd4f 	bl	8000b68 <__aeabi_d2iz>
 80070ca:	2200      	movs	r2, #0
 80070cc:	4682      	mov	sl, r0
 80070ce:	2300      	movs	r3, #0
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd0a 	bl	8000aec <__aeabi_dcmplt>
 80070d8:	b148      	cbz	r0, 80070ee <_dtoa_r+0x186>
 80070da:	4650      	mov	r0, sl
 80070dc:	f7f9 fa2a 	bl	8000534 <__aeabi_i2d>
 80070e0:	4632      	mov	r2, r6
 80070e2:	463b      	mov	r3, r7
 80070e4:	f7f9 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e8:	b908      	cbnz	r0, 80070ee <_dtoa_r+0x186>
 80070ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ee:	f1ba 0f16 	cmp.w	sl, #22
 80070f2:	d854      	bhi.n	800719e <_dtoa_r+0x236>
 80070f4:	4b61      	ldr	r3, [pc, #388]	; (800727c <_dtoa_r+0x314>)
 80070f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007102:	f7f9 fcf3 	bl	8000aec <__aeabi_dcmplt>
 8007106:	2800      	cmp	r0, #0
 8007108:	d04b      	beq.n	80071a2 <_dtoa_r+0x23a>
 800710a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800710e:	2300      	movs	r3, #0
 8007110:	930e      	str	r3, [sp, #56]	; 0x38
 8007112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007114:	1b5d      	subs	r5, r3, r5
 8007116:	1e6b      	subs	r3, r5, #1
 8007118:	9304      	str	r3, [sp, #16]
 800711a:	bf43      	ittte	mi
 800711c:	2300      	movmi	r3, #0
 800711e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007122:	9304      	strmi	r3, [sp, #16]
 8007124:	f04f 0800 	movpl.w	r8, #0
 8007128:	f1ba 0f00 	cmp.w	sl, #0
 800712c:	db3b      	blt.n	80071a6 <_dtoa_r+0x23e>
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007134:	4453      	add	r3, sl
 8007136:	9304      	str	r3, [sp, #16]
 8007138:	2300      	movs	r3, #0
 800713a:	9306      	str	r3, [sp, #24]
 800713c:	9b05      	ldr	r3, [sp, #20]
 800713e:	2b09      	cmp	r3, #9
 8007140:	d869      	bhi.n	8007216 <_dtoa_r+0x2ae>
 8007142:	2b05      	cmp	r3, #5
 8007144:	bfc4      	itt	gt
 8007146:	3b04      	subgt	r3, #4
 8007148:	9305      	strgt	r3, [sp, #20]
 800714a:	9b05      	ldr	r3, [sp, #20]
 800714c:	f1a3 0302 	sub.w	r3, r3, #2
 8007150:	bfcc      	ite	gt
 8007152:	2500      	movgt	r5, #0
 8007154:	2501      	movle	r5, #1
 8007156:	2b03      	cmp	r3, #3
 8007158:	d869      	bhi.n	800722e <_dtoa_r+0x2c6>
 800715a:	e8df f003 	tbb	[pc, r3]
 800715e:	4e2c      	.short	0x4e2c
 8007160:	5a4c      	.short	0x5a4c
 8007162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007166:	441d      	add	r5, r3
 8007168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800716c:	2b20      	cmp	r3, #32
 800716e:	bfc1      	itttt	gt
 8007170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007178:	fa09 f303 	lslgt.w	r3, r9, r3
 800717c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007180:	bfda      	itte	le
 8007182:	f1c3 0320 	rsble	r3, r3, #32
 8007186:	fa06 f003 	lslle.w	r0, r6, r3
 800718a:	4318      	orrgt	r0, r3
 800718c:	f7f9 f9c2 	bl	8000514 <__aeabi_ui2d>
 8007190:	2301      	movs	r3, #1
 8007192:	4606      	mov	r6, r0
 8007194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007198:	3d01      	subs	r5, #1
 800719a:	9310      	str	r3, [sp, #64]	; 0x40
 800719c:	e771      	b.n	8007082 <_dtoa_r+0x11a>
 800719e:	2301      	movs	r3, #1
 80071a0:	e7b6      	b.n	8007110 <_dtoa_r+0x1a8>
 80071a2:	900e      	str	r0, [sp, #56]	; 0x38
 80071a4:	e7b5      	b.n	8007112 <_dtoa_r+0x1aa>
 80071a6:	f1ca 0300 	rsb	r3, sl, #0
 80071aa:	9306      	str	r3, [sp, #24]
 80071ac:	2300      	movs	r3, #0
 80071ae:	eba8 080a 	sub.w	r8, r8, sl
 80071b2:	930d      	str	r3, [sp, #52]	; 0x34
 80071b4:	e7c2      	b.n	800713c <_dtoa_r+0x1d4>
 80071b6:	2300      	movs	r3, #0
 80071b8:	9308      	str	r3, [sp, #32]
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dc39      	bgt.n	8007234 <_dtoa_r+0x2cc>
 80071c0:	f04f 0901 	mov.w	r9, #1
 80071c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80071c8:	464b      	mov	r3, r9
 80071ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80071ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80071d0:	2200      	movs	r2, #0
 80071d2:	6042      	str	r2, [r0, #4]
 80071d4:	2204      	movs	r2, #4
 80071d6:	f102 0614 	add.w	r6, r2, #20
 80071da:	429e      	cmp	r6, r3
 80071dc:	6841      	ldr	r1, [r0, #4]
 80071de:	d92f      	bls.n	8007240 <_dtoa_r+0x2d8>
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fcc7 	bl	8007b74 <_Balloc>
 80071e6:	9000      	str	r0, [sp, #0]
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d14b      	bne.n	8007284 <_dtoa_r+0x31c>
 80071ec:	4b24      	ldr	r3, [pc, #144]	; (8007280 <_dtoa_r+0x318>)
 80071ee:	4602      	mov	r2, r0
 80071f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071f4:	e6d1      	b.n	8006f9a <_dtoa_r+0x32>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e7de      	b.n	80071b8 <_dtoa_r+0x250>
 80071fa:	2300      	movs	r3, #0
 80071fc:	9308      	str	r3, [sp, #32]
 80071fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007200:	eb0a 0903 	add.w	r9, sl, r3
 8007204:	f109 0301 	add.w	r3, r9, #1
 8007208:	2b01      	cmp	r3, #1
 800720a:	9301      	str	r3, [sp, #4]
 800720c:	bfb8      	it	lt
 800720e:	2301      	movlt	r3, #1
 8007210:	e7dd      	b.n	80071ce <_dtoa_r+0x266>
 8007212:	2301      	movs	r3, #1
 8007214:	e7f2      	b.n	80071fc <_dtoa_r+0x294>
 8007216:	2501      	movs	r5, #1
 8007218:	2300      	movs	r3, #0
 800721a:	9305      	str	r3, [sp, #20]
 800721c:	9508      	str	r5, [sp, #32]
 800721e:	f04f 39ff 	mov.w	r9, #4294967295
 8007222:	2200      	movs	r2, #0
 8007224:	f8cd 9004 	str.w	r9, [sp, #4]
 8007228:	2312      	movs	r3, #18
 800722a:	9209      	str	r2, [sp, #36]	; 0x24
 800722c:	e7cf      	b.n	80071ce <_dtoa_r+0x266>
 800722e:	2301      	movs	r3, #1
 8007230:	9308      	str	r3, [sp, #32]
 8007232:	e7f4      	b.n	800721e <_dtoa_r+0x2b6>
 8007234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007238:	f8cd 9004 	str.w	r9, [sp, #4]
 800723c:	464b      	mov	r3, r9
 800723e:	e7c6      	b.n	80071ce <_dtoa_r+0x266>
 8007240:	3101      	adds	r1, #1
 8007242:	6041      	str	r1, [r0, #4]
 8007244:	0052      	lsls	r2, r2, #1
 8007246:	e7c6      	b.n	80071d6 <_dtoa_r+0x26e>
 8007248:	636f4361 	.word	0x636f4361
 800724c:	3fd287a7 	.word	0x3fd287a7
 8007250:	8b60c8b3 	.word	0x8b60c8b3
 8007254:	3fc68a28 	.word	0x3fc68a28
 8007258:	509f79fb 	.word	0x509f79fb
 800725c:	3fd34413 	.word	0x3fd34413
 8007260:	08009915 	.word	0x08009915
 8007264:	0800992c 	.word	0x0800992c
 8007268:	7ff00000 	.word	0x7ff00000
 800726c:	08009911 	.word	0x08009911
 8007270:	08009908 	.word	0x08009908
 8007274:	080098e5 	.word	0x080098e5
 8007278:	3ff80000 	.word	0x3ff80000
 800727c:	08009a28 	.word	0x08009a28
 8007280:	0800998b 	.word	0x0800998b
 8007284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007286:	9a00      	ldr	r2, [sp, #0]
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	2b0e      	cmp	r3, #14
 800728e:	f200 80ad 	bhi.w	80073ec <_dtoa_r+0x484>
 8007292:	2d00      	cmp	r5, #0
 8007294:	f000 80aa 	beq.w	80073ec <_dtoa_r+0x484>
 8007298:	f1ba 0f00 	cmp.w	sl, #0
 800729c:	dd36      	ble.n	800730c <_dtoa_r+0x3a4>
 800729e:	4ac3      	ldr	r2, [pc, #780]	; (80075ac <_dtoa_r+0x644>)
 80072a0:	f00a 030f 	and.w	r3, sl, #15
 80072a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072a8:	ed93 7b00 	vldr	d7, [r3]
 80072ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072b4:	eeb0 8a47 	vmov.f32	s16, s14
 80072b8:	eef0 8a67 	vmov.f32	s17, s15
 80072bc:	d016      	beq.n	80072ec <_dtoa_r+0x384>
 80072be:	4bbc      	ldr	r3, [pc, #752]	; (80075b0 <_dtoa_r+0x648>)
 80072c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072c8:	f7f9 fac8 	bl	800085c <__aeabi_ddiv>
 80072cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d0:	f007 070f 	and.w	r7, r7, #15
 80072d4:	2503      	movs	r5, #3
 80072d6:	4eb6      	ldr	r6, [pc, #728]	; (80075b0 <_dtoa_r+0x648>)
 80072d8:	b957      	cbnz	r7, 80072f0 <_dtoa_r+0x388>
 80072da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072de:	ec53 2b18 	vmov	r2, r3, d8
 80072e2:	f7f9 fabb 	bl	800085c <__aeabi_ddiv>
 80072e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ea:	e029      	b.n	8007340 <_dtoa_r+0x3d8>
 80072ec:	2502      	movs	r5, #2
 80072ee:	e7f2      	b.n	80072d6 <_dtoa_r+0x36e>
 80072f0:	07f9      	lsls	r1, r7, #31
 80072f2:	d508      	bpl.n	8007306 <_dtoa_r+0x39e>
 80072f4:	ec51 0b18 	vmov	r0, r1, d8
 80072f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072fc:	f7f9 f984 	bl	8000608 <__aeabi_dmul>
 8007300:	ec41 0b18 	vmov	d8, r0, r1
 8007304:	3501      	adds	r5, #1
 8007306:	107f      	asrs	r7, r7, #1
 8007308:	3608      	adds	r6, #8
 800730a:	e7e5      	b.n	80072d8 <_dtoa_r+0x370>
 800730c:	f000 80a6 	beq.w	800745c <_dtoa_r+0x4f4>
 8007310:	f1ca 0600 	rsb	r6, sl, #0
 8007314:	4ba5      	ldr	r3, [pc, #660]	; (80075ac <_dtoa_r+0x644>)
 8007316:	4fa6      	ldr	r7, [pc, #664]	; (80075b0 <_dtoa_r+0x648>)
 8007318:	f006 020f 	and.w	r2, r6, #15
 800731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007328:	f7f9 f96e 	bl	8000608 <__aeabi_dmul>
 800732c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007330:	1136      	asrs	r6, r6, #4
 8007332:	2300      	movs	r3, #0
 8007334:	2502      	movs	r5, #2
 8007336:	2e00      	cmp	r6, #0
 8007338:	f040 8085 	bne.w	8007446 <_dtoa_r+0x4de>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1d2      	bne.n	80072e6 <_dtoa_r+0x37e>
 8007340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 808c 	beq.w	8007460 <_dtoa_r+0x4f8>
 8007348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800734c:	4b99      	ldr	r3, [pc, #612]	; (80075b4 <_dtoa_r+0x64c>)
 800734e:	2200      	movs	r2, #0
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f9 fbca 	bl	8000aec <__aeabi_dcmplt>
 8007358:	2800      	cmp	r0, #0
 800735a:	f000 8081 	beq.w	8007460 <_dtoa_r+0x4f8>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d07d      	beq.n	8007460 <_dtoa_r+0x4f8>
 8007364:	f1b9 0f00 	cmp.w	r9, #0
 8007368:	dd3c      	ble.n	80073e4 <_dtoa_r+0x47c>
 800736a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	2200      	movs	r2, #0
 8007372:	4b91      	ldr	r3, [pc, #580]	; (80075b8 <_dtoa_r+0x650>)
 8007374:	4630      	mov	r0, r6
 8007376:	4639      	mov	r1, r7
 8007378:	f7f9 f946 	bl	8000608 <__aeabi_dmul>
 800737c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007380:	3501      	adds	r5, #1
 8007382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800738a:	4628      	mov	r0, r5
 800738c:	f7f9 f8d2 	bl	8000534 <__aeabi_i2d>
 8007390:	4632      	mov	r2, r6
 8007392:	463b      	mov	r3, r7
 8007394:	f7f9 f938 	bl	8000608 <__aeabi_dmul>
 8007398:	4b88      	ldr	r3, [pc, #544]	; (80075bc <_dtoa_r+0x654>)
 800739a:	2200      	movs	r2, #0
 800739c:	f7f8 ff7e 	bl	800029c <__adddf3>
 80073a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d15c      	bne.n	800746a <_dtoa_r+0x502>
 80073b0:	4b83      	ldr	r3, [pc, #524]	; (80075c0 <_dtoa_r+0x658>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f8 ff6e 	bl	8000298 <__aeabi_dsub>
 80073bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073c0:	4606      	mov	r6, r0
 80073c2:	460f      	mov	r7, r1
 80073c4:	f7f9 fbb0 	bl	8000b28 <__aeabi_dcmpgt>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	f040 8296 	bne.w	80078fa <_dtoa_r+0x992>
 80073ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80073d2:	4630      	mov	r0, r6
 80073d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073d8:	4639      	mov	r1, r7
 80073da:	f7f9 fb87 	bl	8000aec <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f040 8288 	bne.w	80078f4 <_dtoa_r+0x98c>
 80073e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f2c0 8158 	blt.w	80076a4 <_dtoa_r+0x73c>
 80073f4:	f1ba 0f0e 	cmp.w	sl, #14
 80073f8:	f300 8154 	bgt.w	80076a4 <_dtoa_r+0x73c>
 80073fc:	4b6b      	ldr	r3, [pc, #428]	; (80075ac <_dtoa_r+0x644>)
 80073fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	f280 80e3 	bge.w	80075d4 <_dtoa_r+0x66c>
 800740e:	9b01      	ldr	r3, [sp, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	f300 80df 	bgt.w	80075d4 <_dtoa_r+0x66c>
 8007416:	f040 826d 	bne.w	80078f4 <_dtoa_r+0x98c>
 800741a:	4b69      	ldr	r3, [pc, #420]	; (80075c0 <_dtoa_r+0x658>)
 800741c:	2200      	movs	r2, #0
 800741e:	4640      	mov	r0, r8
 8007420:	4649      	mov	r1, r9
 8007422:	f7f9 f8f1 	bl	8000608 <__aeabi_dmul>
 8007426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800742a:	f7f9 fb73 	bl	8000b14 <__aeabi_dcmpge>
 800742e:	9e01      	ldr	r6, [sp, #4]
 8007430:	4637      	mov	r7, r6
 8007432:	2800      	cmp	r0, #0
 8007434:	f040 8243 	bne.w	80078be <_dtoa_r+0x956>
 8007438:	9d00      	ldr	r5, [sp, #0]
 800743a:	2331      	movs	r3, #49	; 0x31
 800743c:	f805 3b01 	strb.w	r3, [r5], #1
 8007440:	f10a 0a01 	add.w	sl, sl, #1
 8007444:	e23f      	b.n	80078c6 <_dtoa_r+0x95e>
 8007446:	07f2      	lsls	r2, r6, #31
 8007448:	d505      	bpl.n	8007456 <_dtoa_r+0x4ee>
 800744a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744e:	f7f9 f8db 	bl	8000608 <__aeabi_dmul>
 8007452:	3501      	adds	r5, #1
 8007454:	2301      	movs	r3, #1
 8007456:	1076      	asrs	r6, r6, #1
 8007458:	3708      	adds	r7, #8
 800745a:	e76c      	b.n	8007336 <_dtoa_r+0x3ce>
 800745c:	2502      	movs	r5, #2
 800745e:	e76f      	b.n	8007340 <_dtoa_r+0x3d8>
 8007460:	9b01      	ldr	r3, [sp, #4]
 8007462:	f8cd a01c 	str.w	sl, [sp, #28]
 8007466:	930c      	str	r3, [sp, #48]	; 0x30
 8007468:	e78d      	b.n	8007386 <_dtoa_r+0x41e>
 800746a:	9900      	ldr	r1, [sp, #0]
 800746c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800746e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007470:	4b4e      	ldr	r3, [pc, #312]	; (80075ac <_dtoa_r+0x644>)
 8007472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007476:	4401      	add	r1, r0
 8007478:	9102      	str	r1, [sp, #8]
 800747a:	9908      	ldr	r1, [sp, #32]
 800747c:	eeb0 8a47 	vmov.f32	s16, s14
 8007480:	eef0 8a67 	vmov.f32	s17, s15
 8007484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800748c:	2900      	cmp	r1, #0
 800748e:	d045      	beq.n	800751c <_dtoa_r+0x5b4>
 8007490:	494c      	ldr	r1, [pc, #304]	; (80075c4 <_dtoa_r+0x65c>)
 8007492:	2000      	movs	r0, #0
 8007494:	f7f9 f9e2 	bl	800085c <__aeabi_ddiv>
 8007498:	ec53 2b18 	vmov	r2, r3, d8
 800749c:	f7f8 fefc 	bl	8000298 <__aeabi_dsub>
 80074a0:	9d00      	ldr	r5, [sp, #0]
 80074a2:	ec41 0b18 	vmov	d8, r0, r1
 80074a6:	4639      	mov	r1, r7
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7f9 fb5d 	bl	8000b68 <__aeabi_d2iz>
 80074ae:	900c      	str	r0, [sp, #48]	; 0x30
 80074b0:	f7f9 f840 	bl	8000534 <__aeabi_i2d>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4630      	mov	r0, r6
 80074ba:	4639      	mov	r1, r7
 80074bc:	f7f8 feec 	bl	8000298 <__aeabi_dsub>
 80074c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074c2:	3330      	adds	r3, #48	; 0x30
 80074c4:	f805 3b01 	strb.w	r3, [r5], #1
 80074c8:	ec53 2b18 	vmov	r2, r3, d8
 80074cc:	4606      	mov	r6, r0
 80074ce:	460f      	mov	r7, r1
 80074d0:	f7f9 fb0c 	bl	8000aec <__aeabi_dcmplt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d165      	bne.n	80075a4 <_dtoa_r+0x63c>
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4935      	ldr	r1, [pc, #212]	; (80075b4 <_dtoa_r+0x64c>)
 80074de:	2000      	movs	r0, #0
 80074e0:	f7f8 feda 	bl	8000298 <__aeabi_dsub>
 80074e4:	ec53 2b18 	vmov	r2, r3, d8
 80074e8:	f7f9 fb00 	bl	8000aec <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f040 80b9 	bne.w	8007664 <_dtoa_r+0x6fc>
 80074f2:	9b02      	ldr	r3, [sp, #8]
 80074f4:	429d      	cmp	r5, r3
 80074f6:	f43f af75 	beq.w	80073e4 <_dtoa_r+0x47c>
 80074fa:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <_dtoa_r+0x650>)
 80074fc:	ec51 0b18 	vmov	r0, r1, d8
 8007500:	2200      	movs	r2, #0
 8007502:	f7f9 f881 	bl	8000608 <__aeabi_dmul>
 8007506:	4b2c      	ldr	r3, [pc, #176]	; (80075b8 <_dtoa_r+0x650>)
 8007508:	ec41 0b18 	vmov	d8, r0, r1
 800750c:	2200      	movs	r2, #0
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f9 f879 	bl	8000608 <__aeabi_dmul>
 8007516:	4606      	mov	r6, r0
 8007518:	460f      	mov	r7, r1
 800751a:	e7c4      	b.n	80074a6 <_dtoa_r+0x53e>
 800751c:	ec51 0b17 	vmov	r0, r1, d7
 8007520:	f7f9 f872 	bl	8000608 <__aeabi_dmul>
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	9d00      	ldr	r5, [sp, #0]
 8007528:	930c      	str	r3, [sp, #48]	; 0x30
 800752a:	ec41 0b18 	vmov	d8, r0, r1
 800752e:	4639      	mov	r1, r7
 8007530:	4630      	mov	r0, r6
 8007532:	f7f9 fb19 	bl	8000b68 <__aeabi_d2iz>
 8007536:	9011      	str	r0, [sp, #68]	; 0x44
 8007538:	f7f8 fffc 	bl	8000534 <__aeabi_i2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	4630      	mov	r0, r6
 8007542:	4639      	mov	r1, r7
 8007544:	f7f8 fea8 	bl	8000298 <__aeabi_dsub>
 8007548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800754a:	3330      	adds	r3, #48	; 0x30
 800754c:	f805 3b01 	strb.w	r3, [r5], #1
 8007550:	9b02      	ldr	r3, [sp, #8]
 8007552:	429d      	cmp	r5, r3
 8007554:	4606      	mov	r6, r0
 8007556:	460f      	mov	r7, r1
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	d134      	bne.n	80075c8 <_dtoa_r+0x660>
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <_dtoa_r+0x65c>)
 8007560:	ec51 0b18 	vmov	r0, r1, d8
 8007564:	f7f8 fe9a 	bl	800029c <__adddf3>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4630      	mov	r0, r6
 800756e:	4639      	mov	r1, r7
 8007570:	f7f9 fada 	bl	8000b28 <__aeabi_dcmpgt>
 8007574:	2800      	cmp	r0, #0
 8007576:	d175      	bne.n	8007664 <_dtoa_r+0x6fc>
 8007578:	ec53 2b18 	vmov	r2, r3, d8
 800757c:	4911      	ldr	r1, [pc, #68]	; (80075c4 <_dtoa_r+0x65c>)
 800757e:	2000      	movs	r0, #0
 8007580:	f7f8 fe8a 	bl	8000298 <__aeabi_dsub>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 faae 	bl	8000aec <__aeabi_dcmplt>
 8007590:	2800      	cmp	r0, #0
 8007592:	f43f af27 	beq.w	80073e4 <_dtoa_r+0x47c>
 8007596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007598:	1e6b      	subs	r3, r5, #1
 800759a:	930c      	str	r3, [sp, #48]	; 0x30
 800759c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075a0:	2b30      	cmp	r3, #48	; 0x30
 80075a2:	d0f8      	beq.n	8007596 <_dtoa_r+0x62e>
 80075a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075a8:	e04a      	b.n	8007640 <_dtoa_r+0x6d8>
 80075aa:	bf00      	nop
 80075ac:	08009a28 	.word	0x08009a28
 80075b0:	08009a00 	.word	0x08009a00
 80075b4:	3ff00000 	.word	0x3ff00000
 80075b8:	40240000 	.word	0x40240000
 80075bc:	401c0000 	.word	0x401c0000
 80075c0:	40140000 	.word	0x40140000
 80075c4:	3fe00000 	.word	0x3fe00000
 80075c8:	4baf      	ldr	r3, [pc, #700]	; (8007888 <_dtoa_r+0x920>)
 80075ca:	f7f9 f81d 	bl	8000608 <__aeabi_dmul>
 80075ce:	4606      	mov	r6, r0
 80075d0:	460f      	mov	r7, r1
 80075d2:	e7ac      	b.n	800752e <_dtoa_r+0x5c6>
 80075d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075d8:	9d00      	ldr	r5, [sp, #0]
 80075da:	4642      	mov	r2, r8
 80075dc:	464b      	mov	r3, r9
 80075de:	4630      	mov	r0, r6
 80075e0:	4639      	mov	r1, r7
 80075e2:	f7f9 f93b 	bl	800085c <__aeabi_ddiv>
 80075e6:	f7f9 fabf 	bl	8000b68 <__aeabi_d2iz>
 80075ea:	9002      	str	r0, [sp, #8]
 80075ec:	f7f8 ffa2 	bl	8000534 <__aeabi_i2d>
 80075f0:	4642      	mov	r2, r8
 80075f2:	464b      	mov	r3, r9
 80075f4:	f7f9 f808 	bl	8000608 <__aeabi_dmul>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4630      	mov	r0, r6
 80075fe:	4639      	mov	r1, r7
 8007600:	f7f8 fe4a 	bl	8000298 <__aeabi_dsub>
 8007604:	9e02      	ldr	r6, [sp, #8]
 8007606:	9f01      	ldr	r7, [sp, #4]
 8007608:	3630      	adds	r6, #48	; 0x30
 800760a:	f805 6b01 	strb.w	r6, [r5], #1
 800760e:	9e00      	ldr	r6, [sp, #0]
 8007610:	1bae      	subs	r6, r5, r6
 8007612:	42b7      	cmp	r7, r6
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	d137      	bne.n	800768a <_dtoa_r+0x722>
 800761a:	f7f8 fe3f 	bl	800029c <__adddf3>
 800761e:	4642      	mov	r2, r8
 8007620:	464b      	mov	r3, r9
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	f7f9 fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 800762a:	b9c8      	cbnz	r0, 8007660 <_dtoa_r+0x6f8>
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f9 fa50 	bl	8000ad8 <__aeabi_dcmpeq>
 8007638:	b110      	cbz	r0, 8007640 <_dtoa_r+0x6d8>
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	07d9      	lsls	r1, r3, #31
 800763e:	d40f      	bmi.n	8007660 <_dtoa_r+0x6f8>
 8007640:	4620      	mov	r0, r4
 8007642:	4659      	mov	r1, fp
 8007644:	f000 fad6 	bl	8007bf4 <_Bfree>
 8007648:	2300      	movs	r3, #0
 800764a:	702b      	strb	r3, [r5, #0]
 800764c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800764e:	f10a 0001 	add.w	r0, sl, #1
 8007652:	6018      	str	r0, [r3, #0]
 8007654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007656:	2b00      	cmp	r3, #0
 8007658:	f43f acd8 	beq.w	800700c <_dtoa_r+0xa4>
 800765c:	601d      	str	r5, [r3, #0]
 800765e:	e4d5      	b.n	800700c <_dtoa_r+0xa4>
 8007660:	f8cd a01c 	str.w	sl, [sp, #28]
 8007664:	462b      	mov	r3, r5
 8007666:	461d      	mov	r5, r3
 8007668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800766c:	2a39      	cmp	r2, #57	; 0x39
 800766e:	d108      	bne.n	8007682 <_dtoa_r+0x71a>
 8007670:	9a00      	ldr	r2, [sp, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d1f7      	bne.n	8007666 <_dtoa_r+0x6fe>
 8007676:	9a07      	ldr	r2, [sp, #28]
 8007678:	9900      	ldr	r1, [sp, #0]
 800767a:	3201      	adds	r2, #1
 800767c:	9207      	str	r2, [sp, #28]
 800767e:	2230      	movs	r2, #48	; 0x30
 8007680:	700a      	strb	r2, [r1, #0]
 8007682:	781a      	ldrb	r2, [r3, #0]
 8007684:	3201      	adds	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	e78c      	b.n	80075a4 <_dtoa_r+0x63c>
 800768a:	4b7f      	ldr	r3, [pc, #508]	; (8007888 <_dtoa_r+0x920>)
 800768c:	2200      	movs	r2, #0
 800768e:	f7f8 ffbb 	bl	8000608 <__aeabi_dmul>
 8007692:	2200      	movs	r2, #0
 8007694:	2300      	movs	r3, #0
 8007696:	4606      	mov	r6, r0
 8007698:	460f      	mov	r7, r1
 800769a:	f7f9 fa1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d09b      	beq.n	80075da <_dtoa_r+0x672>
 80076a2:	e7cd      	b.n	8007640 <_dtoa_r+0x6d8>
 80076a4:	9a08      	ldr	r2, [sp, #32]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	f000 80c4 	beq.w	8007834 <_dtoa_r+0x8cc>
 80076ac:	9a05      	ldr	r2, [sp, #20]
 80076ae:	2a01      	cmp	r2, #1
 80076b0:	f300 80a8 	bgt.w	8007804 <_dtoa_r+0x89c>
 80076b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	f000 80a0 	beq.w	80077fc <_dtoa_r+0x894>
 80076bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076c0:	9e06      	ldr	r6, [sp, #24]
 80076c2:	4645      	mov	r5, r8
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	2101      	movs	r1, #1
 80076c8:	441a      	add	r2, r3
 80076ca:	4620      	mov	r0, r4
 80076cc:	4498      	add	r8, r3
 80076ce:	9204      	str	r2, [sp, #16]
 80076d0:	f000 fb4c 	bl	8007d6c <__i2b>
 80076d4:	4607      	mov	r7, r0
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	dd0b      	ble.n	80076f2 <_dtoa_r+0x78a>
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dd08      	ble.n	80076f2 <_dtoa_r+0x78a>
 80076e0:	42ab      	cmp	r3, r5
 80076e2:	9a04      	ldr	r2, [sp, #16]
 80076e4:	bfa8      	it	ge
 80076e6:	462b      	movge	r3, r5
 80076e8:	eba8 0803 	sub.w	r8, r8, r3
 80076ec:	1aed      	subs	r5, r5, r3
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	b1fb      	cbz	r3, 8007736 <_dtoa_r+0x7ce>
 80076f6:	9b08      	ldr	r3, [sp, #32]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 809f 	beq.w	800783c <_dtoa_r+0x8d4>
 80076fe:	2e00      	cmp	r6, #0
 8007700:	dd11      	ble.n	8007726 <_dtoa_r+0x7be>
 8007702:	4639      	mov	r1, r7
 8007704:	4632      	mov	r2, r6
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fbec 	bl	8007ee4 <__pow5mult>
 800770c:	465a      	mov	r2, fp
 800770e:	4601      	mov	r1, r0
 8007710:	4607      	mov	r7, r0
 8007712:	4620      	mov	r0, r4
 8007714:	f000 fb40 	bl	8007d98 <__multiply>
 8007718:	4659      	mov	r1, fp
 800771a:	9007      	str	r0, [sp, #28]
 800771c:	4620      	mov	r0, r4
 800771e:	f000 fa69 	bl	8007bf4 <_Bfree>
 8007722:	9b07      	ldr	r3, [sp, #28]
 8007724:	469b      	mov	fp, r3
 8007726:	9b06      	ldr	r3, [sp, #24]
 8007728:	1b9a      	subs	r2, r3, r6
 800772a:	d004      	beq.n	8007736 <_dtoa_r+0x7ce>
 800772c:	4659      	mov	r1, fp
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fbd8 	bl	8007ee4 <__pow5mult>
 8007734:	4683      	mov	fp, r0
 8007736:	2101      	movs	r1, #1
 8007738:	4620      	mov	r0, r4
 800773a:	f000 fb17 	bl	8007d6c <__i2b>
 800773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007740:	2b00      	cmp	r3, #0
 8007742:	4606      	mov	r6, r0
 8007744:	dd7c      	ble.n	8007840 <_dtoa_r+0x8d8>
 8007746:	461a      	mov	r2, r3
 8007748:	4601      	mov	r1, r0
 800774a:	4620      	mov	r0, r4
 800774c:	f000 fbca 	bl	8007ee4 <__pow5mult>
 8007750:	9b05      	ldr	r3, [sp, #20]
 8007752:	2b01      	cmp	r3, #1
 8007754:	4606      	mov	r6, r0
 8007756:	dd76      	ble.n	8007846 <_dtoa_r+0x8de>
 8007758:	2300      	movs	r3, #0
 800775a:	9306      	str	r3, [sp, #24]
 800775c:	6933      	ldr	r3, [r6, #16]
 800775e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007762:	6918      	ldr	r0, [r3, #16]
 8007764:	f000 fab2 	bl	8007ccc <__hi0bits>
 8007768:	f1c0 0020 	rsb	r0, r0, #32
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	4418      	add	r0, r3
 8007770:	f010 001f 	ands.w	r0, r0, #31
 8007774:	f000 8086 	beq.w	8007884 <_dtoa_r+0x91c>
 8007778:	f1c0 0320 	rsb	r3, r0, #32
 800777c:	2b04      	cmp	r3, #4
 800777e:	dd7f      	ble.n	8007880 <_dtoa_r+0x918>
 8007780:	f1c0 001c 	rsb	r0, r0, #28
 8007784:	9b04      	ldr	r3, [sp, #16]
 8007786:	4403      	add	r3, r0
 8007788:	4480      	add	r8, r0
 800778a:	4405      	add	r5, r0
 800778c:	9304      	str	r3, [sp, #16]
 800778e:	f1b8 0f00 	cmp.w	r8, #0
 8007792:	dd05      	ble.n	80077a0 <_dtoa_r+0x838>
 8007794:	4659      	mov	r1, fp
 8007796:	4642      	mov	r2, r8
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fbfd 	bl	8007f98 <__lshift>
 800779e:	4683      	mov	fp, r0
 80077a0:	9b04      	ldr	r3, [sp, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	dd05      	ble.n	80077b2 <_dtoa_r+0x84a>
 80077a6:	4631      	mov	r1, r6
 80077a8:	461a      	mov	r2, r3
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fbf4 	bl	8007f98 <__lshift>
 80077b0:	4606      	mov	r6, r0
 80077b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d069      	beq.n	800788c <_dtoa_r+0x924>
 80077b8:	4631      	mov	r1, r6
 80077ba:	4658      	mov	r0, fp
 80077bc:	f000 fc58 	bl	8008070 <__mcmp>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	da63      	bge.n	800788c <_dtoa_r+0x924>
 80077c4:	2300      	movs	r3, #0
 80077c6:	4659      	mov	r1, fp
 80077c8:	220a      	movs	r2, #10
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fa34 	bl	8007c38 <__multadd>
 80077d0:	9b08      	ldr	r3, [sp, #32]
 80077d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077d6:	4683      	mov	fp, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 818f 	beq.w	8007afc <_dtoa_r+0xb94>
 80077de:	4639      	mov	r1, r7
 80077e0:	2300      	movs	r3, #0
 80077e2:	220a      	movs	r2, #10
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fa27 	bl	8007c38 <__multadd>
 80077ea:	f1b9 0f00 	cmp.w	r9, #0
 80077ee:	4607      	mov	r7, r0
 80077f0:	f300 808e 	bgt.w	8007910 <_dtoa_r+0x9a8>
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	dc50      	bgt.n	800789c <_dtoa_r+0x934>
 80077fa:	e089      	b.n	8007910 <_dtoa_r+0x9a8>
 80077fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007802:	e75d      	b.n	80076c0 <_dtoa_r+0x758>
 8007804:	9b01      	ldr	r3, [sp, #4]
 8007806:	1e5e      	subs	r6, r3, #1
 8007808:	9b06      	ldr	r3, [sp, #24]
 800780a:	42b3      	cmp	r3, r6
 800780c:	bfbf      	itttt	lt
 800780e:	9b06      	ldrlt	r3, [sp, #24]
 8007810:	9606      	strlt	r6, [sp, #24]
 8007812:	1af2      	sublt	r2, r6, r3
 8007814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007816:	bfb6      	itet	lt
 8007818:	189b      	addlt	r3, r3, r2
 800781a:	1b9e      	subge	r6, r3, r6
 800781c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800781e:	9b01      	ldr	r3, [sp, #4]
 8007820:	bfb8      	it	lt
 8007822:	2600      	movlt	r6, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfb5      	itete	lt
 8007828:	eba8 0503 	sublt.w	r5, r8, r3
 800782c:	9b01      	ldrge	r3, [sp, #4]
 800782e:	2300      	movlt	r3, #0
 8007830:	4645      	movge	r5, r8
 8007832:	e747      	b.n	80076c4 <_dtoa_r+0x75c>
 8007834:	9e06      	ldr	r6, [sp, #24]
 8007836:	9f08      	ldr	r7, [sp, #32]
 8007838:	4645      	mov	r5, r8
 800783a:	e74c      	b.n	80076d6 <_dtoa_r+0x76e>
 800783c:	9a06      	ldr	r2, [sp, #24]
 800783e:	e775      	b.n	800772c <_dtoa_r+0x7c4>
 8007840:	9b05      	ldr	r3, [sp, #20]
 8007842:	2b01      	cmp	r3, #1
 8007844:	dc18      	bgt.n	8007878 <_dtoa_r+0x910>
 8007846:	9b02      	ldr	r3, [sp, #8]
 8007848:	b9b3      	cbnz	r3, 8007878 <_dtoa_r+0x910>
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007850:	b9a3      	cbnz	r3, 800787c <_dtoa_r+0x914>
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	b12b      	cbz	r3, 800786a <_dtoa_r+0x902>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	3301      	adds	r3, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	f108 0801 	add.w	r8, r8, #1
 8007868:	2301      	movs	r3, #1
 800786a:	9306      	str	r3, [sp, #24]
 800786c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800786e:	2b00      	cmp	r3, #0
 8007870:	f47f af74 	bne.w	800775c <_dtoa_r+0x7f4>
 8007874:	2001      	movs	r0, #1
 8007876:	e779      	b.n	800776c <_dtoa_r+0x804>
 8007878:	2300      	movs	r3, #0
 800787a:	e7f6      	b.n	800786a <_dtoa_r+0x902>
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	e7f4      	b.n	800786a <_dtoa_r+0x902>
 8007880:	d085      	beq.n	800778e <_dtoa_r+0x826>
 8007882:	4618      	mov	r0, r3
 8007884:	301c      	adds	r0, #28
 8007886:	e77d      	b.n	8007784 <_dtoa_r+0x81c>
 8007888:	40240000 	.word	0x40240000
 800788c:	9b01      	ldr	r3, [sp, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dc38      	bgt.n	8007904 <_dtoa_r+0x99c>
 8007892:	9b05      	ldr	r3, [sp, #20]
 8007894:	2b02      	cmp	r3, #2
 8007896:	dd35      	ble.n	8007904 <_dtoa_r+0x99c>
 8007898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800789c:	f1b9 0f00 	cmp.w	r9, #0
 80078a0:	d10d      	bne.n	80078be <_dtoa_r+0x956>
 80078a2:	4631      	mov	r1, r6
 80078a4:	464b      	mov	r3, r9
 80078a6:	2205      	movs	r2, #5
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 f9c5 	bl	8007c38 <__multadd>
 80078ae:	4601      	mov	r1, r0
 80078b0:	4606      	mov	r6, r0
 80078b2:	4658      	mov	r0, fp
 80078b4:	f000 fbdc 	bl	8008070 <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f73f adbd 	bgt.w	8007438 <_dtoa_r+0x4d0>
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	9d00      	ldr	r5, [sp, #0]
 80078c2:	ea6f 0a03 	mvn.w	sl, r3
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	4631      	mov	r1, r6
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 f991 	bl	8007bf4 <_Bfree>
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	f43f aeb4 	beq.w	8007640 <_dtoa_r+0x6d8>
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	d005      	beq.n	80078ea <_dtoa_r+0x982>
 80078de:	45b8      	cmp	r8, r7
 80078e0:	d003      	beq.n	80078ea <_dtoa_r+0x982>
 80078e2:	4641      	mov	r1, r8
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f985 	bl	8007bf4 <_Bfree>
 80078ea:	4639      	mov	r1, r7
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f981 	bl	8007bf4 <_Bfree>
 80078f2:	e6a5      	b.n	8007640 <_dtoa_r+0x6d8>
 80078f4:	2600      	movs	r6, #0
 80078f6:	4637      	mov	r7, r6
 80078f8:	e7e1      	b.n	80078be <_dtoa_r+0x956>
 80078fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007900:	4637      	mov	r7, r6
 8007902:	e599      	b.n	8007438 <_dtoa_r+0x4d0>
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 80fd 	beq.w	8007b0a <_dtoa_r+0xba2>
 8007910:	2d00      	cmp	r5, #0
 8007912:	dd05      	ble.n	8007920 <_dtoa_r+0x9b8>
 8007914:	4639      	mov	r1, r7
 8007916:	462a      	mov	r2, r5
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fb3d 	bl	8007f98 <__lshift>
 800791e:	4607      	mov	r7, r0
 8007920:	9b06      	ldr	r3, [sp, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d05c      	beq.n	80079e0 <_dtoa_r+0xa78>
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f923 	bl	8007b74 <_Balloc>
 800792e:	4605      	mov	r5, r0
 8007930:	b928      	cbnz	r0, 800793e <_dtoa_r+0x9d6>
 8007932:	4b80      	ldr	r3, [pc, #512]	; (8007b34 <_dtoa_r+0xbcc>)
 8007934:	4602      	mov	r2, r0
 8007936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800793a:	f7ff bb2e 	b.w	8006f9a <_dtoa_r+0x32>
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	f107 010c 	add.w	r1, r7, #12
 8007948:	300c      	adds	r0, #12
 800794a:	f000 f905 	bl	8007b58 <memcpy>
 800794e:	2201      	movs	r2, #1
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fb20 	bl	8007f98 <__lshift>
 8007958:	9b00      	ldr	r3, [sp, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	9301      	str	r3, [sp, #4]
 800795e:	9b00      	ldr	r3, [sp, #0]
 8007960:	444b      	add	r3, r9
 8007962:	9307      	str	r3, [sp, #28]
 8007964:	9b02      	ldr	r3, [sp, #8]
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	46b8      	mov	r8, r7
 800796c:	9306      	str	r3, [sp, #24]
 800796e:	4607      	mov	r7, r0
 8007970:	9b01      	ldr	r3, [sp, #4]
 8007972:	4631      	mov	r1, r6
 8007974:	3b01      	subs	r3, #1
 8007976:	4658      	mov	r0, fp
 8007978:	9302      	str	r3, [sp, #8]
 800797a:	f7ff fa6a 	bl	8006e52 <quorem>
 800797e:	4603      	mov	r3, r0
 8007980:	3330      	adds	r3, #48	; 0x30
 8007982:	9004      	str	r0, [sp, #16]
 8007984:	4641      	mov	r1, r8
 8007986:	4658      	mov	r0, fp
 8007988:	9308      	str	r3, [sp, #32]
 800798a:	f000 fb71 	bl	8008070 <__mcmp>
 800798e:	463a      	mov	r2, r7
 8007990:	4681      	mov	r9, r0
 8007992:	4631      	mov	r1, r6
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fb87 	bl	80080a8 <__mdiff>
 800799a:	68c2      	ldr	r2, [r0, #12]
 800799c:	9b08      	ldr	r3, [sp, #32]
 800799e:	4605      	mov	r5, r0
 80079a0:	bb02      	cbnz	r2, 80079e4 <_dtoa_r+0xa7c>
 80079a2:	4601      	mov	r1, r0
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fb63 	bl	8008070 <__mcmp>
 80079aa:	9b08      	ldr	r3, [sp, #32]
 80079ac:	4602      	mov	r2, r0
 80079ae:	4629      	mov	r1, r5
 80079b0:	4620      	mov	r0, r4
 80079b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079b6:	f000 f91d 	bl	8007bf4 <_Bfree>
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079be:	9d01      	ldr	r5, [sp, #4]
 80079c0:	ea43 0102 	orr.w	r1, r3, r2
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	430b      	orrs	r3, r1
 80079c8:	9b08      	ldr	r3, [sp, #32]
 80079ca:	d10d      	bne.n	80079e8 <_dtoa_r+0xa80>
 80079cc:	2b39      	cmp	r3, #57	; 0x39
 80079ce:	d029      	beq.n	8007a24 <_dtoa_r+0xabc>
 80079d0:	f1b9 0f00 	cmp.w	r9, #0
 80079d4:	dd01      	ble.n	80079da <_dtoa_r+0xa72>
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	3331      	adds	r3, #49	; 0x31
 80079da:	9a02      	ldr	r2, [sp, #8]
 80079dc:	7013      	strb	r3, [r2, #0]
 80079de:	e774      	b.n	80078ca <_dtoa_r+0x962>
 80079e0:	4638      	mov	r0, r7
 80079e2:	e7b9      	b.n	8007958 <_dtoa_r+0x9f0>
 80079e4:	2201      	movs	r2, #1
 80079e6:	e7e2      	b.n	80079ae <_dtoa_r+0xa46>
 80079e8:	f1b9 0f00 	cmp.w	r9, #0
 80079ec:	db06      	blt.n	80079fc <_dtoa_r+0xa94>
 80079ee:	9905      	ldr	r1, [sp, #20]
 80079f0:	ea41 0909 	orr.w	r9, r1, r9
 80079f4:	9906      	ldr	r1, [sp, #24]
 80079f6:	ea59 0101 	orrs.w	r1, r9, r1
 80079fa:	d120      	bne.n	8007a3e <_dtoa_r+0xad6>
 80079fc:	2a00      	cmp	r2, #0
 80079fe:	ddec      	ble.n	80079da <_dtoa_r+0xa72>
 8007a00:	4659      	mov	r1, fp
 8007a02:	2201      	movs	r2, #1
 8007a04:	4620      	mov	r0, r4
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	f000 fac6 	bl	8007f98 <__lshift>
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4683      	mov	fp, r0
 8007a10:	f000 fb2e 	bl	8008070 <__mcmp>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	dc02      	bgt.n	8007a20 <_dtoa_r+0xab8>
 8007a1a:	d1de      	bne.n	80079da <_dtoa_r+0xa72>
 8007a1c:	07da      	lsls	r2, r3, #31
 8007a1e:	d5dc      	bpl.n	80079da <_dtoa_r+0xa72>
 8007a20:	2b39      	cmp	r3, #57	; 0x39
 8007a22:	d1d8      	bne.n	80079d6 <_dtoa_r+0xa6e>
 8007a24:	9a02      	ldr	r2, [sp, #8]
 8007a26:	2339      	movs	r3, #57	; 0x39
 8007a28:	7013      	strb	r3, [r2, #0]
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a34:	2a39      	cmp	r2, #57	; 0x39
 8007a36:	d050      	beq.n	8007ada <_dtoa_r+0xb72>
 8007a38:	3201      	adds	r2, #1
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	e745      	b.n	80078ca <_dtoa_r+0x962>
 8007a3e:	2a00      	cmp	r2, #0
 8007a40:	dd03      	ble.n	8007a4a <_dtoa_r+0xae2>
 8007a42:	2b39      	cmp	r3, #57	; 0x39
 8007a44:	d0ee      	beq.n	8007a24 <_dtoa_r+0xabc>
 8007a46:	3301      	adds	r3, #1
 8007a48:	e7c7      	b.n	80079da <_dtoa_r+0xa72>
 8007a4a:	9a01      	ldr	r2, [sp, #4]
 8007a4c:	9907      	ldr	r1, [sp, #28]
 8007a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a52:	428a      	cmp	r2, r1
 8007a54:	d02a      	beq.n	8007aac <_dtoa_r+0xb44>
 8007a56:	4659      	mov	r1, fp
 8007a58:	2300      	movs	r3, #0
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f8eb 	bl	8007c38 <__multadd>
 8007a62:	45b8      	cmp	r8, r7
 8007a64:	4683      	mov	fp, r0
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	f04f 020a 	mov.w	r2, #10
 8007a6e:	4641      	mov	r1, r8
 8007a70:	4620      	mov	r0, r4
 8007a72:	d107      	bne.n	8007a84 <_dtoa_r+0xb1c>
 8007a74:	f000 f8e0 	bl	8007c38 <__multadd>
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	9b01      	ldr	r3, [sp, #4]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	e775      	b.n	8007970 <_dtoa_r+0xa08>
 8007a84:	f000 f8d8 	bl	8007c38 <__multadd>
 8007a88:	4639      	mov	r1, r7
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	220a      	movs	r2, #10
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 f8d1 	bl	8007c38 <__multadd>
 8007a96:	4607      	mov	r7, r0
 8007a98:	e7f0      	b.n	8007a7c <_dtoa_r+0xb14>
 8007a9a:	f1b9 0f00 	cmp.w	r9, #0
 8007a9e:	9a00      	ldr	r2, [sp, #0]
 8007aa0:	bfcc      	ite	gt
 8007aa2:	464d      	movgt	r5, r9
 8007aa4:	2501      	movle	r5, #1
 8007aa6:	4415      	add	r5, r2
 8007aa8:	f04f 0800 	mov.w	r8, #0
 8007aac:	4659      	mov	r1, fp
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	f000 fa70 	bl	8007f98 <__lshift>
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4683      	mov	fp, r0
 8007abc:	f000 fad8 	bl	8008070 <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	dcb2      	bgt.n	8007a2a <_dtoa_r+0xac2>
 8007ac4:	d102      	bne.n	8007acc <_dtoa_r+0xb64>
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	07db      	lsls	r3, r3, #31
 8007aca:	d4ae      	bmi.n	8007a2a <_dtoa_r+0xac2>
 8007acc:	462b      	mov	r3, r5
 8007ace:	461d      	mov	r5, r3
 8007ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ad4:	2a30      	cmp	r2, #48	; 0x30
 8007ad6:	d0fa      	beq.n	8007ace <_dtoa_r+0xb66>
 8007ad8:	e6f7      	b.n	80078ca <_dtoa_r+0x962>
 8007ada:	9a00      	ldr	r2, [sp, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d1a5      	bne.n	8007a2c <_dtoa_r+0xac4>
 8007ae0:	f10a 0a01 	add.w	sl, sl, #1
 8007ae4:	2331      	movs	r3, #49	; 0x31
 8007ae6:	e779      	b.n	80079dc <_dtoa_r+0xa74>
 8007ae8:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <_dtoa_r+0xbd0>)
 8007aea:	f7ff baaf 	b.w	800704c <_dtoa_r+0xe4>
 8007aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f47f aa86 	bne.w	8007002 <_dtoa_r+0x9a>
 8007af6:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <_dtoa_r+0xbd4>)
 8007af8:	f7ff baa8 	b.w	800704c <_dtoa_r+0xe4>
 8007afc:	f1b9 0f00 	cmp.w	r9, #0
 8007b00:	dc03      	bgt.n	8007b0a <_dtoa_r+0xba2>
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	f73f aec9 	bgt.w	800789c <_dtoa_r+0x934>
 8007b0a:	9d00      	ldr	r5, [sp, #0]
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f7ff f99f 	bl	8006e52 <quorem>
 8007b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b18:	f805 3b01 	strb.w	r3, [r5], #1
 8007b1c:	9a00      	ldr	r2, [sp, #0]
 8007b1e:	1aaa      	subs	r2, r5, r2
 8007b20:	4591      	cmp	r9, r2
 8007b22:	ddba      	ble.n	8007a9a <_dtoa_r+0xb32>
 8007b24:	4659      	mov	r1, fp
 8007b26:	2300      	movs	r3, #0
 8007b28:	220a      	movs	r2, #10
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 f884 	bl	8007c38 <__multadd>
 8007b30:	4683      	mov	fp, r0
 8007b32:	e7eb      	b.n	8007b0c <_dtoa_r+0xba4>
 8007b34:	0800998b 	.word	0x0800998b
 8007b38:	080098e4 	.word	0x080098e4
 8007b3c:	08009908 	.word	0x08009908

08007b40 <_localeconv_r>:
 8007b40:	4800      	ldr	r0, [pc, #0]	; (8007b44 <_localeconv_r+0x4>)
 8007b42:	4770      	bx	lr
 8007b44:	20000160 	.word	0x20000160

08007b48 <malloc>:
 8007b48:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <malloc+0xc>)
 8007b4a:	4601      	mov	r1, r0
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f000 bbef 	b.w	8008330 <_malloc_r>
 8007b52:	bf00      	nop
 8007b54:	2000000c 	.word	0x2000000c

08007b58 <memcpy>:
 8007b58:	440a      	add	r2, r1
 8007b5a:	4291      	cmp	r1, r2
 8007b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b60:	d100      	bne.n	8007b64 <memcpy+0xc>
 8007b62:	4770      	bx	lr
 8007b64:	b510      	push	{r4, lr}
 8007b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	d1f9      	bne.n	8007b66 <memcpy+0xe>
 8007b72:	bd10      	pop	{r4, pc}

08007b74 <_Balloc>:
 8007b74:	b570      	push	{r4, r5, r6, lr}
 8007b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b78:	4604      	mov	r4, r0
 8007b7a:	460d      	mov	r5, r1
 8007b7c:	b976      	cbnz	r6, 8007b9c <_Balloc+0x28>
 8007b7e:	2010      	movs	r0, #16
 8007b80:	f7ff ffe2 	bl	8007b48 <malloc>
 8007b84:	4602      	mov	r2, r0
 8007b86:	6260      	str	r0, [r4, #36]	; 0x24
 8007b88:	b920      	cbnz	r0, 8007b94 <_Balloc+0x20>
 8007b8a:	4b18      	ldr	r3, [pc, #96]	; (8007bec <_Balloc+0x78>)
 8007b8c:	4818      	ldr	r0, [pc, #96]	; (8007bf0 <_Balloc+0x7c>)
 8007b8e:	2166      	movs	r1, #102	; 0x66
 8007b90:	f000 fd94 	bl	80086bc <__assert_func>
 8007b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b98:	6006      	str	r6, [r0, #0]
 8007b9a:	60c6      	str	r6, [r0, #12]
 8007b9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b9e:	68f3      	ldr	r3, [r6, #12]
 8007ba0:	b183      	cbz	r3, 8007bc4 <_Balloc+0x50>
 8007ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007baa:	b9b8      	cbnz	r0, 8007bdc <_Balloc+0x68>
 8007bac:	2101      	movs	r1, #1
 8007bae:	fa01 f605 	lsl.w	r6, r1, r5
 8007bb2:	1d72      	adds	r2, r6, #5
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fb5a 	bl	8008270 <_calloc_r>
 8007bbc:	b160      	cbz	r0, 8007bd8 <_Balloc+0x64>
 8007bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bc2:	e00e      	b.n	8007be2 <_Balloc+0x6e>
 8007bc4:	2221      	movs	r2, #33	; 0x21
 8007bc6:	2104      	movs	r1, #4
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fb51 	bl	8008270 <_calloc_r>
 8007bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd0:	60f0      	str	r0, [r6, #12]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e4      	bne.n	8007ba2 <_Balloc+0x2e>
 8007bd8:	2000      	movs	r0, #0
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	6802      	ldr	r2, [r0, #0]
 8007bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007be2:	2300      	movs	r3, #0
 8007be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007be8:	e7f7      	b.n	8007bda <_Balloc+0x66>
 8007bea:	bf00      	nop
 8007bec:	08009915 	.word	0x08009915
 8007bf0:	0800999c 	.word	0x0800999c

08007bf4 <_Bfree>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	b976      	cbnz	r6, 8007c1c <_Bfree+0x28>
 8007bfe:	2010      	movs	r0, #16
 8007c00:	f7ff ffa2 	bl	8007b48 <malloc>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6268      	str	r0, [r5, #36]	; 0x24
 8007c08:	b920      	cbnz	r0, 8007c14 <_Bfree+0x20>
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <_Bfree+0x3c>)
 8007c0c:	4809      	ldr	r0, [pc, #36]	; (8007c34 <_Bfree+0x40>)
 8007c0e:	218a      	movs	r1, #138	; 0x8a
 8007c10:	f000 fd54 	bl	80086bc <__assert_func>
 8007c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c18:	6006      	str	r6, [r0, #0]
 8007c1a:	60c6      	str	r6, [r0, #12]
 8007c1c:	b13c      	cbz	r4, 8007c2e <_Bfree+0x3a>
 8007c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c20:	6862      	ldr	r2, [r4, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c28:	6021      	str	r1, [r4, #0]
 8007c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}
 8007c30:	08009915 	.word	0x08009915
 8007c34:	0800999c 	.word	0x0800999c

08007c38 <__multadd>:
 8007c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	690e      	ldr	r6, [r1, #16]
 8007c3e:	4607      	mov	r7, r0
 8007c40:	4698      	mov	r8, r3
 8007c42:	460c      	mov	r4, r1
 8007c44:	f101 0014 	add.w	r0, r1, #20
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6805      	ldr	r5, [r0, #0]
 8007c4c:	b2a9      	uxth	r1, r5
 8007c4e:	fb02 8101 	mla	r1, r2, r1, r8
 8007c52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007c56:	0c2d      	lsrs	r5, r5, #16
 8007c58:	fb02 c505 	mla	r5, r2, r5, ip
 8007c5c:	b289      	uxth	r1, r1
 8007c5e:	3301      	adds	r3, #1
 8007c60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007c64:	429e      	cmp	r6, r3
 8007c66:	f840 1b04 	str.w	r1, [r0], #4
 8007c6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007c6e:	dcec      	bgt.n	8007c4a <__multadd+0x12>
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	d022      	beq.n	8007cbc <__multadd+0x84>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	42b3      	cmp	r3, r6
 8007c7a:	dc19      	bgt.n	8007cb0 <__multadd+0x78>
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	4638      	mov	r0, r7
 8007c80:	3101      	adds	r1, #1
 8007c82:	f7ff ff77 	bl	8007b74 <_Balloc>
 8007c86:	4605      	mov	r5, r0
 8007c88:	b928      	cbnz	r0, 8007c96 <__multadd+0x5e>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	4b0d      	ldr	r3, [pc, #52]	; (8007cc4 <__multadd+0x8c>)
 8007c8e:	480e      	ldr	r0, [pc, #56]	; (8007cc8 <__multadd+0x90>)
 8007c90:	21b5      	movs	r1, #181	; 0xb5
 8007c92:	f000 fd13 	bl	80086bc <__assert_func>
 8007c96:	6922      	ldr	r2, [r4, #16]
 8007c98:	3202      	adds	r2, #2
 8007c9a:	f104 010c 	add.w	r1, r4, #12
 8007c9e:	0092      	lsls	r2, r2, #2
 8007ca0:	300c      	adds	r0, #12
 8007ca2:	f7ff ff59 	bl	8007b58 <memcpy>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4638      	mov	r0, r7
 8007caa:	f7ff ffa3 	bl	8007bf4 <_Bfree>
 8007cae:	462c      	mov	r4, r5
 8007cb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007cb4:	3601      	adds	r6, #1
 8007cb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8007cba:	6126      	str	r6, [r4, #16]
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc2:	bf00      	nop
 8007cc4:	0800998b 	.word	0x0800998b
 8007cc8:	0800999c 	.word	0x0800999c

08007ccc <__hi0bits>:
 8007ccc:	0c03      	lsrs	r3, r0, #16
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	b9d3      	cbnz	r3, 8007d08 <__hi0bits+0x3c>
 8007cd2:	0400      	lsls	r0, r0, #16
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007cda:	bf04      	itt	eq
 8007cdc:	0200      	lsleq	r0, r0, #8
 8007cde:	3308      	addeq	r3, #8
 8007ce0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ce4:	bf04      	itt	eq
 8007ce6:	0100      	lsleq	r0, r0, #4
 8007ce8:	3304      	addeq	r3, #4
 8007cea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cee:	bf04      	itt	eq
 8007cf0:	0080      	lsleq	r0, r0, #2
 8007cf2:	3302      	addeq	r3, #2
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	db05      	blt.n	8007d04 <__hi0bits+0x38>
 8007cf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cfc:	f103 0301 	add.w	r3, r3, #1
 8007d00:	bf08      	it	eq
 8007d02:	2320      	moveq	r3, #32
 8007d04:	4618      	mov	r0, r3
 8007d06:	4770      	bx	lr
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e7e4      	b.n	8007cd6 <__hi0bits+0xa>

08007d0c <__lo0bits>:
 8007d0c:	6803      	ldr	r3, [r0, #0]
 8007d0e:	f013 0207 	ands.w	r2, r3, #7
 8007d12:	4601      	mov	r1, r0
 8007d14:	d00b      	beq.n	8007d2e <__lo0bits+0x22>
 8007d16:	07da      	lsls	r2, r3, #31
 8007d18:	d424      	bmi.n	8007d64 <__lo0bits+0x58>
 8007d1a:	0798      	lsls	r0, r3, #30
 8007d1c:	bf49      	itett	mi
 8007d1e:	085b      	lsrmi	r3, r3, #1
 8007d20:	089b      	lsrpl	r3, r3, #2
 8007d22:	2001      	movmi	r0, #1
 8007d24:	600b      	strmi	r3, [r1, #0]
 8007d26:	bf5c      	itt	pl
 8007d28:	600b      	strpl	r3, [r1, #0]
 8007d2a:	2002      	movpl	r0, #2
 8007d2c:	4770      	bx	lr
 8007d2e:	b298      	uxth	r0, r3
 8007d30:	b9b0      	cbnz	r0, 8007d60 <__lo0bits+0x54>
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	2010      	movs	r0, #16
 8007d36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007d3a:	bf04      	itt	eq
 8007d3c:	0a1b      	lsreq	r3, r3, #8
 8007d3e:	3008      	addeq	r0, #8
 8007d40:	071a      	lsls	r2, r3, #28
 8007d42:	bf04      	itt	eq
 8007d44:	091b      	lsreq	r3, r3, #4
 8007d46:	3004      	addeq	r0, #4
 8007d48:	079a      	lsls	r2, r3, #30
 8007d4a:	bf04      	itt	eq
 8007d4c:	089b      	lsreq	r3, r3, #2
 8007d4e:	3002      	addeq	r0, #2
 8007d50:	07da      	lsls	r2, r3, #31
 8007d52:	d403      	bmi.n	8007d5c <__lo0bits+0x50>
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	f100 0001 	add.w	r0, r0, #1
 8007d5a:	d005      	beq.n	8007d68 <__lo0bits+0x5c>
 8007d5c:	600b      	str	r3, [r1, #0]
 8007d5e:	4770      	bx	lr
 8007d60:	4610      	mov	r0, r2
 8007d62:	e7e8      	b.n	8007d36 <__lo0bits+0x2a>
 8007d64:	2000      	movs	r0, #0
 8007d66:	4770      	bx	lr
 8007d68:	2020      	movs	r0, #32
 8007d6a:	4770      	bx	lr

08007d6c <__i2b>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	460c      	mov	r4, r1
 8007d70:	2101      	movs	r1, #1
 8007d72:	f7ff feff 	bl	8007b74 <_Balloc>
 8007d76:	4602      	mov	r2, r0
 8007d78:	b928      	cbnz	r0, 8007d86 <__i2b+0x1a>
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <__i2b+0x24>)
 8007d7c:	4805      	ldr	r0, [pc, #20]	; (8007d94 <__i2b+0x28>)
 8007d7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d82:	f000 fc9b 	bl	80086bc <__assert_func>
 8007d86:	2301      	movs	r3, #1
 8007d88:	6144      	str	r4, [r0, #20]
 8007d8a:	6103      	str	r3, [r0, #16]
 8007d8c:	bd10      	pop	{r4, pc}
 8007d8e:	bf00      	nop
 8007d90:	0800998b 	.word	0x0800998b
 8007d94:	0800999c 	.word	0x0800999c

08007d98 <__multiply>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4614      	mov	r4, r2
 8007d9e:	690a      	ldr	r2, [r1, #16]
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	bfb8      	it	lt
 8007da6:	460b      	movlt	r3, r1
 8007da8:	460d      	mov	r5, r1
 8007daa:	bfbc      	itt	lt
 8007dac:	4625      	movlt	r5, r4
 8007dae:	461c      	movlt	r4, r3
 8007db0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007db4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007db8:	68ab      	ldr	r3, [r5, #8]
 8007dba:	6869      	ldr	r1, [r5, #4]
 8007dbc:	eb0a 0709 	add.w	r7, sl, r9
 8007dc0:	42bb      	cmp	r3, r7
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	bfb8      	it	lt
 8007dc6:	3101      	addlt	r1, #1
 8007dc8:	f7ff fed4 	bl	8007b74 <_Balloc>
 8007dcc:	b930      	cbnz	r0, 8007ddc <__multiply+0x44>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	4b42      	ldr	r3, [pc, #264]	; (8007edc <__multiply+0x144>)
 8007dd2:	4843      	ldr	r0, [pc, #268]	; (8007ee0 <__multiply+0x148>)
 8007dd4:	f240 115d 	movw	r1, #349	; 0x15d
 8007dd8:	f000 fc70 	bl	80086bc <__assert_func>
 8007ddc:	f100 0614 	add.w	r6, r0, #20
 8007de0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007de4:	4633      	mov	r3, r6
 8007de6:	2200      	movs	r2, #0
 8007de8:	4543      	cmp	r3, r8
 8007dea:	d31e      	bcc.n	8007e2a <__multiply+0x92>
 8007dec:	f105 0c14 	add.w	ip, r5, #20
 8007df0:	f104 0314 	add.w	r3, r4, #20
 8007df4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007df8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007dfc:	9202      	str	r2, [sp, #8]
 8007dfe:	ebac 0205 	sub.w	r2, ip, r5
 8007e02:	3a15      	subs	r2, #21
 8007e04:	f022 0203 	bic.w	r2, r2, #3
 8007e08:	3204      	adds	r2, #4
 8007e0a:	f105 0115 	add.w	r1, r5, #21
 8007e0e:	458c      	cmp	ip, r1
 8007e10:	bf38      	it	cc
 8007e12:	2204      	movcc	r2, #4
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d808      	bhi.n	8007e30 <__multiply+0x98>
 8007e1e:	2f00      	cmp	r7, #0
 8007e20:	dc55      	bgt.n	8007ece <__multiply+0x136>
 8007e22:	6107      	str	r7, [r0, #16]
 8007e24:	b005      	add	sp, #20
 8007e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2a:	f843 2b04 	str.w	r2, [r3], #4
 8007e2e:	e7db      	b.n	8007de8 <__multiply+0x50>
 8007e30:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e34:	f1ba 0f00 	cmp.w	sl, #0
 8007e38:	d020      	beq.n	8007e7c <__multiply+0xe4>
 8007e3a:	f105 0e14 	add.w	lr, r5, #20
 8007e3e:	46b1      	mov	r9, r6
 8007e40:	2200      	movs	r2, #0
 8007e42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007e46:	f8d9 b000 	ldr.w	fp, [r9]
 8007e4a:	b2a1      	uxth	r1, r4
 8007e4c:	fa1f fb8b 	uxth.w	fp, fp
 8007e50:	fb0a b101 	mla	r1, sl, r1, fp
 8007e54:	4411      	add	r1, r2
 8007e56:	f8d9 2000 	ldr.w	r2, [r9]
 8007e5a:	0c24      	lsrs	r4, r4, #16
 8007e5c:	0c12      	lsrs	r2, r2, #16
 8007e5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007e62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007e66:	b289      	uxth	r1, r1
 8007e68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e6c:	45f4      	cmp	ip, lr
 8007e6e:	f849 1b04 	str.w	r1, [r9], #4
 8007e72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007e76:	d8e4      	bhi.n	8007e42 <__multiply+0xaa>
 8007e78:	9901      	ldr	r1, [sp, #4]
 8007e7a:	5072      	str	r2, [r6, r1]
 8007e7c:	9a03      	ldr	r2, [sp, #12]
 8007e7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e82:	3304      	adds	r3, #4
 8007e84:	f1b9 0f00 	cmp.w	r9, #0
 8007e88:	d01f      	beq.n	8007eca <__multiply+0x132>
 8007e8a:	6834      	ldr	r4, [r6, #0]
 8007e8c:	f105 0114 	add.w	r1, r5, #20
 8007e90:	46b6      	mov	lr, r6
 8007e92:	f04f 0a00 	mov.w	sl, #0
 8007e96:	880a      	ldrh	r2, [r1, #0]
 8007e98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e9c:	fb09 b202 	mla	r2, r9, r2, fp
 8007ea0:	4492      	add	sl, r2
 8007ea2:	b2a4      	uxth	r4, r4
 8007ea4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ea8:	f84e 4b04 	str.w	r4, [lr], #4
 8007eac:	f851 4b04 	ldr.w	r4, [r1], #4
 8007eb0:	f8be 2000 	ldrh.w	r2, [lr]
 8007eb4:	0c24      	lsrs	r4, r4, #16
 8007eb6:	fb09 2404 	mla	r4, r9, r4, r2
 8007eba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007ebe:	458c      	cmp	ip, r1
 8007ec0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ec4:	d8e7      	bhi.n	8007e96 <__multiply+0xfe>
 8007ec6:	9a01      	ldr	r2, [sp, #4]
 8007ec8:	50b4      	str	r4, [r6, r2]
 8007eca:	3604      	adds	r6, #4
 8007ecc:	e7a3      	b.n	8007e16 <__multiply+0x7e>
 8007ece:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1a5      	bne.n	8007e22 <__multiply+0x8a>
 8007ed6:	3f01      	subs	r7, #1
 8007ed8:	e7a1      	b.n	8007e1e <__multiply+0x86>
 8007eda:	bf00      	nop
 8007edc:	0800998b 	.word	0x0800998b
 8007ee0:	0800999c 	.word	0x0800999c

08007ee4 <__pow5mult>:
 8007ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee8:	4615      	mov	r5, r2
 8007eea:	f012 0203 	ands.w	r2, r2, #3
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	d007      	beq.n	8007f04 <__pow5mult+0x20>
 8007ef4:	4c25      	ldr	r4, [pc, #148]	; (8007f8c <__pow5mult+0xa8>)
 8007ef6:	3a01      	subs	r2, #1
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007efe:	f7ff fe9b 	bl	8007c38 <__multadd>
 8007f02:	4607      	mov	r7, r0
 8007f04:	10ad      	asrs	r5, r5, #2
 8007f06:	d03d      	beq.n	8007f84 <__pow5mult+0xa0>
 8007f08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f0a:	b97c      	cbnz	r4, 8007f2c <__pow5mult+0x48>
 8007f0c:	2010      	movs	r0, #16
 8007f0e:	f7ff fe1b 	bl	8007b48 <malloc>
 8007f12:	4602      	mov	r2, r0
 8007f14:	6270      	str	r0, [r6, #36]	; 0x24
 8007f16:	b928      	cbnz	r0, 8007f24 <__pow5mult+0x40>
 8007f18:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <__pow5mult+0xac>)
 8007f1a:	481e      	ldr	r0, [pc, #120]	; (8007f94 <__pow5mult+0xb0>)
 8007f1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f20:	f000 fbcc 	bl	80086bc <__assert_func>
 8007f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f28:	6004      	str	r4, [r0, #0]
 8007f2a:	60c4      	str	r4, [r0, #12]
 8007f2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f34:	b94c      	cbnz	r4, 8007f4a <__pow5mult+0x66>
 8007f36:	f240 2171 	movw	r1, #625	; 0x271
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7ff ff16 	bl	8007d6c <__i2b>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f46:	4604      	mov	r4, r0
 8007f48:	6003      	str	r3, [r0, #0]
 8007f4a:	f04f 0900 	mov.w	r9, #0
 8007f4e:	07eb      	lsls	r3, r5, #31
 8007f50:	d50a      	bpl.n	8007f68 <__pow5mult+0x84>
 8007f52:	4639      	mov	r1, r7
 8007f54:	4622      	mov	r2, r4
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7ff ff1e 	bl	8007d98 <__multiply>
 8007f5c:	4639      	mov	r1, r7
 8007f5e:	4680      	mov	r8, r0
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff fe47 	bl	8007bf4 <_Bfree>
 8007f66:	4647      	mov	r7, r8
 8007f68:	106d      	asrs	r5, r5, #1
 8007f6a:	d00b      	beq.n	8007f84 <__pow5mult+0xa0>
 8007f6c:	6820      	ldr	r0, [r4, #0]
 8007f6e:	b938      	cbnz	r0, 8007f80 <__pow5mult+0x9c>
 8007f70:	4622      	mov	r2, r4
 8007f72:	4621      	mov	r1, r4
 8007f74:	4630      	mov	r0, r6
 8007f76:	f7ff ff0f 	bl	8007d98 <__multiply>
 8007f7a:	6020      	str	r0, [r4, #0]
 8007f7c:	f8c0 9000 	str.w	r9, [r0]
 8007f80:	4604      	mov	r4, r0
 8007f82:	e7e4      	b.n	8007f4e <__pow5mult+0x6a>
 8007f84:	4638      	mov	r0, r7
 8007f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08009af0 	.word	0x08009af0
 8007f90:	08009915 	.word	0x08009915
 8007f94:	0800999c 	.word	0x0800999c

08007f98 <__lshift>:
 8007f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	460c      	mov	r4, r1
 8007f9e:	6849      	ldr	r1, [r1, #4]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	4607      	mov	r7, r0
 8007faa:	4691      	mov	r9, r2
 8007fac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fb0:	f108 0601 	add.w	r6, r8, #1
 8007fb4:	42b3      	cmp	r3, r6
 8007fb6:	db0b      	blt.n	8007fd0 <__lshift+0x38>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	f7ff fddb 	bl	8007b74 <_Balloc>
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	b948      	cbnz	r0, 8007fd6 <__lshift+0x3e>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b28      	ldr	r3, [pc, #160]	; (8008068 <__lshift+0xd0>)
 8007fc6:	4829      	ldr	r0, [pc, #164]	; (800806c <__lshift+0xd4>)
 8007fc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007fcc:	f000 fb76 	bl	80086bc <__assert_func>
 8007fd0:	3101      	adds	r1, #1
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__lshift+0x1c>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	f100 0114 	add.w	r1, r0, #20
 8007fdc:	f100 0210 	add.w	r2, r0, #16
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	4553      	cmp	r3, sl
 8007fe4:	db33      	blt.n	800804e <__lshift+0xb6>
 8007fe6:	6920      	ldr	r0, [r4, #16]
 8007fe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fec:	f104 0314 	add.w	r3, r4, #20
 8007ff0:	f019 091f 	ands.w	r9, r9, #31
 8007ff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ff8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ffc:	d02b      	beq.n	8008056 <__lshift+0xbe>
 8007ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8008002:	468a      	mov	sl, r1
 8008004:	2200      	movs	r2, #0
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	fa00 f009 	lsl.w	r0, r0, r9
 800800c:	4302      	orrs	r2, r0
 800800e:	f84a 2b04 	str.w	r2, [sl], #4
 8008012:	f853 2b04 	ldr.w	r2, [r3], #4
 8008016:	459c      	cmp	ip, r3
 8008018:	fa22 f20e 	lsr.w	r2, r2, lr
 800801c:	d8f3      	bhi.n	8008006 <__lshift+0x6e>
 800801e:	ebac 0304 	sub.w	r3, ip, r4
 8008022:	3b15      	subs	r3, #21
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	3304      	adds	r3, #4
 800802a:	f104 0015 	add.w	r0, r4, #21
 800802e:	4584      	cmp	ip, r0
 8008030:	bf38      	it	cc
 8008032:	2304      	movcc	r3, #4
 8008034:	50ca      	str	r2, [r1, r3]
 8008036:	b10a      	cbz	r2, 800803c <__lshift+0xa4>
 8008038:	f108 0602 	add.w	r6, r8, #2
 800803c:	3e01      	subs	r6, #1
 800803e:	4638      	mov	r0, r7
 8008040:	612e      	str	r6, [r5, #16]
 8008042:	4621      	mov	r1, r4
 8008044:	f7ff fdd6 	bl	8007bf4 <_Bfree>
 8008048:	4628      	mov	r0, r5
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008052:	3301      	adds	r3, #1
 8008054:	e7c5      	b.n	8007fe2 <__lshift+0x4a>
 8008056:	3904      	subs	r1, #4
 8008058:	f853 2b04 	ldr.w	r2, [r3], #4
 800805c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008060:	459c      	cmp	ip, r3
 8008062:	d8f9      	bhi.n	8008058 <__lshift+0xc0>
 8008064:	e7ea      	b.n	800803c <__lshift+0xa4>
 8008066:	bf00      	nop
 8008068:	0800998b 	.word	0x0800998b
 800806c:	0800999c 	.word	0x0800999c

08008070 <__mcmp>:
 8008070:	b530      	push	{r4, r5, lr}
 8008072:	6902      	ldr	r2, [r0, #16]
 8008074:	690c      	ldr	r4, [r1, #16]
 8008076:	1b12      	subs	r2, r2, r4
 8008078:	d10e      	bne.n	8008098 <__mcmp+0x28>
 800807a:	f100 0314 	add.w	r3, r0, #20
 800807e:	3114      	adds	r1, #20
 8008080:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008084:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008088:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800808c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008090:	42a5      	cmp	r5, r4
 8008092:	d003      	beq.n	800809c <__mcmp+0x2c>
 8008094:	d305      	bcc.n	80080a2 <__mcmp+0x32>
 8008096:	2201      	movs	r2, #1
 8008098:	4610      	mov	r0, r2
 800809a:	bd30      	pop	{r4, r5, pc}
 800809c:	4283      	cmp	r3, r0
 800809e:	d3f3      	bcc.n	8008088 <__mcmp+0x18>
 80080a0:	e7fa      	b.n	8008098 <__mcmp+0x28>
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	e7f7      	b.n	8008098 <__mcmp+0x28>

080080a8 <__mdiff>:
 80080a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	460c      	mov	r4, r1
 80080ae:	4606      	mov	r6, r0
 80080b0:	4611      	mov	r1, r2
 80080b2:	4620      	mov	r0, r4
 80080b4:	4617      	mov	r7, r2
 80080b6:	f7ff ffdb 	bl	8008070 <__mcmp>
 80080ba:	1e05      	subs	r5, r0, #0
 80080bc:	d110      	bne.n	80080e0 <__mdiff+0x38>
 80080be:	4629      	mov	r1, r5
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff fd57 	bl	8007b74 <_Balloc>
 80080c6:	b930      	cbnz	r0, 80080d6 <__mdiff+0x2e>
 80080c8:	4b39      	ldr	r3, [pc, #228]	; (80081b0 <__mdiff+0x108>)
 80080ca:	4602      	mov	r2, r0
 80080cc:	f240 2132 	movw	r1, #562	; 0x232
 80080d0:	4838      	ldr	r0, [pc, #224]	; (80081b4 <__mdiff+0x10c>)
 80080d2:	f000 faf3 	bl	80086bc <__assert_func>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e0:	bfa4      	itt	ge
 80080e2:	463b      	movge	r3, r7
 80080e4:	4627      	movge	r7, r4
 80080e6:	4630      	mov	r0, r6
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	bfa6      	itte	ge
 80080ec:	461c      	movge	r4, r3
 80080ee:	2500      	movge	r5, #0
 80080f0:	2501      	movlt	r5, #1
 80080f2:	f7ff fd3f 	bl	8007b74 <_Balloc>
 80080f6:	b920      	cbnz	r0, 8008102 <__mdiff+0x5a>
 80080f8:	4b2d      	ldr	r3, [pc, #180]	; (80081b0 <__mdiff+0x108>)
 80080fa:	4602      	mov	r2, r0
 80080fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008100:	e7e6      	b.n	80080d0 <__mdiff+0x28>
 8008102:	693e      	ldr	r6, [r7, #16]
 8008104:	60c5      	str	r5, [r0, #12]
 8008106:	6925      	ldr	r5, [r4, #16]
 8008108:	f107 0114 	add.w	r1, r7, #20
 800810c:	f104 0914 	add.w	r9, r4, #20
 8008110:	f100 0e14 	add.w	lr, r0, #20
 8008114:	f107 0210 	add.w	r2, r7, #16
 8008118:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800811c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008120:	46f2      	mov	sl, lr
 8008122:	2700      	movs	r7, #0
 8008124:	f859 3b04 	ldr.w	r3, [r9], #4
 8008128:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800812c:	fa1f f883 	uxth.w	r8, r3
 8008130:	fa17 f78b 	uxtah	r7, r7, fp
 8008134:	0c1b      	lsrs	r3, r3, #16
 8008136:	eba7 0808 	sub.w	r8, r7, r8
 800813a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800813e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008142:	fa1f f888 	uxth.w	r8, r8
 8008146:	141f      	asrs	r7, r3, #16
 8008148:	454d      	cmp	r5, r9
 800814a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800814e:	f84a 3b04 	str.w	r3, [sl], #4
 8008152:	d8e7      	bhi.n	8008124 <__mdiff+0x7c>
 8008154:	1b2b      	subs	r3, r5, r4
 8008156:	3b15      	subs	r3, #21
 8008158:	f023 0303 	bic.w	r3, r3, #3
 800815c:	3304      	adds	r3, #4
 800815e:	3415      	adds	r4, #21
 8008160:	42a5      	cmp	r5, r4
 8008162:	bf38      	it	cc
 8008164:	2304      	movcc	r3, #4
 8008166:	4419      	add	r1, r3
 8008168:	4473      	add	r3, lr
 800816a:	469e      	mov	lr, r3
 800816c:	460d      	mov	r5, r1
 800816e:	4565      	cmp	r5, ip
 8008170:	d30e      	bcc.n	8008190 <__mdiff+0xe8>
 8008172:	f10c 0203 	add.w	r2, ip, #3
 8008176:	1a52      	subs	r2, r2, r1
 8008178:	f022 0203 	bic.w	r2, r2, #3
 800817c:	3903      	subs	r1, #3
 800817e:	458c      	cmp	ip, r1
 8008180:	bf38      	it	cc
 8008182:	2200      	movcc	r2, #0
 8008184:	441a      	add	r2, r3
 8008186:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800818a:	b17b      	cbz	r3, 80081ac <__mdiff+0x104>
 800818c:	6106      	str	r6, [r0, #16]
 800818e:	e7a5      	b.n	80080dc <__mdiff+0x34>
 8008190:	f855 8b04 	ldr.w	r8, [r5], #4
 8008194:	fa17 f488 	uxtah	r4, r7, r8
 8008198:	1422      	asrs	r2, r4, #16
 800819a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800819e:	b2a4      	uxth	r4, r4
 80081a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081a4:	f84e 4b04 	str.w	r4, [lr], #4
 80081a8:	1417      	asrs	r7, r2, #16
 80081aa:	e7e0      	b.n	800816e <__mdiff+0xc6>
 80081ac:	3e01      	subs	r6, #1
 80081ae:	e7ea      	b.n	8008186 <__mdiff+0xde>
 80081b0:	0800998b 	.word	0x0800998b
 80081b4:	0800999c 	.word	0x0800999c

080081b8 <__d2b>:
 80081b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081bc:	4689      	mov	r9, r1
 80081be:	2101      	movs	r1, #1
 80081c0:	ec57 6b10 	vmov	r6, r7, d0
 80081c4:	4690      	mov	r8, r2
 80081c6:	f7ff fcd5 	bl	8007b74 <_Balloc>
 80081ca:	4604      	mov	r4, r0
 80081cc:	b930      	cbnz	r0, 80081dc <__d2b+0x24>
 80081ce:	4602      	mov	r2, r0
 80081d0:	4b25      	ldr	r3, [pc, #148]	; (8008268 <__d2b+0xb0>)
 80081d2:	4826      	ldr	r0, [pc, #152]	; (800826c <__d2b+0xb4>)
 80081d4:	f240 310a 	movw	r1, #778	; 0x30a
 80081d8:	f000 fa70 	bl	80086bc <__assert_func>
 80081dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80081e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081e4:	bb35      	cbnz	r5, 8008234 <__d2b+0x7c>
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	d028      	beq.n	800823e <__d2b+0x86>
 80081ec:	4668      	mov	r0, sp
 80081ee:	9600      	str	r6, [sp, #0]
 80081f0:	f7ff fd8c 	bl	8007d0c <__lo0bits>
 80081f4:	9900      	ldr	r1, [sp, #0]
 80081f6:	b300      	cbz	r0, 800823a <__d2b+0x82>
 80081f8:	9a01      	ldr	r2, [sp, #4]
 80081fa:	f1c0 0320 	rsb	r3, r0, #32
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	430b      	orrs	r3, r1
 8008204:	40c2      	lsrs	r2, r0
 8008206:	6163      	str	r3, [r4, #20]
 8008208:	9201      	str	r2, [sp, #4]
 800820a:	9b01      	ldr	r3, [sp, #4]
 800820c:	61a3      	str	r3, [r4, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	bf14      	ite	ne
 8008212:	2202      	movne	r2, #2
 8008214:	2201      	moveq	r2, #1
 8008216:	6122      	str	r2, [r4, #16]
 8008218:	b1d5      	cbz	r5, 8008250 <__d2b+0x98>
 800821a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800821e:	4405      	add	r5, r0
 8008220:	f8c9 5000 	str.w	r5, [r9]
 8008224:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008228:	f8c8 0000 	str.w	r0, [r8]
 800822c:	4620      	mov	r0, r4
 800822e:	b003      	add	sp, #12
 8008230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008238:	e7d5      	b.n	80081e6 <__d2b+0x2e>
 800823a:	6161      	str	r1, [r4, #20]
 800823c:	e7e5      	b.n	800820a <__d2b+0x52>
 800823e:	a801      	add	r0, sp, #4
 8008240:	f7ff fd64 	bl	8007d0c <__lo0bits>
 8008244:	9b01      	ldr	r3, [sp, #4]
 8008246:	6163      	str	r3, [r4, #20]
 8008248:	2201      	movs	r2, #1
 800824a:	6122      	str	r2, [r4, #16]
 800824c:	3020      	adds	r0, #32
 800824e:	e7e3      	b.n	8008218 <__d2b+0x60>
 8008250:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008254:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008258:	f8c9 0000 	str.w	r0, [r9]
 800825c:	6918      	ldr	r0, [r3, #16]
 800825e:	f7ff fd35 	bl	8007ccc <__hi0bits>
 8008262:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008266:	e7df      	b.n	8008228 <__d2b+0x70>
 8008268:	0800998b 	.word	0x0800998b
 800826c:	0800999c 	.word	0x0800999c

08008270 <_calloc_r>:
 8008270:	b513      	push	{r0, r1, r4, lr}
 8008272:	434a      	muls	r2, r1
 8008274:	4611      	mov	r1, r2
 8008276:	9201      	str	r2, [sp, #4]
 8008278:	f000 f85a 	bl	8008330 <_malloc_r>
 800827c:	4604      	mov	r4, r0
 800827e:	b118      	cbz	r0, 8008288 <_calloc_r+0x18>
 8008280:	9a01      	ldr	r2, [sp, #4]
 8008282:	2100      	movs	r1, #0
 8008284:	f7fe f944 	bl	8006510 <memset>
 8008288:	4620      	mov	r0, r4
 800828a:	b002      	add	sp, #8
 800828c:	bd10      	pop	{r4, pc}
	...

08008290 <_free_r>:
 8008290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008292:	2900      	cmp	r1, #0
 8008294:	d048      	beq.n	8008328 <_free_r+0x98>
 8008296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800829a:	9001      	str	r0, [sp, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f1a1 0404 	sub.w	r4, r1, #4
 80082a2:	bfb8      	it	lt
 80082a4:	18e4      	addlt	r4, r4, r3
 80082a6:	f000 fa65 	bl	8008774 <__malloc_lock>
 80082aa:	4a20      	ldr	r2, [pc, #128]	; (800832c <_free_r+0x9c>)
 80082ac:	9801      	ldr	r0, [sp, #4]
 80082ae:	6813      	ldr	r3, [r2, #0]
 80082b0:	4615      	mov	r5, r2
 80082b2:	b933      	cbnz	r3, 80082c2 <_free_r+0x32>
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	6014      	str	r4, [r2, #0]
 80082b8:	b003      	add	sp, #12
 80082ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082be:	f000 ba5f 	b.w	8008780 <__malloc_unlock>
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	d90b      	bls.n	80082de <_free_r+0x4e>
 80082c6:	6821      	ldr	r1, [r4, #0]
 80082c8:	1862      	adds	r2, r4, r1
 80082ca:	4293      	cmp	r3, r2
 80082cc:	bf04      	itt	eq
 80082ce:	681a      	ldreq	r2, [r3, #0]
 80082d0:	685b      	ldreq	r3, [r3, #4]
 80082d2:	6063      	str	r3, [r4, #4]
 80082d4:	bf04      	itt	eq
 80082d6:	1852      	addeq	r2, r2, r1
 80082d8:	6022      	streq	r2, [r4, #0]
 80082da:	602c      	str	r4, [r5, #0]
 80082dc:	e7ec      	b.n	80082b8 <_free_r+0x28>
 80082de:	461a      	mov	r2, r3
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b10b      	cbz	r3, 80082e8 <_free_r+0x58>
 80082e4:	42a3      	cmp	r3, r4
 80082e6:	d9fa      	bls.n	80082de <_free_r+0x4e>
 80082e8:	6811      	ldr	r1, [r2, #0]
 80082ea:	1855      	adds	r5, r2, r1
 80082ec:	42a5      	cmp	r5, r4
 80082ee:	d10b      	bne.n	8008308 <_free_r+0x78>
 80082f0:	6824      	ldr	r4, [r4, #0]
 80082f2:	4421      	add	r1, r4
 80082f4:	1854      	adds	r4, r2, r1
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	6011      	str	r1, [r2, #0]
 80082fa:	d1dd      	bne.n	80082b8 <_free_r+0x28>
 80082fc:	681c      	ldr	r4, [r3, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	6053      	str	r3, [r2, #4]
 8008302:	4421      	add	r1, r4
 8008304:	6011      	str	r1, [r2, #0]
 8008306:	e7d7      	b.n	80082b8 <_free_r+0x28>
 8008308:	d902      	bls.n	8008310 <_free_r+0x80>
 800830a:	230c      	movs	r3, #12
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	e7d3      	b.n	80082b8 <_free_r+0x28>
 8008310:	6825      	ldr	r5, [r4, #0]
 8008312:	1961      	adds	r1, r4, r5
 8008314:	428b      	cmp	r3, r1
 8008316:	bf04      	itt	eq
 8008318:	6819      	ldreq	r1, [r3, #0]
 800831a:	685b      	ldreq	r3, [r3, #4]
 800831c:	6063      	str	r3, [r4, #4]
 800831e:	bf04      	itt	eq
 8008320:	1949      	addeq	r1, r1, r5
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	6054      	str	r4, [r2, #4]
 8008326:	e7c7      	b.n	80082b8 <_free_r+0x28>
 8008328:	b003      	add	sp, #12
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	20000604 	.word	0x20000604

08008330 <_malloc_r>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	1ccd      	adds	r5, r1, #3
 8008334:	f025 0503 	bic.w	r5, r5, #3
 8008338:	3508      	adds	r5, #8
 800833a:	2d0c      	cmp	r5, #12
 800833c:	bf38      	it	cc
 800833e:	250c      	movcc	r5, #12
 8008340:	2d00      	cmp	r5, #0
 8008342:	4606      	mov	r6, r0
 8008344:	db01      	blt.n	800834a <_malloc_r+0x1a>
 8008346:	42a9      	cmp	r1, r5
 8008348:	d903      	bls.n	8008352 <_malloc_r+0x22>
 800834a:	230c      	movs	r3, #12
 800834c:	6033      	str	r3, [r6, #0]
 800834e:	2000      	movs	r0, #0
 8008350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008352:	f000 fa0f 	bl	8008774 <__malloc_lock>
 8008356:	4921      	ldr	r1, [pc, #132]	; (80083dc <_malloc_r+0xac>)
 8008358:	680a      	ldr	r2, [r1, #0]
 800835a:	4614      	mov	r4, r2
 800835c:	b99c      	cbnz	r4, 8008386 <_malloc_r+0x56>
 800835e:	4f20      	ldr	r7, [pc, #128]	; (80083e0 <_malloc_r+0xb0>)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	b923      	cbnz	r3, 800836e <_malloc_r+0x3e>
 8008364:	4621      	mov	r1, r4
 8008366:	4630      	mov	r0, r6
 8008368:	f000 f998 	bl	800869c <_sbrk_r>
 800836c:	6038      	str	r0, [r7, #0]
 800836e:	4629      	mov	r1, r5
 8008370:	4630      	mov	r0, r6
 8008372:	f000 f993 	bl	800869c <_sbrk_r>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d123      	bne.n	80083c2 <_malloc_r+0x92>
 800837a:	230c      	movs	r3, #12
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	4630      	mov	r0, r6
 8008380:	f000 f9fe 	bl	8008780 <__malloc_unlock>
 8008384:	e7e3      	b.n	800834e <_malloc_r+0x1e>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	1b5b      	subs	r3, r3, r5
 800838a:	d417      	bmi.n	80083bc <_malloc_r+0x8c>
 800838c:	2b0b      	cmp	r3, #11
 800838e:	d903      	bls.n	8008398 <_malloc_r+0x68>
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	441c      	add	r4, r3
 8008394:	6025      	str	r5, [r4, #0]
 8008396:	e004      	b.n	80083a2 <_malloc_r+0x72>
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	42a2      	cmp	r2, r4
 800839c:	bf0c      	ite	eq
 800839e:	600b      	streq	r3, [r1, #0]
 80083a0:	6053      	strne	r3, [r2, #4]
 80083a2:	4630      	mov	r0, r6
 80083a4:	f000 f9ec 	bl	8008780 <__malloc_unlock>
 80083a8:	f104 000b 	add.w	r0, r4, #11
 80083ac:	1d23      	adds	r3, r4, #4
 80083ae:	f020 0007 	bic.w	r0, r0, #7
 80083b2:	1ac2      	subs	r2, r0, r3
 80083b4:	d0cc      	beq.n	8008350 <_malloc_r+0x20>
 80083b6:	1a1b      	subs	r3, r3, r0
 80083b8:	50a3      	str	r3, [r4, r2]
 80083ba:	e7c9      	b.n	8008350 <_malloc_r+0x20>
 80083bc:	4622      	mov	r2, r4
 80083be:	6864      	ldr	r4, [r4, #4]
 80083c0:	e7cc      	b.n	800835c <_malloc_r+0x2c>
 80083c2:	1cc4      	adds	r4, r0, #3
 80083c4:	f024 0403 	bic.w	r4, r4, #3
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d0e3      	beq.n	8008394 <_malloc_r+0x64>
 80083cc:	1a21      	subs	r1, r4, r0
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f964 	bl	800869c <_sbrk_r>
 80083d4:	3001      	adds	r0, #1
 80083d6:	d1dd      	bne.n	8008394 <_malloc_r+0x64>
 80083d8:	e7cf      	b.n	800837a <_malloc_r+0x4a>
 80083da:	bf00      	nop
 80083dc:	20000604 	.word	0x20000604
 80083e0:	20000608 	.word	0x20000608

080083e4 <__ssputs_r>:
 80083e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e8:	688e      	ldr	r6, [r1, #8]
 80083ea:	429e      	cmp	r6, r3
 80083ec:	4682      	mov	sl, r0
 80083ee:	460c      	mov	r4, r1
 80083f0:	4690      	mov	r8, r2
 80083f2:	461f      	mov	r7, r3
 80083f4:	d838      	bhi.n	8008468 <__ssputs_r+0x84>
 80083f6:	898a      	ldrh	r2, [r1, #12]
 80083f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083fc:	d032      	beq.n	8008464 <__ssputs_r+0x80>
 80083fe:	6825      	ldr	r5, [r4, #0]
 8008400:	6909      	ldr	r1, [r1, #16]
 8008402:	eba5 0901 	sub.w	r9, r5, r1
 8008406:	6965      	ldr	r5, [r4, #20]
 8008408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800840c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008410:	3301      	adds	r3, #1
 8008412:	444b      	add	r3, r9
 8008414:	106d      	asrs	r5, r5, #1
 8008416:	429d      	cmp	r5, r3
 8008418:	bf38      	it	cc
 800841a:	461d      	movcc	r5, r3
 800841c:	0553      	lsls	r3, r2, #21
 800841e:	d531      	bpl.n	8008484 <__ssputs_r+0xa0>
 8008420:	4629      	mov	r1, r5
 8008422:	f7ff ff85 	bl	8008330 <_malloc_r>
 8008426:	4606      	mov	r6, r0
 8008428:	b950      	cbnz	r0, 8008440 <__ssputs_r+0x5c>
 800842a:	230c      	movs	r3, #12
 800842c:	f8ca 3000 	str.w	r3, [sl]
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008436:	81a3      	strh	r3, [r4, #12]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	6921      	ldr	r1, [r4, #16]
 8008442:	464a      	mov	r2, r9
 8008444:	f7ff fb88 	bl	8007b58 <memcpy>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800844e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	6126      	str	r6, [r4, #16]
 8008456:	6165      	str	r5, [r4, #20]
 8008458:	444e      	add	r6, r9
 800845a:	eba5 0509 	sub.w	r5, r5, r9
 800845e:	6026      	str	r6, [r4, #0]
 8008460:	60a5      	str	r5, [r4, #8]
 8008462:	463e      	mov	r6, r7
 8008464:	42be      	cmp	r6, r7
 8008466:	d900      	bls.n	800846a <__ssputs_r+0x86>
 8008468:	463e      	mov	r6, r7
 800846a:	4632      	mov	r2, r6
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	4641      	mov	r1, r8
 8008470:	f000 f966 	bl	8008740 <memmove>
 8008474:	68a3      	ldr	r3, [r4, #8]
 8008476:	6822      	ldr	r2, [r4, #0]
 8008478:	1b9b      	subs	r3, r3, r6
 800847a:	4432      	add	r2, r6
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	6022      	str	r2, [r4, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e7db      	b.n	800843c <__ssputs_r+0x58>
 8008484:	462a      	mov	r2, r5
 8008486:	f000 f981 	bl	800878c <_realloc_r>
 800848a:	4606      	mov	r6, r0
 800848c:	2800      	cmp	r0, #0
 800848e:	d1e1      	bne.n	8008454 <__ssputs_r+0x70>
 8008490:	6921      	ldr	r1, [r4, #16]
 8008492:	4650      	mov	r0, sl
 8008494:	f7ff fefc 	bl	8008290 <_free_r>
 8008498:	e7c7      	b.n	800842a <__ssputs_r+0x46>
	...

0800849c <_svfiprintf_r>:
 800849c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a0:	4698      	mov	r8, r3
 80084a2:	898b      	ldrh	r3, [r1, #12]
 80084a4:	061b      	lsls	r3, r3, #24
 80084a6:	b09d      	sub	sp, #116	; 0x74
 80084a8:	4607      	mov	r7, r0
 80084aa:	460d      	mov	r5, r1
 80084ac:	4614      	mov	r4, r2
 80084ae:	d50e      	bpl.n	80084ce <_svfiprintf_r+0x32>
 80084b0:	690b      	ldr	r3, [r1, #16]
 80084b2:	b963      	cbnz	r3, 80084ce <_svfiprintf_r+0x32>
 80084b4:	2140      	movs	r1, #64	; 0x40
 80084b6:	f7ff ff3b 	bl	8008330 <_malloc_r>
 80084ba:	6028      	str	r0, [r5, #0]
 80084bc:	6128      	str	r0, [r5, #16]
 80084be:	b920      	cbnz	r0, 80084ca <_svfiprintf_r+0x2e>
 80084c0:	230c      	movs	r3, #12
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	f04f 30ff 	mov.w	r0, #4294967295
 80084c8:	e0d1      	b.n	800866e <_svfiprintf_r+0x1d2>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	616b      	str	r3, [r5, #20]
 80084ce:	2300      	movs	r3, #0
 80084d0:	9309      	str	r3, [sp, #36]	; 0x24
 80084d2:	2320      	movs	r3, #32
 80084d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084dc:	2330      	movs	r3, #48	; 0x30
 80084de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008688 <_svfiprintf_r+0x1ec>
 80084e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e6:	f04f 0901 	mov.w	r9, #1
 80084ea:	4623      	mov	r3, r4
 80084ec:	469a      	mov	sl, r3
 80084ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f2:	b10a      	cbz	r2, 80084f8 <_svfiprintf_r+0x5c>
 80084f4:	2a25      	cmp	r2, #37	; 0x25
 80084f6:	d1f9      	bne.n	80084ec <_svfiprintf_r+0x50>
 80084f8:	ebba 0b04 	subs.w	fp, sl, r4
 80084fc:	d00b      	beq.n	8008516 <_svfiprintf_r+0x7a>
 80084fe:	465b      	mov	r3, fp
 8008500:	4622      	mov	r2, r4
 8008502:	4629      	mov	r1, r5
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ff6d 	bl	80083e4 <__ssputs_r>
 800850a:	3001      	adds	r0, #1
 800850c:	f000 80aa 	beq.w	8008664 <_svfiprintf_r+0x1c8>
 8008510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008512:	445a      	add	r2, fp
 8008514:	9209      	str	r2, [sp, #36]	; 0x24
 8008516:	f89a 3000 	ldrb.w	r3, [sl]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80a2 	beq.w	8008664 <_svfiprintf_r+0x1c8>
 8008520:	2300      	movs	r3, #0
 8008522:	f04f 32ff 	mov.w	r2, #4294967295
 8008526:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800852a:	f10a 0a01 	add.w	sl, sl, #1
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	9307      	str	r3, [sp, #28]
 8008532:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008536:	931a      	str	r3, [sp, #104]	; 0x68
 8008538:	4654      	mov	r4, sl
 800853a:	2205      	movs	r2, #5
 800853c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008540:	4851      	ldr	r0, [pc, #324]	; (8008688 <_svfiprintf_r+0x1ec>)
 8008542:	f7f7 fe55 	bl	80001f0 <memchr>
 8008546:	9a04      	ldr	r2, [sp, #16]
 8008548:	b9d8      	cbnz	r0, 8008582 <_svfiprintf_r+0xe6>
 800854a:	06d0      	lsls	r0, r2, #27
 800854c:	bf44      	itt	mi
 800854e:	2320      	movmi	r3, #32
 8008550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008554:	0711      	lsls	r1, r2, #28
 8008556:	bf44      	itt	mi
 8008558:	232b      	movmi	r3, #43	; 0x2b
 800855a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855e:	f89a 3000 	ldrb.w	r3, [sl]
 8008562:	2b2a      	cmp	r3, #42	; 0x2a
 8008564:	d015      	beq.n	8008592 <_svfiprintf_r+0xf6>
 8008566:	9a07      	ldr	r2, [sp, #28]
 8008568:	4654      	mov	r4, sl
 800856a:	2000      	movs	r0, #0
 800856c:	f04f 0c0a 	mov.w	ip, #10
 8008570:	4621      	mov	r1, r4
 8008572:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008576:	3b30      	subs	r3, #48	; 0x30
 8008578:	2b09      	cmp	r3, #9
 800857a:	d94e      	bls.n	800861a <_svfiprintf_r+0x17e>
 800857c:	b1b0      	cbz	r0, 80085ac <_svfiprintf_r+0x110>
 800857e:	9207      	str	r2, [sp, #28]
 8008580:	e014      	b.n	80085ac <_svfiprintf_r+0x110>
 8008582:	eba0 0308 	sub.w	r3, r0, r8
 8008586:	fa09 f303 	lsl.w	r3, r9, r3
 800858a:	4313      	orrs	r3, r2
 800858c:	9304      	str	r3, [sp, #16]
 800858e:	46a2      	mov	sl, r4
 8008590:	e7d2      	b.n	8008538 <_svfiprintf_r+0x9c>
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	1d19      	adds	r1, r3, #4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	9103      	str	r1, [sp, #12]
 800859a:	2b00      	cmp	r3, #0
 800859c:	bfbb      	ittet	lt
 800859e:	425b      	neglt	r3, r3
 80085a0:	f042 0202 	orrlt.w	r2, r2, #2
 80085a4:	9307      	strge	r3, [sp, #28]
 80085a6:	9307      	strlt	r3, [sp, #28]
 80085a8:	bfb8      	it	lt
 80085aa:	9204      	strlt	r2, [sp, #16]
 80085ac:	7823      	ldrb	r3, [r4, #0]
 80085ae:	2b2e      	cmp	r3, #46	; 0x2e
 80085b0:	d10c      	bne.n	80085cc <_svfiprintf_r+0x130>
 80085b2:	7863      	ldrb	r3, [r4, #1]
 80085b4:	2b2a      	cmp	r3, #42	; 0x2a
 80085b6:	d135      	bne.n	8008624 <_svfiprintf_r+0x188>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	1d1a      	adds	r2, r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	9203      	str	r2, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bfb8      	it	lt
 80085c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80085c8:	3402      	adds	r4, #2
 80085ca:	9305      	str	r3, [sp, #20]
 80085cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008698 <_svfiprintf_r+0x1fc>
 80085d0:	7821      	ldrb	r1, [r4, #0]
 80085d2:	2203      	movs	r2, #3
 80085d4:	4650      	mov	r0, sl
 80085d6:	f7f7 fe0b 	bl	80001f0 <memchr>
 80085da:	b140      	cbz	r0, 80085ee <_svfiprintf_r+0x152>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	eba0 000a 	sub.w	r0, r0, sl
 80085e2:	fa03 f000 	lsl.w	r0, r3, r0
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	4303      	orrs	r3, r0
 80085ea:	3401      	adds	r4, #1
 80085ec:	9304      	str	r3, [sp, #16]
 80085ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f2:	4826      	ldr	r0, [pc, #152]	; (800868c <_svfiprintf_r+0x1f0>)
 80085f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f8:	2206      	movs	r2, #6
 80085fa:	f7f7 fdf9 	bl	80001f0 <memchr>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d038      	beq.n	8008674 <_svfiprintf_r+0x1d8>
 8008602:	4b23      	ldr	r3, [pc, #140]	; (8008690 <_svfiprintf_r+0x1f4>)
 8008604:	bb1b      	cbnz	r3, 800864e <_svfiprintf_r+0x1b2>
 8008606:	9b03      	ldr	r3, [sp, #12]
 8008608:	3307      	adds	r3, #7
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	3308      	adds	r3, #8
 8008610:	9303      	str	r3, [sp, #12]
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	4433      	add	r3, r6
 8008616:	9309      	str	r3, [sp, #36]	; 0x24
 8008618:	e767      	b.n	80084ea <_svfiprintf_r+0x4e>
 800861a:	fb0c 3202 	mla	r2, ip, r2, r3
 800861e:	460c      	mov	r4, r1
 8008620:	2001      	movs	r0, #1
 8008622:	e7a5      	b.n	8008570 <_svfiprintf_r+0xd4>
 8008624:	2300      	movs	r3, #0
 8008626:	3401      	adds	r4, #1
 8008628:	9305      	str	r3, [sp, #20]
 800862a:	4619      	mov	r1, r3
 800862c:	f04f 0c0a 	mov.w	ip, #10
 8008630:	4620      	mov	r0, r4
 8008632:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008636:	3a30      	subs	r2, #48	; 0x30
 8008638:	2a09      	cmp	r2, #9
 800863a:	d903      	bls.n	8008644 <_svfiprintf_r+0x1a8>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0c5      	beq.n	80085cc <_svfiprintf_r+0x130>
 8008640:	9105      	str	r1, [sp, #20]
 8008642:	e7c3      	b.n	80085cc <_svfiprintf_r+0x130>
 8008644:	fb0c 2101 	mla	r1, ip, r1, r2
 8008648:	4604      	mov	r4, r0
 800864a:	2301      	movs	r3, #1
 800864c:	e7f0      	b.n	8008630 <_svfiprintf_r+0x194>
 800864e:	ab03      	add	r3, sp, #12
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	462a      	mov	r2, r5
 8008654:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <_svfiprintf_r+0x1f8>)
 8008656:	a904      	add	r1, sp, #16
 8008658:	4638      	mov	r0, r7
 800865a:	f7fe f801 	bl	8006660 <_printf_float>
 800865e:	1c42      	adds	r2, r0, #1
 8008660:	4606      	mov	r6, r0
 8008662:	d1d6      	bne.n	8008612 <_svfiprintf_r+0x176>
 8008664:	89ab      	ldrh	r3, [r5, #12]
 8008666:	065b      	lsls	r3, r3, #25
 8008668:	f53f af2c 	bmi.w	80084c4 <_svfiprintf_r+0x28>
 800866c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800866e:	b01d      	add	sp, #116	; 0x74
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	ab03      	add	r3, sp, #12
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	462a      	mov	r2, r5
 800867a:	4b06      	ldr	r3, [pc, #24]	; (8008694 <_svfiprintf_r+0x1f8>)
 800867c:	a904      	add	r1, sp, #16
 800867e:	4638      	mov	r0, r7
 8008680:	f7fe fa92 	bl	8006ba8 <_printf_i>
 8008684:	e7eb      	b.n	800865e <_svfiprintf_r+0x1c2>
 8008686:	bf00      	nop
 8008688:	08009afc 	.word	0x08009afc
 800868c:	08009b06 	.word	0x08009b06
 8008690:	08006661 	.word	0x08006661
 8008694:	080083e5 	.word	0x080083e5
 8008698:	08009b02 	.word	0x08009b02

0800869c <_sbrk_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d06      	ldr	r5, [pc, #24]	; (80086b8 <_sbrk_r+0x1c>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	f7f9 ffe8 	bl	800267c <_sbrk>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d102      	bne.n	80086b6 <_sbrk_r+0x1a>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	b103      	cbz	r3, 80086b6 <_sbrk_r+0x1a>
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	bd38      	pop	{r3, r4, r5, pc}
 80086b8:	20000844 	.word	0x20000844

080086bc <__assert_func>:
 80086bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086be:	4614      	mov	r4, r2
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <__assert_func+0x2c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4605      	mov	r5, r0
 80086c8:	68d8      	ldr	r0, [r3, #12]
 80086ca:	b14c      	cbz	r4, 80086e0 <__assert_func+0x24>
 80086cc:	4b07      	ldr	r3, [pc, #28]	; (80086ec <__assert_func+0x30>)
 80086ce:	9100      	str	r1, [sp, #0]
 80086d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086d4:	4906      	ldr	r1, [pc, #24]	; (80086f0 <__assert_func+0x34>)
 80086d6:	462b      	mov	r3, r5
 80086d8:	f000 f80e 	bl	80086f8 <fiprintf>
 80086dc:	f000 faa4 	bl	8008c28 <abort>
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <__assert_func+0x38>)
 80086e2:	461c      	mov	r4, r3
 80086e4:	e7f3      	b.n	80086ce <__assert_func+0x12>
 80086e6:	bf00      	nop
 80086e8:	2000000c 	.word	0x2000000c
 80086ec:	08009b0d 	.word	0x08009b0d
 80086f0:	08009b1a 	.word	0x08009b1a
 80086f4:	08009b48 	.word	0x08009b48

080086f8 <fiprintf>:
 80086f8:	b40e      	push	{r1, r2, r3}
 80086fa:	b503      	push	{r0, r1, lr}
 80086fc:	4601      	mov	r1, r0
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	4805      	ldr	r0, [pc, #20]	; (8008718 <fiprintf+0x20>)
 8008702:	f853 2b04 	ldr.w	r2, [r3], #4
 8008706:	6800      	ldr	r0, [r0, #0]
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f000 f88f 	bl	800882c <_vfiprintf_r>
 800870e:	b002      	add	sp, #8
 8008710:	f85d eb04 	ldr.w	lr, [sp], #4
 8008714:	b003      	add	sp, #12
 8008716:	4770      	bx	lr
 8008718:	2000000c 	.word	0x2000000c

0800871c <__ascii_mbtowc>:
 800871c:	b082      	sub	sp, #8
 800871e:	b901      	cbnz	r1, 8008722 <__ascii_mbtowc+0x6>
 8008720:	a901      	add	r1, sp, #4
 8008722:	b142      	cbz	r2, 8008736 <__ascii_mbtowc+0x1a>
 8008724:	b14b      	cbz	r3, 800873a <__ascii_mbtowc+0x1e>
 8008726:	7813      	ldrb	r3, [r2, #0]
 8008728:	600b      	str	r3, [r1, #0]
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	1e10      	subs	r0, r2, #0
 800872e:	bf18      	it	ne
 8008730:	2001      	movne	r0, #1
 8008732:	b002      	add	sp, #8
 8008734:	4770      	bx	lr
 8008736:	4610      	mov	r0, r2
 8008738:	e7fb      	b.n	8008732 <__ascii_mbtowc+0x16>
 800873a:	f06f 0001 	mvn.w	r0, #1
 800873e:	e7f8      	b.n	8008732 <__ascii_mbtowc+0x16>

08008740 <memmove>:
 8008740:	4288      	cmp	r0, r1
 8008742:	b510      	push	{r4, lr}
 8008744:	eb01 0402 	add.w	r4, r1, r2
 8008748:	d902      	bls.n	8008750 <memmove+0x10>
 800874a:	4284      	cmp	r4, r0
 800874c:	4623      	mov	r3, r4
 800874e:	d807      	bhi.n	8008760 <memmove+0x20>
 8008750:	1e43      	subs	r3, r0, #1
 8008752:	42a1      	cmp	r1, r4
 8008754:	d008      	beq.n	8008768 <memmove+0x28>
 8008756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800875e:	e7f8      	b.n	8008752 <memmove+0x12>
 8008760:	4402      	add	r2, r0
 8008762:	4601      	mov	r1, r0
 8008764:	428a      	cmp	r2, r1
 8008766:	d100      	bne.n	800876a <memmove+0x2a>
 8008768:	bd10      	pop	{r4, pc}
 800876a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800876e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008772:	e7f7      	b.n	8008764 <memmove+0x24>

08008774 <__malloc_lock>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__malloc_lock+0x8>)
 8008776:	f000 bc17 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 800877a:	bf00      	nop
 800877c:	2000084c 	.word	0x2000084c

08008780 <__malloc_unlock>:
 8008780:	4801      	ldr	r0, [pc, #4]	; (8008788 <__malloc_unlock+0x8>)
 8008782:	f000 bc12 	b.w	8008faa <__retarget_lock_release_recursive>
 8008786:	bf00      	nop
 8008788:	2000084c 	.word	0x2000084c

0800878c <_realloc_r>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	4607      	mov	r7, r0
 8008790:	4614      	mov	r4, r2
 8008792:	460e      	mov	r6, r1
 8008794:	b921      	cbnz	r1, 80087a0 <_realloc_r+0x14>
 8008796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800879a:	4611      	mov	r1, r2
 800879c:	f7ff bdc8 	b.w	8008330 <_malloc_r>
 80087a0:	b922      	cbnz	r2, 80087ac <_realloc_r+0x20>
 80087a2:	f7ff fd75 	bl	8008290 <_free_r>
 80087a6:	4625      	mov	r5, r4
 80087a8:	4628      	mov	r0, r5
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	f000 fc62 	bl	8009074 <_malloc_usable_size_r>
 80087b0:	42a0      	cmp	r0, r4
 80087b2:	d20f      	bcs.n	80087d4 <_realloc_r+0x48>
 80087b4:	4621      	mov	r1, r4
 80087b6:	4638      	mov	r0, r7
 80087b8:	f7ff fdba 	bl	8008330 <_malloc_r>
 80087bc:	4605      	mov	r5, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0f2      	beq.n	80087a8 <_realloc_r+0x1c>
 80087c2:	4631      	mov	r1, r6
 80087c4:	4622      	mov	r2, r4
 80087c6:	f7ff f9c7 	bl	8007b58 <memcpy>
 80087ca:	4631      	mov	r1, r6
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff fd5f 	bl	8008290 <_free_r>
 80087d2:	e7e9      	b.n	80087a8 <_realloc_r+0x1c>
 80087d4:	4635      	mov	r5, r6
 80087d6:	e7e7      	b.n	80087a8 <_realloc_r+0x1c>

080087d8 <__sfputc_r>:
 80087d8:	6893      	ldr	r3, [r2, #8]
 80087da:	3b01      	subs	r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	b410      	push	{r4}
 80087e0:	6093      	str	r3, [r2, #8]
 80087e2:	da08      	bge.n	80087f6 <__sfputc_r+0x1e>
 80087e4:	6994      	ldr	r4, [r2, #24]
 80087e6:	42a3      	cmp	r3, r4
 80087e8:	db01      	blt.n	80087ee <__sfputc_r+0x16>
 80087ea:	290a      	cmp	r1, #10
 80087ec:	d103      	bne.n	80087f6 <__sfputc_r+0x1e>
 80087ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087f2:	f000 b94b 	b.w	8008a8c <__swbuf_r>
 80087f6:	6813      	ldr	r3, [r2, #0]
 80087f8:	1c58      	adds	r0, r3, #1
 80087fa:	6010      	str	r0, [r2, #0]
 80087fc:	7019      	strb	r1, [r3, #0]
 80087fe:	4608      	mov	r0, r1
 8008800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008804:	4770      	bx	lr

08008806 <__sfputs_r>:
 8008806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008808:	4606      	mov	r6, r0
 800880a:	460f      	mov	r7, r1
 800880c:	4614      	mov	r4, r2
 800880e:	18d5      	adds	r5, r2, r3
 8008810:	42ac      	cmp	r4, r5
 8008812:	d101      	bne.n	8008818 <__sfputs_r+0x12>
 8008814:	2000      	movs	r0, #0
 8008816:	e007      	b.n	8008828 <__sfputs_r+0x22>
 8008818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881c:	463a      	mov	r2, r7
 800881e:	4630      	mov	r0, r6
 8008820:	f7ff ffda 	bl	80087d8 <__sfputc_r>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d1f3      	bne.n	8008810 <__sfputs_r+0xa>
 8008828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800882c <_vfiprintf_r>:
 800882c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008830:	460d      	mov	r5, r1
 8008832:	b09d      	sub	sp, #116	; 0x74
 8008834:	4614      	mov	r4, r2
 8008836:	4698      	mov	r8, r3
 8008838:	4606      	mov	r6, r0
 800883a:	b118      	cbz	r0, 8008844 <_vfiprintf_r+0x18>
 800883c:	6983      	ldr	r3, [r0, #24]
 800883e:	b90b      	cbnz	r3, 8008844 <_vfiprintf_r+0x18>
 8008840:	f000 fb14 	bl	8008e6c <__sinit>
 8008844:	4b89      	ldr	r3, [pc, #548]	; (8008a6c <_vfiprintf_r+0x240>)
 8008846:	429d      	cmp	r5, r3
 8008848:	d11b      	bne.n	8008882 <_vfiprintf_r+0x56>
 800884a:	6875      	ldr	r5, [r6, #4]
 800884c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800884e:	07d9      	lsls	r1, r3, #31
 8008850:	d405      	bmi.n	800885e <_vfiprintf_r+0x32>
 8008852:	89ab      	ldrh	r3, [r5, #12]
 8008854:	059a      	lsls	r2, r3, #22
 8008856:	d402      	bmi.n	800885e <_vfiprintf_r+0x32>
 8008858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885a:	f000 fba5 	bl	8008fa8 <__retarget_lock_acquire_recursive>
 800885e:	89ab      	ldrh	r3, [r5, #12]
 8008860:	071b      	lsls	r3, r3, #28
 8008862:	d501      	bpl.n	8008868 <_vfiprintf_r+0x3c>
 8008864:	692b      	ldr	r3, [r5, #16]
 8008866:	b9eb      	cbnz	r3, 80088a4 <_vfiprintf_r+0x78>
 8008868:	4629      	mov	r1, r5
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f96e 	bl	8008b4c <__swsetup_r>
 8008870:	b1c0      	cbz	r0, 80088a4 <_vfiprintf_r+0x78>
 8008872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008874:	07dc      	lsls	r4, r3, #31
 8008876:	d50e      	bpl.n	8008896 <_vfiprintf_r+0x6a>
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	b01d      	add	sp, #116	; 0x74
 800887e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008882:	4b7b      	ldr	r3, [pc, #492]	; (8008a70 <_vfiprintf_r+0x244>)
 8008884:	429d      	cmp	r5, r3
 8008886:	d101      	bne.n	800888c <_vfiprintf_r+0x60>
 8008888:	68b5      	ldr	r5, [r6, #8]
 800888a:	e7df      	b.n	800884c <_vfiprintf_r+0x20>
 800888c:	4b79      	ldr	r3, [pc, #484]	; (8008a74 <_vfiprintf_r+0x248>)
 800888e:	429d      	cmp	r5, r3
 8008890:	bf08      	it	eq
 8008892:	68f5      	ldreq	r5, [r6, #12]
 8008894:	e7da      	b.n	800884c <_vfiprintf_r+0x20>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	0598      	lsls	r0, r3, #22
 800889a:	d4ed      	bmi.n	8008878 <_vfiprintf_r+0x4c>
 800889c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889e:	f000 fb84 	bl	8008faa <__retarget_lock_release_recursive>
 80088a2:	e7e9      	b.n	8008878 <_vfiprintf_r+0x4c>
 80088a4:	2300      	movs	r3, #0
 80088a6:	9309      	str	r3, [sp, #36]	; 0x24
 80088a8:	2320      	movs	r3, #32
 80088aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80088b2:	2330      	movs	r3, #48	; 0x30
 80088b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008a78 <_vfiprintf_r+0x24c>
 80088b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088bc:	f04f 0901 	mov.w	r9, #1
 80088c0:	4623      	mov	r3, r4
 80088c2:	469a      	mov	sl, r3
 80088c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c8:	b10a      	cbz	r2, 80088ce <_vfiprintf_r+0xa2>
 80088ca:	2a25      	cmp	r2, #37	; 0x25
 80088cc:	d1f9      	bne.n	80088c2 <_vfiprintf_r+0x96>
 80088ce:	ebba 0b04 	subs.w	fp, sl, r4
 80088d2:	d00b      	beq.n	80088ec <_vfiprintf_r+0xc0>
 80088d4:	465b      	mov	r3, fp
 80088d6:	4622      	mov	r2, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ff93 	bl	8008806 <__sfputs_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	f000 80aa 	beq.w	8008a3a <_vfiprintf_r+0x20e>
 80088e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088e8:	445a      	add	r2, fp
 80088ea:	9209      	str	r2, [sp, #36]	; 0x24
 80088ec:	f89a 3000 	ldrb.w	r3, [sl]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80a2 	beq.w	8008a3a <_vfiprintf_r+0x20e>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f04f 32ff 	mov.w	r2, #4294967295
 80088fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008900:	f10a 0a01 	add.w	sl, sl, #1
 8008904:	9304      	str	r3, [sp, #16]
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800890c:	931a      	str	r3, [sp, #104]	; 0x68
 800890e:	4654      	mov	r4, sl
 8008910:	2205      	movs	r2, #5
 8008912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008916:	4858      	ldr	r0, [pc, #352]	; (8008a78 <_vfiprintf_r+0x24c>)
 8008918:	f7f7 fc6a 	bl	80001f0 <memchr>
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	b9d8      	cbnz	r0, 8008958 <_vfiprintf_r+0x12c>
 8008920:	06d1      	lsls	r1, r2, #27
 8008922:	bf44      	itt	mi
 8008924:	2320      	movmi	r3, #32
 8008926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800892a:	0713      	lsls	r3, r2, #28
 800892c:	bf44      	itt	mi
 800892e:	232b      	movmi	r3, #43	; 0x2b
 8008930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008934:	f89a 3000 	ldrb.w	r3, [sl]
 8008938:	2b2a      	cmp	r3, #42	; 0x2a
 800893a:	d015      	beq.n	8008968 <_vfiprintf_r+0x13c>
 800893c:	9a07      	ldr	r2, [sp, #28]
 800893e:	4654      	mov	r4, sl
 8008940:	2000      	movs	r0, #0
 8008942:	f04f 0c0a 	mov.w	ip, #10
 8008946:	4621      	mov	r1, r4
 8008948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800894c:	3b30      	subs	r3, #48	; 0x30
 800894e:	2b09      	cmp	r3, #9
 8008950:	d94e      	bls.n	80089f0 <_vfiprintf_r+0x1c4>
 8008952:	b1b0      	cbz	r0, 8008982 <_vfiprintf_r+0x156>
 8008954:	9207      	str	r2, [sp, #28]
 8008956:	e014      	b.n	8008982 <_vfiprintf_r+0x156>
 8008958:	eba0 0308 	sub.w	r3, r0, r8
 800895c:	fa09 f303 	lsl.w	r3, r9, r3
 8008960:	4313      	orrs	r3, r2
 8008962:	9304      	str	r3, [sp, #16]
 8008964:	46a2      	mov	sl, r4
 8008966:	e7d2      	b.n	800890e <_vfiprintf_r+0xe2>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	1d19      	adds	r1, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9103      	str	r1, [sp, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfbb      	ittet	lt
 8008974:	425b      	neglt	r3, r3
 8008976:	f042 0202 	orrlt.w	r2, r2, #2
 800897a:	9307      	strge	r3, [sp, #28]
 800897c:	9307      	strlt	r3, [sp, #28]
 800897e:	bfb8      	it	lt
 8008980:	9204      	strlt	r2, [sp, #16]
 8008982:	7823      	ldrb	r3, [r4, #0]
 8008984:	2b2e      	cmp	r3, #46	; 0x2e
 8008986:	d10c      	bne.n	80089a2 <_vfiprintf_r+0x176>
 8008988:	7863      	ldrb	r3, [r4, #1]
 800898a:	2b2a      	cmp	r3, #42	; 0x2a
 800898c:	d135      	bne.n	80089fa <_vfiprintf_r+0x1ce>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	1d1a      	adds	r2, r3, #4
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	9203      	str	r2, [sp, #12]
 8008996:	2b00      	cmp	r3, #0
 8008998:	bfb8      	it	lt
 800899a:	f04f 33ff 	movlt.w	r3, #4294967295
 800899e:	3402      	adds	r4, #2
 80089a0:	9305      	str	r3, [sp, #20]
 80089a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008a88 <_vfiprintf_r+0x25c>
 80089a6:	7821      	ldrb	r1, [r4, #0]
 80089a8:	2203      	movs	r2, #3
 80089aa:	4650      	mov	r0, sl
 80089ac:	f7f7 fc20 	bl	80001f0 <memchr>
 80089b0:	b140      	cbz	r0, 80089c4 <_vfiprintf_r+0x198>
 80089b2:	2340      	movs	r3, #64	; 0x40
 80089b4:	eba0 000a 	sub.w	r0, r0, sl
 80089b8:	fa03 f000 	lsl.w	r0, r3, r0
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	4303      	orrs	r3, r0
 80089c0:	3401      	adds	r4, #1
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c8:	482c      	ldr	r0, [pc, #176]	; (8008a7c <_vfiprintf_r+0x250>)
 80089ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089ce:	2206      	movs	r2, #6
 80089d0:	f7f7 fc0e 	bl	80001f0 <memchr>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d03f      	beq.n	8008a58 <_vfiprintf_r+0x22c>
 80089d8:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <_vfiprintf_r+0x254>)
 80089da:	bb1b      	cbnz	r3, 8008a24 <_vfiprintf_r+0x1f8>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	3307      	adds	r3, #7
 80089e0:	f023 0307 	bic.w	r3, r3, #7
 80089e4:	3308      	adds	r3, #8
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ea:	443b      	add	r3, r7
 80089ec:	9309      	str	r3, [sp, #36]	; 0x24
 80089ee:	e767      	b.n	80088c0 <_vfiprintf_r+0x94>
 80089f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80089f4:	460c      	mov	r4, r1
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7a5      	b.n	8008946 <_vfiprintf_r+0x11a>
 80089fa:	2300      	movs	r3, #0
 80089fc:	3401      	adds	r4, #1
 80089fe:	9305      	str	r3, [sp, #20]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 0c0a 	mov.w	ip, #10
 8008a06:	4620      	mov	r0, r4
 8008a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a0c:	3a30      	subs	r2, #48	; 0x30
 8008a0e:	2a09      	cmp	r2, #9
 8008a10:	d903      	bls.n	8008a1a <_vfiprintf_r+0x1ee>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d0c5      	beq.n	80089a2 <_vfiprintf_r+0x176>
 8008a16:	9105      	str	r1, [sp, #20]
 8008a18:	e7c3      	b.n	80089a2 <_vfiprintf_r+0x176>
 8008a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a1e:	4604      	mov	r4, r0
 8008a20:	2301      	movs	r3, #1
 8008a22:	e7f0      	b.n	8008a06 <_vfiprintf_r+0x1da>
 8008a24:	ab03      	add	r3, sp, #12
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	462a      	mov	r2, r5
 8008a2a:	4b16      	ldr	r3, [pc, #88]	; (8008a84 <_vfiprintf_r+0x258>)
 8008a2c:	a904      	add	r1, sp, #16
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7fd fe16 	bl	8006660 <_printf_float>
 8008a34:	4607      	mov	r7, r0
 8008a36:	1c78      	adds	r0, r7, #1
 8008a38:	d1d6      	bne.n	80089e8 <_vfiprintf_r+0x1bc>
 8008a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3c:	07d9      	lsls	r1, r3, #31
 8008a3e:	d405      	bmi.n	8008a4c <_vfiprintf_r+0x220>
 8008a40:	89ab      	ldrh	r3, [r5, #12]
 8008a42:	059a      	lsls	r2, r3, #22
 8008a44:	d402      	bmi.n	8008a4c <_vfiprintf_r+0x220>
 8008a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a48:	f000 faaf 	bl	8008faa <__retarget_lock_release_recursive>
 8008a4c:	89ab      	ldrh	r3, [r5, #12]
 8008a4e:	065b      	lsls	r3, r3, #25
 8008a50:	f53f af12 	bmi.w	8008878 <_vfiprintf_r+0x4c>
 8008a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a56:	e711      	b.n	800887c <_vfiprintf_r+0x50>
 8008a58:	ab03      	add	r3, sp, #12
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	462a      	mov	r2, r5
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <_vfiprintf_r+0x258>)
 8008a60:	a904      	add	r1, sp, #16
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7fe f8a0 	bl	8006ba8 <_printf_i>
 8008a68:	e7e4      	b.n	8008a34 <_vfiprintf_r+0x208>
 8008a6a:	bf00      	nop
 8008a6c:	08009c74 	.word	0x08009c74
 8008a70:	08009c94 	.word	0x08009c94
 8008a74:	08009c54 	.word	0x08009c54
 8008a78:	08009afc 	.word	0x08009afc
 8008a7c:	08009b06 	.word	0x08009b06
 8008a80:	08006661 	.word	0x08006661
 8008a84:	08008807 	.word	0x08008807
 8008a88:	08009b02 	.word	0x08009b02

08008a8c <__swbuf_r>:
 8008a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8e:	460e      	mov	r6, r1
 8008a90:	4614      	mov	r4, r2
 8008a92:	4605      	mov	r5, r0
 8008a94:	b118      	cbz	r0, 8008a9e <__swbuf_r+0x12>
 8008a96:	6983      	ldr	r3, [r0, #24]
 8008a98:	b90b      	cbnz	r3, 8008a9e <__swbuf_r+0x12>
 8008a9a:	f000 f9e7 	bl	8008e6c <__sinit>
 8008a9e:	4b21      	ldr	r3, [pc, #132]	; (8008b24 <__swbuf_r+0x98>)
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	d12b      	bne.n	8008afc <__swbuf_r+0x70>
 8008aa4:	686c      	ldr	r4, [r5, #4]
 8008aa6:	69a3      	ldr	r3, [r4, #24]
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	071a      	lsls	r2, r3, #28
 8008aae:	d52f      	bpl.n	8008b10 <__swbuf_r+0x84>
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	b36b      	cbz	r3, 8008b10 <__swbuf_r+0x84>
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	6820      	ldr	r0, [r4, #0]
 8008ab8:	1ac0      	subs	r0, r0, r3
 8008aba:	6963      	ldr	r3, [r4, #20]
 8008abc:	b2f6      	uxtb	r6, r6
 8008abe:	4283      	cmp	r3, r0
 8008ac0:	4637      	mov	r7, r6
 8008ac2:	dc04      	bgt.n	8008ace <__swbuf_r+0x42>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	f000 f93c 	bl	8008d44 <_fflush_r>
 8008acc:	bb30      	cbnz	r0, 8008b1c <__swbuf_r+0x90>
 8008ace:	68a3      	ldr	r3, [r4, #8]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	60a3      	str	r3, [r4, #8]
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	6022      	str	r2, [r4, #0]
 8008ada:	701e      	strb	r6, [r3, #0]
 8008adc:	6963      	ldr	r3, [r4, #20]
 8008ade:	3001      	adds	r0, #1
 8008ae0:	4283      	cmp	r3, r0
 8008ae2:	d004      	beq.n	8008aee <__swbuf_r+0x62>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	07db      	lsls	r3, r3, #31
 8008ae8:	d506      	bpl.n	8008af8 <__swbuf_r+0x6c>
 8008aea:	2e0a      	cmp	r6, #10
 8008aec:	d104      	bne.n	8008af8 <__swbuf_r+0x6c>
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 f927 	bl	8008d44 <_fflush_r>
 8008af6:	b988      	cbnz	r0, 8008b1c <__swbuf_r+0x90>
 8008af8:	4638      	mov	r0, r7
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <__swbuf_r+0x9c>)
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d101      	bne.n	8008b06 <__swbuf_r+0x7a>
 8008b02:	68ac      	ldr	r4, [r5, #8]
 8008b04:	e7cf      	b.n	8008aa6 <__swbuf_r+0x1a>
 8008b06:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <__swbuf_r+0xa0>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	bf08      	it	eq
 8008b0c:	68ec      	ldreq	r4, [r5, #12]
 8008b0e:	e7ca      	b.n	8008aa6 <__swbuf_r+0x1a>
 8008b10:	4621      	mov	r1, r4
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f81a 	bl	8008b4c <__swsetup_r>
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	d0cb      	beq.n	8008ab4 <__swbuf_r+0x28>
 8008b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b20:	e7ea      	b.n	8008af8 <__swbuf_r+0x6c>
 8008b22:	bf00      	nop
 8008b24:	08009c74 	.word	0x08009c74
 8008b28:	08009c94 	.word	0x08009c94
 8008b2c:	08009c54 	.word	0x08009c54

08008b30 <__ascii_wctomb>:
 8008b30:	b149      	cbz	r1, 8008b46 <__ascii_wctomb+0x16>
 8008b32:	2aff      	cmp	r2, #255	; 0xff
 8008b34:	bf85      	ittet	hi
 8008b36:	238a      	movhi	r3, #138	; 0x8a
 8008b38:	6003      	strhi	r3, [r0, #0]
 8008b3a:	700a      	strbls	r2, [r1, #0]
 8008b3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b40:	bf98      	it	ls
 8008b42:	2001      	movls	r0, #1
 8008b44:	4770      	bx	lr
 8008b46:	4608      	mov	r0, r1
 8008b48:	4770      	bx	lr
	...

08008b4c <__swsetup_r>:
 8008b4c:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <__swsetup_r+0xcc>)
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	681d      	ldr	r5, [r3, #0]
 8008b52:	4606      	mov	r6, r0
 8008b54:	460c      	mov	r4, r1
 8008b56:	b125      	cbz	r5, 8008b62 <__swsetup_r+0x16>
 8008b58:	69ab      	ldr	r3, [r5, #24]
 8008b5a:	b913      	cbnz	r3, 8008b62 <__swsetup_r+0x16>
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 f985 	bl	8008e6c <__sinit>
 8008b62:	4b2e      	ldr	r3, [pc, #184]	; (8008c1c <__swsetup_r+0xd0>)
 8008b64:	429c      	cmp	r4, r3
 8008b66:	d10f      	bne.n	8008b88 <__swsetup_r+0x3c>
 8008b68:	686c      	ldr	r4, [r5, #4]
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b70:	0719      	lsls	r1, r3, #28
 8008b72:	d42c      	bmi.n	8008bce <__swsetup_r+0x82>
 8008b74:	06dd      	lsls	r5, r3, #27
 8008b76:	d411      	bmi.n	8008b9c <__swsetup_r+0x50>
 8008b78:	2309      	movs	r3, #9
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	e03e      	b.n	8008c06 <__swsetup_r+0xba>
 8008b88:	4b25      	ldr	r3, [pc, #148]	; (8008c20 <__swsetup_r+0xd4>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	d101      	bne.n	8008b92 <__swsetup_r+0x46>
 8008b8e:	68ac      	ldr	r4, [r5, #8]
 8008b90:	e7eb      	b.n	8008b6a <__swsetup_r+0x1e>
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <__swsetup_r+0xd8>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	bf08      	it	eq
 8008b98:	68ec      	ldreq	r4, [r5, #12]
 8008b9a:	e7e6      	b.n	8008b6a <__swsetup_r+0x1e>
 8008b9c:	0758      	lsls	r0, r3, #29
 8008b9e:	d512      	bpl.n	8008bc6 <__swsetup_r+0x7a>
 8008ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba2:	b141      	cbz	r1, 8008bb6 <__swsetup_r+0x6a>
 8008ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ba8:	4299      	cmp	r1, r3
 8008baa:	d002      	beq.n	8008bb2 <__swsetup_r+0x66>
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff fb6f 	bl	8008290 <_free_r>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6063      	str	r3, [r4, #4]
 8008bc2:	6923      	ldr	r3, [r4, #16]
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f043 0308 	orr.w	r3, r3, #8
 8008bcc:	81a3      	strh	r3, [r4, #12]
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	b94b      	cbnz	r3, 8008be6 <__swsetup_r+0x9a>
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bdc:	d003      	beq.n	8008be6 <__swsetup_r+0x9a>
 8008bde:	4621      	mov	r1, r4
 8008be0:	4630      	mov	r0, r6
 8008be2:	f000 fa07 	bl	8008ff4 <__smakebuf_r>
 8008be6:	89a0      	ldrh	r0, [r4, #12]
 8008be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bec:	f010 0301 	ands.w	r3, r0, #1
 8008bf0:	d00a      	beq.n	8008c08 <__swsetup_r+0xbc>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60a3      	str	r3, [r4, #8]
 8008bf6:	6963      	ldr	r3, [r4, #20]
 8008bf8:	425b      	negs	r3, r3
 8008bfa:	61a3      	str	r3, [r4, #24]
 8008bfc:	6923      	ldr	r3, [r4, #16]
 8008bfe:	b943      	cbnz	r3, 8008c12 <__swsetup_r+0xc6>
 8008c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c04:	d1ba      	bne.n	8008b7c <__swsetup_r+0x30>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	0781      	lsls	r1, r0, #30
 8008c0a:	bf58      	it	pl
 8008c0c:	6963      	ldrpl	r3, [r4, #20]
 8008c0e:	60a3      	str	r3, [r4, #8]
 8008c10:	e7f4      	b.n	8008bfc <__swsetup_r+0xb0>
 8008c12:	2000      	movs	r0, #0
 8008c14:	e7f7      	b.n	8008c06 <__swsetup_r+0xba>
 8008c16:	bf00      	nop
 8008c18:	2000000c 	.word	0x2000000c
 8008c1c:	08009c74 	.word	0x08009c74
 8008c20:	08009c94 	.word	0x08009c94
 8008c24:	08009c54 	.word	0x08009c54

08008c28 <abort>:
 8008c28:	b508      	push	{r3, lr}
 8008c2a:	2006      	movs	r0, #6
 8008c2c:	f000 fa52 	bl	80090d4 <raise>
 8008c30:	2001      	movs	r0, #1
 8008c32:	f7f9 fcab 	bl	800258c <_exit>
	...

08008c38 <__sflush_r>:
 8008c38:	898a      	ldrh	r2, [r1, #12]
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	4605      	mov	r5, r0
 8008c40:	0710      	lsls	r0, r2, #28
 8008c42:	460c      	mov	r4, r1
 8008c44:	d458      	bmi.n	8008cf8 <__sflush_r+0xc0>
 8008c46:	684b      	ldr	r3, [r1, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc05      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dc02      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d0f9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c64:	682f      	ldr	r7, [r5, #0]
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	d032      	beq.n	8008cd0 <__sflush_r+0x98>
 8008c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	075a      	lsls	r2, r3, #29
 8008c70:	d505      	bpl.n	8008c7e <__sflush_r+0x46>
 8008c72:	6863      	ldr	r3, [r4, #4]
 8008c74:	1ac0      	subs	r0, r0, r3
 8008c76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c78:	b10b      	cbz	r3, 8008c7e <__sflush_r+0x46>
 8008c7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c7c:	1ac0      	subs	r0, r0, r3
 8008c7e:	2300      	movs	r3, #0
 8008c80:	4602      	mov	r2, r0
 8008c82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c84:	6a21      	ldr	r1, [r4, #32]
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b0      	blx	r6
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	d106      	bne.n	8008c9e <__sflush_r+0x66>
 8008c90:	6829      	ldr	r1, [r5, #0]
 8008c92:	291d      	cmp	r1, #29
 8008c94:	d82c      	bhi.n	8008cf0 <__sflush_r+0xb8>
 8008c96:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <__sflush_r+0x108>)
 8008c98:	40ca      	lsrs	r2, r1
 8008c9a:	07d6      	lsls	r6, r2, #31
 8008c9c:	d528      	bpl.n	8008cf0 <__sflush_r+0xb8>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6062      	str	r2, [r4, #4]
 8008ca2:	04d9      	lsls	r1, r3, #19
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	d504      	bpl.n	8008cb4 <__sflush_r+0x7c>
 8008caa:	1c42      	adds	r2, r0, #1
 8008cac:	d101      	bne.n	8008cb2 <__sflush_r+0x7a>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b903      	cbnz	r3, 8008cb4 <__sflush_r+0x7c>
 8008cb2:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb6:	602f      	str	r7, [r5, #0]
 8008cb8:	2900      	cmp	r1, #0
 8008cba:	d0ca      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc0:	4299      	cmp	r1, r3
 8008cc2:	d002      	beq.n	8008cca <__sflush_r+0x92>
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f7ff fae3 	bl	8008290 <_free_r>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	6360      	str	r0, [r4, #52]	; 0x34
 8008cce:	e7c1      	b.n	8008c54 <__sflush_r+0x1c>
 8008cd0:	6a21      	ldr	r1, [r4, #32]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c41      	adds	r1, r0, #1
 8008cda:	d1c7      	bne.n	8008c6c <__sflush_r+0x34>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0c4      	beq.n	8008c6c <__sflush_r+0x34>
 8008ce2:	2b1d      	cmp	r3, #29
 8008ce4:	d001      	beq.n	8008cea <__sflush_r+0xb2>
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0xb6>
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	e7b1      	b.n	8008c52 <__sflush_r+0x1a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7ad      	b.n	8008c54 <__sflush_r+0x1c>
 8008cf8:	690f      	ldr	r7, [r1, #16]
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	d0a9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cfe:	0793      	lsls	r3, r2, #30
 8008d00:	680e      	ldr	r6, [r1, #0]
 8008d02:	bf08      	it	eq
 8008d04:	694b      	ldreq	r3, [r1, #20]
 8008d06:	600f      	str	r7, [r1, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	eba6 0807 	sub.w	r8, r6, r7
 8008d10:	608b      	str	r3, [r1, #8]
 8008d12:	f1b8 0f00 	cmp.w	r8, #0
 8008d16:	dd9c      	ble.n	8008c52 <__sflush_r+0x1a>
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d1c:	4643      	mov	r3, r8
 8008d1e:	463a      	mov	r2, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dc06      	bgt.n	8008d36 <__sflush_r+0xfe>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e78e      	b.n	8008c54 <__sflush_r+0x1c>
 8008d36:	4407      	add	r7, r0
 8008d38:	eba8 0800 	sub.w	r8, r8, r0
 8008d3c:	e7e9      	b.n	8008d12 <__sflush_r+0xda>
 8008d3e:	bf00      	nop
 8008d40:	20400001 	.word	0x20400001

08008d44 <_fflush_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	b913      	cbnz	r3, 8008d54 <_fflush_r+0x10>
 8008d4e:	2500      	movs	r5, #0
 8008d50:	4628      	mov	r0, r5
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	b118      	cbz	r0, 8008d5e <_fflush_r+0x1a>
 8008d56:	6983      	ldr	r3, [r0, #24]
 8008d58:	b90b      	cbnz	r3, 8008d5e <_fflush_r+0x1a>
 8008d5a:	f000 f887 	bl	8008e6c <__sinit>
 8008d5e:	4b14      	ldr	r3, [pc, #80]	; (8008db0 <_fflush_r+0x6c>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d11b      	bne.n	8008d9c <_fflush_r+0x58>
 8008d64:	686c      	ldr	r4, [r5, #4]
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ef      	beq.n	8008d4e <_fflush_r+0xa>
 8008d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d70:	07d0      	lsls	r0, r2, #31
 8008d72:	d404      	bmi.n	8008d7e <_fflush_r+0x3a>
 8008d74:	0599      	lsls	r1, r3, #22
 8008d76:	d402      	bmi.n	8008d7e <_fflush_r+0x3a>
 8008d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d7a:	f000 f915 	bl	8008fa8 <__retarget_lock_acquire_recursive>
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7ff ff59 	bl	8008c38 <__sflush_r>
 8008d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d88:	07da      	lsls	r2, r3, #31
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	d4e0      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d8e:	89a3      	ldrh	r3, [r4, #12]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	d4dd      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d96:	f000 f908 	bl	8008faa <__retarget_lock_release_recursive>
 8008d9a:	e7d9      	b.n	8008d50 <_fflush_r+0xc>
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <_fflush_r+0x70>)
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	d101      	bne.n	8008da6 <_fflush_r+0x62>
 8008da2:	68ac      	ldr	r4, [r5, #8]
 8008da4:	e7df      	b.n	8008d66 <_fflush_r+0x22>
 8008da6:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <_fflush_r+0x74>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	bf08      	it	eq
 8008dac:	68ec      	ldreq	r4, [r5, #12]
 8008dae:	e7da      	b.n	8008d66 <_fflush_r+0x22>
 8008db0:	08009c74 	.word	0x08009c74
 8008db4:	08009c94 	.word	0x08009c94
 8008db8:	08009c54 	.word	0x08009c54

08008dbc <std>:
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dca:	6083      	str	r3, [r0, #8]
 8008dcc:	8181      	strh	r1, [r0, #12]
 8008dce:	6643      	str	r3, [r0, #100]	; 0x64
 8008dd0:	81c2      	strh	r2, [r0, #14]
 8008dd2:	6183      	str	r3, [r0, #24]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	305c      	adds	r0, #92	; 0x5c
 8008dda:	f7fd fb99 	bl	8006510 <memset>
 8008dde:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <std+0x38>)
 8008de0:	6263      	str	r3, [r4, #36]	; 0x24
 8008de2:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <std+0x3c>)
 8008de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <std+0x40>)
 8008de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dea:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <std+0x44>)
 8008dec:	6224      	str	r4, [r4, #32]
 8008dee:	6323      	str	r3, [r4, #48]	; 0x30
 8008df0:	bd10      	pop	{r4, pc}
 8008df2:	bf00      	nop
 8008df4:	0800910d 	.word	0x0800910d
 8008df8:	0800912f 	.word	0x0800912f
 8008dfc:	08009167 	.word	0x08009167
 8008e00:	0800918b 	.word	0x0800918b

08008e04 <_cleanup_r>:
 8008e04:	4901      	ldr	r1, [pc, #4]	; (8008e0c <_cleanup_r+0x8>)
 8008e06:	f000 b8af 	b.w	8008f68 <_fwalk_reent>
 8008e0a:	bf00      	nop
 8008e0c:	08008d45 	.word	0x08008d45

08008e10 <__sfmoreglue>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	1e4a      	subs	r2, r1, #1
 8008e14:	2568      	movs	r5, #104	; 0x68
 8008e16:	4355      	muls	r5, r2
 8008e18:	460e      	mov	r6, r1
 8008e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e1e:	f7ff fa87 	bl	8008330 <_malloc_r>
 8008e22:	4604      	mov	r4, r0
 8008e24:	b140      	cbz	r0, 8008e38 <__sfmoreglue+0x28>
 8008e26:	2100      	movs	r1, #0
 8008e28:	e9c0 1600 	strd	r1, r6, [r0]
 8008e2c:	300c      	adds	r0, #12
 8008e2e:	60a0      	str	r0, [r4, #8]
 8008e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e34:	f7fd fb6c 	bl	8006510 <memset>
 8008e38:	4620      	mov	r0, r4
 8008e3a:	bd70      	pop	{r4, r5, r6, pc}

08008e3c <__sfp_lock_acquire>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sfp_lock_acquire+0x8>)
 8008e3e:	f000 b8b3 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000850 	.word	0x20000850

08008e48 <__sfp_lock_release>:
 8008e48:	4801      	ldr	r0, [pc, #4]	; (8008e50 <__sfp_lock_release+0x8>)
 8008e4a:	f000 b8ae 	b.w	8008faa <__retarget_lock_release_recursive>
 8008e4e:	bf00      	nop
 8008e50:	20000850 	.word	0x20000850

08008e54 <__sinit_lock_acquire>:
 8008e54:	4801      	ldr	r0, [pc, #4]	; (8008e5c <__sinit_lock_acquire+0x8>)
 8008e56:	f000 b8a7 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8008e5a:	bf00      	nop
 8008e5c:	2000084b 	.word	0x2000084b

08008e60 <__sinit_lock_release>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__sinit_lock_release+0x8>)
 8008e62:	f000 b8a2 	b.w	8008faa <__retarget_lock_release_recursive>
 8008e66:	bf00      	nop
 8008e68:	2000084b 	.word	0x2000084b

08008e6c <__sinit>:
 8008e6c:	b510      	push	{r4, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	f7ff fff0 	bl	8008e54 <__sinit_lock_acquire>
 8008e74:	69a3      	ldr	r3, [r4, #24]
 8008e76:	b11b      	cbz	r3, 8008e80 <__sinit+0x14>
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	f7ff bff0 	b.w	8008e60 <__sinit_lock_release>
 8008e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e84:	6523      	str	r3, [r4, #80]	; 0x50
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <__sinit+0x68>)
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <__sinit+0x6c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	bf04      	itt	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	61a3      	streq	r3, [r4, #24]
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f820 	bl	8008edc <__sfp>
 8008e9c:	6060      	str	r0, [r4, #4]
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 f81c 	bl	8008edc <__sfp>
 8008ea4:	60a0      	str	r0, [r4, #8]
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	f000 f818 	bl	8008edc <__sfp>
 8008eac:	2200      	movs	r2, #0
 8008eae:	60e0      	str	r0, [r4, #12]
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	6860      	ldr	r0, [r4, #4]
 8008eb4:	f7ff ff82 	bl	8008dbc <std>
 8008eb8:	68a0      	ldr	r0, [r4, #8]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	2109      	movs	r1, #9
 8008ebe:	f7ff ff7d 	bl	8008dbc <std>
 8008ec2:	68e0      	ldr	r0, [r4, #12]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	2112      	movs	r1, #18
 8008ec8:	f7ff ff78 	bl	8008dbc <std>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61a3      	str	r3, [r4, #24]
 8008ed0:	e7d2      	b.n	8008e78 <__sinit+0xc>
 8008ed2:	bf00      	nop
 8008ed4:	080098d0 	.word	0x080098d0
 8008ed8:	08008e05 	.word	0x08008e05

08008edc <__sfp>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	4607      	mov	r7, r0
 8008ee0:	f7ff ffac 	bl	8008e3c <__sfp_lock_acquire>
 8008ee4:	4b1e      	ldr	r3, [pc, #120]	; (8008f60 <__sfp+0x84>)
 8008ee6:	681e      	ldr	r6, [r3, #0]
 8008ee8:	69b3      	ldr	r3, [r6, #24]
 8008eea:	b913      	cbnz	r3, 8008ef2 <__sfp+0x16>
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7ff ffbd 	bl	8008e6c <__sinit>
 8008ef2:	3648      	adds	r6, #72	; 0x48
 8008ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	d503      	bpl.n	8008f04 <__sfp+0x28>
 8008efc:	6833      	ldr	r3, [r6, #0]
 8008efe:	b30b      	cbz	r3, 8008f44 <__sfp+0x68>
 8008f00:	6836      	ldr	r6, [r6, #0]
 8008f02:	e7f7      	b.n	8008ef4 <__sfp+0x18>
 8008f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f08:	b9d5      	cbnz	r5, 8008f40 <__sfp+0x64>
 8008f0a:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <__sfp+0x88>)
 8008f0c:	60e3      	str	r3, [r4, #12]
 8008f0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f12:	6665      	str	r5, [r4, #100]	; 0x64
 8008f14:	f000 f847 	bl	8008fa6 <__retarget_lock_init_recursive>
 8008f18:	f7ff ff96 	bl	8008e48 <__sfp_lock_release>
 8008f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f24:	6025      	str	r5, [r4, #0]
 8008f26:	61a5      	str	r5, [r4, #24]
 8008f28:	2208      	movs	r2, #8
 8008f2a:	4629      	mov	r1, r5
 8008f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f30:	f7fd faee 	bl	8006510 <memset>
 8008f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f40:	3468      	adds	r4, #104	; 0x68
 8008f42:	e7d9      	b.n	8008ef8 <__sfp+0x1c>
 8008f44:	2104      	movs	r1, #4
 8008f46:	4638      	mov	r0, r7
 8008f48:	f7ff ff62 	bl	8008e10 <__sfmoreglue>
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	6030      	str	r0, [r6, #0]
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1d5      	bne.n	8008f00 <__sfp+0x24>
 8008f54:	f7ff ff78 	bl	8008e48 <__sfp_lock_release>
 8008f58:	230c      	movs	r3, #12
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	e7ee      	b.n	8008f3c <__sfp+0x60>
 8008f5e:	bf00      	nop
 8008f60:	080098d0 	.word	0x080098d0
 8008f64:	ffff0001 	.word	0xffff0001

08008f68 <_fwalk_reent>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	4688      	mov	r8, r1
 8008f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f74:	2700      	movs	r7, #0
 8008f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7e:	d505      	bpl.n	8008f8c <_fwalk_reent+0x24>
 8008f80:	6824      	ldr	r4, [r4, #0]
 8008f82:	2c00      	cmp	r4, #0
 8008f84:	d1f7      	bne.n	8008f76 <_fwalk_reent+0xe>
 8008f86:	4638      	mov	r0, r7
 8008f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8c:	89ab      	ldrh	r3, [r5, #12]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d907      	bls.n	8008fa2 <_fwalk_reent+0x3a>
 8008f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f96:	3301      	adds	r3, #1
 8008f98:	d003      	beq.n	8008fa2 <_fwalk_reent+0x3a>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	4630      	mov	r0, r6
 8008f9e:	47c0      	blx	r8
 8008fa0:	4307      	orrs	r7, r0
 8008fa2:	3568      	adds	r5, #104	; 0x68
 8008fa4:	e7e9      	b.n	8008f7a <_fwalk_reent+0x12>

08008fa6 <__retarget_lock_init_recursive>:
 8008fa6:	4770      	bx	lr

08008fa8 <__retarget_lock_acquire_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_release_recursive>:
 8008faa:	4770      	bx	lr

08008fac <__swhatbuf_r>:
 8008fac:	b570      	push	{r4, r5, r6, lr}
 8008fae:	460e      	mov	r6, r1
 8008fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb4:	2900      	cmp	r1, #0
 8008fb6:	b096      	sub	sp, #88	; 0x58
 8008fb8:	4614      	mov	r4, r2
 8008fba:	461d      	mov	r5, r3
 8008fbc:	da07      	bge.n	8008fce <__swhatbuf_r+0x22>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	602b      	str	r3, [r5, #0]
 8008fc2:	89b3      	ldrh	r3, [r6, #12]
 8008fc4:	061a      	lsls	r2, r3, #24
 8008fc6:	d410      	bmi.n	8008fea <__swhatbuf_r+0x3e>
 8008fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fcc:	e00e      	b.n	8008fec <__swhatbuf_r+0x40>
 8008fce:	466a      	mov	r2, sp
 8008fd0:	f000 f902 	bl	80091d8 <_fstat_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	dbf2      	blt.n	8008fbe <__swhatbuf_r+0x12>
 8008fd8:	9a01      	ldr	r2, [sp, #4]
 8008fda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008fde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008fe2:	425a      	negs	r2, r3
 8008fe4:	415a      	adcs	r2, r3
 8008fe6:	602a      	str	r2, [r5, #0]
 8008fe8:	e7ee      	b.n	8008fc8 <__swhatbuf_r+0x1c>
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	2000      	movs	r0, #0
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	b016      	add	sp, #88	; 0x58
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}

08008ff4 <__smakebuf_r>:
 8008ff4:	898b      	ldrh	r3, [r1, #12]
 8008ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff8:	079d      	lsls	r5, r3, #30
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	d507      	bpl.n	8009010 <__smakebuf_r+0x1c>
 8009000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	6123      	str	r3, [r4, #16]
 8009008:	2301      	movs	r3, #1
 800900a:	6163      	str	r3, [r4, #20]
 800900c:	b002      	add	sp, #8
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	ab01      	add	r3, sp, #4
 8009012:	466a      	mov	r2, sp
 8009014:	f7ff ffca 	bl	8008fac <__swhatbuf_r>
 8009018:	9900      	ldr	r1, [sp, #0]
 800901a:	4605      	mov	r5, r0
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff f987 	bl	8008330 <_malloc_r>
 8009022:	b948      	cbnz	r0, 8009038 <__smakebuf_r+0x44>
 8009024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009028:	059a      	lsls	r2, r3, #22
 800902a:	d4ef      	bmi.n	800900c <__smakebuf_r+0x18>
 800902c:	f023 0303 	bic.w	r3, r3, #3
 8009030:	f043 0302 	orr.w	r3, r3, #2
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	e7e3      	b.n	8009000 <__smakebuf_r+0xc>
 8009038:	4b0d      	ldr	r3, [pc, #52]	; (8009070 <__smakebuf_r+0x7c>)
 800903a:	62b3      	str	r3, [r6, #40]	; 0x28
 800903c:	89a3      	ldrh	r3, [r4, #12]
 800903e:	6020      	str	r0, [r4, #0]
 8009040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009044:	81a3      	strh	r3, [r4, #12]
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	6163      	str	r3, [r4, #20]
 800904a:	9b01      	ldr	r3, [sp, #4]
 800904c:	6120      	str	r0, [r4, #16]
 800904e:	b15b      	cbz	r3, 8009068 <__smakebuf_r+0x74>
 8009050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f8d1 	bl	80091fc <_isatty_r>
 800905a:	b128      	cbz	r0, 8009068 <__smakebuf_r+0x74>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	f043 0301 	orr.w	r3, r3, #1
 8009066:	81a3      	strh	r3, [r4, #12]
 8009068:	89a0      	ldrh	r0, [r4, #12]
 800906a:	4305      	orrs	r5, r0
 800906c:	81a5      	strh	r5, [r4, #12]
 800906e:	e7cd      	b.n	800900c <__smakebuf_r+0x18>
 8009070:	08008e05 	.word	0x08008e05

08009074 <_malloc_usable_size_r>:
 8009074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009078:	1f18      	subs	r0, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	bfbc      	itt	lt
 800907e:	580b      	ldrlt	r3, [r1, r0]
 8009080:	18c0      	addlt	r0, r0, r3
 8009082:	4770      	bx	lr

08009084 <_raise_r>:
 8009084:	291f      	cmp	r1, #31
 8009086:	b538      	push	{r3, r4, r5, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	460d      	mov	r5, r1
 800908c:	d904      	bls.n	8009098 <_raise_r+0x14>
 800908e:	2316      	movs	r3, #22
 8009090:	6003      	str	r3, [r0, #0]
 8009092:	f04f 30ff 	mov.w	r0, #4294967295
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800909a:	b112      	cbz	r2, 80090a2 <_raise_r+0x1e>
 800909c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a0:	b94b      	cbnz	r3, 80090b6 <_raise_r+0x32>
 80090a2:	4620      	mov	r0, r4
 80090a4:	f000 f830 	bl	8009108 <_getpid_r>
 80090a8:	462a      	mov	r2, r5
 80090aa:	4601      	mov	r1, r0
 80090ac:	4620      	mov	r0, r4
 80090ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b2:	f000 b817 	b.w	80090e4 <_kill_r>
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d00a      	beq.n	80090d0 <_raise_r+0x4c>
 80090ba:	1c59      	adds	r1, r3, #1
 80090bc:	d103      	bne.n	80090c6 <_raise_r+0x42>
 80090be:	2316      	movs	r3, #22
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	2001      	movs	r0, #1
 80090c4:	e7e7      	b.n	8009096 <_raise_r+0x12>
 80090c6:	2400      	movs	r4, #0
 80090c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090cc:	4628      	mov	r0, r5
 80090ce:	4798      	blx	r3
 80090d0:	2000      	movs	r0, #0
 80090d2:	e7e0      	b.n	8009096 <_raise_r+0x12>

080090d4 <raise>:
 80090d4:	4b02      	ldr	r3, [pc, #8]	; (80090e0 <raise+0xc>)
 80090d6:	4601      	mov	r1, r0
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	f7ff bfd3 	b.w	8009084 <_raise_r>
 80090de:	bf00      	nop
 80090e0:	2000000c 	.word	0x2000000c

080090e4 <_kill_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d07      	ldr	r5, [pc, #28]	; (8009104 <_kill_r+0x20>)
 80090e8:	2300      	movs	r3, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	4611      	mov	r1, r2
 80090f0:	602b      	str	r3, [r5, #0]
 80090f2:	f7f9 fa3b 	bl	800256c <_kill>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	d102      	bne.n	8009100 <_kill_r+0x1c>
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	b103      	cbz	r3, 8009100 <_kill_r+0x1c>
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	bd38      	pop	{r3, r4, r5, pc}
 8009102:	bf00      	nop
 8009104:	20000844 	.word	0x20000844

08009108 <_getpid_r>:
 8009108:	f7f9 ba28 	b.w	800255c <_getpid>

0800910c <__sread>:
 800910c:	b510      	push	{r4, lr}
 800910e:	460c      	mov	r4, r1
 8009110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009114:	f000 f894 	bl	8009240 <_read_r>
 8009118:	2800      	cmp	r0, #0
 800911a:	bfab      	itete	ge
 800911c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800911e:	89a3      	ldrhlt	r3, [r4, #12]
 8009120:	181b      	addge	r3, r3, r0
 8009122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009126:	bfac      	ite	ge
 8009128:	6563      	strge	r3, [r4, #84]	; 0x54
 800912a:	81a3      	strhlt	r3, [r4, #12]
 800912c:	bd10      	pop	{r4, pc}

0800912e <__swrite>:
 800912e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009132:	461f      	mov	r7, r3
 8009134:	898b      	ldrh	r3, [r1, #12]
 8009136:	05db      	lsls	r3, r3, #23
 8009138:	4605      	mov	r5, r0
 800913a:	460c      	mov	r4, r1
 800913c:	4616      	mov	r6, r2
 800913e:	d505      	bpl.n	800914c <__swrite+0x1e>
 8009140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009144:	2302      	movs	r3, #2
 8009146:	2200      	movs	r2, #0
 8009148:	f000 f868 	bl	800921c <_lseek_r>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	4628      	mov	r0, r5
 800915e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009162:	f000 b817 	b.w	8009194 <_write_r>

08009166 <__sseek>:
 8009166:	b510      	push	{r4, lr}
 8009168:	460c      	mov	r4, r1
 800916a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800916e:	f000 f855 	bl	800921c <_lseek_r>
 8009172:	1c43      	adds	r3, r0, #1
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	bf15      	itete	ne
 8009178:	6560      	strne	r0, [r4, #84]	; 0x54
 800917a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800917e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009182:	81a3      	strheq	r3, [r4, #12]
 8009184:	bf18      	it	ne
 8009186:	81a3      	strhne	r3, [r4, #12]
 8009188:	bd10      	pop	{r4, pc}

0800918a <__sclose>:
 800918a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800918e:	f000 b813 	b.w	80091b8 <_close_r>
	...

08009194 <_write_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	; (80091b4 <_write_r+0x20>)
 8009198:	4604      	mov	r4, r0
 800919a:	4608      	mov	r0, r1
 800919c:	4611      	mov	r1, r2
 800919e:	2200      	movs	r2, #0
 80091a0:	602a      	str	r2, [r5, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f7f9 fa19 	bl	80025da <_write>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_write_r+0x1e>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_write_r+0x1e>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000844 	.word	0x20000844

080091b8 <_close_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	; (80091d4 <_close_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f9 fa25 	bl	8002612 <_close>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_close_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_close_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20000844 	.word	0x20000844

080091d8 <_fstat_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d07      	ldr	r5, [pc, #28]	; (80091f8 <_fstat_r+0x20>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	4611      	mov	r1, r2
 80091e4:	602b      	str	r3, [r5, #0]
 80091e6:	f7f9 fa20 	bl	800262a <_fstat>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d102      	bne.n	80091f4 <_fstat_r+0x1c>
 80091ee:	682b      	ldr	r3, [r5, #0]
 80091f0:	b103      	cbz	r3, 80091f4 <_fstat_r+0x1c>
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	bd38      	pop	{r3, r4, r5, pc}
 80091f6:	bf00      	nop
 80091f8:	20000844 	.word	0x20000844

080091fc <_isatty_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_isatty_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f9 fa1f 	bl	800264a <_isatty>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_isatty_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_isatty_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20000844 	.word	0x20000844

0800921c <_lseek_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4d07      	ldr	r5, [pc, #28]	; (800923c <_lseek_r+0x20>)
 8009220:	4604      	mov	r4, r0
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	2200      	movs	r2, #0
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f9 fa18 	bl	8002660 <_lseek>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_lseek_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_lseek_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20000844 	.word	0x20000844

08009240 <_read_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	; (8009260 <_read_r+0x20>)
 8009244:	4604      	mov	r4, r0
 8009246:	4608      	mov	r0, r1
 8009248:	4611      	mov	r1, r2
 800924a:	2200      	movs	r2, #0
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f9 f9a6 	bl	80025a0 <_read>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_read_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_read_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000844 	.word	0x20000844

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
