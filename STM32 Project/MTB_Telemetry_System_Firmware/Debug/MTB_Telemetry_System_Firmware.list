
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  08003f84  08003f84  00013f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800451c  0800451c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004524  08004524  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004528  08004528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800452c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000070  0800459c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006c4  0800459c  000206c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001178a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  0003182a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000343d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  000350c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019adc  00000000  00000000  00035c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d01  00000000  00000000  0004f71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099429  00000000  00000000  0006241d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb846  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003684  00000000  00000000  000fb89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f6c 	.word	0x08003f6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003f6c 	.word	0x08003f6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d111      	bne.n	80005b0 <Brake_Sensor_Read+0x38>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 800058c:	2100      	movs	r1, #0
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <Brake_Sensor_Read+0x84>)
 8000590:	f000 f838 	bl	8000604 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <Brake_Sensor_Read+0x84>)
 8000596:	f001 f871 	bl	800167c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 800059a:	f04f 31ff 	mov.w	r1, #4294967295
 800059e:	4817      	ldr	r0, [pc, #92]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005a0:	f001 f953 	bl	800184a <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005a6:	f001 f9db 	bl	8001960 <HAL_ADC_GetValue>
 80005aa:	4603      	mov	r3, r0
 80005ac:	81fb      	strh	r3, [r7, #14]
 80005ae:	e017      	b.n	80005e0 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d111      	bne.n	80005da <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 80005b6:	2101      	movs	r1, #1
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005ba:	f000 f823 	bl	8000604 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005c0:	f001 f85c 	bl	800167c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 80005c4:	f04f 31ff 	mov.w	r1, #4294967295
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005ca:	f001 f93e 	bl	800184a <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005d0:	f001 f9c6 	bl	8001960 <HAL_ADC_GetValue>
 80005d4:	4603      	mov	r3, r0
 80005d6:	81fb      	strh	r3, [r7, #14]
 80005d8:	e002      	b.n	80005e0 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 80005da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005de:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <Brake_Sensor_Read+0x84>)
 80005e2:	f001 f8ff 	bl	80017e4 <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 41;
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <Brake_Sensor_Read+0x88>)
 80005ea:	fba2 2303 	umull	r2, r3, r2, r3
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 80005f2:	89fb      	ldrh	r3, [r7, #14]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000049c 	.word	0x2000049c
 8000600:	c7ce0c7d 	.word	0xc7ce0c7d

08000604 <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8000620:	2301      	movs	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000624:	2304      	movs	r3, #4
 8000626:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	4619      	mov	r1, r3
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f001 f9a4 	bl	800197c <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 800063a:	f000 fd3d 	bl	80010b8 <Error_Handler>
	}
}
 800063e:	bf00      	nop
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	82fb      	strh	r3, [r7, #22]
	float battery_voltage = 0.0;
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
	const float voltage_divider = 0.5;
 8000658:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800065c:	60fb      	str	r3, [r7, #12]
	const float adc_voltage = 3.3;
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <Read_Battery_Voltage+0x84>)
 8000660:	60bb      	str	r3, [r7, #8]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 8000662:	2102      	movs	r1, #2
 8000664:	481a      	ldr	r0, [pc, #104]	; (80006d0 <Read_Battery_Voltage+0x88>)
 8000666:	f7ff ffcd 	bl	8000604 <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 800066a:	4819      	ldr	r0, [pc, #100]	; (80006d0 <Read_Battery_Voltage+0x88>)
 800066c:	f001 f806 	bl	800167c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 8000670:	f04f 31ff 	mov.w	r1, #4294967295
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <Read_Battery_Voltage+0x88>)
 8000676:	f001 f8e8 	bl	800184a <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 800067a:	4815      	ldr	r0, [pc, #84]	; (80006d0 <Read_Battery_Voltage+0x88>)
 800067c:	f001 f970 	bl	8001960 <HAL_ADC_GetValue>
 8000680:	4603      	mov	r3, r0
 8000682:	82fb      	strh	r3, [r7, #22]

	// Convert to voltage
	battery_voltage = 10 * ADC_reading / 4096 * adc_voltage * voltage_divider;
 8000684:	8afa      	ldrh	r2, [r7, #22]
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	2b00      	cmp	r3, #0
 8000690:	da01      	bge.n	8000696 <Read_Battery_Voltage+0x4e>
 8000692:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000696:	131b      	asrs	r3, r3, #12
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80006a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80006ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b0:	edc7 7a04 	vstr	s15, [r7, #16]

	return (uint8_t)(battery_voltage);
 80006b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80006b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80006c0:	793b      	ldrb	r3, [r7, #4]
 80006c2:	b2db      	uxtb	r3, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40533333 	.word	0x40533333
 80006d0:	2000049c 	.word	0x2000049c

080006d4 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80006d4:	b490      	push	{r4, r7}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4604      	mov	r4, r0
 80006dc:	4608      	mov	r0, r1
 80006de:	4611      	mov	r1, r2
 80006e0:	461a      	mov	r2, r3
 80006e2:	4623      	mov	r3, r4
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	4603      	mov	r3, r0
 80006e8:	71bb      	strb	r3, [r7, #6]
 80006ea:	460b      	mov	r3, r1
 80006ec:	717b      	strb	r3, [r7, #5]
 80006ee:	4613      	mov	r3, r2
 80006f0:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <ST7565_updateBoundingBox+0x68>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d202      	bcs.n	8000702 <ST7565_updateBoundingBox+0x2e>
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <ST7565_updateBoundingBox+0x68>)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <ST7565_updateBoundingBox+0x6c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	797a      	ldrb	r2, [r7, #5]
 8000708:	429a      	cmp	r2, r3
 800070a:	d902      	bls.n	8000712 <ST7565_updateBoundingBox+0x3e>
 800070c:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <ST7565_updateBoundingBox+0x6c>)
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <ST7565_updateBoundingBox+0x70>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	79ba      	ldrb	r2, [r7, #6]
 8000718:	429a      	cmp	r2, r3
 800071a:	d202      	bcs.n	8000722 <ST7565_updateBoundingBox+0x4e>
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <ST7565_updateBoundingBox+0x70>)
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <ST7565_updateBoundingBox+0x74>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	793a      	ldrb	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d902      	bls.n	8000732 <ST7565_updateBoundingBox+0x5e>
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <ST7565_updateBoundingBox+0x74>)
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	7013      	strb	r3, [r2, #0]
	#endif
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bc90      	pop	{r4, r7}
 800073a:	4770      	bx	lr
 800073c:	2000048c 	.word	0x2000048c
 8000740:	2000048d 	.word	0x2000048d
 8000744:	2000048e 	.word	0x2000048e
 8000748:	2000048f 	.word	0x2000048f

0800074c <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	603a      	str	r2, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	460b      	mov	r3, r1
 800075a:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 800075c:	e017      	b.n	800078e <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	79b9      	ldrb	r1, [r7, #6]
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f81a 	bl	80007a0 <ST7565_drawchar>
		c++;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3306      	adds	r3, #6
 8000776:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	2b79      	cmp	r3, #121	; 0x79
 800077c:	d904      	bls.n	8000788 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
			line++;
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	3301      	adds	r3, #1
 8000786:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b07      	cmp	r3, #7
 800078c:	d804      	bhi.n	8000798 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d1e3      	bne.n	800075e <ST7565_drawstring+0x12>
 8000796:	e000      	b.n	800079a <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8000798:	bf00      	nop
	}
}
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	460b      	mov	r3, r1
 80007ac:	71bb      	strb	r3, [r7, #6]
 80007ae:	4613      	mov	r3, r2
 80007b0:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	73fb      	strb	r3, [r7, #15]
 80007b6:	e013      	b.n	80007e0 <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 80007b8:	797a      	ldrb	r2, [r7, #5]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	441a      	add	r2, r3
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	441a      	add	r2, r3
 80007c4:	79f9      	ldrb	r1, [r7, #7]
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	01db      	lsls	r3, r3, #7
 80007ca:	440b      	add	r3, r1
 80007cc:	4910      	ldr	r1, [pc, #64]	; (8000810 <ST7565_drawchar+0x70>)
 80007ce:	5c89      	ldrb	r1, [r1, r2]
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <ST7565_drawchar+0x74>)
 80007d2:	54d1      	strb	r1, [r2, r3]
		x++;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	3301      	adds	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	3301      	adds	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d9e8      	bls.n	80007b8 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	3b05      	subs	r3, #5
 80007ea:	b2d8      	uxtb	r0, r3
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	3b01      	subs	r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	3301      	adds	r3, #1
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f7ff ff67 	bl	80006d4 <ST7565_updateBoundingBox>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	08003fd4 	.word	0x08003fd4
 8000814:	2000008c 	.word	0x2000008c

08000818 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 8000822:	f000 f80f 	bl	8000844 <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 8000826:	20af      	movs	r0, #175	; 0xaf
 8000828:	f000 f866 	bl	80008f8 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 800082c:	20a4      	movs	r0, #164	; 0xa4
 800082e:	f000 f863 	bl	80008f8 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f887 	bl	8000948 <ST7565_st7565_set_brightness>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	481c      	ldr	r0, [pc, #112]	; (80008c0 <ST7565_st7565_init+0x7c>)
 800084e:	f001 fd1d 	bl	800228c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <ST7565_st7565_init+0x7c>)
 8000858:	f001 fd18 	bl	800228c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800085c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000860:	f000 fea4 	bl	80015ac <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2108      	movs	r1, #8
 8000868:	4815      	ldr	r0, [pc, #84]	; (80008c0 <ST7565_st7565_init+0x7c>)
 800086a:	f001 fd0f 	bl	800228c <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 800086e:	20a3      	movs	r0, #163	; 0xa3
 8000870:	f000 f842 	bl	80008f8 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 8000874:	20a0      	movs	r0, #160	; 0xa0
 8000876:	f000 f83f 	bl	80008f8 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 800087a:	20c0      	movs	r0, #192	; 0xc0
 800087c:	f000 f83c 	bl	80008f8 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8000880:	2040      	movs	r0, #64	; 0x40
 8000882:	f000 f839 	bl	80008f8 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 8000886:	202c      	movs	r0, #44	; 0x2c
 8000888:	f000 f836 	bl	80008f8 <ST7565_st7565_command>
	HAL_Delay(50);
 800088c:	2032      	movs	r0, #50	; 0x32
 800088e:	f000 fe8d 	bl	80015ac <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 8000892:	202e      	movs	r0, #46	; 0x2e
 8000894:	f000 f830 	bl	80008f8 <ST7565_st7565_command>
	HAL_Delay(50);
 8000898:	2032      	movs	r0, #50	; 0x32
 800089a:	f000 fe87 	bl	80015ac <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 800089e:	202f      	movs	r0, #47	; 0x2f
 80008a0:	f000 f82a 	bl	80008f8 <ST7565_st7565_command>
	HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fe81 	bl	80015ac <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 80008aa:	2026      	movs	r0, #38	; 0x26
 80008ac:	f000 f824 	bl	80008f8 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 80008b0:	233f      	movs	r3, #63	; 0x3f
 80008b2:	227f      	movs	r2, #127	; 0x7f
 80008b4:	2100      	movs	r1, #0
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff ff0c 	bl	80006d4 <ST7565_updateBoundingBox>
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40020000 	.word	0x40020000

080008c4 <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 80008ce:	1df9      	adds	r1, r7, #7
 80008d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d4:	2201      	movs	r2, #1
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <ST7565_spiwrite+0x30>)
 80008d8:	f002 fcc6 	bl	8003268 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 80008dc:	bf00      	nop
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <ST7565_spiwrite+0x30>)
 80008e0:	f002 fdfe 	bl	80034e0 <HAL_SPI_GetState>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d1f9      	bne.n	80008de <ST7565_spiwrite+0x1a>
}
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000058c 	.word	0x2000058c

080008f8 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2110      	movs	r1, #16
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <ST7565_st7565_command+0x24>)
 8000908:	f001 fcc0 	bl	800228c <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffd8 	bl	80008c4 <ST7565_spiwrite>
}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000

08000920 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <ST7565_st7565_data+0x24>)
 8000930:	f001 fcac 	bl	800228c <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ffc4 	bl	80008c4 <ST7565_spiwrite>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40020000 	.word	0x40020000

08000948 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 8000952:	2081      	movs	r0, #129	; 0x81
 8000954:	f7ff ffd0 	bl	80008f8 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffc9 	bl	80008f8 <ST7565_st7565_command>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <ST7565_display>:

void ST7565_display(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 8000976:	2300      	movs	r3, #0
 8000978:	71bb      	strb	r3, [r7, #6]
 800097a:	e055      	b.n	8000a28 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <ST7565_display+0xe4>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	79bb      	ldrb	r3, [r7, #6]
 8000984:	3301      	adds	r3, #1
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	429a      	cmp	r2, r3
 800098a:	da49      	bge.n	8000a20 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <ST7565_display+0xe8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	429a      	cmp	r2, r3
 8000998:	db4a      	blt.n	8000a30 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 fe06 	bl	80015ac <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <ST7565_display+0xec>)
 80009a4:	5cd3      	ldrb	r3, [r2, r3]
 80009a6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ffa3 	bl	80008f8 <ST7565_st7565_command>
		HAL_Delay(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fdfa 	bl	80015ac <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 80009b8:	4b29      	ldr	r3, [pc, #164]	; (8000a60 <ST7565_display+0xf0>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <ST7565_display+0xf4>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff93 	bl	80008f8 <ST7565_st7565_command>
		HAL_Delay(1);
 80009d2:	2001      	movs	r0, #1
 80009d4:	f000 fdea 	bl	80015ac <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff87 	bl	80008f8 <ST7565_st7565_command>
		HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fdde 	bl	80015ac <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 80009f0:	20e0      	movs	r0, #224	; 0xe0
 80009f2:	f7ff ff81 	bl	80008f8 <ST7565_st7565_command>
		HAL_Delay(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fdd8 	bl	80015ac <HAL_Delay>

		for (; col < maxcol; col++)
 80009fc:	e00b      	b.n	8000a16 <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	01da      	lsls	r2, r3, #7
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4413      	add	r3, r2
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <ST7565_display+0xf8>)
 8000a08:	5cd3      	ldrb	r3, [r2, r3]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff88 	bl	8000920 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	3301      	adds	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d3ef      	bcc.n	80009fe <ST7565_display+0x8e>
 8000a1e:	e000      	b.n	8000a22 <ST7565_display+0xb2>
				continue;   // nope, skip it!
 8000a20:	bf00      	nop
	for (p = 0; p < 8; p++)
 8000a22:	79bb      	ldrb	r3, [r7, #6]
 8000a24:	3301      	adds	r3, #1
 8000a26:	71bb      	strb	r3, [r7, #6]
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b07      	cmp	r3, #7
 8000a2c:	d9a6      	bls.n	800097c <ST7565_display+0xc>
 8000a2e:	e000      	b.n	8000a32 <ST7565_display+0xc2>
					break;
 8000a30:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <ST7565_display+0xf0>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <ST7565_display+0xf4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <ST7565_display+0xe4>)
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <ST7565_display+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	#endif
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000048e 	.word	0x2000048e
 8000a58:	2000048f 	.word	0x2000048f
 8000a5c:	08003fcc 	.word	0x08003fcc
 8000a60:	2000048c 	.word	0x2000048c
 8000a64:	2000048d 	.word	0x2000048d
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <ST7565_clear>:

void ST7565_clear(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8000a70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <ST7565_clear+0x20>)
 8000a78:	f002 fe34 	bl	80036e4 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8000a7c:	2340      	movs	r3, #64	; 0x40
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	2100      	movs	r1, #0
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fe26 	bl	80006d4 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <MX_ADC1_Init+0x9c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad0:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <MX_ADC1_Init+0xa0>)
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000af0:	f000 fd80 	bl	80015f4 <HAL_ADC_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 fadd 	bl	80010b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_ADC1_Init+0x98>)
 8000b10:	f000 ff34 	bl	800197c <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b1a:	f000 facd 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000049c 	.word	0x2000049c
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08a      	sub	sp, #40	; 0x28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a17      	ldr	r2, [pc, #92]	; (8000bb0 <HAL_ADC_MspInit+0x7c>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d127      	bne.n	8000ba6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_ADC_MspInit+0x80>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <HAL_ADC_MspInit+0x84>)
 8000ba2:	f001 f9ef 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	; 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40012000 	.word	0x40012000
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	; 0x28
 8000bc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a3c      	ldr	r2, [pc, #240]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a35      	ldr	r2, [pc, #212]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a2e      	ldr	r2, [pc, #184]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <MX_GPIO_Init+0x110>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2158      	movs	r1, #88	; 0x58
 8000c46:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c48:	f001 fb20 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4820      	ldr	r0, [pc, #128]	; (8000cd4 <MX_GPIO_Init+0x118>)
 8000c54:	f001 fb1a 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8000c58:	2358      	movs	r3, #88	; 0x58
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000c70:	f001 f988 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_GPIO_Init+0x118>)
 8000c8e:	f001 f979 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 8000c92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <MX_GPIO_Init+0x114>)
 8000ca8:	f001 f96c 	bl	8001f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8000cac:	23e0      	movs	r3, #224	; 0xe0
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_GPIO_Init+0x118>)
 8000cc0:	f001 f960 	bl	8001f84 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_I2C1_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d16:	f001 fad3 	bl	80022c0 <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 f9ca 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200005e4 	.word	0x200005e4
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_I2C2_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_I2C2_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_I2C2_Init+0x50>)
 8000d72:	f001 faa5 	bl	80022c0 <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 f99c 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000538 	.word	0x20000538
 8000d88:	40005800 	.word	0x40005800
 8000d8c:	000186a0 	.word	0x000186a0

08000d90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	; 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a3b      	ldr	r2, [pc, #236]	; (8000e9c <HAL_I2C_MspInit+0x10c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12d      	bne.n	8000e0e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a39      	ldr	r2, [pc, #228]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	482e      	ldr	r0, [pc, #184]	; (8000ea4 <HAL_I2C_MspInit+0x114>)
 8000dec:	f001 f8ca 	bl	8001f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000dfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e0c:	e041      	b.n	8000e92 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <HAL_I2C_MspInit+0x118>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d13c      	bne.n	8000e92 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3a:	2312      	movs	r3, #18
 8000e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e42:	2303      	movs	r3, #3
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e46:	2304      	movs	r3, #4
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <HAL_I2C_MspInit+0x114>)
 8000e52:	f001 f897 	bl	8001f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5a:	2312      	movs	r3, #18
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000e66:	2309      	movs	r3, #9
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <HAL_I2C_MspInit+0x114>)
 8000e72:	f001 f887 	bl	8001f84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_I2C_MspInit+0x110>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
}
 8000e92:	bf00      	nop
 8000e94:	3730      	adds	r7, #48	; 0x30
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40005800 	.word	0x40005800

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fb09 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f89d 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f7ff fe7f 	bl	8000bbc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ebe:	f7ff fde7 	bl	8000a90 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ec2:	f7ff ff09 	bl	8000cd8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ec6:	f7ff ff35 	bl	8000d34 <MX_I2C2_Init>
  MX_RTC_Init();
 8000eca:	f000 f8fb 	bl	80010c4 <MX_RTC_Init>
  MX_SPI1_Init();
 8000ece:	f000 f94b 	bl	8001168 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000ed2:	f000 f981 	bl	80011d8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  ST7565_begin(0x7); // initize display
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f7ff fc9e 	bl	8000818 <ST7565_begin>
  ST7565_clear(); // clear the display
 8000edc:	f7ff fdc6 	bl	8000a6c <ST7565_clear>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // TEST
		  //HAL_GPIO_TogglePin(DisplayRSE_GPIO_Port, DisplayRSE_Pin);
		  HAL_Delay(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f000 fb62 	bl	80015ac <HAL_Delay>
		  // TEST
		  ST7565_clear(); // clear the display
 8000ee8:	f7ff fdc0 	bl	8000a6c <ST7565_clear>
		  ST7565_drawstring(0, 0, "Hello world!");
 8000eec:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <main+0x134>)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fc2b 	bl	800074c <ST7565_drawstring>


		  // Read magnetometer data
		 // uint16_t HMC_x_axis_front = HMC5883L_get_X(SENSOR_FRONT);
		 // uint16_t HMC_x_axis_rear = HMC5883L_get_X(SENSOR_REAR);
		  char str[10] = "";
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
		//  sprintf(str, "%u", HMC_x_axis_rear);
		//  ST7565_drawstring(3, 0, "Rear travel: ");
		//  ST7565_drawstring(3, 20, str);

		  // Read brake sensor ADC
		  uint16_t Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fb2e 	bl	8000578 <Brake_Sensor_Read>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
		  uint16_t Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fb29 	bl	8000578 <Brake_Sensor_Read>
 8000f26:	4603      	mov	r3, r0
 8000f28:	84bb      	strh	r3, [r7, #36]	; 0x24

		  sprintf(str, "%u", Brake_left);
 8000f2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	492c      	ldr	r1, [pc, #176]	; (8000fe4 <main+0x138>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f002 fbde 	bl	80036f4 <siprintf>
		  strcpy(str_temp, "Brake left: ");
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4a2b      	ldr	r2, [pc, #172]	; (8000fe8 <main+0x13c>)
 8000f3c:	461c      	mov	r4, r3
 8000f3e:	4613      	mov	r3, r2
 8000f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f42:	c407      	stmia	r4!, {r0, r1, r2}
 8000f44:	7023      	strb	r3, [r4, #0]
		  strcat(str_temp, str);
 8000f46:	f107 0218 	add.w	r2, r7, #24
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fbf0 	bl	8003734 <strcat>
		  ST7565_drawstring(0, 4, str_temp);
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	461a      	mov	r2, r3
 8000f58:	2104      	movs	r1, #4
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f7ff fbf6 	bl	800074c <ST7565_drawstring>

		  sprintf(str, "%u", Brake_right);
 8000f60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	491f      	ldr	r1, [pc, #124]	; (8000fe4 <main+0x138>)
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 fbc3 	bl	80036f4 <siprintf>
		  strcpy(str_temp, "Brake right: ");
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <main+0x140>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4613      	mov	r3, r2
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	c407      	stmia	r4!, {r0, r1, r2}
 8000f7a:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8000f7c:	f107 0218 	add.w	r2, r7, #24
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fbd5 	bl	8003734 <strcat>
		  ST7565_drawstring(0, 5, str_temp);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2105      	movs	r1, #5
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff fbdb 	bl	800074c <ST7565_drawstring>

		  // Read battery voltage
		  uint8_t battery_voltage = Read_Battery_Voltage();
 8000f96:	f7ff fb57 	bl	8000648 <Read_Battery_Voltage>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		  sprintf(str, "%u", battery_voltage);
 8000fa0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <main+0x138>)
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fba2 	bl	80036f4 <siprintf>
		  strcpy(str_temp, "Battery voltage: ");
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <main+0x144>)
 8000fb4:	461c      	mov	r4, r3
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8000fc0:	f107 0218 	add.w	r2, r7, #24
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 fbb3 	bl	8003734 <strcat>
		  ST7565_drawstring(0, 6, str_temp);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	2106      	movs	r1, #6
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fbb9 	bl	800074c <ST7565_drawstring>

		  // TODO
		  // Read accelerometer and gyroscpe

		  // Send data to display
		  ST7565_display();
 8000fda:	f7ff fcc9 	bl	8000970 <ST7565_display>
  {
 8000fde:	e77f      	b.n	8000ee0 <main+0x34>
 8000fe0:	08003f84 	.word	0x08003f84
 8000fe4:	08003f94 	.word	0x08003f94
 8000fe8:	08003f98 	.word	0x08003f98
 8000fec:	08003fa8 	.word	0x08003fa8
 8000ff0:	08003fb8 	.word	0x08003fb8

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	2230      	movs	r2, #48	; 0x30
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f002 fb6e 	bl	80036e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <SystemClock_Config+0xbc>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <SystemClock_Config+0xbc>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <SystemClock_Config+0xbc>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <SystemClock_Config+0xc0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001040:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <SystemClock_Config+0xc0>)
 8001042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <SystemClock_Config+0xc0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001054:	230a      	movs	r3, #10
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2310      	movs	r3, #16
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fa6b 	bl	8002548 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001078:	f000 f81e 	bl	80010b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fcce 	bl	8002a38 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010a2:	f000 f809 	bl	80010b8 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_RTC_Init+0x44>)
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <MX_RTC_Init+0x48>)
 80010cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_RTC_Init+0x44>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_RTC_Init+0x44>)
 80010d6:	227f      	movs	r2, #127	; 0x7f
 80010d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <MX_RTC_Init+0x44>)
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_RTC_Init+0x44>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <MX_RTC_Init+0x44>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_RTC_Init+0x44>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_RTC_Init+0x44>)
 80010f4:	f001 ff4a 	bl	8002f8c <HAL_RTC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80010fe:	f7ff ffdb 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000638 	.word	0x20000638
 800110c:	40002800 	.word	0x40002800

08001110 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_RTC_MspInit+0x50>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d111      	bne.n	8001156 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001132:	2302      	movs	r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001136:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fe35 	bl	8002db0 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800114c:	f7ff ffb4 	bl	80010b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <HAL_RTC_MspInit+0x54>)
 8001152:	2201      	movs	r2, #1
 8001154:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40002800 	.word	0x40002800
 8001164:	42470e3c 	.word	0x42470e3c

08001168 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <MX_SPI1_Init+0x68>)
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <MX_SPI1_Init+0x6c>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_SPI1_Init+0x68>)
 800117c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001180:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_SPI1_Init+0x68>)
 800118a:	2202      	movs	r2, #2
 800118c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001190:	2201      	movs	r2, #1
 8001192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_SPI1_Init+0x68>)
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_SPI1_Init+0x68>)
 800119e:	2208      	movs	r2, #8
 80011a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011b6:	220a      	movs	r2, #10
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_SPI1_Init+0x68>)
 80011bc:	f001 ffcb 	bl	8003156 <HAL_SPI_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80011c6:	f7ff ff77 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000058c 	.word	0x2000058c
 80011d4:	40013000 	.word	0x40013000

080011d8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI2_Init+0x64>)
 80011de:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_SPI2_Init+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI2_Init+0x64>)
 80011e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI2_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI2_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI2_Init+0x64>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI2_Init+0x64>)
 80011fe:	2200      	movs	r2, #0
 8001200:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI2_Init+0x64>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI2_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI2_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI2_Init+0x64>)
 8001224:	220a      	movs	r2, #10
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI2_Init+0x64>)
 800122a:	f001 ff94 	bl	8003156 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001234:	f7ff ff40 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000658 	.word	0x20000658
 8001240:	40003800 	.word	0x40003800

08001244 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a32      	ldr	r2, [pc, #200]	; (800132c <HAL_SPI_MspInit+0xe8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12c      	bne.n	80012c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_SPI_MspInit+0xec>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a30      	ldr	r2, [pc, #192]	; (8001330 <HAL_SPI_MspInit+0xec>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_SPI_MspInit+0xec>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_SPI_MspInit+0xec>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_SPI_MspInit+0xec>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_SPI_MspInit+0xec>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800129e:	23a0      	movs	r3, #160	; 0xa0
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ae:	2305      	movs	r3, #5
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	481e      	ldr	r0, [pc, #120]	; (8001334 <HAL_SPI_MspInit+0xf0>)
 80012ba:	f000 fe63 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012be:	e031      	b.n	8001324 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <HAL_SPI_MspInit+0xf4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12c      	bne.n	8001324 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_SPI_MspInit+0xec>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001302:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001314:	2305      	movs	r3, #5
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <HAL_SPI_MspInit+0xf8>)
 8001320:	f000 fe30 	bl	8001f84 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013000 	.word	0x40013000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020000 	.word	0x40020000
 8001338:	40003800 	.word	0x40003800
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <HAL_MspInit+0x4c>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <HAL_MspInit+0x4c>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001354:	6453      	str	r3, [r2, #68]	; 0x44
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_MspInit+0x4c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <NMI_Handler+0x4>

08001396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <HardFault_Handler+0x4>

0800139c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <MemManage_Handler+0x4>

080013a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <BusFault_Handler+0x4>

080013a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler+0x4>

080013ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013dc:	f000 f8c6 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f002 f93c 	bl	8003690 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20010000 	.word	0x20010000
 8001444:	00000400 	.word	0x00000400
 8001448:	20000490 	.word	0x20000490
 800144c:	200006c8 	.word	0x200006c8

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800147a:	490e      	ldr	r1, [pc, #56]	; (80014b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800147c:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001490:	4c0b      	ldr	r4, [pc, #44]	; (80014c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800149e:	f7ff ffd7 	bl	8001450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f002 f8fb 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a6:	f7ff fd01 	bl	8000eac <main>
  bx  lr    
 80014aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014b8:	0800452c 	.word	0x0800452c
  ldr r2, =_sbss
 80014bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014c0:	200006c4 	.word	0x200006c4

080014c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_Init+0x40>)
 80014d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_Init+0x40>)
 80014de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_Init+0x40>)
 80014ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 fd13 	bl	8001f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 f808 	bl	800150c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014fc:	f7ff ff20 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x54>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x58>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fd1d 	bl	8001f6a <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 fcf3 	bl	8001f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x5c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000000 	.word	0x20000000
 8001564:	20000008 	.word	0x20000008
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008
 8001590:	200006b0 	.word	0x200006b0

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200006b0 	.word	0x200006b0

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_Delay+0x44>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000008 	.word	0x20000008

080015f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e033      	b.n	8001672 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fa8e 	bl	8000b34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800163a:	f023 0302 	bic.w	r3, r3, #2
 800163e:	f043 0202 	orr.w	r2, r3, #2
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 faba 	bl	8001bc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f023 0303 	bic.w	r3, r3, #3
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
 8001662:	e001      	b.n	8001668 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Start+0x1a>
 8001692:	2302      	movs	r3, #2
 8001694:	e097      	b.n	80017c6 <HAL_ADC_Start+0x14a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d018      	beq.n	80016de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016bc:	4b45      	ldr	r3, [pc, #276]	; (80017d4 <HAL_ADC_Start+0x158>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_ADC_Start+0x15c>)
 80016c2:	fba2 2303 	umull	r2, r3, r2, r3
 80016c6:	0c9a      	lsrs	r2, r3, #18
 80016c8:	4613      	mov	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	4413      	add	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016d0:	e002      	b.n	80016d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f9      	bne.n	80016d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d15f      	bne.n	80017ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001716:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172a:	d106      	bne.n	800173a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f023 0206 	bic.w	r2, r3, #6
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	645a      	str	r2, [r3, #68]	; 0x44
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_ADC_Start+0x160>)
 800174a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001754:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	2b00      	cmp	r3, #0
 8001760:	d10f      	bne.n	8001782 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d129      	bne.n	80017c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e020      	b.n	80017c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a16      	ldr	r2, [pc, #88]	; (80017e0 <HAL_ADC_Start+0x164>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d11b      	bne.n	80017c4 <HAL_ADC_Start+0x148>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d114      	bne.n	80017c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	e00b      	b.n	80017c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000000 	.word	0x20000000
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	40012300 	.word	0x40012300
 80017e0:	40012000 	.word	0x40012000

080017e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Stop+0x16>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e021      	b.n	800183e <HAL_ADC_Stop+0x5a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001866:	d113      	bne.n	8001890 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001876:	d10b      	bne.n	8001890 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e063      	b.n	8001958 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001890:	f7ff fe80 	bl	8001594 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001896:	e021      	b.n	80018dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189e:	d01d      	beq.n	80018dc <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d007      	beq.n	80018b6 <HAL_ADC_PollForConversion+0x6c>
 80018a6:	f7ff fe75 	bl	8001594 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d212      	bcs.n	80018dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d00b      	beq.n	80018dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f043 0204 	orr.w	r2, r3, #4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e03d      	b.n	8001958 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d1d6      	bne.n	8001898 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0212 	mvn.w	r2, #18
 80018f2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d123      	bne.n	8001956 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11f      	bne.n	8001956 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d006      	beq.n	8001932 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800192e:	2b00      	cmp	r3, #0
 8001930:	d111      	bne.n	8001956 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d105      	bne.n	8001956 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f043 0201 	orr.w	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1c>
 8001994:	2302      	movs	r3, #2
 8001996:	e105      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x228>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	d925      	bls.n	80019f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68d9      	ldr	r1, [r3, #12]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	3b1e      	subs	r3, #30
 80019be:	2207      	movs	r2, #7
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68d9      	ldr	r1, [r3, #12]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	3b1e      	subs	r3, #30
 80019e8:	409a      	lsls	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e022      	b.n	8001a3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	2207      	movs	r2, #7
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6919      	ldr	r1, [r3, #16]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4403      	add	r3, r0
 8001a30:	409a      	lsls	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d824      	bhi.n	8001a8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b05      	subs	r3, #5
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	400a      	ands	r2, r1
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3b05      	subs	r3, #5
 8001a7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8a:	e04c      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b0c      	cmp	r3, #12
 8001a92:	d824      	bhi.n	8001ade <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b23      	subs	r3, #35	; 0x23
 8001aa6:	221f      	movs	r2, #31
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43da      	mvns	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	400a      	ands	r2, r1
 8001ab4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3b23      	subs	r3, #35	; 0x23
 8001ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
 8001adc:	e023      	b.n	8001b26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b41      	subs	r3, #65	; 0x41
 8001af0:	221f      	movs	r2, #31
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	400a      	ands	r2, r1
 8001afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b41      	subs	r3, #65	; 0x41
 8001b1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_ADC_ConfigChannel+0x234>)
 8001b28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	d105      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_ADC_ConfigChannel+0x238>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d123      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b10      	cmp	r3, #16
 8001b58:	d003      	beq.n	8001b62 <HAL_ADC_ConfigChannel+0x1e6>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d11b      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d111      	bne.n	8001b9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_ADC_ConfigChannel+0x23c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a10      	ldr	r2, [pc, #64]	; (8001bbc <HAL_ADC_ConfigChannel+0x240>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9a      	lsrs	r2, r3, #18
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b8c:	e002      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f9      	bne.n	8001b8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40012300 	.word	0x40012300
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc8:	4b79      	ldr	r3, [pc, #484]	; (8001db0 <ADC_Init+0x1f0>)
 8001bca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6859      	ldr	r1, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6899      	ldr	r1, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <ADC_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c66:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6899      	ldr	r1, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	e00f      	b.n	8001cbe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cbc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0202 	bic.w	r2, r2, #2
 8001ccc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6899      	ldr	r1, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	7e1b      	ldrb	r3, [r3, #24]
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6859      	ldr	r1, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	3b01      	subs	r3, #1
 8001d18:	035a      	lsls	r2, r3, #13
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e007      	b.n	8001d34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	051a      	lsls	r2, r3, #20
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6899      	ldr	r1, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d76:	025a      	lsls	r2, r3, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6899      	ldr	r1, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	029a      	lsls	r2, r3, #10
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40012300 	.word	0x40012300
 8001db4:	0f000001 	.word	0x0f000001

08001db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dce:	68ba      	ldr	r2, [r7, #8]
 8001dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dea:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <__NVIC_SetPriorityGrouping+0x44>)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	60d3      	str	r3, [r2, #12]
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <__NVIC_GetPriorityGrouping+0x18>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 0307 	and.w	r3, r3, #7
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee8:	d301      	bcc.n	8001eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eea:	2301      	movs	r3, #1
 8001eec:	e00f      	b.n	8001f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <SysTick_Config+0x40>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef6:	210f      	movs	r1, #15
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	f7ff ff8e 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <SysTick_Config+0x40>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <SysTick_Config+0x40>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	e000e010 	.word	0xe000e010

08001f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff47 	bl	8001db8 <__NVIC_SetPriorityGrouping>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
 8001f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff5c 	bl	8001e00 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff5d 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb0 	bl	8001ed8 <SysTick_Config>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e159      	b.n	8002254 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8148 	bne.w	800224e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80a2 	beq.w	800224e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_GPIO_Init+0x2e8>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_GPIO_Init+0x2e8>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_GPIO_Init+0x2ec>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a49      	ldr	r2, [pc, #292]	; (8002274 <HAL_GPIO_Init+0x2f0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d019      	beq.n	8002186 <HAL_GPIO_Init+0x202>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x2f4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0x1fe>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_GPIO_Init+0x2f8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00d      	beq.n	800217e <HAL_GPIO_Init+0x1fa>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a46      	ldr	r2, [pc, #280]	; (8002280 <HAL_GPIO_Init+0x2fc>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <HAL_GPIO_Init+0x1f6>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a45      	ldr	r2, [pc, #276]	; (8002284 <HAL_GPIO_Init+0x300>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_GPIO_Init+0x1f2>
 8002172:	2304      	movs	r3, #4
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002176:	2307      	movs	r3, #7
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x204>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x204>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x204>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x2ec>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a6:	4b38      	ldr	r3, [pc, #224]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ca:	4a2f      	ldr	r2, [pc, #188]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d0:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f4:	4a24      	ldr	r2, [pc, #144]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fa:	4b23      	ldr	r3, [pc, #140]	; (8002288 <HAL_GPIO_Init+0x304>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800221e:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_GPIO_Init+0x304>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <HAL_GPIO_Init+0x304>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f aea2 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e12b      	b.n	800252a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fd52 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002324:	f000 fd30 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 8002328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a81      	ldr	r2, [pc, #516]	; (8002534 <HAL_I2C_Init+0x274>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d807      	bhi.n	8002344 <HAL_I2C_Init+0x84>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a80      	ldr	r2, [pc, #512]	; (8002538 <HAL_I2C_Init+0x278>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	e006      	b.n	8002352 <HAL_I2C_Init+0x92>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4a7d      	ldr	r2, [pc, #500]	; (800253c <HAL_I2C_Init+0x27c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	bf94      	ite	ls
 800234c:	2301      	movls	r3, #1
 800234e:	2300      	movhi	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0e7      	b.n	800252a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a78      	ldr	r2, [pc, #480]	; (8002540 <HAL_I2C_Init+0x280>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0c9b      	lsrs	r3, r3, #18
 8002364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	430a      	orrs	r2, r1
 8002378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a6a      	ldr	r2, [pc, #424]	; (8002534 <HAL_I2C_Init+0x274>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d802      	bhi.n	8002394 <HAL_I2C_Init+0xd4>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	e009      	b.n	80023a8 <HAL_I2C_Init+0xe8>
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_I2C_Init+0x284>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	099b      	lsrs	r3, r3, #6
 80023a6:	3301      	adds	r3, #1
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	430b      	orrs	r3, r1
 80023ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	495c      	ldr	r1, [pc, #368]	; (8002534 <HAL_I2C_Init+0x274>)
 80023c4:	428b      	cmp	r3, r1
 80023c6:	d819      	bhi.n	80023fc <HAL_I2C_Init+0x13c>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e59      	subs	r1, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023dc:	400b      	ands	r3, r1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_I2C_Init+0x138>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e59      	subs	r1, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	e051      	b.n	800249c <HAL_I2C_Init+0x1dc>
 80023f8:	2304      	movs	r3, #4
 80023fa:	e04f      	b.n	800249c <HAL_I2C_Init+0x1dc>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d111      	bne.n	8002428 <HAL_I2C_Init+0x168>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	e012      	b.n	800244e <HAL_I2C_Init+0x18e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Init+0x196>
 8002452:	2301      	movs	r3, #1
 8002454:	e022      	b.n	800249c <HAL_I2C_Init+0x1dc>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10e      	bne.n	800247c <HAL_I2C_Init+0x1bc>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1e58      	subs	r0, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002470:	3301      	adds	r3, #1
 8002472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800247a:	e00f      	b.n	800249c <HAL_I2C_Init+0x1dc>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e58      	subs	r0, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	0099      	lsls	r1, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	6809      	ldr	r1, [r1, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6911      	ldr	r1, [r2, #16]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68d2      	ldr	r2, [r2, #12]
 80024d6:	4311      	orrs	r1, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	000186a0 	.word	0x000186a0
 8002538:	001e847f 	.word	0x001e847f
 800253c:	003d08ff 	.word	0x003d08ff
 8002540:	431bde83 	.word	0x431bde83
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e264      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d075      	beq.n	8002652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002566:	4ba3      	ldr	r3, [pc, #652]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b04      	cmp	r3, #4
 8002570:	d00c      	beq.n	800258c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4ba0      	ldr	r3, [pc, #640]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d112      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b9d      	ldr	r3, [pc, #628]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258a:	d10b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	4b99      	ldr	r3, [pc, #612]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05b      	beq.n	8002650 <HAL_RCC_OscConfig+0x108>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d157      	bne.n	8002650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e23f      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d106      	bne.n	80025bc <HAL_RCC_OscConfig+0x74>
 80025ae:	4b91      	ldr	r3, [pc, #580]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a90      	ldr	r2, [pc, #576]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e01d      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b8b      	ldr	r3, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a8a      	ldr	r2, [pc, #552]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b88      	ldr	r3, [pc, #544]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a87      	ldr	r2, [pc, #540]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0xb0>
 80025e0:	4b84      	ldr	r3, [pc, #528]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a83      	ldr	r2, [pc, #524]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b81      	ldr	r3, [pc, #516]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a80      	ldr	r2, [pc, #512]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe ffc8 	bl	8001594 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7fe ffc4 	bl	8001594 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e204      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b76      	ldr	r3, [pc, #472]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d0f0      	beq.n	8002608 <HAL_RCC_OscConfig+0xc0>
 8002626:	e014      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe ffb4 	bl	8001594 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002630:	f7fe ffb0 	bl	8001594 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b64      	cmp	r3, #100	; 0x64
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1f0      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f0      	bne.n	8002630 <HAL_RCC_OscConfig+0xe8>
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265e:	4b65      	ldr	r3, [pc, #404]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266a:	4b62      	ldr	r3, [pc, #392]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b5f      	ldr	r3, [pc, #380]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d001      	beq.n	800269a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e1c4      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269a:	4b56      	ldr	r3, [pc, #344]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4952      	ldr	r1, [pc, #328]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ae:	e03a      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d020      	beq.n	80026fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b8:	4b4f      	ldr	r3, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x2b0>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe ff69 	bl	8001594 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe ff65 	bl	8001594 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e1a5      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4940      	ldr	r1, [pc, #256]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b3f      	ldr	r3, [pc, #252]	; (80027f8 <HAL_RCC_OscConfig+0x2b0>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe ff48 	bl	8001594 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe ff44 	bl	8001594 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e184      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d030      	beq.n	8002794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x2b4>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe ff28 	bl	8001594 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002748:	f7fe ff24 	bl	8001594 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e164      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x200>
 8002766:	e015      	b.n	8002794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_RCC_OscConfig+0x2b4>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe ff11 	bl	8001594 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002776:	f7fe ff0d 	bl	8001594 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e14d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f0      	bne.n	8002776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80a0 	beq.w	80028e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d121      	bne.n	8002822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_RCC_OscConfig+0x2b8>)
 80027e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ea:	f7fe fed3 	bl	8001594 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e011      	b.n	8002816 <HAL_RCC_OscConfig+0x2ce>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	42470000 	.word	0x42470000
 80027fc:	42470e80 	.word	0x42470e80
 8002800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002804:	f7fe fec6 	bl	8001594 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e106      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <HAL_RCC_OscConfig+0x4e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x2f0>
 800282a:	4b81      	ldr	r3, [pc, #516]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a80      	ldr	r2, [pc, #512]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	e01c      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x312>
 8002840:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002846:	f043 0304 	orr.w	r3, r3, #4
 800284a:	6713      	str	r3, [r2, #112]	; 0x70
 800284c:	4b78      	ldr	r3, [pc, #480]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a77      	ldr	r2, [pc, #476]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x32a>
 800285a:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a74      	ldr	r2, [pc, #464]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	4b72      	ldr	r3, [pc, #456]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a71      	ldr	r2, [pc, #452]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 800286c:	f023 0304 	bic.w	r3, r3, #4
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7fe fe8b 	bl	8001594 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7fe fe87 	bl	8001594 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0c5      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ee      	beq.n	8002882 <HAL_RCC_OscConfig+0x33a>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fe75 	bl	8001594 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ac:	e00a      	b.n	80028c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fe71 	bl	8001594 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e0af      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	4b5a      	ldr	r3, [pc, #360]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b56      	ldr	r3, [pc, #344]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a55      	ldr	r2, [pc, #340]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 809b 	beq.w	8002a22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d05c      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d141      	bne.n	8002984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fe45 	bl	8001594 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe fe41 	bl	8001594 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e081      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	019b      	lsls	r3, r3, #6
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	061b      	lsls	r3, r3, #24
 8002950:	4937      	ldr	r1, [pc, #220]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x4ec>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe fe1a 	bl	8001594 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fe16 	bl	8001594 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e056      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x41c>
 8002982:	e04e      	b.n	8002a22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298a:	f7fe fe03 	bl	8001594 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fdff 	bl	8001594 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e03f      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x44a>
 80029b0:	e037      	b.n	8002a22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e032      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d028      	beq.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d121      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d11a      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d111      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	42470060 	.word	0x42470060

08002a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0cc      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d90c      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d020      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a8c:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab0:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	494d      	ldr	r1, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d044      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e07f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d003      	beq.n	8002af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af6:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e06f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e067      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b16:	4b37      	ldr	r3, [pc, #220]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f023 0203 	bic.w	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4934      	ldr	r1, [pc, #208]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b28:	f7fe fd34 	bl	8001594 <HAL_GetTick>
 8002b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe fd30 	bl	8001594 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e04f      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 020c 	and.w	r2, r3, #12
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1eb      	bne.n	8002b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d20c      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b20      	ldr	r3, [pc, #128]	; (8002bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e032      	b.n	8002be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4916      	ldr	r1, [pc, #88]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bbe:	f000 f821 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	490a      	ldr	r1, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	5ccb      	ldrb	r3, [r1, r3]
 8002bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_ClockConfig+0x1c8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fe fc94 	bl	800150c <HAL_InitTick>

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023c00 	.word	0x40023c00
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	080044d0 	.word	0x080044d0
 8002bfc:	20000000 	.word	0x20000000
 8002c00:	20000004 	.word	0x20000004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	6079      	str	r1, [r7, #4]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	60f9      	str	r1, [r7, #12]
 8002c12:	2100      	movs	r1, #0
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c16:	2100      	movs	r1, #0
 8002c18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c1a:	4952      	ldr	r1, [pc, #328]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c1c:	6889      	ldr	r1, [r1, #8]
 8002c1e:	f001 010c 	and.w	r1, r1, #12
 8002c22:	2908      	cmp	r1, #8
 8002c24:	d00d      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3e>
 8002c26:	2908      	cmp	r1, #8
 8002c28:	f200 8094 	bhi.w	8002d54 <HAL_RCC_GetSysClockFreq+0x150>
 8002c2c:	2900      	cmp	r1, #0
 8002c2e:	d002      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0x32>
 8002c30:	2904      	cmp	r1, #4
 8002c32:	d003      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x38>
 8002c34:	e08e      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c36:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8002c38:	60bb      	str	r3, [r7, #8]
       break;
 8002c3a:	e08e      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c3e:	60bb      	str	r3, [r7, #8]
      break;
 8002c40:	e08b      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c42:	4948      	ldr	r1, [pc, #288]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c44:	6849      	ldr	r1, [r1, #4]
 8002c46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002c4a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4c:	4945      	ldr	r1, [pc, #276]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c4e:	6849      	ldr	r1, [r1, #4]
 8002c50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002c54:	2900      	cmp	r1, #0
 8002c56:	d024      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4942      	ldr	r1, [pc, #264]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c5a:	6849      	ldr	r1, [r1, #4]
 8002c5c:	0989      	lsrs	r1, r1, #6
 8002c5e:	4608      	mov	r0, r1
 8002c60:	f04f 0100 	mov.w	r1, #0
 8002c64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002c68:	f04f 0500 	mov.w	r5, #0
 8002c6c:	ea00 0204 	and.w	r2, r0, r4
 8002c70:	ea01 0305 	and.w	r3, r1, r5
 8002c74:	493d      	ldr	r1, [pc, #244]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c76:	fb01 f003 	mul.w	r0, r1, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	fb01 f102 	mul.w	r1, r1, r2
 8002c80:	1844      	adds	r4, r0, r1
 8002c82:	493a      	ldr	r1, [pc, #232]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8002c84:	fba2 0101 	umull	r0, r1, r2, r1
 8002c88:	1863      	adds	r3, r4, r1
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f7fd faf4 	bl	8000280 <__aeabi_uldivmod>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e04a      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	ea02 0400 	and.w	r4, r2, r0
 8002cba:	ea03 0501 	and.w	r5, r3, r1
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	014b      	lsls	r3, r1, #5
 8002ccc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cd0:	0142      	lsls	r2, r0, #5
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	1b00      	subs	r0, r0, r4
 8002cd8:	eb61 0105 	sbc.w	r1, r1, r5
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	018b      	lsls	r3, r1, #6
 8002ce6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cea:	0182      	lsls	r2, r0, #6
 8002cec:	1a12      	subs	r2, r2, r0
 8002cee:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf2:	f04f 0000 	mov.w	r0, #0
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	00d9      	lsls	r1, r3, #3
 8002cfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d00:	00d0      	lsls	r0, r2, #3
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	1912      	adds	r2, r2, r4
 8002d08:	eb45 0303 	adc.w	r3, r5, r3
 8002d0c:	f04f 0000 	mov.w	r0, #0
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	0299      	lsls	r1, r3, #10
 8002d16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d1a:	0290      	lsls	r0, r2, #10
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f7fd faa8 	bl	8000280 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d38:	4b0a      	ldr	r3, [pc, #40]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	3301      	adds	r3, #1
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d50:	60bb      	str	r3, [r7, #8]
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b04      	ldr	r3, [pc, #16]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8002d56:	60bb      	str	r3, [r7, #8]
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bdb0      	pop	{r4, r5, r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	017d7840 	.word	0x017d7840

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	080044e0 	.word	0x080044e0

08002db0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d035      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dd8:	4b67      	ldr	r3, [pc, #412]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dde:	f7fe fbd9 	bl	8001594 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002de6:	f7fe fbd5 	bl	8001594 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0ba      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df8:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f0      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	019a      	lsls	r2, r3, #6
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	071b      	lsls	r3, r3, #28
 8002e10:	495a      	ldr	r1, [pc, #360]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e18:	4b57      	ldr	r3, [pc, #348]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e1e:	f7fe fbb9 	bl	8001594 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e26:	f7fe fbb5 	bl	8001594 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e09a      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e38:	4b50      	ldr	r3, [pc, #320]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8083 	beq.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	4b49      	ldr	r3, [pc, #292]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b46      	ldr	r3, [pc, #280]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e7a:	f7fe fb8b 	bl	8001594 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe fb87 	bl	8001594 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e06c      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e94:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02f      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ebe:	4b2f      	ldr	r3, [pc, #188]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ece:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d114      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe fb55 	bl	8001594 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fb51 	bl	8001594 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e034      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0ee      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1c:	d10d      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f32:	4912      	ldr	r1, [pc, #72]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]
 8002f38:	e005      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4a0f      	ldr	r2, [pc, #60]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f44:	6093      	str	r3, [r2, #8]
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f52:	490a      	ldr	r1, [pc, #40]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7c1a      	ldrb	r2, [r3, #16]
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f6a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	42470068 	.word	0x42470068
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42470e40 	.word	0x42470e40
 8002f88:	424711e0 	.word	0x424711e0

08002f8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e083      	b.n	80030a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7f5b      	ldrb	r3, [r3, #29]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fe f8ae 	bl	8001110 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	22ca      	movs	r2, #202	; 0xca
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2253      	movs	r2, #83	; 0x53
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f897 	bl	80030fe <RTC_EnterInitMode>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e05e      	b.n	80030a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	041a      	lsls	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003046:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f829 	bl	80030ae <HAL_RTC_WaitForSynchro>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	22ff      	movs	r2, #255	; 0xff
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2204      	movs	r2, #4
 800306e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e018      	b.n	80030a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	22ff      	movs	r2, #255	; 0xff
 800309c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030ca:	f7fe fa63 	bl	8001594 <HAL_GetTick>
 80030ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030d0:	e009      	b.n	80030e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030d2:	f7fe fa5f 	bl	8001594 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030e0:	d901      	bls.n	80030e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e007      	b.n	80030f6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0ee      	beq.n	80030d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d119      	bne.n	800314c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003122:	f7fe fa37 	bl	8001594 <HAL_GetTick>
 8003126:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003128:	e009      	b.n	800313e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800312a:	f7fe fa33 	bl	8001594 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003138:	d901      	bls.n	800313e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e007      	b.n	800314e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ee      	beq.n	800312a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e07b      	b.n	8003260 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d108      	bne.n	8003182 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003178:	d009      	beq.n	800318e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
 8003180:	e005      	b.n	800318e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fe f84b 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	ea42 0103 	orr.w	r1, r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	f003 0104 	and.w	r1, r3, #4
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	f003 0210 	and.w	r2, r3, #16
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_SPI_Transmit+0x22>
 8003286:	2302      	movs	r3, #2
 8003288:	e126      	b.n	80034d8 <HAL_SPI_Transmit+0x270>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003292:	f7fe f97f 	bl	8001594 <HAL_GetTick>
 8003296:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
 80032aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032ac:	e10b      	b.n	80034c6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_SPI_Transmit+0x52>
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032be:	e102      	b.n	80034c6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2203      	movs	r2, #3
 80032c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003306:	d10f      	bne.n	8003328 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003326:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d007      	beq.n	8003346 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334e:	d14b      	bne.n	80033e8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_SPI_Transmit+0xf6>
 8003358:	8afb      	ldrh	r3, [r7, #22]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d13e      	bne.n	80033dc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	881a      	ldrh	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	1c9a      	adds	r2, r3, #2
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003382:	e02b      	b.n	80033dc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d112      	bne.n	80033b8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	881a      	ldrh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	1c9a      	adds	r2, r3, #2
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80033b6:	e011      	b.n	80033dc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033b8:	f7fe f8ec 	bl	8001594 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d803      	bhi.n	80033d0 <HAL_SPI_Transmit+0x168>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d102      	bne.n	80033d6 <HAL_SPI_Transmit+0x16e>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033da:	e074      	b.n	80034c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ce      	bne.n	8003384 <HAL_SPI_Transmit+0x11c>
 80033e6:	e04c      	b.n	8003482 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x18e>
 80033f0:	8afb      	ldrh	r3, [r7, #22]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d140      	bne.n	8003478 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800341c:	e02c      	b.n	8003478 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d113      	bne.n	8003454 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	7812      	ldrb	r2, [r2, #0]
 8003438:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	86da      	strh	r2, [r3, #54]	; 0x36
 8003452:	e011      	b.n	8003478 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003454:	f7fe f89e 	bl	8001594 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d803      	bhi.n	800346c <HAL_SPI_Transmit+0x204>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346a:	d102      	bne.n	8003472 <HAL_SPI_Transmit+0x20a>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003476:	e026      	b.n	80034c6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1cd      	bne.n	800341e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	6839      	ldr	r1, [r7, #0]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8c0 	bl	800360c <SPI_EndRxTxTransaction>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	77fb      	strb	r3, [r7, #31]
 80034c2:	e000      	b.n	80034c6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ee:	b2db      	uxtb	r3, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	603b      	str	r3, [r7, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800350c:	f7fe f842 	bl	8001594 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	4413      	add	r3, r2
 800351a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800351c:	f7fe f83a 	bl	8001594 <HAL_GetTick>
 8003520:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003522:	4b39      	ldr	r3, [pc, #228]	; (8003608 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	015b      	lsls	r3, r3, #5
 8003528:	0d1b      	lsrs	r3, r3, #20
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	fb02 f303 	mul.w	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003532:	e054      	b.n	80035de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353a:	d050      	beq.n	80035de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800353c:	f7fe f82a 	bl	8001594 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	429a      	cmp	r2, r3
 800354a:	d902      	bls.n	8003552 <SPI_WaitFlagStateUntilTimeout+0x56>
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d13d      	bne.n	80035ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003560:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356a:	d111      	bne.n	8003590 <SPI_WaitFlagStateUntilTimeout+0x94>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003574:	d004      	beq.n	8003580 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d107      	bne.n	8003590 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003598:	d10f      	bne.n	80035ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e017      	b.n	80035fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	3b01      	subs	r3, #1
 80035dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d19b      	bne.n	8003534 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3720      	adds	r7, #32
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <SPI_EndRxTxTransaction+0x7c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1b      	ldr	r2, [pc, #108]	; (800368c <SPI_EndRxTxTransaction+0x80>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0d5b      	lsrs	r3, r3, #21
 8003624:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003628:	fb02 f303 	mul.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003636:	d112      	bne.n	800365e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2200      	movs	r2, #0
 8003640:	2180      	movs	r1, #128	; 0x80
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff ff5a 	bl	80034fc <SPI_WaitFlagStateUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003652:	f043 0220 	orr.w	r2, r3, #32
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e00f      	b.n	800367e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3b01      	subs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d0f2      	beq.n	800365e <SPI_EndRxTxTransaction+0x52>
 8003678:	e000      	b.n	800367c <SPI_EndRxTxTransaction+0x70>
        break;
 800367a:	bf00      	nop
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000000 	.word	0x20000000
 800368c:	165e9f81 	.word	0x165e9f81

08003690 <__errno>:
 8003690:	4b01      	ldr	r3, [pc, #4]	; (8003698 <__errno+0x8>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4d0d      	ldr	r5, [pc, #52]	; (80036d4 <__libc_init_array+0x38>)
 80036a0:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	2600      	movs	r6, #0
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	4d0b      	ldr	r5, [pc, #44]	; (80036dc <__libc_init_array+0x40>)
 80036ae:	4c0c      	ldr	r4, [pc, #48]	; (80036e0 <__libc_init_array+0x44>)
 80036b0:	f000 fc5c 	bl	8003f6c <_init>
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	2600      	movs	r6, #0
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	08004524 	.word	0x08004524
 80036d8:	08004524 	.word	0x08004524
 80036dc:	08004524 	.word	0x08004524
 80036e0:	08004528 	.word	0x08004528

080036e4 <memset>:
 80036e4:	4402      	add	r2, r0
 80036e6:	4603      	mov	r3, r0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	f803 1b01 	strb.w	r1, [r3], #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <siprintf>:
 80036f4:	b40e      	push	{r1, r2, r3}
 80036f6:	b500      	push	{lr}
 80036f8:	b09c      	sub	sp, #112	; 0x70
 80036fa:	ab1d      	add	r3, sp, #116	; 0x74
 80036fc:	9002      	str	r0, [sp, #8]
 80036fe:	9006      	str	r0, [sp, #24]
 8003700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003704:	4809      	ldr	r0, [pc, #36]	; (800372c <siprintf+0x38>)
 8003706:	9107      	str	r1, [sp, #28]
 8003708:	9104      	str	r1, [sp, #16]
 800370a:	4909      	ldr	r1, [pc, #36]	; (8003730 <siprintf+0x3c>)
 800370c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003710:	9105      	str	r1, [sp, #20]
 8003712:	6800      	ldr	r0, [r0, #0]
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	a902      	add	r1, sp, #8
 8003718:	f000 f876 	bl	8003808 <_svfiprintf_r>
 800371c:	9b02      	ldr	r3, [sp, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	b01c      	add	sp, #112	; 0x70
 8003724:	f85d eb04 	ldr.w	lr, [sp], #4
 8003728:	b003      	add	sp, #12
 800372a:	4770      	bx	lr
 800372c:	2000000c 	.word	0x2000000c
 8003730:	ffff0208 	.word	0xffff0208

08003734 <strcat>:
 8003734:	b510      	push	{r4, lr}
 8003736:	4602      	mov	r2, r0
 8003738:	7814      	ldrb	r4, [r2, #0]
 800373a:	4613      	mov	r3, r2
 800373c:	3201      	adds	r2, #1
 800373e:	2c00      	cmp	r4, #0
 8003740:	d1fa      	bne.n	8003738 <strcat+0x4>
 8003742:	3b01      	subs	r3, #1
 8003744:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003748:	f803 2f01 	strb.w	r2, [r3, #1]!
 800374c:	2a00      	cmp	r2, #0
 800374e:	d1f9      	bne.n	8003744 <strcat+0x10>
 8003750:	bd10      	pop	{r4, pc}

08003752 <__ssputs_r>:
 8003752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003756:	688e      	ldr	r6, [r1, #8]
 8003758:	429e      	cmp	r6, r3
 800375a:	4682      	mov	sl, r0
 800375c:	460c      	mov	r4, r1
 800375e:	4690      	mov	r8, r2
 8003760:	461f      	mov	r7, r3
 8003762:	d838      	bhi.n	80037d6 <__ssputs_r+0x84>
 8003764:	898a      	ldrh	r2, [r1, #12]
 8003766:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800376a:	d032      	beq.n	80037d2 <__ssputs_r+0x80>
 800376c:	6825      	ldr	r5, [r4, #0]
 800376e:	6909      	ldr	r1, [r1, #16]
 8003770:	eba5 0901 	sub.w	r9, r5, r1
 8003774:	6965      	ldr	r5, [r4, #20]
 8003776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800377a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800377e:	3301      	adds	r3, #1
 8003780:	444b      	add	r3, r9
 8003782:	106d      	asrs	r5, r5, #1
 8003784:	429d      	cmp	r5, r3
 8003786:	bf38      	it	cc
 8003788:	461d      	movcc	r5, r3
 800378a:	0553      	lsls	r3, r2, #21
 800378c:	d531      	bpl.n	80037f2 <__ssputs_r+0xa0>
 800378e:	4629      	mov	r1, r5
 8003790:	f000 fb46 	bl	8003e20 <_malloc_r>
 8003794:	4606      	mov	r6, r0
 8003796:	b950      	cbnz	r0, 80037ae <__ssputs_r+0x5c>
 8003798:	230c      	movs	r3, #12
 800379a:	f8ca 3000 	str.w	r3, [sl]
 800379e:	89a3      	ldrh	r3, [r4, #12]
 80037a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a4:	81a3      	strh	r3, [r4, #12]
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	6921      	ldr	r1, [r4, #16]
 80037b0:	464a      	mov	r2, r9
 80037b2:	f000 fabd 	bl	8003d30 <memcpy>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	81a3      	strh	r3, [r4, #12]
 80037c2:	6126      	str	r6, [r4, #16]
 80037c4:	6165      	str	r5, [r4, #20]
 80037c6:	444e      	add	r6, r9
 80037c8:	eba5 0509 	sub.w	r5, r5, r9
 80037cc:	6026      	str	r6, [r4, #0]
 80037ce:	60a5      	str	r5, [r4, #8]
 80037d0:	463e      	mov	r6, r7
 80037d2:	42be      	cmp	r6, r7
 80037d4:	d900      	bls.n	80037d8 <__ssputs_r+0x86>
 80037d6:	463e      	mov	r6, r7
 80037d8:	4632      	mov	r2, r6
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	4641      	mov	r1, r8
 80037de:	f000 fab5 	bl	8003d4c <memmove>
 80037e2:	68a3      	ldr	r3, [r4, #8]
 80037e4:	6822      	ldr	r2, [r4, #0]
 80037e6:	1b9b      	subs	r3, r3, r6
 80037e8:	4432      	add	r2, r6
 80037ea:	60a3      	str	r3, [r4, #8]
 80037ec:	6022      	str	r2, [r4, #0]
 80037ee:	2000      	movs	r0, #0
 80037f0:	e7db      	b.n	80037aa <__ssputs_r+0x58>
 80037f2:	462a      	mov	r2, r5
 80037f4:	f000 fb6e 	bl	8003ed4 <_realloc_r>
 80037f8:	4606      	mov	r6, r0
 80037fa:	2800      	cmp	r0, #0
 80037fc:	d1e1      	bne.n	80037c2 <__ssputs_r+0x70>
 80037fe:	6921      	ldr	r1, [r4, #16]
 8003800:	4650      	mov	r0, sl
 8003802:	f000 fabd 	bl	8003d80 <_free_r>
 8003806:	e7c7      	b.n	8003798 <__ssputs_r+0x46>

08003808 <_svfiprintf_r>:
 8003808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	4698      	mov	r8, r3
 800380e:	898b      	ldrh	r3, [r1, #12]
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	b09d      	sub	sp, #116	; 0x74
 8003814:	4607      	mov	r7, r0
 8003816:	460d      	mov	r5, r1
 8003818:	4614      	mov	r4, r2
 800381a:	d50e      	bpl.n	800383a <_svfiprintf_r+0x32>
 800381c:	690b      	ldr	r3, [r1, #16]
 800381e:	b963      	cbnz	r3, 800383a <_svfiprintf_r+0x32>
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	f000 fafd 	bl	8003e20 <_malloc_r>
 8003826:	6028      	str	r0, [r5, #0]
 8003828:	6128      	str	r0, [r5, #16]
 800382a:	b920      	cbnz	r0, 8003836 <_svfiprintf_r+0x2e>
 800382c:	230c      	movs	r3, #12
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	e0d1      	b.n	80039da <_svfiprintf_r+0x1d2>
 8003836:	2340      	movs	r3, #64	; 0x40
 8003838:	616b      	str	r3, [r5, #20]
 800383a:	2300      	movs	r3, #0
 800383c:	9309      	str	r3, [sp, #36]	; 0x24
 800383e:	2320      	movs	r3, #32
 8003840:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003844:	f8cd 800c 	str.w	r8, [sp, #12]
 8003848:	2330      	movs	r3, #48	; 0x30
 800384a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80039f4 <_svfiprintf_r+0x1ec>
 800384e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003852:	f04f 0901 	mov.w	r9, #1
 8003856:	4623      	mov	r3, r4
 8003858:	469a      	mov	sl, r3
 800385a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800385e:	b10a      	cbz	r2, 8003864 <_svfiprintf_r+0x5c>
 8003860:	2a25      	cmp	r2, #37	; 0x25
 8003862:	d1f9      	bne.n	8003858 <_svfiprintf_r+0x50>
 8003864:	ebba 0b04 	subs.w	fp, sl, r4
 8003868:	d00b      	beq.n	8003882 <_svfiprintf_r+0x7a>
 800386a:	465b      	mov	r3, fp
 800386c:	4622      	mov	r2, r4
 800386e:	4629      	mov	r1, r5
 8003870:	4638      	mov	r0, r7
 8003872:	f7ff ff6e 	bl	8003752 <__ssputs_r>
 8003876:	3001      	adds	r0, #1
 8003878:	f000 80aa 	beq.w	80039d0 <_svfiprintf_r+0x1c8>
 800387c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800387e:	445a      	add	r2, fp
 8003880:	9209      	str	r2, [sp, #36]	; 0x24
 8003882:	f89a 3000 	ldrb.w	r3, [sl]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80a2 	beq.w	80039d0 <_svfiprintf_r+0x1c8>
 800388c:	2300      	movs	r3, #0
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003896:	f10a 0a01 	add.w	sl, sl, #1
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	9307      	str	r3, [sp, #28]
 800389e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a2:	931a      	str	r3, [sp, #104]	; 0x68
 80038a4:	4654      	mov	r4, sl
 80038a6:	2205      	movs	r2, #5
 80038a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ac:	4851      	ldr	r0, [pc, #324]	; (80039f4 <_svfiprintf_r+0x1ec>)
 80038ae:	f7fc fc97 	bl	80001e0 <memchr>
 80038b2:	9a04      	ldr	r2, [sp, #16]
 80038b4:	b9d8      	cbnz	r0, 80038ee <_svfiprintf_r+0xe6>
 80038b6:	06d0      	lsls	r0, r2, #27
 80038b8:	bf44      	itt	mi
 80038ba:	2320      	movmi	r3, #32
 80038bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c0:	0711      	lsls	r1, r2, #28
 80038c2:	bf44      	itt	mi
 80038c4:	232b      	movmi	r3, #43	; 0x2b
 80038c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038ca:	f89a 3000 	ldrb.w	r3, [sl]
 80038ce:	2b2a      	cmp	r3, #42	; 0x2a
 80038d0:	d015      	beq.n	80038fe <_svfiprintf_r+0xf6>
 80038d2:	9a07      	ldr	r2, [sp, #28]
 80038d4:	4654      	mov	r4, sl
 80038d6:	2000      	movs	r0, #0
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	4621      	mov	r1, r4
 80038de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e2:	3b30      	subs	r3, #48	; 0x30
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d94e      	bls.n	8003986 <_svfiprintf_r+0x17e>
 80038e8:	b1b0      	cbz	r0, 8003918 <_svfiprintf_r+0x110>
 80038ea:	9207      	str	r2, [sp, #28]
 80038ec:	e014      	b.n	8003918 <_svfiprintf_r+0x110>
 80038ee:	eba0 0308 	sub.w	r3, r0, r8
 80038f2:	fa09 f303 	lsl.w	r3, r9, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	9304      	str	r3, [sp, #16]
 80038fa:	46a2      	mov	sl, r4
 80038fc:	e7d2      	b.n	80038a4 <_svfiprintf_r+0x9c>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	1d19      	adds	r1, r3, #4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	9103      	str	r1, [sp, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfbb      	ittet	lt
 800390a:	425b      	neglt	r3, r3
 800390c:	f042 0202 	orrlt.w	r2, r2, #2
 8003910:	9307      	strge	r3, [sp, #28]
 8003912:	9307      	strlt	r3, [sp, #28]
 8003914:	bfb8      	it	lt
 8003916:	9204      	strlt	r2, [sp, #16]
 8003918:	7823      	ldrb	r3, [r4, #0]
 800391a:	2b2e      	cmp	r3, #46	; 0x2e
 800391c:	d10c      	bne.n	8003938 <_svfiprintf_r+0x130>
 800391e:	7863      	ldrb	r3, [r4, #1]
 8003920:	2b2a      	cmp	r3, #42	; 0x2a
 8003922:	d135      	bne.n	8003990 <_svfiprintf_r+0x188>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	1d1a      	adds	r2, r3, #4
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	9203      	str	r2, [sp, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	bfb8      	it	lt
 8003930:	f04f 33ff 	movlt.w	r3, #4294967295
 8003934:	3402      	adds	r4, #2
 8003936:	9305      	str	r3, [sp, #20]
 8003938:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a04 <_svfiprintf_r+0x1fc>
 800393c:	7821      	ldrb	r1, [r4, #0]
 800393e:	2203      	movs	r2, #3
 8003940:	4650      	mov	r0, sl
 8003942:	f7fc fc4d 	bl	80001e0 <memchr>
 8003946:	b140      	cbz	r0, 800395a <_svfiprintf_r+0x152>
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	eba0 000a 	sub.w	r0, r0, sl
 800394e:	fa03 f000 	lsl.w	r0, r3, r0
 8003952:	9b04      	ldr	r3, [sp, #16]
 8003954:	4303      	orrs	r3, r0
 8003956:	3401      	adds	r4, #1
 8003958:	9304      	str	r3, [sp, #16]
 800395a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395e:	4826      	ldr	r0, [pc, #152]	; (80039f8 <_svfiprintf_r+0x1f0>)
 8003960:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003964:	2206      	movs	r2, #6
 8003966:	f7fc fc3b 	bl	80001e0 <memchr>
 800396a:	2800      	cmp	r0, #0
 800396c:	d038      	beq.n	80039e0 <_svfiprintf_r+0x1d8>
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <_svfiprintf_r+0x1f4>)
 8003970:	bb1b      	cbnz	r3, 80039ba <_svfiprintf_r+0x1b2>
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	3307      	adds	r3, #7
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	3308      	adds	r3, #8
 800397c:	9303      	str	r3, [sp, #12]
 800397e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003980:	4433      	add	r3, r6
 8003982:	9309      	str	r3, [sp, #36]	; 0x24
 8003984:	e767      	b.n	8003856 <_svfiprintf_r+0x4e>
 8003986:	fb0c 3202 	mla	r2, ip, r2, r3
 800398a:	460c      	mov	r4, r1
 800398c:	2001      	movs	r0, #1
 800398e:	e7a5      	b.n	80038dc <_svfiprintf_r+0xd4>
 8003990:	2300      	movs	r3, #0
 8003992:	3401      	adds	r4, #1
 8003994:	9305      	str	r3, [sp, #20]
 8003996:	4619      	mov	r1, r3
 8003998:	f04f 0c0a 	mov.w	ip, #10
 800399c:	4620      	mov	r0, r4
 800399e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a2:	3a30      	subs	r2, #48	; 0x30
 80039a4:	2a09      	cmp	r2, #9
 80039a6:	d903      	bls.n	80039b0 <_svfiprintf_r+0x1a8>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0c5      	beq.n	8003938 <_svfiprintf_r+0x130>
 80039ac:	9105      	str	r1, [sp, #20]
 80039ae:	e7c3      	b.n	8003938 <_svfiprintf_r+0x130>
 80039b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80039b4:	4604      	mov	r4, r0
 80039b6:	2301      	movs	r3, #1
 80039b8:	e7f0      	b.n	800399c <_svfiprintf_r+0x194>
 80039ba:	ab03      	add	r3, sp, #12
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	462a      	mov	r2, r5
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <_svfiprintf_r+0x1f8>)
 80039c2:	a904      	add	r1, sp, #16
 80039c4:	4638      	mov	r0, r7
 80039c6:	f3af 8000 	nop.w
 80039ca:	1c42      	adds	r2, r0, #1
 80039cc:	4606      	mov	r6, r0
 80039ce:	d1d6      	bne.n	800397e <_svfiprintf_r+0x176>
 80039d0:	89ab      	ldrh	r3, [r5, #12]
 80039d2:	065b      	lsls	r3, r3, #25
 80039d4:	f53f af2c 	bmi.w	8003830 <_svfiprintf_r+0x28>
 80039d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039da:	b01d      	add	sp, #116	; 0x74
 80039dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e0:	ab03      	add	r3, sp, #12
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	462a      	mov	r2, r5
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <_svfiprintf_r+0x1f8>)
 80039e8:	a904      	add	r1, sp, #16
 80039ea:	4638      	mov	r0, r7
 80039ec:	f000 f87a 	bl	8003ae4 <_printf_i>
 80039f0:	e7eb      	b.n	80039ca <_svfiprintf_r+0x1c2>
 80039f2:	bf00      	nop
 80039f4:	080044e8 	.word	0x080044e8
 80039f8:	080044f2 	.word	0x080044f2
 80039fc:	00000000 	.word	0x00000000
 8003a00:	08003753 	.word	0x08003753
 8003a04:	080044ee 	.word	0x080044ee

08003a08 <_printf_common>:
 8003a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	4699      	mov	r9, r3
 8003a10:	688a      	ldr	r2, [r1, #8]
 8003a12:	690b      	ldr	r3, [r1, #16]
 8003a14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bfb8      	it	lt
 8003a1c:	4613      	movlt	r3, r2
 8003a1e:	6033      	str	r3, [r6, #0]
 8003a20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a24:	4607      	mov	r7, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	b10a      	cbz	r2, 8003a2e <_printf_common+0x26>
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	0699      	lsls	r1, r3, #26
 8003a32:	bf42      	ittt	mi
 8003a34:	6833      	ldrmi	r3, [r6, #0]
 8003a36:	3302      	addmi	r3, #2
 8003a38:	6033      	strmi	r3, [r6, #0]
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	f015 0506 	ands.w	r5, r5, #6
 8003a40:	d106      	bne.n	8003a50 <_printf_common+0x48>
 8003a42:	f104 0a19 	add.w	sl, r4, #25
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	6832      	ldr	r2, [r6, #0]
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	42ab      	cmp	r3, r5
 8003a4e:	dc26      	bgt.n	8003a9e <_printf_common+0x96>
 8003a50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a54:	1e13      	subs	r3, r2, #0
 8003a56:	6822      	ldr	r2, [r4, #0]
 8003a58:	bf18      	it	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	0692      	lsls	r2, r2, #26
 8003a5e:	d42b      	bmi.n	8003ab8 <_printf_common+0xb0>
 8003a60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a64:	4649      	mov	r1, r9
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c0      	blx	r8
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d01e      	beq.n	8003aac <_printf_common+0xa4>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	68e5      	ldr	r5, [r4, #12]
 8003a72:	6832      	ldr	r2, [r6, #0]
 8003a74:	f003 0306 	and.w	r3, r3, #6
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	bf08      	it	eq
 8003a7c:	1aad      	subeq	r5, r5, r2
 8003a7e:	68a3      	ldr	r3, [r4, #8]
 8003a80:	6922      	ldr	r2, [r4, #16]
 8003a82:	bf0c      	ite	eq
 8003a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a88:	2500      	movne	r5, #0
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	bfc4      	itt	gt
 8003a8e:	1a9b      	subgt	r3, r3, r2
 8003a90:	18ed      	addgt	r5, r5, r3
 8003a92:	2600      	movs	r6, #0
 8003a94:	341a      	adds	r4, #26
 8003a96:	42b5      	cmp	r5, r6
 8003a98:	d11a      	bne.n	8003ad0 <_printf_common+0xc8>
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e008      	b.n	8003ab0 <_printf_common+0xa8>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4652      	mov	r2, sl
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	47c0      	blx	r8
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d103      	bne.n	8003ab4 <_printf_common+0xac>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab4:	3501      	adds	r5, #1
 8003ab6:	e7c6      	b.n	8003a46 <_printf_common+0x3e>
 8003ab8:	18e1      	adds	r1, r4, r3
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	2030      	movs	r0, #48	; 0x30
 8003abe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ac2:	4422      	add	r2, r4
 8003ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ac8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003acc:	3302      	adds	r3, #2
 8003ace:	e7c7      	b.n	8003a60 <_printf_common+0x58>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	47c0      	blx	r8
 8003ada:	3001      	adds	r0, #1
 8003adc:	d0e6      	beq.n	8003aac <_printf_common+0xa4>
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7d9      	b.n	8003a96 <_printf_common+0x8e>
	...

08003ae4 <_printf_i>:
 8003ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	460c      	mov	r4, r1
 8003aea:	4691      	mov	r9, r2
 8003aec:	7e27      	ldrb	r7, [r4, #24]
 8003aee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003af0:	2f78      	cmp	r7, #120	; 0x78
 8003af2:	4680      	mov	r8, r0
 8003af4:	469a      	mov	sl, r3
 8003af6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003afa:	d807      	bhi.n	8003b0c <_printf_i+0x28>
 8003afc:	2f62      	cmp	r7, #98	; 0x62
 8003afe:	d80a      	bhi.n	8003b16 <_printf_i+0x32>
 8003b00:	2f00      	cmp	r7, #0
 8003b02:	f000 80d8 	beq.w	8003cb6 <_printf_i+0x1d2>
 8003b06:	2f58      	cmp	r7, #88	; 0x58
 8003b08:	f000 80a3 	beq.w	8003c52 <_printf_i+0x16e>
 8003b0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b14:	e03a      	b.n	8003b8c <_printf_i+0xa8>
 8003b16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b1a:	2b15      	cmp	r3, #21
 8003b1c:	d8f6      	bhi.n	8003b0c <_printf_i+0x28>
 8003b1e:	a001      	add	r0, pc, #4	; (adr r0, 8003b24 <_printf_i+0x40>)
 8003b20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003b24:	08003b7d 	.word	0x08003b7d
 8003b28:	08003b91 	.word	0x08003b91
 8003b2c:	08003b0d 	.word	0x08003b0d
 8003b30:	08003b0d 	.word	0x08003b0d
 8003b34:	08003b0d 	.word	0x08003b0d
 8003b38:	08003b0d 	.word	0x08003b0d
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b0d 	.word	0x08003b0d
 8003b44:	08003b0d 	.word	0x08003b0d
 8003b48:	08003b0d 	.word	0x08003b0d
 8003b4c:	08003b0d 	.word	0x08003b0d
 8003b50:	08003c9d 	.word	0x08003c9d
 8003b54:	08003bc1 	.word	0x08003bc1
 8003b58:	08003c7f 	.word	0x08003c7f
 8003b5c:	08003b0d 	.word	0x08003b0d
 8003b60:	08003b0d 	.word	0x08003b0d
 8003b64:	08003cbf 	.word	0x08003cbf
 8003b68:	08003b0d 	.word	0x08003b0d
 8003b6c:	08003bc1 	.word	0x08003bc1
 8003b70:	08003b0d 	.word	0x08003b0d
 8003b74:	08003b0d 	.word	0x08003b0d
 8003b78:	08003c87 	.word	0x08003c87
 8003b7c:	680b      	ldr	r3, [r1, #0]
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	600a      	str	r2, [r1, #0]
 8003b84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0a3      	b.n	8003cd8 <_printf_i+0x1f4>
 8003b90:	6825      	ldr	r5, [r4, #0]
 8003b92:	6808      	ldr	r0, [r1, #0]
 8003b94:	062e      	lsls	r6, r5, #24
 8003b96:	f100 0304 	add.w	r3, r0, #4
 8003b9a:	d50a      	bpl.n	8003bb2 <_printf_i+0xce>
 8003b9c:	6805      	ldr	r5, [r0, #0]
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	da03      	bge.n	8003bac <_printf_i+0xc8>
 8003ba4:	232d      	movs	r3, #45	; 0x2d
 8003ba6:	426d      	negs	r5, r5
 8003ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bac:	485e      	ldr	r0, [pc, #376]	; (8003d28 <_printf_i+0x244>)
 8003bae:	230a      	movs	r3, #10
 8003bb0:	e019      	b.n	8003be6 <_printf_i+0x102>
 8003bb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003bb6:	6805      	ldr	r5, [r0, #0]
 8003bb8:	600b      	str	r3, [r1, #0]
 8003bba:	bf18      	it	ne
 8003bbc:	b22d      	sxthne	r5, r5
 8003bbe:	e7ef      	b.n	8003ba0 <_printf_i+0xbc>
 8003bc0:	680b      	ldr	r3, [r1, #0]
 8003bc2:	6825      	ldr	r5, [r4, #0]
 8003bc4:	1d18      	adds	r0, r3, #4
 8003bc6:	6008      	str	r0, [r1, #0]
 8003bc8:	0628      	lsls	r0, r5, #24
 8003bca:	d501      	bpl.n	8003bd0 <_printf_i+0xec>
 8003bcc:	681d      	ldr	r5, [r3, #0]
 8003bce:	e002      	b.n	8003bd6 <_printf_i+0xf2>
 8003bd0:	0669      	lsls	r1, r5, #25
 8003bd2:	d5fb      	bpl.n	8003bcc <_printf_i+0xe8>
 8003bd4:	881d      	ldrh	r5, [r3, #0]
 8003bd6:	4854      	ldr	r0, [pc, #336]	; (8003d28 <_printf_i+0x244>)
 8003bd8:	2f6f      	cmp	r7, #111	; 0x6f
 8003bda:	bf0c      	ite	eq
 8003bdc:	2308      	moveq	r3, #8
 8003bde:	230a      	movne	r3, #10
 8003be0:	2100      	movs	r1, #0
 8003be2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003be6:	6866      	ldr	r6, [r4, #4]
 8003be8:	60a6      	str	r6, [r4, #8]
 8003bea:	2e00      	cmp	r6, #0
 8003bec:	bfa2      	ittt	ge
 8003bee:	6821      	ldrge	r1, [r4, #0]
 8003bf0:	f021 0104 	bicge.w	r1, r1, #4
 8003bf4:	6021      	strge	r1, [r4, #0]
 8003bf6:	b90d      	cbnz	r5, 8003bfc <_printf_i+0x118>
 8003bf8:	2e00      	cmp	r6, #0
 8003bfa:	d04d      	beq.n	8003c98 <_printf_i+0x1b4>
 8003bfc:	4616      	mov	r6, r2
 8003bfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c02:	fb03 5711 	mls	r7, r3, r1, r5
 8003c06:	5dc7      	ldrb	r7, [r0, r7]
 8003c08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c0c:	462f      	mov	r7, r5
 8003c0e:	42bb      	cmp	r3, r7
 8003c10:	460d      	mov	r5, r1
 8003c12:	d9f4      	bls.n	8003bfe <_printf_i+0x11a>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d10b      	bne.n	8003c30 <_printf_i+0x14c>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	07df      	lsls	r7, r3, #31
 8003c1c:	d508      	bpl.n	8003c30 <_printf_i+0x14c>
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	6861      	ldr	r1, [r4, #4]
 8003c22:	4299      	cmp	r1, r3
 8003c24:	bfde      	ittt	le
 8003c26:	2330      	movle	r3, #48	; 0x30
 8003c28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c30:	1b92      	subs	r2, r2, r6
 8003c32:	6122      	str	r2, [r4, #16]
 8003c34:	f8cd a000 	str.w	sl, [sp]
 8003c38:	464b      	mov	r3, r9
 8003c3a:	aa03      	add	r2, sp, #12
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	4640      	mov	r0, r8
 8003c40:	f7ff fee2 	bl	8003a08 <_printf_common>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d14c      	bne.n	8003ce2 <_printf_i+0x1fe>
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	b004      	add	sp, #16
 8003c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c52:	4835      	ldr	r0, [pc, #212]	; (8003d28 <_printf_i+0x244>)
 8003c54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	680e      	ldr	r6, [r1, #0]
 8003c5c:	061f      	lsls	r7, r3, #24
 8003c5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003c62:	600e      	str	r6, [r1, #0]
 8003c64:	d514      	bpl.n	8003c90 <_printf_i+0x1ac>
 8003c66:	07d9      	lsls	r1, r3, #31
 8003c68:	bf44      	itt	mi
 8003c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c6e:	6023      	strmi	r3, [r4, #0]
 8003c70:	b91d      	cbnz	r5, 8003c7a <_printf_i+0x196>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	f023 0320 	bic.w	r3, r3, #32
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	e7b0      	b.n	8003be0 <_printf_i+0xfc>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	f043 0320 	orr.w	r3, r3, #32
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	2378      	movs	r3, #120	; 0x78
 8003c88:	4828      	ldr	r0, [pc, #160]	; (8003d2c <_printf_i+0x248>)
 8003c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c8e:	e7e3      	b.n	8003c58 <_printf_i+0x174>
 8003c90:	065e      	lsls	r6, r3, #25
 8003c92:	bf48      	it	mi
 8003c94:	b2ad      	uxthmi	r5, r5
 8003c96:	e7e6      	b.n	8003c66 <_printf_i+0x182>
 8003c98:	4616      	mov	r6, r2
 8003c9a:	e7bb      	b.n	8003c14 <_printf_i+0x130>
 8003c9c:	680b      	ldr	r3, [r1, #0]
 8003c9e:	6826      	ldr	r6, [r4, #0]
 8003ca0:	6960      	ldr	r0, [r4, #20]
 8003ca2:	1d1d      	adds	r5, r3, #4
 8003ca4:	600d      	str	r5, [r1, #0]
 8003ca6:	0635      	lsls	r5, r6, #24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	d501      	bpl.n	8003cb0 <_printf_i+0x1cc>
 8003cac:	6018      	str	r0, [r3, #0]
 8003cae:	e002      	b.n	8003cb6 <_printf_i+0x1d2>
 8003cb0:	0671      	lsls	r1, r6, #25
 8003cb2:	d5fb      	bpl.n	8003cac <_printf_i+0x1c8>
 8003cb4:	8018      	strh	r0, [r3, #0]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	6123      	str	r3, [r4, #16]
 8003cba:	4616      	mov	r6, r2
 8003cbc:	e7ba      	b.n	8003c34 <_printf_i+0x150>
 8003cbe:	680b      	ldr	r3, [r1, #0]
 8003cc0:	1d1a      	adds	r2, r3, #4
 8003cc2:	600a      	str	r2, [r1, #0]
 8003cc4:	681e      	ldr	r6, [r3, #0]
 8003cc6:	6862      	ldr	r2, [r4, #4]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f7fc fa88 	bl	80001e0 <memchr>
 8003cd0:	b108      	cbz	r0, 8003cd6 <_printf_i+0x1f2>
 8003cd2:	1b80      	subs	r0, r0, r6
 8003cd4:	6060      	str	r0, [r4, #4]
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	6123      	str	r3, [r4, #16]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ce0:	e7a8      	b.n	8003c34 <_printf_i+0x150>
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4640      	mov	r0, r8
 8003cea:	47d0      	blx	sl
 8003cec:	3001      	adds	r0, #1
 8003cee:	d0ab      	beq.n	8003c48 <_printf_i+0x164>
 8003cf0:	6823      	ldr	r3, [r4, #0]
 8003cf2:	079b      	lsls	r3, r3, #30
 8003cf4:	d413      	bmi.n	8003d1e <_printf_i+0x23a>
 8003cf6:	68e0      	ldr	r0, [r4, #12]
 8003cf8:	9b03      	ldr	r3, [sp, #12]
 8003cfa:	4298      	cmp	r0, r3
 8003cfc:	bfb8      	it	lt
 8003cfe:	4618      	movlt	r0, r3
 8003d00:	e7a4      	b.n	8003c4c <_printf_i+0x168>
 8003d02:	2301      	movs	r3, #1
 8003d04:	4632      	mov	r2, r6
 8003d06:	4649      	mov	r1, r9
 8003d08:	4640      	mov	r0, r8
 8003d0a:	47d0      	blx	sl
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d09b      	beq.n	8003c48 <_printf_i+0x164>
 8003d10:	3501      	adds	r5, #1
 8003d12:	68e3      	ldr	r3, [r4, #12]
 8003d14:	9903      	ldr	r1, [sp, #12]
 8003d16:	1a5b      	subs	r3, r3, r1
 8003d18:	42ab      	cmp	r3, r5
 8003d1a:	dcf2      	bgt.n	8003d02 <_printf_i+0x21e>
 8003d1c:	e7eb      	b.n	8003cf6 <_printf_i+0x212>
 8003d1e:	2500      	movs	r5, #0
 8003d20:	f104 0619 	add.w	r6, r4, #25
 8003d24:	e7f5      	b.n	8003d12 <_printf_i+0x22e>
 8003d26:	bf00      	nop
 8003d28:	080044f9 	.word	0x080044f9
 8003d2c:	0800450a 	.word	0x0800450a

08003d30 <memcpy>:
 8003d30:	440a      	add	r2, r1
 8003d32:	4291      	cmp	r1, r2
 8003d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d38:	d100      	bne.n	8003d3c <memcpy+0xc>
 8003d3a:	4770      	bx	lr
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d46:	4291      	cmp	r1, r2
 8003d48:	d1f9      	bne.n	8003d3e <memcpy+0xe>
 8003d4a:	bd10      	pop	{r4, pc}

08003d4c <memmove>:
 8003d4c:	4288      	cmp	r0, r1
 8003d4e:	b510      	push	{r4, lr}
 8003d50:	eb01 0402 	add.w	r4, r1, r2
 8003d54:	d902      	bls.n	8003d5c <memmove+0x10>
 8003d56:	4284      	cmp	r4, r0
 8003d58:	4623      	mov	r3, r4
 8003d5a:	d807      	bhi.n	8003d6c <memmove+0x20>
 8003d5c:	1e43      	subs	r3, r0, #1
 8003d5e:	42a1      	cmp	r1, r4
 8003d60:	d008      	beq.n	8003d74 <memmove+0x28>
 8003d62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d6a:	e7f8      	b.n	8003d5e <memmove+0x12>
 8003d6c:	4402      	add	r2, r0
 8003d6e:	4601      	mov	r1, r0
 8003d70:	428a      	cmp	r2, r1
 8003d72:	d100      	bne.n	8003d76 <memmove+0x2a>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d7e:	e7f7      	b.n	8003d70 <memmove+0x24>

08003d80 <_free_r>:
 8003d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d82:	2900      	cmp	r1, #0
 8003d84:	d048      	beq.n	8003e18 <_free_r+0x98>
 8003d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d8a:	9001      	str	r0, [sp, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f1a1 0404 	sub.w	r4, r1, #4
 8003d92:	bfb8      	it	lt
 8003d94:	18e4      	addlt	r4, r4, r3
 8003d96:	f000 f8d3 	bl	8003f40 <__malloc_lock>
 8003d9a:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <_free_r+0x9c>)
 8003d9c:	9801      	ldr	r0, [sp, #4]
 8003d9e:	6813      	ldr	r3, [r2, #0]
 8003da0:	4615      	mov	r5, r2
 8003da2:	b933      	cbnz	r3, 8003db2 <_free_r+0x32>
 8003da4:	6063      	str	r3, [r4, #4]
 8003da6:	6014      	str	r4, [r2, #0]
 8003da8:	b003      	add	sp, #12
 8003daa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dae:	f000 b8cd 	b.w	8003f4c <__malloc_unlock>
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	d90b      	bls.n	8003dce <_free_r+0x4e>
 8003db6:	6821      	ldr	r1, [r4, #0]
 8003db8:	1862      	adds	r2, r4, r1
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bf04      	itt	eq
 8003dbe:	681a      	ldreq	r2, [r3, #0]
 8003dc0:	685b      	ldreq	r3, [r3, #4]
 8003dc2:	6063      	str	r3, [r4, #4]
 8003dc4:	bf04      	itt	eq
 8003dc6:	1852      	addeq	r2, r2, r1
 8003dc8:	6022      	streq	r2, [r4, #0]
 8003dca:	602c      	str	r4, [r5, #0]
 8003dcc:	e7ec      	b.n	8003da8 <_free_r+0x28>
 8003dce:	461a      	mov	r2, r3
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	b10b      	cbz	r3, 8003dd8 <_free_r+0x58>
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	d9fa      	bls.n	8003dce <_free_r+0x4e>
 8003dd8:	6811      	ldr	r1, [r2, #0]
 8003dda:	1855      	adds	r5, r2, r1
 8003ddc:	42a5      	cmp	r5, r4
 8003dde:	d10b      	bne.n	8003df8 <_free_r+0x78>
 8003de0:	6824      	ldr	r4, [r4, #0]
 8003de2:	4421      	add	r1, r4
 8003de4:	1854      	adds	r4, r2, r1
 8003de6:	42a3      	cmp	r3, r4
 8003de8:	6011      	str	r1, [r2, #0]
 8003dea:	d1dd      	bne.n	8003da8 <_free_r+0x28>
 8003dec:	681c      	ldr	r4, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	6053      	str	r3, [r2, #4]
 8003df2:	4421      	add	r1, r4
 8003df4:	6011      	str	r1, [r2, #0]
 8003df6:	e7d7      	b.n	8003da8 <_free_r+0x28>
 8003df8:	d902      	bls.n	8003e00 <_free_r+0x80>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	6003      	str	r3, [r0, #0]
 8003dfe:	e7d3      	b.n	8003da8 <_free_r+0x28>
 8003e00:	6825      	ldr	r5, [r4, #0]
 8003e02:	1961      	adds	r1, r4, r5
 8003e04:	428b      	cmp	r3, r1
 8003e06:	bf04      	itt	eq
 8003e08:	6819      	ldreq	r1, [r3, #0]
 8003e0a:	685b      	ldreq	r3, [r3, #4]
 8003e0c:	6063      	str	r3, [r4, #4]
 8003e0e:	bf04      	itt	eq
 8003e10:	1949      	addeq	r1, r1, r5
 8003e12:	6021      	streq	r1, [r4, #0]
 8003e14:	6054      	str	r4, [r2, #4]
 8003e16:	e7c7      	b.n	8003da8 <_free_r+0x28>
 8003e18:	b003      	add	sp, #12
 8003e1a:	bd30      	pop	{r4, r5, pc}
 8003e1c:	20000494 	.word	0x20000494

08003e20 <_malloc_r>:
 8003e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e22:	1ccd      	adds	r5, r1, #3
 8003e24:	f025 0503 	bic.w	r5, r5, #3
 8003e28:	3508      	adds	r5, #8
 8003e2a:	2d0c      	cmp	r5, #12
 8003e2c:	bf38      	it	cc
 8003e2e:	250c      	movcc	r5, #12
 8003e30:	2d00      	cmp	r5, #0
 8003e32:	4606      	mov	r6, r0
 8003e34:	db01      	blt.n	8003e3a <_malloc_r+0x1a>
 8003e36:	42a9      	cmp	r1, r5
 8003e38:	d903      	bls.n	8003e42 <_malloc_r+0x22>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	2000      	movs	r0, #0
 8003e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e42:	f000 f87d 	bl	8003f40 <__malloc_lock>
 8003e46:	4921      	ldr	r1, [pc, #132]	; (8003ecc <_malloc_r+0xac>)
 8003e48:	680a      	ldr	r2, [r1, #0]
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	b99c      	cbnz	r4, 8003e76 <_malloc_r+0x56>
 8003e4e:	4f20      	ldr	r7, [pc, #128]	; (8003ed0 <_malloc_r+0xb0>)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	b923      	cbnz	r3, 8003e5e <_malloc_r+0x3e>
 8003e54:	4621      	mov	r1, r4
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 f862 	bl	8003f20 <_sbrk_r>
 8003e5c:	6038      	str	r0, [r7, #0]
 8003e5e:	4629      	mov	r1, r5
 8003e60:	4630      	mov	r0, r6
 8003e62:	f000 f85d 	bl	8003f20 <_sbrk_r>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	d123      	bne.n	8003eb2 <_malloc_r+0x92>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 f86c 	bl	8003f4c <__malloc_unlock>
 8003e74:	e7e3      	b.n	8003e3e <_malloc_r+0x1e>
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	1b5b      	subs	r3, r3, r5
 8003e7a:	d417      	bmi.n	8003eac <_malloc_r+0x8c>
 8003e7c:	2b0b      	cmp	r3, #11
 8003e7e:	d903      	bls.n	8003e88 <_malloc_r+0x68>
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	441c      	add	r4, r3
 8003e84:	6025      	str	r5, [r4, #0]
 8003e86:	e004      	b.n	8003e92 <_malloc_r+0x72>
 8003e88:	6863      	ldr	r3, [r4, #4]
 8003e8a:	42a2      	cmp	r2, r4
 8003e8c:	bf0c      	ite	eq
 8003e8e:	600b      	streq	r3, [r1, #0]
 8003e90:	6053      	strne	r3, [r2, #4]
 8003e92:	4630      	mov	r0, r6
 8003e94:	f000 f85a 	bl	8003f4c <__malloc_unlock>
 8003e98:	f104 000b 	add.w	r0, r4, #11
 8003e9c:	1d23      	adds	r3, r4, #4
 8003e9e:	f020 0007 	bic.w	r0, r0, #7
 8003ea2:	1ac2      	subs	r2, r0, r3
 8003ea4:	d0cc      	beq.n	8003e40 <_malloc_r+0x20>
 8003ea6:	1a1b      	subs	r3, r3, r0
 8003ea8:	50a3      	str	r3, [r4, r2]
 8003eaa:	e7c9      	b.n	8003e40 <_malloc_r+0x20>
 8003eac:	4622      	mov	r2, r4
 8003eae:	6864      	ldr	r4, [r4, #4]
 8003eb0:	e7cc      	b.n	8003e4c <_malloc_r+0x2c>
 8003eb2:	1cc4      	adds	r4, r0, #3
 8003eb4:	f024 0403 	bic.w	r4, r4, #3
 8003eb8:	42a0      	cmp	r0, r4
 8003eba:	d0e3      	beq.n	8003e84 <_malloc_r+0x64>
 8003ebc:	1a21      	subs	r1, r4, r0
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f000 f82e 	bl	8003f20 <_sbrk_r>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d1dd      	bne.n	8003e84 <_malloc_r+0x64>
 8003ec8:	e7cf      	b.n	8003e6a <_malloc_r+0x4a>
 8003eca:	bf00      	nop
 8003ecc:	20000494 	.word	0x20000494
 8003ed0:	20000498 	.word	0x20000498

08003ed4 <_realloc_r>:
 8003ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed6:	4607      	mov	r7, r0
 8003ed8:	4614      	mov	r4, r2
 8003eda:	460e      	mov	r6, r1
 8003edc:	b921      	cbnz	r1, 8003ee8 <_realloc_r+0x14>
 8003ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	f7ff bf9c 	b.w	8003e20 <_malloc_r>
 8003ee8:	b922      	cbnz	r2, 8003ef4 <_realloc_r+0x20>
 8003eea:	f7ff ff49 	bl	8003d80 <_free_r>
 8003eee:	4625      	mov	r5, r4
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef4:	f000 f830 	bl	8003f58 <_malloc_usable_size_r>
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d20f      	bcs.n	8003f1c <_realloc_r+0x48>
 8003efc:	4621      	mov	r1, r4
 8003efe:	4638      	mov	r0, r7
 8003f00:	f7ff ff8e 	bl	8003e20 <_malloc_r>
 8003f04:	4605      	mov	r5, r0
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d0f2      	beq.n	8003ef0 <_realloc_r+0x1c>
 8003f0a:	4631      	mov	r1, r6
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	f7ff ff0f 	bl	8003d30 <memcpy>
 8003f12:	4631      	mov	r1, r6
 8003f14:	4638      	mov	r0, r7
 8003f16:	f7ff ff33 	bl	8003d80 <_free_r>
 8003f1a:	e7e9      	b.n	8003ef0 <_realloc_r+0x1c>
 8003f1c:	4635      	mov	r5, r6
 8003f1e:	e7e7      	b.n	8003ef0 <_realloc_r+0x1c>

08003f20 <_sbrk_r>:
 8003f20:	b538      	push	{r3, r4, r5, lr}
 8003f22:	4d06      	ldr	r5, [pc, #24]	; (8003f3c <_sbrk_r+0x1c>)
 8003f24:	2300      	movs	r3, #0
 8003f26:	4604      	mov	r4, r0
 8003f28:	4608      	mov	r0, r1
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	f7fd fa5a 	bl	80013e4 <_sbrk>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_sbrk_r+0x1a>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_sbrk_r+0x1a>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	200006b4 	.word	0x200006b4

08003f40 <__malloc_lock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	; (8003f48 <__malloc_lock+0x8>)
 8003f42:	f000 b811 	b.w	8003f68 <__retarget_lock_acquire_recursive>
 8003f46:	bf00      	nop
 8003f48:	200006bc 	.word	0x200006bc

08003f4c <__malloc_unlock>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <__malloc_unlock+0x8>)
 8003f4e:	f000 b80c 	b.w	8003f6a <__retarget_lock_release_recursive>
 8003f52:	bf00      	nop
 8003f54:	200006bc 	.word	0x200006bc

08003f58 <_malloc_usable_size_r>:
 8003f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f5c:	1f18      	subs	r0, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	bfbc      	itt	lt
 8003f62:	580b      	ldrlt	r3, [r1, r0]
 8003f64:	18c0      	addlt	r0, r0, r3
 8003f66:	4770      	bx	lr

08003f68 <__retarget_lock_acquire_recursive>:
 8003f68:	4770      	bx	lr

08003f6a <__retarget_lock_release_recursive>:
 8003f6a:	4770      	bx	lr

08003f6c <_init>:
 8003f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6e:	bf00      	nop
 8003f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f72:	bc08      	pop	{r3}
 8003f74:	469e      	mov	lr, r3
 8003f76:	4770      	bx	lr

08003f78 <_fini>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr
