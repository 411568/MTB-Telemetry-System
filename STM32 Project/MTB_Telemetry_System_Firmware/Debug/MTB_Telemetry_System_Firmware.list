
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000096c  08008580  08008580  00018580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008eec  08008eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  200001dc  080090d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007dc  080090d8  000207dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130da  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fd8  00000000  00000000  000332e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000362c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a730  00000000  00000000  00037cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dc2  00000000  00000000  000523e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a71d  00000000  00000000  000661aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001008c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000479c  00000000  00000000  0010091c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008564 	.word	0x08008564

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008564 	.word	0x08008564

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <Brake_Sensor_Read+0x38>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 8000f64:	2100      	movs	r1, #0
 8000f66:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f68:	f000 f9d4 	bl	8001314 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f6c:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f6e:	f001 fb51 	bl	8002614 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f72:	f04f 31ff 	mov.w	r1, #4294967295
 8000f76:	4817      	ldr	r0, [pc, #92]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f78:	f001 fc33 	bl	80027e2 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f7c:	4815      	ldr	r0, [pc, #84]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f7e:	f001 fcbb 	bl	80028f8 <HAL_ADC_GetValue>
 8000f82:	4603      	mov	r3, r0
 8000f84:	81fb      	strh	r3, [r7, #14]
 8000f86:	e017      	b.n	8000fb8 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d111      	bne.n	8000fb2 <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f92:	f000 f9bf 	bl	8001314 <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f96:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000f98:	f001 fb3c 	bl	8002614 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000fa2:	f001 fc1e 	bl	80027e2 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000fa8:	f001 fca6 	bl	80028f8 <HAL_ADC_GetValue>
 8000fac:	4603      	mov	r3, r0
 8000fae:	81fb      	strh	r3, [r7, #14]
 8000fb0:	e002      	b.n	8000fb8 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 8000fb2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fb6:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <Brake_Sensor_Read+0x84>)
 8000fba:	f001 fbdf 	bl	800277c <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 40;
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <Brake_Sensor_Read+0x88>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 8000fca:	89fb      	ldrh	r3, [r7, #14]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000608 	.word	0x20000608
 8000fd8:	cccccccd 	.word	0xcccccccd

08000fdc <HMC5883L_initialize>:
#include "HMC5883L.h"

void HMC5883L_initialize(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af04      	add	r7, sp, #16
	uint8_t RegSettingA = HMC5883l_Enable_A;
 8000fe2:	2318      	movs	r3, #24
 8000fe4:	71fb      	strb	r3, [r7, #7]
	uint8_t RegSettingB = HMC5883l_Enable_B;
 8000fe6:	23e0      	movs	r3, #224	; 0xe0
 8000fe8:	71bb      	strb	r3, [r7, #6]
	uint8_t RegSettingMR = HMC5883l_MR;
 8000fea:	2300      	movs	r3, #0
 8000fec:	717b      	strb	r3, [r7, #5]

	// Sensor 1
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	213c      	movs	r1, #60	; 0x3c
 8001000:	4821      	ldr	r0, [pc, #132]	; (8001088 <HMC5883L_initialize+0xac>)
 8001002:	f002 fa6d 	bl	80034e0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2201      	movs	r2, #1
 8001016:	213c      	movs	r1, #60	; 0x3c
 8001018:	481b      	ldr	r0, [pc, #108]	; (8001088 <HMC5883L_initialize+0xac>)
 800101a:	f002 fa61 	bl	80034e0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	9302      	str	r3, [sp, #8]
 8001022:	2301      	movs	r3, #1
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	1d7b      	adds	r3, r7, #5
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2202      	movs	r2, #2
 800102e:	213c      	movs	r1, #60	; 0x3c
 8001030:	4815      	ldr	r0, [pc, #84]	; (8001088 <HMC5883L_initialize+0xac>)
 8001032:	f002 fa55 	bl	80034e0 <HAL_I2C_Mem_Write>

	// Sensor 2
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8001036:	2364      	movs	r3, #100	; 0x64
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2301      	movs	r3, #1
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2301      	movs	r3, #1
 8001044:	2200      	movs	r2, #0
 8001046:	213c      	movs	r1, #60	; 0x3c
 8001048:	4810      	ldr	r0, [pc, #64]	; (800108c <HMC5883L_initialize+0xb0>)
 800104a:	f002 fa49 	bl	80034e0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 800104e:	2364      	movs	r3, #100	; 0x64
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2301      	movs	r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	1dbb      	adds	r3, r7, #6
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	2201      	movs	r2, #1
 800105e:	213c      	movs	r1, #60	; 0x3c
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <HMC5883L_initialize+0xb0>)
 8001062:	f002 fa3d 	bl	80034e0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	2301      	movs	r3, #1
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	1d7b      	adds	r3, r7, #5
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	2202      	movs	r2, #2
 8001076:	213c      	movs	r1, #60	; 0x3c
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <HMC5883L_initialize+0xb0>)
 800107a:	f002 fa31 	bl	80034e0 <HAL_I2C_Mem_Write>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000650 	.word	0x20000650
 800108c:	200006a4 	.word	0x200006a4

08001090 <MPU6050_initialize>:
#include "MPU6050.h"

uint8_t MPU6050_initialize(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
	uint8_t check;

	// Check the device id
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2275      	movs	r2, #117	; 0x75
 80010a8:	21d0      	movs	r1, #208	; 0xd0
 80010aa:	4824      	ldr	r0, [pc, #144]	; (800113c <MPU6050_initialize+0xac>)
 80010ac:	f002 fb12 	bl	80036d4 <HAL_I2C_Mem_Read>

	if (check == 104)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b68      	cmp	r3, #104	; 0x68
 80010b4:	d13d      	bne.n	8001132 <MPU6050_initialize+0xa2>
	{
		// Set power register to 0
		uint8_t command = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &command, 1, 1000);
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dbb      	adds	r3, r7, #6
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	226b      	movs	r2, #107	; 0x6b
 80010cc:	21d0      	movs	r1, #208	; 0xd0
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MPU6050_initialize+0xac>)
 80010d0:	f002 fa06 	bl	80034e0 <HAL_I2C_Mem_Write>

		// Set data rate of 1kHz
		command = 0x07;
 80010d4:	2307      	movs	r3, #7
 80010d6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &command, 1, 1000);
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2219      	movs	r2, #25
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MPU6050_initialize+0xac>)
 80010ee:	f002 f9f7 	bl	80034e0 <HAL_I2C_Mem_Write>

		// Accelerometer configuration
		command = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &command, 1, 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221c      	movs	r2, #28
 8001108:	21d0      	movs	r1, #208	; 0xd0
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <MPU6050_initialize+0xac>)
 800110c:	f002 f9e8 	bl	80034e0 <HAL_I2C_Mem_Write>

		// Gyroscope config
		command = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &command, 1, 1000);
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2301      	movs	r3, #1
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	1dbb      	adds	r3, r7, #6
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	221b      	movs	r2, #27
 8001126:	21d0      	movs	r1, #208	; 0xd0
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MPU6050_initialize+0xac>)
 800112a:	f002 f9d9 	bl	80034e0 <HAL_I2C_Mem_Write>

		return 0;
 800112e:	2300      	movs	r3, #0
 8001130:	e000      	b.n	8001134 <MPU6050_initialize+0xa4>
	}
	else
	{
		return 1; // error
 8001132:	2301      	movs	r3, #1
	}
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000650 	.word	0x20000650

08001140 <MPU6050_gyro_read>:


float MPU6050_gyro_read(uint8_t axis)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af04      	add	r7, sp, #16
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	uint8_t raw_data[6];

	// Read raw data from register
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, raw_data, 6, 1000);
 800114a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114e:	9302      	str	r3, [sp, #8]
 8001150:	2306      	movs	r3, #6
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	2243      	movs	r2, #67	; 0x43
 800115e:	21d0      	movs	r1, #208	; 0xd0
 8001160:	482f      	ldr	r0, [pc, #188]	; (8001220 <MPU6050_gyro_read+0xe0>)
 8001162:	f002 fab7 	bl	80036d4 <HAL_I2C_Mem_Read>

	if (axis == Xaxis)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d116      	bne.n	800119a <MPU6050_gyro_read+0x5a>
	{
		return ((int16_t)(raw_data[0] << 8 | raw_data[1]) / 131.0);
 800116c:	7a3b      	ldrb	r3, [r7, #8]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7a7b      	ldrb	r3, [r7, #9]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21b      	sxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9da 	bl	8000534 <__aeabi_i2d>
 8001180:	a325      	add	r3, pc, #148	; (adr r3, 8001218 <MPU6050_gyro_read+0xd8>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fb69 	bl	800085c <__aeabi_ddiv>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fd11 	bl	8000bb8 <__aeabi_d2f>
 8001196:	4603      	mov	r3, r0
 8001198:	e034      	b.n	8001204 <MPU6050_gyro_read+0xc4>
	}
	else if (axis == Yaxis)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d116      	bne.n	80011ce <MPU6050_gyro_read+0x8e>
	{
		return ((int16_t)(raw_data[2] << 8 | raw_data[3]) / 131.0);
 80011a0:	7abb      	ldrb	r3, [r7, #10]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f9c0 	bl	8000534 <__aeabi_i2d>
 80011b4:	a318      	add	r3, pc, #96	; (adr r3, 8001218 <MPU6050_gyro_read+0xd8>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb4f 	bl	800085c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fcf7 	bl	8000bb8 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	e01a      	b.n	8001204 <MPU6050_gyro_read+0xc4>
	}
	else if(axis == Zaxis)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d116      	bne.n	8001202 <MPU6050_gyro_read+0xc2>
	{
		return ((int16_t)(raw_data[4] << 8 | raw_data[5]) / 131.0);
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	021b      	lsls	r3, r3, #8
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7b7b      	ldrb	r3, [r7, #13]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9a6 	bl	8000534 <__aeabi_i2d>
 80011e8:	a30b      	add	r3, pc, #44	; (adr r3, 8001218 <MPU6050_gyro_read+0xd8>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fb35 	bl	800085c <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcdd 	bl	8000bb8 <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	e000      	b.n	8001204 <MPU6050_gyro_read+0xc4>
	}
	else
	{
		return 999; // wrong input
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MPU6050_gyro_read+0xe4>)
 8001204:	ee07 3a90 	vmov	s15, r3
	}
}
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	00000000 	.word	0x00000000
 800121c:	40606000 	.word	0x40606000
 8001220:	20000650 	.word	0x20000650
 8001224:	4479c000 	.word	0x4479c000

08001228 <MPU6050_accel_read>:


float MPU6050_accel_read(uint8_t axis)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af04      	add	r7, sp, #16
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	uint8_t raw_data[6];

	// Read raw data from register
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, raw_data, 6, 1000);
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2306      	movs	r3, #6
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2301      	movs	r3, #1
 8001244:	223b      	movs	r2, #59	; 0x3b
 8001246:	21d0      	movs	r1, #208	; 0xd0
 8001248:	482f      	ldr	r0, [pc, #188]	; (8001308 <MPU6050_accel_read+0xe0>)
 800124a:	f002 fa43 	bl	80036d4 <HAL_I2C_Mem_Read>

	if (axis == Xaxis)
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d116      	bne.n	8001282 <MPU6050_accel_read+0x5a>
	{
		return ((int16_t)(raw_data[0] << 8 | raw_data[1]) / 16384.0);
 8001254:	7a3b      	ldrb	r3, [r7, #8]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	7a7b      	ldrb	r3, [r7, #9]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21b      	sxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f966 	bl	8000534 <__aeabi_i2d>
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MPU6050_accel_read+0xe4>)
 800126e:	f7ff faf5 	bl	800085c <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc9d 	bl	8000bb8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	e034      	b.n	80012ec <MPU6050_accel_read+0xc4>
	}
	else if (axis == Yaxis)
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d116      	bne.n	80012b6 <MPU6050_accel_read+0x8e>
	{
		return ((int16_t)(raw_data[2] << 8 | raw_data[3]) / 16384.0);
 8001288:	7abb      	ldrb	r3, [r7, #10]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	7afb      	ldrb	r3, [r7, #11]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f94c 	bl	8000534 <__aeabi_i2d>
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MPU6050_accel_read+0xe4>)
 80012a2:	f7ff fadb 	bl	800085c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc83 	bl	8000bb8 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	e01a      	b.n	80012ec <MPU6050_accel_read+0xc4>
	}
	else if(axis == Zaxis)
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d116      	bne.n	80012ea <MPU6050_accel_read+0xc2>
	{
		return ((int16_t)(raw_data[4] << 8 | raw_data[5]) / 14418.0);
 80012bc:	7b3b      	ldrb	r3, [r7, #12]
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f932 	bl	8000534 <__aeabi_i2d>
 80012d0:	a30b      	add	r3, pc, #44	; (adr r3, 8001300 <MPU6050_accel_read+0xd8>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	f7ff fac1 	bl	800085c <__aeabi_ddiv>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc69 	bl	8000bb8 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	e000      	b.n	80012ec <MPU6050_accel_read+0xc4>
	}
	else
	{
		return 999; // wrong input
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MPU6050_accel_read+0xe8>)
 80012ec:	ee07 3a90 	vmov	s15, r3
	}
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40cc2900 	.word	0x40cc2900
 8001308:	20000650 	.word	0x20000650
 800130c:	40d00000 	.word	0x40d00000
 8001310:	4479c000 	.word	0x4479c000

08001314 <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	f107 0308 	add.w	r3, r7, #8
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001334:	2304      	movs	r3, #4
 8001336:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	4619      	mov	r1, r3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f001 fae8 	bl	8002914 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 800134a:	f000 fdbd 	bl	8001ec8 <Error_Handler>
	}
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	80bb      	strh	r3, [r7, #4]
	uint8_t battery_out = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	71fb      	strb	r3, [r7, #7]
	const uint16_t bat_min = 2172; // minimum battery reading (about 3.5V)
 8001366:	f640 037c 	movw	r3, #2172	; 0x87c
 800136a:	807b      	strh	r3, [r7, #2]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 800136c:	2102      	movs	r1, #2
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <Read_Battery_Voltage+0x6c>)
 8001370:	f7ff ffd0 	bl	8001314 <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <Read_Battery_Voltage+0x6c>)
 8001376:	f001 f94d 	bl	8002614 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 800137a:	f04f 31ff 	mov.w	r1, #4294967295
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <Read_Battery_Voltage+0x6c>)
 8001380:	f001 fa2f 	bl	80027e2 <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <Read_Battery_Voltage+0x6c>)
 8001386:	f001 fab7 	bl	80028f8 <HAL_ADC_GetValue>
 800138a:	4603      	mov	r3, r0
 800138c:	80bb      	strh	r3, [r7, #4]

	// Return the battery %
	if (ADC_reading < bat_min)
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	429a      	cmp	r2, r3
 8001394:	d202      	bcs.n	800139c <Read_Battery_Voltage+0x44>
	{
		battery_out = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e00e      	b.n	80013ba <Read_Battery_Voltage+0x62>
	}
	else
	{
		battery_out = (ADC_reading - bat_min) / 5;
 800139c:	88ba      	ldrh	r2, [r7, #4]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <Read_Battery_Voltage+0x70>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	1052      	asrs	r2, r2, #1
 80013aa:	17db      	asrs	r3, r3, #31
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	71fb      	strb	r3, [r7, #7]
		if (battery_out > 100) // if the voltage exceeds about 4.15 V (depends on the ADC supply voltage, so it might shift a little)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <Read_Battery_Voltage+0x62>
		{
			battery_out = 100;
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	71fb      	strb	r3, [r7, #7]
		}
	}

	return battery_out;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000608 	.word	0x20000608
 80013c8:	66666667 	.word	0x66666667

080013cc <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80013cc:	b490      	push	{r4, r7}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	4608      	mov	r0, r1
 80013d6:	4611      	mov	r1, r2
 80013d8:	461a      	mov	r2, r3
 80013da:	4623      	mov	r3, r4
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	4603      	mov	r3, r0
 80013e0:	71bb      	strb	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	717b      	strb	r3, [r7, #5]
 80013e6:	4613      	mov	r3, r2
 80013e8:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <ST7565_updateBoundingBox+0x68>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d202      	bcs.n	80013fa <ST7565_updateBoundingBox+0x2e>
 80013f4:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <ST7565_updateBoundingBox+0x68>)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <ST7565_updateBoundingBox+0x6c>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	797a      	ldrb	r2, [r7, #5]
 8001400:	429a      	cmp	r2, r3
 8001402:	d902      	bls.n	800140a <ST7565_updateBoundingBox+0x3e>
 8001404:	4a0c      	ldr	r2, [pc, #48]	; (8001438 <ST7565_updateBoundingBox+0x6c>)
 8001406:	797b      	ldrb	r3, [r7, #5]
 8001408:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <ST7565_updateBoundingBox+0x70>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	79ba      	ldrb	r2, [r7, #6]
 8001410:	429a      	cmp	r2, r3
 8001412:	d202      	bcs.n	800141a <ST7565_updateBoundingBox+0x4e>
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <ST7565_updateBoundingBox+0x70>)
 8001416:	79bb      	ldrb	r3, [r7, #6]
 8001418:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <ST7565_updateBoundingBox+0x74>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	793a      	ldrb	r2, [r7, #4]
 8001420:	429a      	cmp	r2, r3
 8001422:	d902      	bls.n	800142a <ST7565_updateBoundingBox+0x5e>
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <ST7565_updateBoundingBox+0x74>)
 8001426:	793b      	ldrb	r3, [r7, #4]
 8001428:	7013      	strb	r3, [r2, #0]
	#endif
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bc90      	pop	{r4, r7}
 8001432:	4770      	bx	lr
 8001434:	200005f8 	.word	0x200005f8
 8001438:	200005f9 	.word	0x200005f9
 800143c:	200005fa 	.word	0x200005fa
 8001440:	200005fb 	.word	0x200005fb

08001444 <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	460b      	mov	r3, r1
 8001452:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 8001454:	e017      	b.n	8001486 <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	781a      	ldrb	r2, [r3, #0]
 800145a:	79b9      	ldrb	r1, [r7, #6]
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f81a 	bl	8001498 <ST7565_drawchar>
		c++;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	3306      	adds	r3, #6
 800146e:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	2b79      	cmp	r3, #121	; 0x79
 8001474:	d904      	bls.n	8001480 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
			line++;
 800147a:	79bb      	ldrb	r3, [r7, #6]
 800147c:	3301      	adds	r3, #1
 800147e:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d804      	bhi.n	8001490 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e3      	bne.n	8001456 <ST7565_drawstring+0x12>
 800148e:	e000      	b.n	8001492 <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8001490:	bf00      	nop
	}
}
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	460b      	mov	r3, r1
 80014a4:	71bb      	strb	r3, [r7, #6]
 80014a6:	4613      	mov	r3, r2
 80014a8:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e013      	b.n	80014d8 <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 80014b0:	797a      	ldrb	r2, [r7, #5]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	441a      	add	r2, r3
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	441a      	add	r2, r3
 80014bc:	79f9      	ldrb	r1, [r7, #7]
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	01db      	lsls	r3, r3, #7
 80014c2:	440b      	add	r3, r1
 80014c4:	4910      	ldr	r1, [pc, #64]	; (8001508 <ST7565_drawchar+0x70>)
 80014c6:	5c89      	ldrb	r1, [r1, r2]
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <ST7565_drawchar+0x74>)
 80014ca:	54d1      	strb	r1, [r2, r3]
		x++;
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	3301      	adds	r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	3301      	adds	r3, #1
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d9e8      	bls.n	80014b0 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	3b05      	subs	r3, #5
 80014e2:	b2d8      	uxtb	r0, r3
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	b2d9      	uxtb	r1, r3
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	3301      	adds	r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f7ff ff67 	bl	80013cc <ST7565_updateBoundingBox>
}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	080085f4 	.word	0x080085f4
 800150c:	200001f8 	.word	0x200001f8

08001510 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 800151a:	f000 f80f 	bl	800153c <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 800151e:	20af      	movs	r0, #175	; 0xaf
 8001520:	f000 f866 	bl	80015f0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 8001524:	20a4      	movs	r0, #164	; 0xa4
 8001526:	f000 f863 	bl	80015f0 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f887 	bl	8001640 <ST7565_st7565_set_brightness>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 8001540:	2200      	movs	r2, #0
 8001542:	2140      	movs	r1, #64	; 0x40
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <ST7565_st7565_init+0x7c>)
 8001546:	f001 fe6d 	bl	8003224 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2108      	movs	r1, #8
 800154e:	481a      	ldr	r0, [pc, #104]	; (80015b8 <ST7565_st7565_init+0x7c>)
 8001550:	f001 fe68 	bl	8003224 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001558:	f000 fff4 	bl	8002544 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	2108      	movs	r1, #8
 8001560:	4815      	ldr	r0, [pc, #84]	; (80015b8 <ST7565_st7565_init+0x7c>)
 8001562:	f001 fe5f 	bl	8003224 <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 8001566:	20a3      	movs	r0, #163	; 0xa3
 8001568:	f000 f842 	bl	80015f0 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 800156c:	20a0      	movs	r0, #160	; 0xa0
 800156e:	f000 f83f 	bl	80015f0 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 8001572:	20c0      	movs	r0, #192	; 0xc0
 8001574:	f000 f83c 	bl	80015f0 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8001578:	2040      	movs	r0, #64	; 0x40
 800157a:	f000 f839 	bl	80015f0 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 800157e:	202c      	movs	r0, #44	; 0x2c
 8001580:	f000 f836 	bl	80015f0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001584:	2032      	movs	r0, #50	; 0x32
 8001586:	f000 ffdd 	bl	8002544 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 800158a:	202e      	movs	r0, #46	; 0x2e
 800158c:	f000 f830 	bl	80015f0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001590:	2032      	movs	r0, #50	; 0x32
 8001592:	f000 ffd7 	bl	8002544 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 8001596:	202f      	movs	r0, #47	; 0x2f
 8001598:	f000 f82a 	bl	80015f0 <ST7565_st7565_command>
	HAL_Delay(10);
 800159c:	200a      	movs	r0, #10
 800159e:	f000 ffd1 	bl	8002544 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f000 f824 	bl	80015f0 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 80015a8:	233f      	movs	r3, #63	; 0x3f
 80015aa:	227f      	movs	r2, #127	; 0x7f
 80015ac:	2100      	movs	r1, #0
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff ff0c 	bl	80013cc <ST7565_updateBoundingBox>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020000 	.word	0x40020000

080015bc <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 80015c6:	1df9      	adds	r1, r7, #7
 80015c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015cc:	2201      	movs	r2, #1
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <ST7565_spiwrite+0x30>)
 80015d0:	f003 fedf 	bl	8005392 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 80015d4:	bf00      	nop
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <ST7565_spiwrite+0x30>)
 80015d8:	f004 f817 	bl	800560a <HAL_SPI_GetState>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d1f9      	bne.n	80015d6 <ST7565_spiwrite+0x1a>
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200006f8 	.word	0x200006f8

080015f0 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2110      	movs	r1, #16
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <ST7565_st7565_command+0x24>)
 8001600:	f001 fe10 	bl	8003224 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff ffd8 	bl	80015bc <ST7565_spiwrite>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020000 	.word	0x40020000

08001618 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <ST7565_st7565_data+0x24>)
 8001628:	f001 fdfc 	bl	8003224 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffc4 	bl	80015bc <ST7565_spiwrite>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40020000 	.word	0x40020000

08001640 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 800164a:	2081      	movs	r0, #129	; 0x81
 800164c:	f7ff ffd0 	bl	80015f0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ffc9 	bl	80015f0 <ST7565_st7565_command>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <ST7565_display>:

void ST7565_display(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 800166e:	2300      	movs	r3, #0
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	e055      	b.n	8001720 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <ST7565_display+0xe4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	3301      	adds	r3, #1
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	429a      	cmp	r2, r3
 8001682:	da49      	bge.n	8001718 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 8001684:	4b32      	ldr	r3, [pc, #200]	; (8001750 <ST7565_display+0xe8>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	429a      	cmp	r2, r3
 8001690:	db4a      	blt.n	8001728 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 ff56 	bl	8002544 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <ST7565_display+0xec>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ffa3 	bl	80015f0 <ST7565_st7565_command>
		HAL_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 ff4a 	bl	8002544 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <ST7565_display+0xf0>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <ST7565_display+0xf4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff93 	bl	80015f0 <ST7565_st7565_command>
		HAL_Delay(1);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f000 ff3a 	bl	8002544 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff87 	bl	80015f0 <ST7565_st7565_command>
		HAL_Delay(1);
 80016e2:	2001      	movs	r0, #1
 80016e4:	f000 ff2e 	bl	8002544 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 80016e8:	20e0      	movs	r0, #224	; 0xe0
 80016ea:	f7ff ff81 	bl	80015f0 <ST7565_st7565_command>
		HAL_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 ff28 	bl	8002544 <HAL_Delay>

		for (; col < maxcol; col++)
 80016f4:	e00b      	b.n	800170e <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	01da      	lsls	r2, r3, #7
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a18      	ldr	r2, [pc, #96]	; (8001760 <ST7565_display+0xf8>)
 8001700:	5cd3      	ldrb	r3, [r2, r3]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff88 	bl	8001618 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	3301      	adds	r3, #1
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3ef      	bcc.n	80016f6 <ST7565_display+0x8e>
 8001716:	e000      	b.n	800171a <ST7565_display+0xb2>
				continue;   // nope, skip it!
 8001718:	bf00      	nop
	for (p = 0; p < 8; p++)
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	3301      	adds	r3, #1
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b07      	cmp	r3, #7
 8001724:	d9a6      	bls.n	8001674 <ST7565_display+0xc>
 8001726:	e000      	b.n	800172a <ST7565_display+0xc2>
					break;
 8001728:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <ST7565_display+0xf0>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <ST7565_display+0xf4>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <ST7565_display+0xe4>)
 8001738:	2240      	movs	r2, #64	; 0x40
 800173a:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <ST7565_display+0xe8>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
	#endif
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200005fa 	.word	0x200005fa
 8001750:	200005fb 	.word	0x200005fb
 8001754:	080085ec 	.word	0x080085ec
 8001758:	200005f8 	.word	0x200005f8
 800175c:	200005f9 	.word	0x200005f9
 8001760:	200001f8 	.word	0x200001f8

08001764 <ST7565_clear>:

void ST7565_clear(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	2100      	movs	r1, #0
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <ST7565_clear+0x20>)
 8001770:	f004 f84e 	bl	8005810 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8001774:	2340      	movs	r3, #64	; 0x40
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	2100      	movs	r1, #0
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fe26 	bl	80013cc <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001f8 	.word	0x200001f8

08001788 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_ADC1_Init+0x98>)
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_ADC1_Init+0x9c>)
 800179e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_ADC1_Init+0x98>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_ADC1_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_ADC1_Init+0x98>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017c0:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_ADC1_Init+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_ADC1_Init+0x98>)
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <MX_ADC1_Init+0xa0>)
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_ADC1_Init+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_ADC1_Init+0x98>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_ADC1_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_ADC1_Init+0x98>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	; (8001820 <MX_ADC1_Init+0x98>)
 80017e8:	f000 fed0 	bl	800258c <HAL_ADC_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 fb69 	bl	8001ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017fa:	2301      	movs	r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_ADC1_Init+0x98>)
 8001808:	f001 f884 	bl	8002914 <HAL_ADC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001812:	f000 fb59 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000608 	.word	0x20000608
 8001824:	40012000 	.word	0x40012000
 8001828:	0f000001 	.word	0x0f000001

0800182c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_ADC_MspInit+0x7c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d127      	bne.n	800189e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <HAL_ADC_MspInit+0x80>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_ADC_MspInit+0x80>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HAL_ADC_MspInit+0x80>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_ADC_MspInit+0x80>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_ADC_MspInit+0x80>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_ADC_MspInit+0x80>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 8001886:	2307      	movs	r3, #7
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800188a:	2303      	movs	r3, #3
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_ADC_MspInit+0x84>)
 800189a:	f001 fb3f 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40012000 	.word	0x40012000
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000

080018b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a3c      	ldr	r2, [pc, #240]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a35      	ldr	r2, [pc, #212]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <MX_GPIO_Init+0x110>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <MX_GPIO_Init+0x110>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <MX_GPIO_Init+0x110>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2158      	movs	r1, #88	; 0x58
 800193e:	4822      	ldr	r0, [pc, #136]	; (80019c8 <MX_GPIO_Init+0x114>)
 8001940:	f001 fc70 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194a:	4820      	ldr	r0, [pc, #128]	; (80019cc <MX_GPIO_Init+0x118>)
 800194c:	f001 fc6a 	bl	8003224 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8001950:	2358      	movs	r3, #88	; 0x58
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <MX_GPIO_Init+0x114>)
 8001968:	f001 fad8 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4811      	ldr	r0, [pc, #68]	; (80019cc <MX_GPIO_Init+0x118>)
 8001986:	f001 fac9 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 800198a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800198e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001990:	2300      	movs	r3, #0
 8001992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	480a      	ldr	r0, [pc, #40]	; (80019c8 <MX_GPIO_Init+0x114>)
 80019a0:	f001 fabc 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 80019a4:	23e0      	movs	r3, #224	; 0xe0
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_GPIO_Init+0x118>)
 80019b8:	f001 fab0 	bl	8002f1c <HAL_GPIO_Init>

}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	; 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400

080019d0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_I2C1_Init+0x54>)
 80019d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <MX_I2C1_Init+0x58>)
 80019de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_I2C1_Init+0x50>)
 8001a0e:	f001 fc23 	bl	8003258 <HAL_I2C_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a18:	f000 fa56 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000650 	.word	0x20000650
 8001a24:	40005400 	.word	0x40005400
 8001a28:	000186a0 	.word	0x000186a0

08001a2c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <MX_I2C2_Init+0x54>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <MX_I2C2_Init+0x58>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_I2C2_Init+0x50>)
 8001a6a:	f001 fbf5 	bl	8003258 <HAL_I2C_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f000 fa28 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200006a4 	.word	0x200006a4
 8001a80:	40005800 	.word	0x40005800
 8001a84:	000186a0 	.word	0x000186a0

08001a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08c      	sub	sp, #48	; 0x30
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_I2C_MspInit+0x10c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12d      	bne.n	8001b06 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	4b3a      	ldr	r3, [pc, #232]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ac6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001acc:	2312      	movs	r3, #18
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	482e      	ldr	r0, [pc, #184]	; (8001b9c <HAL_I2C_MspInit+0x114>)
 8001ae4:	f001 fa1a 	bl	8002f1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001af2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b04:	e041      	b.n	8001b8a <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <HAL_I2C_MspInit+0x118>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d13c      	bne.n	8001b8a <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b1a:	f043 0302 	orr.w	r3, r3, #2
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <HAL_I2C_MspInit+0x114>)
 8001b4a:	f001 f9e7 	bl	8002f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b52:	2312      	movs	r3, #18
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001b5e:	2309      	movs	r3, #9
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <HAL_I2C_MspInit+0x114>)
 8001b6a:	f001 f9d7 	bl	8002f1c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_I2C_MspInit+0x110>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3730      	adds	r7, #48	; 0x30
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40005800 	.word	0x40005800

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	b092      	sub	sp, #72	; 0x48
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001baa:	f000 fc59 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bae:	f000 f929 	bl	8001e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb2:	f7ff fe7f 	bl	80018b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bb6:	f7ff fde7 	bl	8001788 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001bba:	f7ff ff09 	bl	80019d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001bbe:	f7ff ff35 	bl	8001a2c <MX_I2C2_Init>
  MX_RTC_Init();
 8001bc2:	f000 f987 	bl	8001ed4 <MX_RTC_Init>
  MX_SPI1_Init();
 8001bc6:	f000 fa0b 	bl	8001fe0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001bca:	f000 fa41 	bl	8002050 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  RTC_TimeTypeDef time; // Create time struct
  RTC_DateTypeDef date; // Create date struct

  ST7565_begin(0x7); // Initialize display
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f7ff fc9e 	bl	8001510 <ST7565_begin>
  ST7565_clear(); // Clear the display
 8001bd4:	f7ff fdc6 	bl	8001764 <ST7565_clear>

  HMC5883L_initialize(); // Initialize magnetometers
 8001bd8:	f7ff fa00 	bl	8000fdc <HMC5883L_initialize>

  uint8_t check = MPU6050_initialize(); // Initialize MPU6050
 8001bdc:	f7ff fa58 	bl	8001090 <MPU6050_initialize>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (check == 1)
 8001be6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <main+0x4e>
  {
	  Error_Handler();
 8001bee:	f000 f96b 	bl	8001ec8 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // TEST
		  //HAL_GPIO_TogglePin(DisplayRSE_GPIO_Port, DisplayRSE_Pin);
		  HAL_Delay(1000);
 8001bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf6:	f000 fca5 	bl	8002544 <HAL_Delay>
		  // TEST
		  ST7565_clear(); // clear the display
 8001bfa:	f7ff fdb3 	bl	8001764 <ST7565_clear>
		  ST7565_drawstring(0, 0, "Hello world!");
 8001bfe:	4a77      	ldr	r2, [pc, #476]	; (8001ddc <main+0x238>)
 8001c00:	2100      	movs	r1, #0
 8001c02:	2000      	movs	r0, #0
 8001c04:	f7ff fc1e 	bl	8001444 <ST7565_drawstring>


		  // Read magnetometer data
		  char str[10] = "";
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
		  strcpy(str_temp, "Travel rear: ");
		  strcat(str_temp, str);
		  ST7565_drawstring(0, 2, str_temp);*/

		  // Read brake sensor ADC
		  uint16_t Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff f992 	bl	8000f50 <Brake_Sensor_Read>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		  uint16_t Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff f98c 	bl	8000f50 <Brake_Sensor_Read>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

		  sprintf(str, "%u", Brake_left);
 8001c3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4966      	ldr	r1, [pc, #408]	; (8001de0 <main+0x23c>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f004 fa53 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Brake left: ");
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4a64      	ldr	r2, [pc, #400]	; (8001de4 <main+0x240>)
 8001c52:	461c      	mov	r4, r3
 8001c54:	4613      	mov	r3, r2
 8001c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c58:	c407      	stmia	r4!, {r0, r1, r2}
 8001c5a:	7023      	strb	r3, [r4, #0]
		  strcat(str_temp, str);
 8001c5c:	f107 0214 	add.w	r2, r7, #20
 8001c60:	463b      	mov	r3, r7
 8001c62:	4611      	mov	r1, r2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 fa65 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 3, str_temp);
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	2103      	movs	r1, #3
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fbe7 	bl	8001444 <ST7565_drawstring>

		  sprintf(str, "%u", Brake_right);
 8001c76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4958      	ldr	r1, [pc, #352]	; (8001de0 <main+0x23c>)
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fa37 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Brake right: ");
 8001c86:	463b      	mov	r3, r7
 8001c88:	4a57      	ldr	r2, [pc, #348]	; (8001de8 <main+0x244>)
 8001c8a:	461c      	mov	r4, r3
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c90:	c407      	stmia	r4!, {r0, r1, r2}
 8001c92:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8001c94:	f107 0214 	add.w	r2, r7, #20
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f004 fa49 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 4, str_temp);
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2104      	movs	r1, #4
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fbcb 	bl	8001444 <ST7565_drawstring>

		  // Read battery voltage
		  uint8_t battery_voltage = Read_Battery_Voltage();
 8001cae:	f7ff fb53 	bl	8001358 <Read_Battery_Voltage>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  sprintf(str, "%u", battery_voltage);
 8001cb8:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4947      	ldr	r1, [pc, #284]	; (8001de0 <main+0x23c>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f004 fa16 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Battery percent: ");
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4a48      	ldr	r2, [pc, #288]	; (8001dec <main+0x248>)
 8001ccc:	461c      	mov	r4, r3
 8001cce:	4615      	mov	r5, r2
 8001cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	8023      	strh	r3, [r4, #0]
		  strcat(str_temp, str);
 8001cd8:	f107 0214 	add.w	r2, r7, #20
 8001cdc:	463b      	mov	r3, r7
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 fa27 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 5, str_temp);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2105      	movs	r1, #5
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fba9 	bl	8001444 <ST7565_drawstring>


		  // Read accelerometer and gyroscpe
		  float accel_x = MPU6050_accel_read(Zaxis);
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f7ff fa98 	bl	8001228 <MPU6050_accel_read>
 8001cf8:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		  float gyro_x = MPU6050_gyro_read(Zaxis);
 8001cfc:	2002      	movs	r0, #2
 8001cfe:	f7ff fa1f 	bl	8001140 <MPU6050_gyro_read>
 8001d02:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		  sprintf(str, "%.2f", accel_x);
 8001d06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d08:	f7fe fc26 	bl	8000558 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	f107 0014 	add.w	r0, r7, #20
 8001d14:	4936      	ldr	r1, [pc, #216]	; (8001df0 <main+0x24c>)
 8001d16:	f004 f9ed 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Accel: ");
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4a35      	ldr	r2, [pc, #212]	; (8001df4 <main+0x250>)
 8001d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d22:	e883 0003 	stmia.w	r3, {r0, r1}
		  strcat(str_temp, str);
 8001d26:	f107 0214 	add.w	r2, r7, #20
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f004 fa00 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 1, str_temp);
 8001d34:	463b      	mov	r3, r7
 8001d36:	461a      	mov	r2, r3
 8001d38:	2101      	movs	r1, #1
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff fb82 	bl	8001444 <ST7565_drawstring>

		  sprintf(str, "%.2f", gyro_x);
 8001d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d42:	f7fe fc09 	bl	8000558 <__aeabi_f2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	f107 0014 	add.w	r0, r7, #20
 8001d4e:	4928      	ldr	r1, [pc, #160]	; (8001df0 <main+0x24c>)
 8001d50:	f004 f9d0 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Gyro: ");
 8001d54:	463b      	mov	r3, r7
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <main+0x254>)
 8001d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d5c:	6018      	str	r0, [r3, #0]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	8019      	strh	r1, [r3, #0]
 8001d62:	3302      	adds	r3, #2
 8001d64:	0c0a      	lsrs	r2, r1, #16
 8001d66:	701a      	strb	r2, [r3, #0]
		  strcat(str_temp, str);
 8001d68:	f107 0214 	add.w	r2, r7, #20
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 f9df 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 2, str_temp);
 8001d76:	463b      	mov	r3, r7
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff fb61 	bl	8001444 <ST7565_drawstring>

		  // Get current time
		  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481c      	ldr	r0, [pc, #112]	; (8001dfc <main+0x258>)
 8001d8c:	f003 f894 	bl	8004eb8 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001d90:	f107 0320 	add.w	r3, r7, #32
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4818      	ldr	r0, [pc, #96]	; (8001dfc <main+0x258>)
 8001d9a:	f003 f992 	bl	80050c2 <HAL_RTC_GetDate>

		  sprintf(str, "%u", time.Seconds);
 8001d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001da2:	461a      	mov	r2, r3
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	490d      	ldr	r1, [pc, #52]	; (8001de0 <main+0x23c>)
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f9a2 	bl	80060f4 <siprintf>
		  strcpy(str_temp, "Second: ");
 8001db0:	463b      	mov	r3, r7
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <main+0x25c>)
 8001db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001db6:	c303      	stmia	r3!, {r0, r1}
 8001db8:	701a      	strb	r2, [r3, #0]
		  strcat(str_temp, str);
 8001dba:	f107 0214 	add.w	r2, r7, #20
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f9b6 	bl	8006134 <strcat>
		  ST7565_drawstring(0, 6, str_temp);
 8001dc8:	463b      	mov	r3, r7
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2106      	movs	r1, #6
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fb38 	bl	8001444 <ST7565_drawstring>

		  // Send data to display
		  ST7565_display();
 8001dd4:	f7ff fc48 	bl	8001668 <ST7565_display>
  {
 8001dd8:	e70b      	b.n	8001bf2 <main+0x4e>
 8001dda:	bf00      	nop
 8001ddc:	08008580 	.word	0x08008580
 8001de0:	08008590 	.word	0x08008590
 8001de4:	08008594 	.word	0x08008594
 8001de8:	080085a4 	.word	0x080085a4
 8001dec:	080085b4 	.word	0x080085b4
 8001df0:	080085c8 	.word	0x080085c8
 8001df4:	080085d0 	.word	0x080085d0
 8001df8:	080085d8 	.word	0x080085d8
 8001dfc:	20000750 	.word	0x20000750
 8001e00:	080085e0 	.word	0x080085e0

08001e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b094      	sub	sp, #80	; 0x50
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2230      	movs	r2, #48	; 0x30
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fcfc 	bl	8005810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	f107 030c 	add.w	r3, r7, #12
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <SystemClock_Config+0xbc>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	4a23      	ldr	r2, [pc, #140]	; (8001ec0 <SystemClock_Config+0xbc>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6413      	str	r3, [r2, #64]	; 0x40
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <SystemClock_Config+0xbc>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e44:	2300      	movs	r3, #0
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <SystemClock_Config+0xc0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <SystemClock_Config+0xc0>)
 8001e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <SystemClock_Config+0xc0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001e64:	2306      	movs	r3, #6
 8001e66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e70:	2310      	movs	r3, #16
 8001e72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f9ab 	bl	80041d8 <HAL_RCC_OscConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001e88:	f000 f81e 	bl	8001ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fc0e 	bl	80046c8 <HAL_RCC_ClockConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001eb2:	f000 f809 	bl	8001ec8 <Error_Handler>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	3750      	adds	r7, #80	; 0x50
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ee8:	2300      	movs	r3, #0
 8001eea:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001eec:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <MX_RTC_Init+0xac>)
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <MX_RTC_Init+0xb0>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <MX_RTC_Init+0xac>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <MX_RTC_Init+0xac>)
 8001efa:	227f      	movs	r2, #127	; 0x7f
 8001efc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f00:	22ff      	movs	r2, #255	; 0xff
 8001f02:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f16:	481a      	ldr	r0, [pc, #104]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f18:	f002 fe80 	bl	8004c1c <HAL_RTC_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f22:	f7ff ffd1 	bl	8001ec8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001f26:	2312      	movs	r3, #18
 8001f28:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	480f      	ldr	r0, [pc, #60]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f42:	f002 fefc 	bl	8004d3e <HAL_RTC_SetTime>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f4c:	f7ff ffbc 	bl	8001ec8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f50:	2301      	movs	r3, #1
 8001f52:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f54:	2301      	movs	r3, #1
 8001f56:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	4806      	ldr	r0, [pc, #24]	; (8001f80 <MX_RTC_Init+0xac>)
 8001f68:	f003 f804 	bl	8004f74 <HAL_RTC_SetDate>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f72:	f7ff ffa9 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000750 	.word	0x20000750
 8001f84:	40002800 	.word	0x40002800

08001f88 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <HAL_RTC_MspInit+0x50>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d111      	bne.n	8001fce <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001faa:	2302      	movs	r3, #2
 8001fac:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fd41 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001fc4:	f7ff ff80 	bl	8001ec8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_RTC_MspInit+0x54>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3720      	adds	r7, #32
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	42470e3c 	.word	0x42470e3c

08001fe0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_SPI1_Init+0x68>)
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <MX_SPI1_Init+0x6c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_SPI1_Init+0x68>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_SPI1_Init+0x68>)
 8001ff4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ff8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MX_SPI1_Init+0x68>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_SPI1_Init+0x68>)
 8002002:	2202      	movs	r2, #2
 8002004:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_SPI1_Init+0x68>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_SPI1_Init+0x68>)
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002012:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_SPI1_Init+0x68>)
 8002016:	2208      	movs	r2, #8
 8002018:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_SPI1_Init+0x68>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_SPI1_Init+0x68>)
 8002022:	2200      	movs	r2, #0
 8002024:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_SPI1_Init+0x68>)
 8002028:	2200      	movs	r2, #0
 800202a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_SPI1_Init+0x68>)
 800202e:	220a      	movs	r2, #10
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_SPI1_Init+0x68>)
 8002034:	f003 f924 	bl	8005280 <HAL_SPI_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800203e:	f7ff ff43 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200006f8 	.word	0x200006f8
 800204c:	40013000 	.word	0x40013000

08002050 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002056:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <MX_SPI2_Init+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <MX_SPI2_Init+0x64>)
 800205c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002060:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002062:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_SPI2_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_SPI2_Init+0x64>)
 800207c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002080:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <MX_SPI2_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <MX_SPI2_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_SPI2_Init+0x64>)
 800209c:	220a      	movs	r2, #10
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_SPI2_Init+0x64>)
 80020a2:	f003 f8ed 	bl	8005280 <HAL_SPI_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80020ac:	f7ff ff0c 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000770 	.word	0x20000770
 80020b8:	40003800 	.word	0x40003800

080020bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a32      	ldr	r2, [pc, #200]	; (80021a4 <HAL_SPI_MspInit+0xe8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d12c      	bne.n	8002138 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 80020e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002116:	23a0      	movs	r3, #160	; 0xa0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002126:	2305      	movs	r3, #5
 8002128:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	481e      	ldr	r0, [pc, #120]	; (80021ac <HAL_SPI_MspInit+0xf0>)
 8002132:	f000 fef3 	bl	8002f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002136:	e031      	b.n	800219c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_SPI_MspInit+0xf4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d12c      	bne.n	800219c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002168:	f043 0302 	orr.w	r3, r3, #2
 800216c:	6313      	str	r3, [r2, #48]	; 0x30
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_SPI_MspInit+0xec>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800217a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800217e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218c:	2305      	movs	r3, #5
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002190:	f107 031c 	add.w	r3, r7, #28
 8002194:	4619      	mov	r1, r3
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <HAL_SPI_MspInit+0xf8>)
 8002198:	f000 fec0 	bl	8002f1c <HAL_GPIO_Init>
}
 800219c:	bf00      	nop
 800219e:	3730      	adds	r7, #48	; 0x30
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40013000 	.word	0x40013000
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40020400 	.word	0x40020400

080021b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_MspInit+0x4c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_MspInit+0x4c>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_MspInit+0x4c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x4c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x4c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x4c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 f956 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}

0800225c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
	return 1;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_kill>:

int _kill(int pid, int sig)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002276:	f003 faa1 	bl	80057bc <__errno>
 800227a:	4603      	mov	r3, r0
 800227c:	2216      	movs	r2, #22
 800227e:	601a      	str	r2, [r3, #0]
	return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_exit>:

void _exit (int status)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffe7 	bl	800226c <_kill>
	while (1) {}		/* Make sure we hang here */
 800229e:	e7fe      	b.n	800229e <_exit+0x12>

080022a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e00a      	b.n	80022c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022b2:	f3af 8000 	nop.w
 80022b6:	4601      	mov	r1, r0
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	60ba      	str	r2, [r7, #8]
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf0      	blt.n	80022b2 <_read+0x12>
	}

return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e009      	b.n	8002300 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf1      	blt.n	80022ec <_write+0x12>
	}
	return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_close>:

int _close(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800233a:	605a      	str	r2, [r3, #4]
	return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_isatty>:

int _isatty(int file)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
	return 1;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
	return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	; (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f003 fa06 	bl	80057bc <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20010000 	.word	0x20010000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	200005fc 	.word	0x200005fc
 80023e4:	200007e0 	.word	0x200007e0

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002444 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002410:	480d      	ldr	r0, [pc, #52]	; (8002448 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002412:	490e      	ldr	r1, [pc, #56]	; (800244c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002418:	e002      	b.n	8002420 <LoopCopyDataInit>

0800241a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800241c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241e:	3304      	adds	r3, #4

08002420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002424:	d3f9      	bcc.n	800241a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002426:	4a0b      	ldr	r2, [pc, #44]	; (8002454 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002428:	4c0b      	ldr	r4, [pc, #44]	; (8002458 <LoopFillZerobss+0x26>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800242c:	e001      	b.n	8002432 <LoopFillZerobss>

0800242e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002430:	3204      	adds	r2, #4

08002432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002434:	d3fb      	bcc.n	800242e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002436:	f7ff ffd7 	bl	80023e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800243a:	f003 f9c5 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7ff fbb1 	bl	8001ba4 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002450:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8002454:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002458:	200007dc 	.word	0x200007dc

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	; (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fd13 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	200f      	movs	r0, #15
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fe90 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fd1d 	bl	8002f02 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 fcf3 	bl	8002eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	; (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	200007c8 	.word	0x200007c8

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	200007c8 	.word	0x200007c8

08002544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800254c:	f7ff ffee 	bl	800252c <HAL_GetTick>
 8002550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d005      	beq.n	800256a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_Delay+0x44>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	461a      	mov	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800256a:	bf00      	nop
 800256c:	f7ff ffde 	bl	800252c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8f7      	bhi.n	800256c <HAL_Delay+0x28>
  {
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000008 	.word	0x20000008

0800258c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e033      	b.n	800260a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff f93e 	bl	800182c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d118      	bne.n	80025fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025d2:	f023 0302 	bic.w	r3, r3, #2
 80025d6:	f043 0202 	orr.w	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 faba 	bl	8002b58 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
 80025fa:	e001      	b.n	8002600 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002608:	7bfb      	ldrb	r3, [r7, #15]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ADC_Start+0x1a>
 800262a:	2302      	movs	r3, #2
 800262c:	e097      	b.n	800275e <HAL_ADC_Start+0x14a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d018      	beq.n	8002676 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002654:	4b45      	ldr	r3, [pc, #276]	; (800276c <HAL_ADC_Start+0x158>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a45      	ldr	r2, [pc, #276]	; (8002770 <HAL_ADC_Start+0x15c>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	0c9a      	lsrs	r2, r3, #18
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002668:	e002      	b.n	8002670 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3b01      	subs	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f9      	bne.n	800266a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d15f      	bne.n	8002744 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	d106      	bne.n	80026d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f023 0206 	bic.w	r2, r3, #6
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
 80026d0:	e002      	b.n	80026d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <HAL_ADC_Start+0x160>)
 80026e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d129      	bne.n	800275c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	e020      	b.n	800275c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <HAL_ADC_Start+0x164>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d11b      	bne.n	800275c <HAL_ADC_Start+0x148>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d114      	bne.n	800275c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	e00b      	b.n	800275c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000000 	.word	0x20000000
 8002770:	431bde83 	.word	0x431bde83
 8002774:	40012300 	.word	0x40012300
 8002778:	40012000 	.word	0x40012000

0800277c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_ADC_Stop+0x16>
 800278e:	2302      	movs	r3, #2
 8002790:	e021      	b.n	80027d6 <HAL_ADC_Stop+0x5a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d113      	bne.n	8002828 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800280a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800280e:	d10b      	bne.n	8002828 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e063      	b.n	80028f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002828:	f7ff fe80 	bl	800252c <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800282e:	e021      	b.n	8002874 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002836:	d01d      	beq.n	8002874 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_ADC_PollForConversion+0x6c>
 800283e:	f7ff fe75 	bl	800252c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d212      	bcs.n	8002874 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b02      	cmp	r3, #2
 800285a:	d00b      	beq.n	8002874 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f043 0204 	orr.w	r2, r3, #4
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e03d      	b.n	80028f0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	d1d6      	bne.n	8002830 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f06f 0212 	mvn.w	r2, #18
 800288a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d123      	bne.n	80028ee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11f      	bne.n	80028ee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d006      	beq.n	80028ca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d111      	bne.n	80028ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e105      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x228>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b09      	cmp	r3, #9
 800293e:	d925      	bls.n	800298c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68d9      	ldr	r1, [r3, #12]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	3b1e      	subs	r3, #30
 8002956:	2207      	movs	r2, #7
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43da      	mvns	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	400a      	ands	r2, r1
 8002964:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68d9      	ldr	r1, [r3, #12]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	4603      	mov	r3, r0
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	4403      	add	r3, r0
 800297e:	3b1e      	subs	r3, #30
 8002980:	409a      	lsls	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	e022      	b.n	80029d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6919      	ldr	r1, [r3, #16]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	2207      	movs	r2, #7
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43da      	mvns	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	400a      	ands	r2, r1
 80029ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6919      	ldr	r1, [r3, #16]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	4603      	mov	r3, r0
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4403      	add	r3, r0
 80029c8:	409a      	lsls	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d824      	bhi.n	8002a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	3b05      	subs	r3, #5
 80029ec:	221f      	movs	r2, #31
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	400a      	ands	r2, r1
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	3b05      	subs	r3, #5
 8002a16:	fa00 f203 	lsl.w	r2, r0, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	635a      	str	r2, [r3, #52]	; 0x34
 8002a22:	e04c      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d824      	bhi.n	8002a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b23      	subs	r3, #35	; 0x23
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43da      	mvns	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	3b23      	subs	r3, #35	; 0x23
 8002a68:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
 8002a74:	e023      	b.n	8002abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b41      	subs	r3, #65	; 0x41
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b41      	subs	r3, #65	; 0x41
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_ADC_ConfigChannel+0x234>)
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_ADC_ConfigChannel+0x238>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d109      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1cc>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d105      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a19      	ldr	r2, [pc, #100]	; (8002b4c <HAL_ADC_ConfigChannel+0x238>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d123      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b10      	cmp	r3, #16
 8002af0:	d003      	beq.n	8002afa <HAL_ADC_ConfigChannel+0x1e6>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b11      	cmp	r3, #17
 8002af8:	d11b      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d111      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0e:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_ADC_ConfigChannel+0x23c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_ADC_ConfigChannel+0x240>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	0c9a      	lsrs	r2, r3, #18
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b24:	e002      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f9      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	20000000 	.word	0x20000000
 8002b54:	431bde83 	.word	0x431bde83

08002b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b60:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <ADC_Init+0x1f0>)
 8002b62:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	021a      	lsls	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6899      	ldr	r1, [r3, #8]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	4a58      	ldr	r2, [pc, #352]	; (8002d4c <ADC_Init+0x1f4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e00f      	b.n	8002c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0202 	bic.w	r2, r2, #2
 8002c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7e1b      	ldrb	r3, [r3, #24]
 8002c70:	005a      	lsls	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01b      	beq.n	8002cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	035a      	lsls	r2, r3, #13
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e007      	b.n	8002ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	051a      	lsls	r2, r3, #20
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d0e:	025a      	lsls	r2, r3, #9
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	029a      	lsls	r2, r3, #10
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40012300 	.word	0x40012300
 8002d4c:	0f000001 	.word	0x0f000001

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	; (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	; (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e80:	d301      	bcc.n	8002e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <SysTick_Config+0x40>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8e:	210f      	movs	r1, #15
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	f7ff ff8e 	bl	8002db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SysTick_Config+0x40>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <SysTick_Config+0x40>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff47 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff5c 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff8e 	bl	8002e08 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5d 	bl	8002db4 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffb0 	bl	8002e70 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e159      	b.n	80031ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8148 	bne.w	80031e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a2 	beq.w	80031e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a56      	ldr	r2, [pc, #344]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_GPIO_Init+0x2ec>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a49      	ldr	r2, [pc, #292]	; (800320c <HAL_GPIO_Init+0x2f0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x202>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x1fe>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a47      	ldr	r2, [pc, #284]	; (8003214 <HAL_GPIO_Init+0x2f8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x1fa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a46      	ldr	r2, [pc, #280]	; (8003218 <HAL_GPIO_Init+0x2fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x1f6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a45      	ldr	r2, [pc, #276]	; (800321c <HAL_GPIO_Init+0x300>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x1f2>
 800310a:	2304      	movs	r3, #4
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800310e:	2307      	movs	r3, #7
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x204>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x204>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x2ec>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003168:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_GPIO_Init+0x304>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <HAL_GPIO_Init+0x304>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031b6:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f aea2 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40013c00 	.word	0x40013c00

08003224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
 8003230:	4613      	mov	r3, r2
 8003232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003234:	787b      	ldrb	r3, [r7, #1]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323a:	887a      	ldrh	r2, [r7, #2]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003240:	e003      	b.n	800324a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	041a      	lsls	r2, r3, #16
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e12b      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fc02 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2224      	movs	r2, #36	; 0x24
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032bc:	f001 fbac 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a81      	ldr	r2, [pc, #516]	; (80034cc <HAL_I2C_Init+0x274>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d807      	bhi.n	80032dc <HAL_I2C_Init+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a80      	ldr	r2, [pc, #512]	; (80034d0 <HAL_I2C_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e006      	b.n	80032ea <HAL_I2C_Init+0x92>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a7d      	ldr	r2, [pc, #500]	; (80034d4 <HAL_I2C_Init+0x27c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bf94      	ite	ls
 80032e4:	2301      	movls	r3, #1
 80032e6:	2300      	movhi	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0e7      	b.n	80034c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a78      	ldr	r2, [pc, #480]	; (80034d8 <HAL_I2C_Init+0x280>)
 80032f6:	fba2 2303 	umull	r2, r3, r2, r3
 80032fa:	0c9b      	lsrs	r3, r3, #18
 80032fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	430a      	orrs	r2, r1
 8003310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4a6a      	ldr	r2, [pc, #424]	; (80034cc <HAL_I2C_Init+0x274>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d802      	bhi.n	800332c <HAL_I2C_Init+0xd4>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	3301      	adds	r3, #1
 800332a:	e009      	b.n	8003340 <HAL_I2C_Init+0xe8>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	4a69      	ldr	r2, [pc, #420]	; (80034dc <HAL_I2C_Init+0x284>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	3301      	adds	r3, #1
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	430b      	orrs	r3, r1
 8003346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	495c      	ldr	r1, [pc, #368]	; (80034cc <HAL_I2C_Init+0x274>)
 800335c:	428b      	cmp	r3, r1
 800335e:	d819      	bhi.n	8003394 <HAL_I2C_Init+0x13c>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e59      	subs	r1, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fbb1 f3f3 	udiv	r3, r1, r3
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003374:	400b      	ands	r3, r1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <HAL_I2C_Init+0x138>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e59      	subs	r1, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	fbb1 f3f3 	udiv	r3, r1, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338e:	e051      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003390:	2304      	movs	r3, #4
 8003392:	e04f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d111      	bne.n	80033c0 <HAL_I2C_Init+0x168>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1e58      	subs	r0, r3, #1
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	e012      	b.n	80033e6 <HAL_I2C_Init+0x18e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e58      	subs	r0, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6859      	ldr	r1, [r3, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	0099      	lsls	r1, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Init+0x196>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e022      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10e      	bne.n	8003414 <HAL_I2C_Init+0x1bc>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1e58      	subs	r0, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6859      	ldr	r1, [r3, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	440b      	add	r3, r1
 8003404:	fbb0 f3f3 	udiv	r3, r0, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003412:	e00f      	b.n	8003434 <HAL_I2C_Init+0x1dc>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	6809      	ldr	r1, [r1, #0]
 8003438:	4313      	orrs	r3, r2
 800343a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6911      	ldr	r1, [r2, #16]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68d2      	ldr	r2, [r2, #12]
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	430b      	orrs	r3, r1
 8003476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	000186a0 	.word	0x000186a0
 80034d0:	001e847f 	.word	0x001e847f
 80034d4:	003d08ff 	.word	0x003d08ff
 80034d8:	431bde83 	.word	0x431bde83
 80034dc:	10624dd3 	.word	0x10624dd3

080034e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	4608      	mov	r0, r1
 80034ea:	4611      	mov	r1, r2
 80034ec:	461a      	mov	r2, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	817b      	strh	r3, [r7, #10]
 80034f2:	460b      	mov	r3, r1
 80034f4:	813b      	strh	r3, [r7, #8]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7ff f817 	bl	800252c <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	f040 80d9 	bne.w	80036c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	2319      	movs	r3, #25
 8003514:	2201      	movs	r2, #1
 8003516:	496d      	ldr	r1, [pc, #436]	; (80036cc <HAL_I2C_Mem_Write+0x1ec>)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fc7f 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
 8003526:	e0cc      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Mem_Write+0x56>
 8003532:	2302      	movs	r3, #2
 8003534:	e0c5      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d007      	beq.n	800355c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0201 	orr.w	r2, r2, #1
 800355a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2221      	movs	r2, #33	; 0x21
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a3a      	ldr	r2, [r7, #32]
 8003586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a4d      	ldr	r2, [pc, #308]	; (80036d0 <HAL_I2C_Mem_Write+0x1f0>)
 800359c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800359e:	88f8      	ldrh	r0, [r7, #6]
 80035a0:	893a      	ldrh	r2, [r7, #8]
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	4603      	mov	r3, r0
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fab6 	bl	8003b20 <I2C_RequestMemoryWrite>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d052      	beq.n	8003660 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e081      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 fd00 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d107      	bne.n	80035e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e06b      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	781a      	ldrb	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d11b      	bne.n	8003660 <HAL_I2C_Mem_Write+0x180>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	d017      	beq.n	8003660 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1aa      	bne.n	80035be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fcec 	bl	800404a <I2C_WaitOnBTFFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e016      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036c0:	2302      	movs	r3, #2
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	00100002 	.word	0x00100002
 80036d0:	ffff0000 	.word	0xffff0000

080036d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ee:	f7fe ff1d 	bl	800252c <HAL_GetTick>
 80036f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	f040 8208 	bne.w	8003b12 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	2319      	movs	r3, #25
 8003708:	2201      	movs	r2, #1
 800370a:	497b      	ldr	r1, [pc, #492]	; (80038f8 <HAL_I2C_Mem_Read+0x224>)
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fb85 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
 800371a:	e1fb      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_I2C_Mem_Read+0x56>
 8003726:	2302      	movs	r3, #2
 8003728:	e1f4      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d007      	beq.n	8003750 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2222      	movs	r2, #34	; 0x22
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2240      	movs	r2, #64	; 0x40
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a5b      	ldr	r2, [pc, #364]	; (80038fc <HAL_I2C_Mem_Read+0x228>)
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003792:	88f8      	ldrh	r0, [r7, #6]
 8003794:	893a      	ldrh	r2, [r7, #8]
 8003796:	8979      	ldrh	r1, [r7, #10]
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4603      	mov	r3, r0
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa52 	bl	8003c4c <I2C_RequestMemoryRead>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e1b0      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	623b      	str	r3, [r7, #32]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	623b      	str	r3, [r7, #32]
 80037ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e184      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d11b      	bne.n	8003822 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	e164      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	2b02      	cmp	r3, #2
 8003828:	d11b      	bne.n	8003862 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003838:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	61bb      	str	r3, [r7, #24]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	e144      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003878:	e138      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	2b03      	cmp	r3, #3
 8003880:	f200 80f1 	bhi.w	8003a66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	2b01      	cmp	r3, #1
 800388a:	d123      	bne.n	80038d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fc1b 	bl	80040cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e139      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038d2:	e10b      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d14e      	bne.n	800397a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e2:	2200      	movs	r2, #0
 80038e4:	4906      	ldr	r1, [pc, #24]	; (8003900 <HAL_I2C_Mem_Read+0x22c>)
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fa98 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e10e      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
 80038f6:	bf00      	nop
 80038f8:	00100002 	.word	0x00100002
 80038fc:	ffff0000 	.word	0xffff0000
 8003900:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003978:	e0b8      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	2200      	movs	r2, #0
 8003982:	4966      	ldr	r1, [pc, #408]	; (8003b1c <HAL_I2C_Mem_Read+0x448>)
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fa49 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0bf      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039dc:	2200      	movs	r2, #0
 80039de:	494f      	ldr	r1, [pc, #316]	; (8003b1c <HAL_I2C_Mem_Read+0x448>)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa1b 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e091      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a64:	e042      	b.n	8003aec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fb2e 	bl	80040cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e04c      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d118      	bne.n	8003aec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f47f aec2 	bne.w	800387a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	; 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	00010004 	.word	0x00010004

08003b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	460b      	mov	r3, r1
 8003b34:	813b      	strh	r3, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f960 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b70:	d103      	bne.n	8003b7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e05f      	b.n	8003c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b7e:	897b      	ldrh	r3, [r7, #10]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	492d      	ldr	r1, [pc, #180]	; (8003c48 <I2C_RequestMemoryWrite+0x128>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f998 	bl	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e04c      	b.n	8003c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa02 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e02b      	b.n	8003c3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bec:	893b      	ldrh	r3, [r7, #8]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	e021      	b.n	8003c3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	6a39      	ldr	r1, [r7, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f9dc 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d107      	bne.n	8003c2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e005      	b.n	8003c3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c32:	893b      	ldrh	r3, [r7, #8]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	00010002 	.word	0x00010002

08003c4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b088      	sub	sp, #32
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	4608      	mov	r0, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	817b      	strh	r3, [r7, #10]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	813b      	strh	r3, [r7, #8]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f8c2 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cac:	d103      	bne.n	8003cb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0aa      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	6a3a      	ldr	r2, [r7, #32]
 8003cce:	4952      	ldr	r1, [pc, #328]	; (8003e18 <I2C_RequestMemoryRead+0x1cc>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8fa 	bl	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e097      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	6a39      	ldr	r1, [r7, #32]
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f964 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00d      	beq.n	8003d22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d107      	bne.n	8003d1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e076      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d105      	bne.n	8003d34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d28:	893b      	ldrh	r3, [r7, #8]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	611a      	str	r2, [r3, #16]
 8003d32:	e021      	b.n	8003d78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d34:	893b      	ldrh	r3, [r7, #8]
 8003d36:	0a1b      	lsrs	r3, r3, #8
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	6a39      	ldr	r1, [r7, #32]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f93e 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d107      	bne.n	8003d6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e050      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6e:	893b      	ldrh	r3, [r7, #8]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	6a39      	ldr	r1, [r7, #32]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f923 	bl	8003fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d107      	bne.n	8003da0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e035      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f82b 	bl	8003e1c <I2C_WaitOnFlagUntilTimeout>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dda:	d103      	bne.n	8003de4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e013      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003de8:	897b      	ldrh	r3, [r7, #10]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f043 0301 	orr.w	r3, r3, #1
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	6a3a      	ldr	r2, [r7, #32]
 8003dfc:	4906      	ldr	r1, [pc, #24]	; (8003e18 <I2C_RequestMemoryRead+0x1cc>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f863 	bl	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3718      	adds	r7, #24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	00010002 	.word	0x00010002

08003e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e2c:	e025      	b.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d021      	beq.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fe fb79 	bl	800252c <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d116      	bne.n	8003e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f043 0220 	orr.w	r2, r3, #32
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e023      	b.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	0c1b      	lsrs	r3, r3, #16
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10d      	bne.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	43da      	mvns	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	e00c      	b.n	8003eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	461a      	mov	r2, r3
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d0b6      	beq.n	8003e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed8:	e051      	b.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d123      	bne.n	8003f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0204 	orr.w	r2, r3, #4
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e046      	b.n	8003fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d021      	beq.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fe faf7 	bl	800252c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d116      	bne.n	8003f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f043 0220 	orr.w	r2, r3, #32
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e020      	b.n	8003fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	0c1b      	lsrs	r3, r3, #16
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10c      	bne.n	8003fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e00b      	b.n	8003fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	43da      	mvns	r2, r3
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d18d      	bne.n	8003eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fd4:	e02d      	b.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f8ce 	bl	8004178 <I2C_IsAcknowledgeFailed>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e02d      	b.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d021      	beq.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fe fa9d 	bl	800252c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e007      	b.n	8004042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d1ca      	bne.n	8003fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	60b9      	str	r1, [r7, #8]
 8004054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004056:	e02d      	b.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f88d 	bl	8004178 <I2C_IsAcknowledgeFailed>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e02d      	b.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d021      	beq.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004070:	f7fe fa5c 	bl	800252c <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e007      	b.n	80040c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d1ca      	bne.n	8004058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040d8:	e042      	b.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d119      	bne.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0210 	mvn.w	r2, #16
 80040f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e029      	b.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fe fa06 	bl	800252c <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e007      	b.n	8004170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d1b5      	bne.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418e:	d11b      	bne.n	80041c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	f043 0204 	orr.w	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e264      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e23f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a90      	ldr	r2, [pc, #576]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a83      	ldr	r2, [pc, #524]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe f94c 	bl	800252c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe f948 	bl	800252c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e204      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fe f938 	bl	800252c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fe f934 	bl	800252c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f0      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c4      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4952      	ldr	r1, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fe f8ed 	bl	800252c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fe f8e9 	bl	800252c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4940      	ldr	r1, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe f8cc 	bl	800252c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7fe f8c8 	bl	800252c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e184      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d030      	beq.n	8004424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe f8ac 	bl	800252c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fe f8a8 	bl	800252c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e164      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e015      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fe f895 	bl	800252c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7fe f891 	bl	800252c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e14d      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a0 	beq.w	8004572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fe f857 	bl	800252c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e011      	b.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
 8004490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fe f84a 	bl	800252c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e106      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	4b85      	ldr	r3, [pc, #532]	; (80046bc <HAL_RCC_OscConfig+0x4e4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x312>
 80044d0:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a77      	ldr	r2, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a71      	ldr	r2, [pc, #452]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe f80f 	bl	800252c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fe f80b 	bl	800252c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0c5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x33a>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fd fff9 	bl	800252c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd fff5 	bl	800252c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0af      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 809b 	beq.w	80046b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d05c      	beq.n	8004642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d141      	bne.n	8004614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fd ffc9 	bl	800252c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fd ffc5 	bl	800252c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e081      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd ff9e 	bl	800252c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fd ff9a 	bl	800252c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e056      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 8004612:	e04e      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fd ff87 	bl	800252c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7fd ff83 	bl	800252c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 8004640:	e037      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e032      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d028      	beq.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d121      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d11a      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40007000 	.word	0x40007000
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470060 	.word	0x42470060

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7fd feb8 	bl	800252c <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fd feb4 	bl	800252c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fd fe18 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	08008af0 	.word	0x08008af0
 800488c:	20000000 	.word	0x20000000
 8004890:	20000004 	.word	0x20000004

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b5b0      	push	{r4, r5, r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489a:	2100      	movs	r1, #0
 800489c:	6079      	str	r1, [r7, #4]
 800489e:	2100      	movs	r1, #0
 80048a0:	60f9      	str	r1, [r7, #12]
 80048a2:	2100      	movs	r1, #0
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a6:	2100      	movs	r1, #0
 80048a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048aa:	4952      	ldr	r1, [pc, #328]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ac:	6889      	ldr	r1, [r1, #8]
 80048ae:	f001 010c 	and.w	r1, r1, #12
 80048b2:	2908      	cmp	r1, #8
 80048b4:	d00d      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80048b6:	2908      	cmp	r1, #8
 80048b8:	f200 8094 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
 80048bc:	2900      	cmp	r1, #0
 80048be:	d002      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x32>
 80048c0:	2904      	cmp	r1, #4
 80048c2:	d003      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x38>
 80048c4:	e08e      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c6:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80048c8:	60bb      	str	r3, [r7, #8]
       break;
 80048ca:	e08e      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 80048ce:	60bb      	str	r3, [r7, #8]
      break;
 80048d0:	e08b      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d2:	4948      	ldr	r1, [pc, #288]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d4:	6849      	ldr	r1, [r1, #4]
 80048d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048dc:	4945      	ldr	r1, [pc, #276]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048de:	6849      	ldr	r1, [r1, #4]
 80048e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d024      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4942      	ldr	r1, [pc, #264]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ea:	6849      	ldr	r1, [r1, #4]
 80048ec:	0989      	lsrs	r1, r1, #6
 80048ee:	4608      	mov	r0, r1
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048f8:	f04f 0500 	mov.w	r5, #0
 80048fc:	ea00 0204 	and.w	r2, r0, r4
 8004900:	ea01 0305 	and.w	r3, r1, r5
 8004904:	493d      	ldr	r1, [pc, #244]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004906:	fb01 f003 	mul.w	r0, r1, r3
 800490a:	2100      	movs	r1, #0
 800490c:	fb01 f102 	mul.w	r1, r1, r2
 8004910:	1844      	adds	r4, r0, r1
 8004912:	493a      	ldr	r1, [pc, #232]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004914:	fba2 0101 	umull	r0, r1, r2, r1
 8004918:	1863      	adds	r3, r4, r1
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fc f998 	bl	8000c58 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e04a      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	ea02 0400 	and.w	r4, r2, r0
 800494a:	ea03 0501 	and.w	r5, r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	014b      	lsls	r3, r1, #5
 800495c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004960:	0142      	lsls	r2, r0, #5
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	1b00      	subs	r0, r0, r4
 8004968:	eb61 0105 	sbc.w	r1, r1, r5
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	018b      	lsls	r3, r1, #6
 8004976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497a:	0182      	lsls	r2, r0, #6
 800497c:	1a12      	subs	r2, r2, r0
 800497e:	eb63 0301 	sbc.w	r3, r3, r1
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	00d9      	lsls	r1, r3, #3
 800498c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004990:	00d0      	lsls	r0, r2, #3
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	1912      	adds	r2, r2, r4
 8004998:	eb45 0303 	adc.w	r3, r5, r3
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	0299      	lsls	r1, r3, #10
 80049a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049aa:	0290      	lsls	r0, r2, #10
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f7fc f94c 	bl	8000c58 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80049e6:	60bb      	str	r3, [r7, #8]
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	68bb      	ldr	r3, [r7, #8]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	017d7840 	.word	0x017d7840

08004a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a1c:	f7ff fff0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	08008b00 	.word	0x08008b00

08004a40 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d035      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a68:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6e:	f7fd fd5d 	bl	800252c <HAL_GetTick>
 8004a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a74:	e008      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a76:	f7fd fd59 	bl	800252c <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e0ba      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a88:	4b60      	ldr	r3, [pc, #384]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1f0      	bne.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	019a      	lsls	r2, r3, #6
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	071b      	lsls	r3, r3, #28
 8004aa0:	495a      	ldr	r1, [pc, #360]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aae:	f7fd fd3d 	bl	800252c <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ab6:	f7fd fd39 	bl	800252c <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e09a      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8083 	beq.w	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a48      	ldr	r2, [pc, #288]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b46      	ldr	r3, [pc, #280]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004afe:	4b44      	ldr	r3, [pc, #272]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a43      	ldr	r2, [pc, #268]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd fd0f 	bl	800252c <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b10:	e008      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fd0b 	bl	800252c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e06c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b24:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b58:	4b2e      	ldr	r3, [pc, #184]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b5e:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b64:	4a29      	ldr	r2, [pc, #164]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b6a:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d114      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fd fcd9 	bl	800252c <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd fcd5 	bl	800252c <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e034      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ee      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bac:	d10d      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc2:	4912      	ldr	r1, [pc, #72]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	608b      	str	r3, [r1, #8]
 8004bc8:	e005      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bca:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	4a0f      	ldr	r2, [pc, #60]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bd4:	6093      	str	r3, [r2, #8]
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	490a      	ldr	r1, [pc, #40]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7c1a      	ldrb	r2, [r3, #16]
 8004bf8:	4b07      	ldr	r3, [pc, #28]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004bfa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	42470068 	.word	0x42470068
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42470e40 	.word	0x42470e40
 8004c18:	424711e0 	.word	0x424711e0

08004c1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e083      	b.n	8004d36 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7f5b      	ldrb	r3, [r3, #29]
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d105      	bne.n	8004c44 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fd f9a2 	bl	8001f88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	22ca      	movs	r2, #202	; 0xca
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2253      	movs	r2, #83	; 0x53
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 faa8 	bl	80051b0 <RTC_EnterInitMode>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	22ff      	movs	r2, #255	; 0xff
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e05e      	b.n	8004d36 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	695b      	ldr	r3, [r3, #20]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	68d2      	ldr	r2, [r2, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6919      	ldr	r1, [r3, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	041a      	lsls	r2, r3, #16
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10e      	bne.n	8004d04 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa3a 	bl	8005160 <HAL_RTC_WaitForSynchro>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d008      	beq.n	8004d04 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e018      	b.n	8004d36 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d12:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	22ff      	movs	r2, #255	; 0xff
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
  }
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d3e:	b590      	push	{r4, r7, lr}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	7f1b      	ldrb	r3, [r3, #28]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_RTC_SetTime+0x1c>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0aa      	b.n	8004eb0 <HAL_RTC_SetTime+0x172>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2202      	movs	r2, #2
 8004d64:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d126      	bne.n	8004dba <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa3f 	bl	8005208 <RTC_ByteToBcd2>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	785b      	ldrb	r3, [r3, #1]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fa38 	bl	8005208 <RTC_ByteToBcd2>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d9c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	789b      	ldrb	r3, [r3, #2]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fa30 	bl	8005208 <RTC_ByteToBcd2>
 8004da8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004daa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	78db      	ldrb	r3, [r3, #3]
 8004db2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e018      	b.n	8004dec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004dda:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004de0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	78db      	ldrb	r3, [r3, #3]
 8004de6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	22ca      	movs	r2, #202	; 0xca
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2253      	movs	r2, #83	; 0x53
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f9d7 	bl	80051b0 <RTC_EnterInitMode>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	22ff      	movs	r2, #255	; 0xff
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2204      	movs	r2, #4
 8004e14:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e047      	b.n	8004eb0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004e2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e2e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e3e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d111      	bne.n	8004e9a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f972 	bl	8005160 <HAL_RTC_WaitForSynchro>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	22ff      	movs	r2, #255	; 0xff
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00a      	b.n	8004eb0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	22ff      	movs	r2, #255	; 0xff
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004eae:	2300      	movs	r3, #0
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}

08004eb8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004eea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004eee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d11a      	bne.n	8004f6a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 f983 	bl	8005244 <RTC_Bcd2ToByte>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	785b      	ldrb	r3, [r3, #1]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f97a 	bl	8005244 <RTC_Bcd2ToByte>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	789b      	ldrb	r3, [r3, #2]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 f971 	bl	8005244 <RTC_Bcd2ToByte>
 8004f62:	4603      	mov	r3, r0
 8004f64:	461a      	mov	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	7f1b      	ldrb	r3, [r3, #28]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_RTC_SetDate+0x1c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e094      	b.n	80050ba <HAL_RTC_SetDate+0x146>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10e      	bne.n	8004fc0 <HAL_RTC_SetDate+0x4c>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	f023 0310 	bic.w	r3, r3, #16
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	330a      	adds	r3, #10
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11c      	bne.n	8005000 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	78db      	ldrb	r3, [r3, #3]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 f91c 	bl	8005208 <RTC_ByteToBcd2>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f915 	bl	8005208 <RTC_ByteToBcd2>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fe2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	789b      	ldrb	r3, [r3, #2]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 f90d 	bl	8005208 <RTC_ByteToBcd2>
 8004fee:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ff0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	e00e      	b.n	800501e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	78db      	ldrb	r3, [r3, #3]
 8005004:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	785b      	ldrb	r3, [r3, #1]
 800500a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800500c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005012:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	22ca      	movs	r2, #202	; 0xca
 8005024:	625a      	str	r2, [r3, #36]	; 0x24
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2253      	movs	r2, #83	; 0x53
 800502c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 f8be 	bl	80051b0 <RTC_EnterInitMode>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ff      	movs	r2, #255	; 0xff
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2204      	movs	r2, #4
 8005046:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e033      	b.n	80050ba <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800505c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005060:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005070:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b00      	cmp	r3, #0
 800507e:	d111      	bne.n	80050a4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f86d 	bl	8005160 <HAL_RTC_WaitForSynchro>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2204      	movs	r2, #4
 8005098:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e00a      	b.n	80050ba <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	22ff      	movs	r2, #255	; 0xff
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80050b8:	2300      	movs	r3, #0
  }
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd90      	pop	{r4, r7, pc}

080050c2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	0b5b      	lsrs	r3, r3, #13
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11a      	bne.n	8005156 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f88d 	bl	8005244 <RTC_Bcd2ToByte>
 800512a:	4603      	mov	r3, r0
 800512c:	461a      	mov	r2, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	785b      	ldrb	r3, [r3, #1]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 f884 	bl	8005244 <RTC_Bcd2ToByte>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	789b      	ldrb	r3, [r3, #2]
 8005148:	4618      	mov	r0, r3
 800514a:	f000 f87b 	bl	8005244 <RTC_Bcd2ToByte>
 800514e:	4603      	mov	r3, r0
 8005150:	461a      	mov	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68da      	ldr	r2, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800517a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800517c:	f7fd f9d6 	bl	800252c <HAL_GetTick>
 8005180:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005182:	e009      	b.n	8005198 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005184:	f7fd f9d2 	bl	800252c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005192:	d901      	bls.n	8005198 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e007      	b.n	80051a8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0ee      	beq.n	8005184 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d119      	bne.n	80051fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051d4:	f7fd f9aa 	bl	800252c <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051da:	e009      	b.n	80051f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051dc:	f7fd f9a6 	bl	800252c <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ea:	d901      	bls.n	80051f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e007      	b.n	8005200 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005216:	e005      	b.n	8005224 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800521e:	79fb      	ldrb	r3, [r7, #7]
 8005220:	3b0a      	subs	r3, #10
 8005222:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b09      	cmp	r3, #9
 8005228:	d8f6      	bhi.n	8005218 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	b2da      	uxtb	r2, r3
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	4313      	orrs	r3, r2
 8005236:	b2db      	uxtb	r3, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005252:	79fb      	ldrb	r3, [r7, #7]
 8005254:	091b      	lsrs	r3, r3, #4
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	4413      	add	r3, r2
 8005272:	b2db      	uxtb	r3, r3
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e07b      	b.n	800538a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a2:	d009      	beq.n	80052b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	61da      	str	r2, [r3, #28]
 80052aa:	e005      	b.n	80052b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fc fef2 	bl	80020bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	431a      	orrs	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005328:	431a      	orrs	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	ea42 0103 	orr.w	r1, r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0104 	and.w	r1, r3, #4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0210 	and.w	r2, r3, #16
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69da      	ldr	r2, [r3, #28]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b088      	sub	sp, #32
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	4613      	mov	r3, r2
 80053a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_SPI_Transmit+0x22>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e126      	b.n	8005602 <HAL_SPI_Transmit+0x270>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053bc:	f7fd f8b6 	bl	800252c <HAL_GetTick>
 80053c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d002      	beq.n	80053d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053d2:	2302      	movs	r3, #2
 80053d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d6:	e10b      	b.n	80055f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_Transmit+0x52>
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053e8:	e102      	b.n	80055f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2203      	movs	r2, #3
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005430:	d10f      	bne.n	8005452 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005440:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005450:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d007      	beq.n	8005470 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005478:	d14b      	bne.n	8005512 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_SPI_Transmit+0xf6>
 8005482:	8afb      	ldrh	r3, [r7, #22]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d13e      	bne.n	8005506 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	881a      	ldrh	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	1c9a      	adds	r2, r3, #2
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054ac:	e02b      	b.n	8005506 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d112      	bne.n	80054e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	881a      	ldrh	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	1c9a      	adds	r2, r3, #2
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	86da      	strh	r2, [r3, #54]	; 0x36
 80054e0:	e011      	b.n	8005506 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e2:	f7fd f823 	bl	800252c <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d803      	bhi.n	80054fa <HAL_SPI_Transmit+0x168>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d102      	bne.n	8005500 <HAL_SPI_Transmit+0x16e>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005504:	e074      	b.n	80055f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ce      	bne.n	80054ae <HAL_SPI_Transmit+0x11c>
 8005510:	e04c      	b.n	80055ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <HAL_SPI_Transmit+0x18e>
 800551a:	8afb      	ldrh	r3, [r7, #22]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d140      	bne.n	80055a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	7812      	ldrb	r2, [r2, #0]
 800552c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005546:	e02c      	b.n	80055a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b02      	cmp	r3, #2
 8005554:	d113      	bne.n	800557e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	86da      	strh	r2, [r3, #54]	; 0x36
 800557c:	e011      	b.n	80055a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800557e:	f7fc ffd5 	bl	800252c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d803      	bhi.n	8005596 <HAL_SPI_Transmit+0x204>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d102      	bne.n	800559c <HAL_SPI_Transmit+0x20a>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d102      	bne.n	80055a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055a0:	e026      	b.n	80055f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1cd      	bne.n	8005548 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	6839      	ldr	r1, [r7, #0]
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f8c1 	bl	8005738 <SPI_EndRxTxTransaction>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	77fb      	strb	r3, [r7, #31]
 80055ec:	e000      	b.n	80055f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005600:	7ffb      	ldrb	r3, [r7, #31]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005618:	b2db      	uxtb	r3, r3
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	4613      	mov	r3, r2
 8005636:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005638:	f7fc ff78 	bl	800252c <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	4413      	add	r3, r2
 8005646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005648:	f7fc ff70 	bl	800252c <HAL_GetTick>
 800564c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800564e:	4b39      	ldr	r3, [pc, #228]	; (8005734 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	0d1b      	lsrs	r3, r3, #20
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800565e:	e054      	b.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005666:	d050      	beq.n	800570a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005668:	f7fc ff60 	bl	800252c <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	69fa      	ldr	r2, [r7, #28]
 8005674:	429a      	cmp	r2, r3
 8005676:	d902      	bls.n	800567e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d13d      	bne.n	80056fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800568c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005696:	d111      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a0:	d004      	beq.n	80056ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d107      	bne.n	80056bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056c4:	d10f      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e017      	b.n	800572a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	3b01      	subs	r3, #1
 8005708:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d19b      	bne.n	8005660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000000 	.word	0x20000000

08005738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005744:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <SPI_EndRxTxTransaction+0x7c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <SPI_EndRxTxTransaction+0x80>)
 800574a:	fba2 2303 	umull	r2, r3, r2, r3
 800574e:	0d5b      	lsrs	r3, r3, #21
 8005750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005762:	d112      	bne.n	800578a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	2180      	movs	r1, #128	; 0x80
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff ff5a 	bl	8005628 <SPI_WaitFlagStateUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d016      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3b01      	subs	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b80      	cmp	r3, #128	; 0x80
 80057a2:	d0f2      	beq.n	800578a <SPI_EndRxTxTransaction+0x52>
 80057a4:	e000      	b.n	80057a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80057a6:	bf00      	nop
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000000 	.word	0x20000000
 80057b8:	165e9f81 	.word	0x165e9f81

080057bc <__errno>:
 80057bc:	4b01      	ldr	r3, [pc, #4]	; (80057c4 <__errno+0x8>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	; (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	; (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	; (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	; (800580c <__libc_init_array+0x44>)
 80057dc:	f002 fec2 	bl	8008564 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08008ef4 	.word	0x08008ef4
 8005804:	08008ef4 	.word	0x08008ef4
 8005808:	08008ef4 	.word	0x08008ef4
 800580c:	08008ef8 	.word	0x08008ef8

08005810 <memset>:
 8005810:	4402      	add	r2, r0
 8005812:	4603      	mov	r3, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <__cvt>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	ec55 4b10 	vmov	r4, r5, d0
 8005828:	2d00      	cmp	r5, #0
 800582a:	460e      	mov	r6, r1
 800582c:	4619      	mov	r1, r3
 800582e:	462b      	mov	r3, r5
 8005830:	bfbb      	ittet	lt
 8005832:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005836:	461d      	movlt	r5, r3
 8005838:	2300      	movge	r3, #0
 800583a:	232d      	movlt	r3, #45	; 0x2d
 800583c:	700b      	strb	r3, [r1, #0]
 800583e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005840:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005844:	4691      	mov	r9, r2
 8005846:	f023 0820 	bic.w	r8, r3, #32
 800584a:	bfbc      	itt	lt
 800584c:	4622      	movlt	r2, r4
 800584e:	4614      	movlt	r4, r2
 8005850:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005854:	d005      	beq.n	8005862 <__cvt+0x42>
 8005856:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800585a:	d100      	bne.n	800585e <__cvt+0x3e>
 800585c:	3601      	adds	r6, #1
 800585e:	2102      	movs	r1, #2
 8005860:	e000      	b.n	8005864 <__cvt+0x44>
 8005862:	2103      	movs	r1, #3
 8005864:	ab03      	add	r3, sp, #12
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	ab02      	add	r3, sp, #8
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	ec45 4b10 	vmov	d0, r4, r5
 8005870:	4653      	mov	r3, sl
 8005872:	4632      	mov	r2, r6
 8005874:	f000 fcf8 	bl	8006268 <_dtoa_r>
 8005878:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800587c:	4607      	mov	r7, r0
 800587e:	d102      	bne.n	8005886 <__cvt+0x66>
 8005880:	f019 0f01 	tst.w	r9, #1
 8005884:	d022      	beq.n	80058cc <__cvt+0xac>
 8005886:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800588a:	eb07 0906 	add.w	r9, r7, r6
 800588e:	d110      	bne.n	80058b2 <__cvt+0x92>
 8005890:	783b      	ldrb	r3, [r7, #0]
 8005892:	2b30      	cmp	r3, #48	; 0x30
 8005894:	d10a      	bne.n	80058ac <__cvt+0x8c>
 8005896:	2200      	movs	r2, #0
 8005898:	2300      	movs	r3, #0
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fb f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 80058a2:	b918      	cbnz	r0, 80058ac <__cvt+0x8c>
 80058a4:	f1c6 0601 	rsb	r6, r6, #1
 80058a8:	f8ca 6000 	str.w	r6, [sl]
 80058ac:	f8da 3000 	ldr.w	r3, [sl]
 80058b0:	4499      	add	r9, r3
 80058b2:	2200      	movs	r2, #0
 80058b4:	2300      	movs	r3, #0
 80058b6:	4620      	mov	r0, r4
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fb f90d 	bl	8000ad8 <__aeabi_dcmpeq>
 80058be:	b108      	cbz	r0, 80058c4 <__cvt+0xa4>
 80058c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80058c4:	2230      	movs	r2, #48	; 0x30
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	454b      	cmp	r3, r9
 80058ca:	d307      	bcc.n	80058dc <__cvt+0xbc>
 80058cc:	9b03      	ldr	r3, [sp, #12]
 80058ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058d0:	1bdb      	subs	r3, r3, r7
 80058d2:	4638      	mov	r0, r7
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	b004      	add	sp, #16
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	9103      	str	r1, [sp, #12]
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	e7f0      	b.n	80058c6 <__cvt+0xa6>

080058e4 <__exponent>:
 80058e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e6:	4603      	mov	r3, r0
 80058e8:	2900      	cmp	r1, #0
 80058ea:	bfb8      	it	lt
 80058ec:	4249      	neglt	r1, r1
 80058ee:	f803 2b02 	strb.w	r2, [r3], #2
 80058f2:	bfb4      	ite	lt
 80058f4:	222d      	movlt	r2, #45	; 0x2d
 80058f6:	222b      	movge	r2, #43	; 0x2b
 80058f8:	2909      	cmp	r1, #9
 80058fa:	7042      	strb	r2, [r0, #1]
 80058fc:	dd2a      	ble.n	8005954 <__exponent+0x70>
 80058fe:	f10d 0407 	add.w	r4, sp, #7
 8005902:	46a4      	mov	ip, r4
 8005904:	270a      	movs	r7, #10
 8005906:	46a6      	mov	lr, r4
 8005908:	460a      	mov	r2, r1
 800590a:	fb91 f6f7 	sdiv	r6, r1, r7
 800590e:	fb07 1516 	mls	r5, r7, r6, r1
 8005912:	3530      	adds	r5, #48	; 0x30
 8005914:	2a63      	cmp	r2, #99	; 0x63
 8005916:	f104 34ff 	add.w	r4, r4, #4294967295
 800591a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800591e:	4631      	mov	r1, r6
 8005920:	dcf1      	bgt.n	8005906 <__exponent+0x22>
 8005922:	3130      	adds	r1, #48	; 0x30
 8005924:	f1ae 0502 	sub.w	r5, lr, #2
 8005928:	f804 1c01 	strb.w	r1, [r4, #-1]
 800592c:	1c44      	adds	r4, r0, #1
 800592e:	4629      	mov	r1, r5
 8005930:	4561      	cmp	r1, ip
 8005932:	d30a      	bcc.n	800594a <__exponent+0x66>
 8005934:	f10d 0209 	add.w	r2, sp, #9
 8005938:	eba2 020e 	sub.w	r2, r2, lr
 800593c:	4565      	cmp	r5, ip
 800593e:	bf88      	it	hi
 8005940:	2200      	movhi	r2, #0
 8005942:	4413      	add	r3, r2
 8005944:	1a18      	subs	r0, r3, r0
 8005946:	b003      	add	sp, #12
 8005948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800594a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800594e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005952:	e7ed      	b.n	8005930 <__exponent+0x4c>
 8005954:	2330      	movs	r3, #48	; 0x30
 8005956:	3130      	adds	r1, #48	; 0x30
 8005958:	7083      	strb	r3, [r0, #2]
 800595a:	70c1      	strb	r1, [r0, #3]
 800595c:	1d03      	adds	r3, r0, #4
 800595e:	e7f1      	b.n	8005944 <__exponent+0x60>

08005960 <_printf_float>:
 8005960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005964:	ed2d 8b02 	vpush	{d8}
 8005968:	b08d      	sub	sp, #52	; 0x34
 800596a:	460c      	mov	r4, r1
 800596c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005970:	4616      	mov	r6, r2
 8005972:	461f      	mov	r7, r3
 8005974:	4605      	mov	r5, r0
 8005976:	f001 fa63 	bl	8006e40 <_localeconv_r>
 800597a:	f8d0 a000 	ldr.w	sl, [r0]
 800597e:	4650      	mov	r0, sl
 8005980:	f7fa fc2e 	bl	80001e0 <strlen>
 8005984:	2300      	movs	r3, #0
 8005986:	930a      	str	r3, [sp, #40]	; 0x28
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	9305      	str	r3, [sp, #20]
 800598c:	f8d8 3000 	ldr.w	r3, [r8]
 8005990:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005994:	3307      	adds	r3, #7
 8005996:	f023 0307 	bic.w	r3, r3, #7
 800599a:	f103 0208 	add.w	r2, r3, #8
 800599e:	f8c8 2000 	str.w	r2, [r8]
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059b2:	9307      	str	r3, [sp, #28]
 80059b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80059b8:	ee08 0a10 	vmov	s16, r0
 80059bc:	4b9f      	ldr	r3, [pc, #636]	; (8005c3c <_printf_float+0x2dc>)
 80059be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c2:	f04f 32ff 	mov.w	r2, #4294967295
 80059c6:	f7fb f8b9 	bl	8000b3c <__aeabi_dcmpun>
 80059ca:	bb88      	cbnz	r0, 8005a30 <_printf_float+0xd0>
 80059cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059d0:	4b9a      	ldr	r3, [pc, #616]	; (8005c3c <_printf_float+0x2dc>)
 80059d2:	f04f 32ff 	mov.w	r2, #4294967295
 80059d6:	f7fb f893 	bl	8000b00 <__aeabi_dcmple>
 80059da:	bb48      	cbnz	r0, 8005a30 <_printf_float+0xd0>
 80059dc:	2200      	movs	r2, #0
 80059de:	2300      	movs	r3, #0
 80059e0:	4640      	mov	r0, r8
 80059e2:	4649      	mov	r1, r9
 80059e4:	f7fb f882 	bl	8000aec <__aeabi_dcmplt>
 80059e8:	b110      	cbz	r0, 80059f0 <_printf_float+0x90>
 80059ea:	232d      	movs	r3, #45	; 0x2d
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	4b93      	ldr	r3, [pc, #588]	; (8005c40 <_printf_float+0x2e0>)
 80059f2:	4894      	ldr	r0, [pc, #592]	; (8005c44 <_printf_float+0x2e4>)
 80059f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059f8:	bf94      	ite	ls
 80059fa:	4698      	movls	r8, r3
 80059fc:	4680      	movhi	r8, r0
 80059fe:	2303      	movs	r3, #3
 8005a00:	6123      	str	r3, [r4, #16]
 8005a02:	9b05      	ldr	r3, [sp, #20]
 8005a04:	f023 0204 	bic.w	r2, r3, #4
 8005a08:	6022      	str	r2, [r4, #0]
 8005a0a:	f04f 0900 	mov.w	r9, #0
 8005a0e:	9700      	str	r7, [sp, #0]
 8005a10:	4633      	mov	r3, r6
 8005a12:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a14:	4621      	mov	r1, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 f9d8 	bl	8005dcc <_printf_common>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f040 8090 	bne.w	8005b42 <_printf_float+0x1e2>
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	b00d      	add	sp, #52	; 0x34
 8005a28:	ecbd 8b02 	vpop	{d8}
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	4649      	mov	r1, r9
 8005a38:	f7fb f880 	bl	8000b3c <__aeabi_dcmpun>
 8005a3c:	b140      	cbz	r0, 8005a50 <_printf_float+0xf0>
 8005a3e:	464b      	mov	r3, r9
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	bfbc      	itt	lt
 8005a44:	232d      	movlt	r3, #45	; 0x2d
 8005a46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a4a:	487f      	ldr	r0, [pc, #508]	; (8005c48 <_printf_float+0x2e8>)
 8005a4c:	4b7f      	ldr	r3, [pc, #508]	; (8005c4c <_printf_float+0x2ec>)
 8005a4e:	e7d1      	b.n	80059f4 <_printf_float+0x94>
 8005a50:	6863      	ldr	r3, [r4, #4]
 8005a52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a56:	9206      	str	r2, [sp, #24]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	d13f      	bne.n	8005adc <_printf_float+0x17c>
 8005a5c:	2306      	movs	r3, #6
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	9b05      	ldr	r3, [sp, #20]
 8005a62:	6861      	ldr	r1, [r4, #4]
 8005a64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9303      	str	r3, [sp, #12]
 8005a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a72:	ab09      	add	r3, sp, #36	; 0x24
 8005a74:	ec49 8b10 	vmov	d0, r8, r9
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	6022      	str	r2, [r4, #0]
 8005a7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a80:	4628      	mov	r0, r5
 8005a82:	f7ff fecd 	bl	8005820 <__cvt>
 8005a86:	9b06      	ldr	r3, [sp, #24]
 8005a88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a8a:	2b47      	cmp	r3, #71	; 0x47
 8005a8c:	4680      	mov	r8, r0
 8005a8e:	d108      	bne.n	8005aa2 <_printf_float+0x142>
 8005a90:	1cc8      	adds	r0, r1, #3
 8005a92:	db02      	blt.n	8005a9a <_printf_float+0x13a>
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	4299      	cmp	r1, r3
 8005a98:	dd41      	ble.n	8005b1e <_printf_float+0x1be>
 8005a9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a9e:	fa5f fb8b 	uxtb.w	fp, fp
 8005aa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005aa6:	d820      	bhi.n	8005aea <_printf_float+0x18a>
 8005aa8:	3901      	subs	r1, #1
 8005aaa:	465a      	mov	r2, fp
 8005aac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8005ab2:	f7ff ff17 	bl	80058e4 <__exponent>
 8005ab6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab8:	1813      	adds	r3, r2, r0
 8005aba:	2a01      	cmp	r2, #1
 8005abc:	4681      	mov	r9, r0
 8005abe:	6123      	str	r3, [r4, #16]
 8005ac0:	dc02      	bgt.n	8005ac8 <_printf_float+0x168>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	07d2      	lsls	r2, r2, #31
 8005ac6:	d501      	bpl.n	8005acc <_printf_float+0x16c>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	6123      	str	r3, [r4, #16]
 8005acc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d09c      	beq.n	8005a0e <_printf_float+0xae>
 8005ad4:	232d      	movs	r3, #45	; 0x2d
 8005ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ada:	e798      	b.n	8005a0e <_printf_float+0xae>
 8005adc:	9a06      	ldr	r2, [sp, #24]
 8005ade:	2a47      	cmp	r2, #71	; 0x47
 8005ae0:	d1be      	bne.n	8005a60 <_printf_float+0x100>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1bc      	bne.n	8005a60 <_printf_float+0x100>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e7b9      	b.n	8005a5e <_printf_float+0xfe>
 8005aea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005aee:	d118      	bne.n	8005b22 <_printf_float+0x1c2>
 8005af0:	2900      	cmp	r1, #0
 8005af2:	6863      	ldr	r3, [r4, #4]
 8005af4:	dd0b      	ble.n	8005b0e <_printf_float+0x1ae>
 8005af6:	6121      	str	r1, [r4, #16]
 8005af8:	b913      	cbnz	r3, 8005b00 <_printf_float+0x1a0>
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	07d0      	lsls	r0, r2, #31
 8005afe:	d502      	bpl.n	8005b06 <_printf_float+0x1a6>
 8005b00:	3301      	adds	r3, #1
 8005b02:	440b      	add	r3, r1
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b08:	f04f 0900 	mov.w	r9, #0
 8005b0c:	e7de      	b.n	8005acc <_printf_float+0x16c>
 8005b0e:	b913      	cbnz	r3, 8005b16 <_printf_float+0x1b6>
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	07d2      	lsls	r2, r2, #31
 8005b14:	d501      	bpl.n	8005b1a <_printf_float+0x1ba>
 8005b16:	3302      	adds	r3, #2
 8005b18:	e7f4      	b.n	8005b04 <_printf_float+0x1a4>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e7f2      	b.n	8005b04 <_printf_float+0x1a4>
 8005b1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	4299      	cmp	r1, r3
 8005b26:	db05      	blt.n	8005b34 <_printf_float+0x1d4>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	6121      	str	r1, [r4, #16]
 8005b2c:	07d8      	lsls	r0, r3, #31
 8005b2e:	d5ea      	bpl.n	8005b06 <_printf_float+0x1a6>
 8005b30:	1c4b      	adds	r3, r1, #1
 8005b32:	e7e7      	b.n	8005b04 <_printf_float+0x1a4>
 8005b34:	2900      	cmp	r1, #0
 8005b36:	bfd4      	ite	le
 8005b38:	f1c1 0202 	rsble	r2, r1, #2
 8005b3c:	2201      	movgt	r2, #1
 8005b3e:	4413      	add	r3, r2
 8005b40:	e7e0      	b.n	8005b04 <_printf_float+0x1a4>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	055a      	lsls	r2, r3, #21
 8005b46:	d407      	bmi.n	8005b58 <_printf_float+0x1f8>
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	4642      	mov	r2, r8
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	47b8      	blx	r7
 8005b52:	3001      	adds	r0, #1
 8005b54:	d12c      	bne.n	8005bb0 <_printf_float+0x250>
 8005b56:	e764      	b.n	8005a22 <_printf_float+0xc2>
 8005b58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b5c:	f240 80e0 	bls.w	8005d20 <_printf_float+0x3c0>
 8005b60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b64:	2200      	movs	r2, #0
 8005b66:	2300      	movs	r3, #0
 8005b68:	f7fa ffb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d034      	beq.n	8005bda <_printf_float+0x27a>
 8005b70:	4a37      	ldr	r2, [pc, #220]	; (8005c50 <_printf_float+0x2f0>)
 8005b72:	2301      	movs	r3, #1
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b8      	blx	r7
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	f43f af51 	beq.w	8005a22 <_printf_float+0xc2>
 8005b80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	db02      	blt.n	8005b8e <_printf_float+0x22e>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	07d8      	lsls	r0, r3, #31
 8005b8c:	d510      	bpl.n	8005bb0 <_printf_float+0x250>
 8005b8e:	ee18 3a10 	vmov	r3, s16
 8005b92:	4652      	mov	r2, sl
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af41 	beq.w	8005a22 <_printf_float+0xc2>
 8005ba0:	f04f 0800 	mov.w	r8, #0
 8005ba4:	f104 091a 	add.w	r9, r4, #26
 8005ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	4543      	cmp	r3, r8
 8005bae:	dc09      	bgt.n	8005bc4 <_printf_float+0x264>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	079b      	lsls	r3, r3, #30
 8005bb4:	f100 8105 	bmi.w	8005dc2 <_printf_float+0x462>
 8005bb8:	68e0      	ldr	r0, [r4, #12]
 8005bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bbc:	4298      	cmp	r0, r3
 8005bbe:	bfb8      	it	lt
 8005bc0:	4618      	movlt	r0, r3
 8005bc2:	e730      	b.n	8005a26 <_printf_float+0xc6>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	464a      	mov	r2, r9
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f af27 	beq.w	8005a22 <_printf_float+0xc2>
 8005bd4:	f108 0801 	add.w	r8, r8, #1
 8005bd8:	e7e6      	b.n	8005ba8 <_printf_float+0x248>
 8005bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	dc39      	bgt.n	8005c54 <_printf_float+0x2f4>
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <_printf_float+0x2f0>)
 8005be2:	2301      	movs	r3, #1
 8005be4:	4631      	mov	r1, r6
 8005be6:	4628      	mov	r0, r5
 8005be8:	47b8      	blx	r7
 8005bea:	3001      	adds	r0, #1
 8005bec:	f43f af19 	beq.w	8005a22 <_printf_float+0xc2>
 8005bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d102      	bne.n	8005bfe <_printf_float+0x29e>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	07d9      	lsls	r1, r3, #31
 8005bfc:	d5d8      	bpl.n	8005bb0 <_printf_float+0x250>
 8005bfe:	ee18 3a10 	vmov	r3, s16
 8005c02:	4652      	mov	r2, sl
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af09 	beq.w	8005a22 <_printf_float+0xc2>
 8005c10:	f04f 0900 	mov.w	r9, #0
 8005c14:	f104 0a1a 	add.w	sl, r4, #26
 8005c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c1a:	425b      	negs	r3, r3
 8005c1c:	454b      	cmp	r3, r9
 8005c1e:	dc01      	bgt.n	8005c24 <_printf_float+0x2c4>
 8005c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c22:	e792      	b.n	8005b4a <_printf_float+0x1ea>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4652      	mov	r2, sl
 8005c28:	4631      	mov	r1, r6
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	47b8      	blx	r7
 8005c2e:	3001      	adds	r0, #1
 8005c30:	f43f aef7 	beq.w	8005a22 <_printf_float+0xc2>
 8005c34:	f109 0901 	add.w	r9, r9, #1
 8005c38:	e7ee      	b.n	8005c18 <_printf_float+0x2b8>
 8005c3a:	bf00      	nop
 8005c3c:	7fefffff 	.word	0x7fefffff
 8005c40:	08008b0c 	.word	0x08008b0c
 8005c44:	08008b10 	.word	0x08008b10
 8005c48:	08008b18 	.word	0x08008b18
 8005c4c:	08008b14 	.word	0x08008b14
 8005c50:	08008b1c 	.word	0x08008b1c
 8005c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	bfa8      	it	ge
 8005c5c:	461a      	movge	r2, r3
 8005c5e:	2a00      	cmp	r2, #0
 8005c60:	4691      	mov	r9, r2
 8005c62:	dc37      	bgt.n	8005cd4 <_printf_float+0x374>
 8005c64:	f04f 0b00 	mov.w	fp, #0
 8005c68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c6c:	f104 021a 	add.w	r2, r4, #26
 8005c70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	eba3 0309 	sub.w	r3, r3, r9
 8005c78:	455b      	cmp	r3, fp
 8005c7a:	dc33      	bgt.n	8005ce4 <_printf_float+0x384>
 8005c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c80:	429a      	cmp	r2, r3
 8005c82:	db3b      	blt.n	8005cfc <_printf_float+0x39c>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d438      	bmi.n	8005cfc <_printf_float+0x39c>
 8005c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c8c:	9b05      	ldr	r3, [sp, #20]
 8005c8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	eba2 0901 	sub.w	r9, r2, r1
 8005c96:	4599      	cmp	r9, r3
 8005c98:	bfa8      	it	ge
 8005c9a:	4699      	movge	r9, r3
 8005c9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ca0:	dc35      	bgt.n	8005d0e <_printf_float+0x3ae>
 8005ca2:	f04f 0800 	mov.w	r8, #0
 8005ca6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005caa:	f104 0a1a 	add.w	sl, r4, #26
 8005cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	eba3 0309 	sub.w	r3, r3, r9
 8005cb8:	4543      	cmp	r3, r8
 8005cba:	f77f af79 	ble.w	8005bb0 <_printf_float+0x250>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4652      	mov	r2, sl
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f aeaa 	beq.w	8005a22 <_printf_float+0xc2>
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	e7ec      	b.n	8005cae <_printf_float+0x34e>
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	4631      	mov	r1, r6
 8005cd8:	4642      	mov	r2, r8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d1c0      	bne.n	8005c64 <_printf_float+0x304>
 8005ce2:	e69e      	b.n	8005a22 <_printf_float+0xc2>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	9205      	str	r2, [sp, #20]
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f ae97 	beq.w	8005a22 <_printf_float+0xc2>
 8005cf4:	9a05      	ldr	r2, [sp, #20]
 8005cf6:	f10b 0b01 	add.w	fp, fp, #1
 8005cfa:	e7b9      	b.n	8005c70 <_printf_float+0x310>
 8005cfc:	ee18 3a10 	vmov	r3, s16
 8005d00:	4652      	mov	r2, sl
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d1be      	bne.n	8005c8a <_printf_float+0x32a>
 8005d0c:	e689      	b.n	8005a22 <_printf_float+0xc2>
 8005d0e:	9a05      	ldr	r2, [sp, #20]
 8005d10:	464b      	mov	r3, r9
 8005d12:	4442      	add	r2, r8
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d1c1      	bne.n	8005ca2 <_printf_float+0x342>
 8005d1e:	e680      	b.n	8005a22 <_printf_float+0xc2>
 8005d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d22:	2a01      	cmp	r2, #1
 8005d24:	dc01      	bgt.n	8005d2a <_printf_float+0x3ca>
 8005d26:	07db      	lsls	r3, r3, #31
 8005d28:	d538      	bpl.n	8005d9c <_printf_float+0x43c>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4628      	mov	r0, r5
 8005d32:	47b8      	blx	r7
 8005d34:	3001      	adds	r0, #1
 8005d36:	f43f ae74 	beq.w	8005a22 <_printf_float+0xc2>
 8005d3a:	ee18 3a10 	vmov	r3, s16
 8005d3e:	4652      	mov	r2, sl
 8005d40:	4631      	mov	r1, r6
 8005d42:	4628      	mov	r0, r5
 8005d44:	47b8      	blx	r7
 8005d46:	3001      	adds	r0, #1
 8005d48:	f43f ae6b 	beq.w	8005a22 <_printf_float+0xc2>
 8005d4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	f7fa fec0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d58:	b9d8      	cbnz	r0, 8005d92 <_printf_float+0x432>
 8005d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d5c:	f108 0201 	add.w	r2, r8, #1
 8005d60:	3b01      	subs	r3, #1
 8005d62:	4631      	mov	r1, r6
 8005d64:	4628      	mov	r0, r5
 8005d66:	47b8      	blx	r7
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d10e      	bne.n	8005d8a <_printf_float+0x42a>
 8005d6c:	e659      	b.n	8005a22 <_printf_float+0xc2>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4652      	mov	r2, sl
 8005d72:	4631      	mov	r1, r6
 8005d74:	4628      	mov	r0, r5
 8005d76:	47b8      	blx	r7
 8005d78:	3001      	adds	r0, #1
 8005d7a:	f43f ae52 	beq.w	8005a22 <_printf_float+0xc2>
 8005d7e:	f108 0801 	add.w	r8, r8, #1
 8005d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4543      	cmp	r3, r8
 8005d88:	dcf1      	bgt.n	8005d6e <_printf_float+0x40e>
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d90:	e6dc      	b.n	8005b4c <_printf_float+0x1ec>
 8005d92:	f04f 0800 	mov.w	r8, #0
 8005d96:	f104 0a1a 	add.w	sl, r4, #26
 8005d9a:	e7f2      	b.n	8005d82 <_printf_float+0x422>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4642      	mov	r2, r8
 8005da0:	e7df      	b.n	8005d62 <_printf_float+0x402>
 8005da2:	2301      	movs	r3, #1
 8005da4:	464a      	mov	r2, r9
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f ae38 	beq.w	8005a22 <_printf_float+0xc2>
 8005db2:	f108 0801 	add.w	r8, r8, #1
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dba:	1a5b      	subs	r3, r3, r1
 8005dbc:	4543      	cmp	r3, r8
 8005dbe:	dcf0      	bgt.n	8005da2 <_printf_float+0x442>
 8005dc0:	e6fa      	b.n	8005bb8 <_printf_float+0x258>
 8005dc2:	f04f 0800 	mov.w	r8, #0
 8005dc6:	f104 0919 	add.w	r9, r4, #25
 8005dca:	e7f4      	b.n	8005db6 <_printf_float+0x456>

08005dcc <_printf_common>:
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	4699      	mov	r9, r3
 8005dd4:	688a      	ldr	r2, [r1, #8]
 8005dd6:	690b      	ldr	r3, [r1, #16]
 8005dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	bfb8      	it	lt
 8005de0:	4613      	movlt	r3, r2
 8005de2:	6033      	str	r3, [r6, #0]
 8005de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de8:	4607      	mov	r7, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	b10a      	cbz	r2, 8005df2 <_printf_common+0x26>
 8005dee:	3301      	adds	r3, #1
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	0699      	lsls	r1, r3, #26
 8005df6:	bf42      	ittt	mi
 8005df8:	6833      	ldrmi	r3, [r6, #0]
 8005dfa:	3302      	addmi	r3, #2
 8005dfc:	6033      	strmi	r3, [r6, #0]
 8005dfe:	6825      	ldr	r5, [r4, #0]
 8005e00:	f015 0506 	ands.w	r5, r5, #6
 8005e04:	d106      	bne.n	8005e14 <_printf_common+0x48>
 8005e06:	f104 0a19 	add.w	sl, r4, #25
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	6832      	ldr	r2, [r6, #0]
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	42ab      	cmp	r3, r5
 8005e12:	dc26      	bgt.n	8005e62 <_printf_common+0x96>
 8005e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e18:	1e13      	subs	r3, r2, #0
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	bf18      	it	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	0692      	lsls	r2, r2, #26
 8005e22:	d42b      	bmi.n	8005e7c <_printf_common+0xb0>
 8005e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d01e      	beq.n	8005e70 <_printf_common+0xa4>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	68e5      	ldr	r5, [r4, #12]
 8005e36:	6832      	ldr	r2, [r6, #0]
 8005e38:	f003 0306 	and.w	r3, r3, #6
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	bf08      	it	eq
 8005e40:	1aad      	subeq	r5, r5, r2
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	6922      	ldr	r2, [r4, #16]
 8005e46:	bf0c      	ite	eq
 8005e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e4c:	2500      	movne	r5, #0
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	bfc4      	itt	gt
 8005e52:	1a9b      	subgt	r3, r3, r2
 8005e54:	18ed      	addgt	r5, r5, r3
 8005e56:	2600      	movs	r6, #0
 8005e58:	341a      	adds	r4, #26
 8005e5a:	42b5      	cmp	r5, r6
 8005e5c:	d11a      	bne.n	8005e94 <_printf_common+0xc8>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e008      	b.n	8005e74 <_printf_common+0xa8>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4652      	mov	r2, sl
 8005e66:	4649      	mov	r1, r9
 8005e68:	4638      	mov	r0, r7
 8005e6a:	47c0      	blx	r8
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d103      	bne.n	8005e78 <_printf_common+0xac>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e78:	3501      	adds	r5, #1
 8005e7a:	e7c6      	b.n	8005e0a <_printf_common+0x3e>
 8005e7c:	18e1      	adds	r1, r4, r3
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	2030      	movs	r0, #48	; 0x30
 8005e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e86:	4422      	add	r2, r4
 8005e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e90:	3302      	adds	r3, #2
 8005e92:	e7c7      	b.n	8005e24 <_printf_common+0x58>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4622      	mov	r2, r4
 8005e98:	4649      	mov	r1, r9
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0e6      	beq.n	8005e70 <_printf_common+0xa4>
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7d9      	b.n	8005e5a <_printf_common+0x8e>
	...

08005ea8 <_printf_i>:
 8005ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	460c      	mov	r4, r1
 8005eae:	4691      	mov	r9, r2
 8005eb0:	7e27      	ldrb	r7, [r4, #24]
 8005eb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005eb4:	2f78      	cmp	r7, #120	; 0x78
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	469a      	mov	sl, r3
 8005eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ebe:	d807      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ec0:	2f62      	cmp	r7, #98	; 0x62
 8005ec2:	d80a      	bhi.n	8005eda <_printf_i+0x32>
 8005ec4:	2f00      	cmp	r7, #0
 8005ec6:	f000 80d8 	beq.w	800607a <_printf_i+0x1d2>
 8005eca:	2f58      	cmp	r7, #88	; 0x58
 8005ecc:	f000 80a3 	beq.w	8006016 <_printf_i+0x16e>
 8005ed0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ed8:	e03a      	b.n	8005f50 <_printf_i+0xa8>
 8005eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ede:	2b15      	cmp	r3, #21
 8005ee0:	d8f6      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ee2:	a001      	add	r0, pc, #4	; (adr r0, 8005ee8 <_printf_i+0x40>)
 8005ee4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f55 	.word	0x08005f55
 8005ef0:	08005ed1 	.word	0x08005ed1
 8005ef4:	08005ed1 	.word	0x08005ed1
 8005ef8:	08005ed1 	.word	0x08005ed1
 8005efc:	08005ed1 	.word	0x08005ed1
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005ed1 	.word	0x08005ed1
 8005f08:	08005ed1 	.word	0x08005ed1
 8005f0c:	08005ed1 	.word	0x08005ed1
 8005f10:	08005ed1 	.word	0x08005ed1
 8005f14:	08006061 	.word	0x08006061
 8005f18:	08005f85 	.word	0x08005f85
 8005f1c:	08006043 	.word	0x08006043
 8005f20:	08005ed1 	.word	0x08005ed1
 8005f24:	08005ed1 	.word	0x08005ed1
 8005f28:	08006083 	.word	0x08006083
 8005f2c:	08005ed1 	.word	0x08005ed1
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005ed1 	.word	0x08005ed1
 8005f38:	08005ed1 	.word	0x08005ed1
 8005f3c:	0800604b 	.word	0x0800604b
 8005f40:	680b      	ldr	r3, [r1, #0]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	600a      	str	r2, [r1, #0]
 8005f48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0a3      	b.n	800609c <_printf_i+0x1f4>
 8005f54:	6825      	ldr	r5, [r4, #0]
 8005f56:	6808      	ldr	r0, [r1, #0]
 8005f58:	062e      	lsls	r6, r5, #24
 8005f5a:	f100 0304 	add.w	r3, r0, #4
 8005f5e:	d50a      	bpl.n	8005f76 <_printf_i+0xce>
 8005f60:	6805      	ldr	r5, [r0, #0]
 8005f62:	600b      	str	r3, [r1, #0]
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	da03      	bge.n	8005f70 <_printf_i+0xc8>
 8005f68:	232d      	movs	r3, #45	; 0x2d
 8005f6a:	426d      	negs	r5, r5
 8005f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f70:	485e      	ldr	r0, [pc, #376]	; (80060ec <_printf_i+0x244>)
 8005f72:	230a      	movs	r3, #10
 8005f74:	e019      	b.n	8005faa <_printf_i+0x102>
 8005f76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f7a:	6805      	ldr	r5, [r0, #0]
 8005f7c:	600b      	str	r3, [r1, #0]
 8005f7e:	bf18      	it	ne
 8005f80:	b22d      	sxthne	r5, r5
 8005f82:	e7ef      	b.n	8005f64 <_printf_i+0xbc>
 8005f84:	680b      	ldr	r3, [r1, #0]
 8005f86:	6825      	ldr	r5, [r4, #0]
 8005f88:	1d18      	adds	r0, r3, #4
 8005f8a:	6008      	str	r0, [r1, #0]
 8005f8c:	0628      	lsls	r0, r5, #24
 8005f8e:	d501      	bpl.n	8005f94 <_printf_i+0xec>
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	e002      	b.n	8005f9a <_printf_i+0xf2>
 8005f94:	0669      	lsls	r1, r5, #25
 8005f96:	d5fb      	bpl.n	8005f90 <_printf_i+0xe8>
 8005f98:	881d      	ldrh	r5, [r3, #0]
 8005f9a:	4854      	ldr	r0, [pc, #336]	; (80060ec <_printf_i+0x244>)
 8005f9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f9e:	bf0c      	ite	eq
 8005fa0:	2308      	moveq	r3, #8
 8005fa2:	230a      	movne	r3, #10
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005faa:	6866      	ldr	r6, [r4, #4]
 8005fac:	60a6      	str	r6, [r4, #8]
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	bfa2      	ittt	ge
 8005fb2:	6821      	ldrge	r1, [r4, #0]
 8005fb4:	f021 0104 	bicge.w	r1, r1, #4
 8005fb8:	6021      	strge	r1, [r4, #0]
 8005fba:	b90d      	cbnz	r5, 8005fc0 <_printf_i+0x118>
 8005fbc:	2e00      	cmp	r6, #0
 8005fbe:	d04d      	beq.n	800605c <_printf_i+0x1b4>
 8005fc0:	4616      	mov	r6, r2
 8005fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8005fca:	5dc7      	ldrb	r7, [r0, r7]
 8005fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fd0:	462f      	mov	r7, r5
 8005fd2:	42bb      	cmp	r3, r7
 8005fd4:	460d      	mov	r5, r1
 8005fd6:	d9f4      	bls.n	8005fc2 <_printf_i+0x11a>
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d10b      	bne.n	8005ff4 <_printf_i+0x14c>
 8005fdc:	6823      	ldr	r3, [r4, #0]
 8005fde:	07df      	lsls	r7, r3, #31
 8005fe0:	d508      	bpl.n	8005ff4 <_printf_i+0x14c>
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	6861      	ldr	r1, [r4, #4]
 8005fe6:	4299      	cmp	r1, r3
 8005fe8:	bfde      	ittt	le
 8005fea:	2330      	movle	r3, #48	; 0x30
 8005fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ff0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ff4:	1b92      	subs	r2, r2, r6
 8005ff6:	6122      	str	r2, [r4, #16]
 8005ff8:	f8cd a000 	str.w	sl, [sp]
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	aa03      	add	r2, sp, #12
 8006000:	4621      	mov	r1, r4
 8006002:	4640      	mov	r0, r8
 8006004:	f7ff fee2 	bl	8005dcc <_printf_common>
 8006008:	3001      	adds	r0, #1
 800600a:	d14c      	bne.n	80060a6 <_printf_i+0x1fe>
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	b004      	add	sp, #16
 8006012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006016:	4835      	ldr	r0, [pc, #212]	; (80060ec <_printf_i+0x244>)
 8006018:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	680e      	ldr	r6, [r1, #0]
 8006020:	061f      	lsls	r7, r3, #24
 8006022:	f856 5b04 	ldr.w	r5, [r6], #4
 8006026:	600e      	str	r6, [r1, #0]
 8006028:	d514      	bpl.n	8006054 <_printf_i+0x1ac>
 800602a:	07d9      	lsls	r1, r3, #31
 800602c:	bf44      	itt	mi
 800602e:	f043 0320 	orrmi.w	r3, r3, #32
 8006032:	6023      	strmi	r3, [r4, #0]
 8006034:	b91d      	cbnz	r5, 800603e <_printf_i+0x196>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f023 0320 	bic.w	r3, r3, #32
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	2310      	movs	r3, #16
 8006040:	e7b0      	b.n	8005fa4 <_printf_i+0xfc>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	f043 0320 	orr.w	r3, r3, #32
 8006048:	6023      	str	r3, [r4, #0]
 800604a:	2378      	movs	r3, #120	; 0x78
 800604c:	4828      	ldr	r0, [pc, #160]	; (80060f0 <_printf_i+0x248>)
 800604e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006052:	e7e3      	b.n	800601c <_printf_i+0x174>
 8006054:	065e      	lsls	r6, r3, #25
 8006056:	bf48      	it	mi
 8006058:	b2ad      	uxthmi	r5, r5
 800605a:	e7e6      	b.n	800602a <_printf_i+0x182>
 800605c:	4616      	mov	r6, r2
 800605e:	e7bb      	b.n	8005fd8 <_printf_i+0x130>
 8006060:	680b      	ldr	r3, [r1, #0]
 8006062:	6826      	ldr	r6, [r4, #0]
 8006064:	6960      	ldr	r0, [r4, #20]
 8006066:	1d1d      	adds	r5, r3, #4
 8006068:	600d      	str	r5, [r1, #0]
 800606a:	0635      	lsls	r5, r6, #24
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	d501      	bpl.n	8006074 <_printf_i+0x1cc>
 8006070:	6018      	str	r0, [r3, #0]
 8006072:	e002      	b.n	800607a <_printf_i+0x1d2>
 8006074:	0671      	lsls	r1, r6, #25
 8006076:	d5fb      	bpl.n	8006070 <_printf_i+0x1c8>
 8006078:	8018      	strh	r0, [r3, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	6123      	str	r3, [r4, #16]
 800607e:	4616      	mov	r6, r2
 8006080:	e7ba      	b.n	8005ff8 <_printf_i+0x150>
 8006082:	680b      	ldr	r3, [r1, #0]
 8006084:	1d1a      	adds	r2, r3, #4
 8006086:	600a      	str	r2, [r1, #0]
 8006088:	681e      	ldr	r6, [r3, #0]
 800608a:	6862      	ldr	r2, [r4, #4]
 800608c:	2100      	movs	r1, #0
 800608e:	4630      	mov	r0, r6
 8006090:	f7fa f8ae 	bl	80001f0 <memchr>
 8006094:	b108      	cbz	r0, 800609a <_printf_i+0x1f2>
 8006096:	1b80      	subs	r0, r0, r6
 8006098:	6060      	str	r0, [r4, #4]
 800609a:	6863      	ldr	r3, [r4, #4]
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	2300      	movs	r3, #0
 80060a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a4:	e7a8      	b.n	8005ff8 <_printf_i+0x150>
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	4632      	mov	r2, r6
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	47d0      	blx	sl
 80060b0:	3001      	adds	r0, #1
 80060b2:	d0ab      	beq.n	800600c <_printf_i+0x164>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	079b      	lsls	r3, r3, #30
 80060b8:	d413      	bmi.n	80060e2 <_printf_i+0x23a>
 80060ba:	68e0      	ldr	r0, [r4, #12]
 80060bc:	9b03      	ldr	r3, [sp, #12]
 80060be:	4298      	cmp	r0, r3
 80060c0:	bfb8      	it	lt
 80060c2:	4618      	movlt	r0, r3
 80060c4:	e7a4      	b.n	8006010 <_printf_i+0x168>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4632      	mov	r2, r6
 80060ca:	4649      	mov	r1, r9
 80060cc:	4640      	mov	r0, r8
 80060ce:	47d0      	blx	sl
 80060d0:	3001      	adds	r0, #1
 80060d2:	d09b      	beq.n	800600c <_printf_i+0x164>
 80060d4:	3501      	adds	r5, #1
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	9903      	ldr	r1, [sp, #12]
 80060da:	1a5b      	subs	r3, r3, r1
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dcf2      	bgt.n	80060c6 <_printf_i+0x21e>
 80060e0:	e7eb      	b.n	80060ba <_printf_i+0x212>
 80060e2:	2500      	movs	r5, #0
 80060e4:	f104 0619 	add.w	r6, r4, #25
 80060e8:	e7f5      	b.n	80060d6 <_printf_i+0x22e>
 80060ea:	bf00      	nop
 80060ec:	08008b1e 	.word	0x08008b1e
 80060f0:	08008b2f 	.word	0x08008b2f

080060f4 <siprintf>:
 80060f4:	b40e      	push	{r1, r2, r3}
 80060f6:	b500      	push	{lr}
 80060f8:	b09c      	sub	sp, #112	; 0x70
 80060fa:	ab1d      	add	r3, sp, #116	; 0x74
 80060fc:	9002      	str	r0, [sp, #8]
 80060fe:	9006      	str	r0, [sp, #24]
 8006100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006104:	4809      	ldr	r0, [pc, #36]	; (800612c <siprintf+0x38>)
 8006106:	9107      	str	r1, [sp, #28]
 8006108:	9104      	str	r1, [sp, #16]
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <siprintf+0x3c>)
 800610c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006110:	9105      	str	r1, [sp, #20]
 8006112:	6800      	ldr	r0, [r0, #0]
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	a902      	add	r1, sp, #8
 8006118:	f001 fb40 	bl	800779c <_svfiprintf_r>
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
 8006122:	b01c      	add	sp, #112	; 0x70
 8006124:	f85d eb04 	ldr.w	lr, [sp], #4
 8006128:	b003      	add	sp, #12
 800612a:	4770      	bx	lr
 800612c:	2000000c 	.word	0x2000000c
 8006130:	ffff0208 	.word	0xffff0208

08006134 <strcat>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4602      	mov	r2, r0
 8006138:	7814      	ldrb	r4, [r2, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	3201      	adds	r2, #1
 800613e:	2c00      	cmp	r4, #0
 8006140:	d1fa      	bne.n	8006138 <strcat+0x4>
 8006142:	3b01      	subs	r3, #1
 8006144:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006148:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614c:	2a00      	cmp	r2, #0
 800614e:	d1f9      	bne.n	8006144 <strcat+0x10>
 8006150:	bd10      	pop	{r4, pc}

08006152 <quorem>:
 8006152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006156:	6903      	ldr	r3, [r0, #16]
 8006158:	690c      	ldr	r4, [r1, #16]
 800615a:	42a3      	cmp	r3, r4
 800615c:	4607      	mov	r7, r0
 800615e:	f2c0 8081 	blt.w	8006264 <quorem+0x112>
 8006162:	3c01      	subs	r4, #1
 8006164:	f101 0814 	add.w	r8, r1, #20
 8006168:	f100 0514 	add.w	r5, r0, #20
 800616c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800617a:	3301      	adds	r3, #1
 800617c:	429a      	cmp	r2, r3
 800617e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006182:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006186:	fbb2 f6f3 	udiv	r6, r2, r3
 800618a:	d331      	bcc.n	80061f0 <quorem+0x9e>
 800618c:	f04f 0e00 	mov.w	lr, #0
 8006190:	4640      	mov	r0, r8
 8006192:	46ac      	mov	ip, r5
 8006194:	46f2      	mov	sl, lr
 8006196:	f850 2b04 	ldr.w	r2, [r0], #4
 800619a:	b293      	uxth	r3, r2
 800619c:	fb06 e303 	mla	r3, r6, r3, lr
 80061a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ebaa 0303 	sub.w	r3, sl, r3
 80061aa:	0c12      	lsrs	r2, r2, #16
 80061ac:	f8dc a000 	ldr.w	sl, [ip]
 80061b0:	fb06 e202 	mla	r2, r6, r2, lr
 80061b4:	fa13 f38a 	uxtah	r3, r3, sl
 80061b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061bc:	fa1f fa82 	uxth.w	sl, r2
 80061c0:	f8dc 2000 	ldr.w	r2, [ip]
 80061c4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80061c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061d2:	4581      	cmp	r9, r0
 80061d4:	f84c 3b04 	str.w	r3, [ip], #4
 80061d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061dc:	d2db      	bcs.n	8006196 <quorem+0x44>
 80061de:	f855 300b 	ldr.w	r3, [r5, fp]
 80061e2:	b92b      	cbnz	r3, 80061f0 <quorem+0x9e>
 80061e4:	9b01      	ldr	r3, [sp, #4]
 80061e6:	3b04      	subs	r3, #4
 80061e8:	429d      	cmp	r5, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	d32e      	bcc.n	800624c <quorem+0xfa>
 80061ee:	613c      	str	r4, [r7, #16]
 80061f0:	4638      	mov	r0, r7
 80061f2:	f001 f8bd 	bl	8007370 <__mcmp>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	db24      	blt.n	8006244 <quorem+0xf2>
 80061fa:	3601      	adds	r6, #1
 80061fc:	4628      	mov	r0, r5
 80061fe:	f04f 0c00 	mov.w	ip, #0
 8006202:	f858 2b04 	ldr.w	r2, [r8], #4
 8006206:	f8d0 e000 	ldr.w	lr, [r0]
 800620a:	b293      	uxth	r3, r2
 800620c:	ebac 0303 	sub.w	r3, ip, r3
 8006210:	0c12      	lsrs	r2, r2, #16
 8006212:	fa13 f38e 	uxtah	r3, r3, lr
 8006216:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800621a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006224:	45c1      	cmp	r9, r8
 8006226:	f840 3b04 	str.w	r3, [r0], #4
 800622a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800622e:	d2e8      	bcs.n	8006202 <quorem+0xb0>
 8006230:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006234:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006238:	b922      	cbnz	r2, 8006244 <quorem+0xf2>
 800623a:	3b04      	subs	r3, #4
 800623c:	429d      	cmp	r5, r3
 800623e:	461a      	mov	r2, r3
 8006240:	d30a      	bcc.n	8006258 <quorem+0x106>
 8006242:	613c      	str	r4, [r7, #16]
 8006244:	4630      	mov	r0, r6
 8006246:	b003      	add	sp, #12
 8006248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	3b04      	subs	r3, #4
 8006250:	2a00      	cmp	r2, #0
 8006252:	d1cc      	bne.n	80061ee <quorem+0x9c>
 8006254:	3c01      	subs	r4, #1
 8006256:	e7c7      	b.n	80061e8 <quorem+0x96>
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	3b04      	subs	r3, #4
 800625c:	2a00      	cmp	r2, #0
 800625e:	d1f0      	bne.n	8006242 <quorem+0xf0>
 8006260:	3c01      	subs	r4, #1
 8006262:	e7eb      	b.n	800623c <quorem+0xea>
 8006264:	2000      	movs	r0, #0
 8006266:	e7ee      	b.n	8006246 <quorem+0xf4>

08006268 <_dtoa_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	ed2d 8b02 	vpush	{d8}
 8006270:	ec57 6b10 	vmov	r6, r7, d0
 8006274:	b095      	sub	sp, #84	; 0x54
 8006276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800627c:	9105      	str	r1, [sp, #20]
 800627e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006282:	4604      	mov	r4, r0
 8006284:	9209      	str	r2, [sp, #36]	; 0x24
 8006286:	930f      	str	r3, [sp, #60]	; 0x3c
 8006288:	b975      	cbnz	r5, 80062a8 <_dtoa_r+0x40>
 800628a:	2010      	movs	r0, #16
 800628c:	f000 fddc 	bl	8006e48 <malloc>
 8006290:	4602      	mov	r2, r0
 8006292:	6260      	str	r0, [r4, #36]	; 0x24
 8006294:	b920      	cbnz	r0, 80062a0 <_dtoa_r+0x38>
 8006296:	4bb2      	ldr	r3, [pc, #712]	; (8006560 <_dtoa_r+0x2f8>)
 8006298:	21ea      	movs	r1, #234	; 0xea
 800629a:	48b2      	ldr	r0, [pc, #712]	; (8006564 <_dtoa_r+0x2fc>)
 800629c:	f001 fb8e 	bl	80079bc <__assert_func>
 80062a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062a4:	6005      	str	r5, [r0, #0]
 80062a6:	60c5      	str	r5, [r0, #12]
 80062a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062aa:	6819      	ldr	r1, [r3, #0]
 80062ac:	b151      	cbz	r1, 80062c4 <_dtoa_r+0x5c>
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	604a      	str	r2, [r1, #4]
 80062b2:	2301      	movs	r3, #1
 80062b4:	4093      	lsls	r3, r2
 80062b6:	608b      	str	r3, [r1, #8]
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 fe1b 	bl	8006ef4 <_Bfree>
 80062be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	1e3b      	subs	r3, r7, #0
 80062c6:	bfb9      	ittee	lt
 80062c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80062cc:	9303      	strlt	r3, [sp, #12]
 80062ce:	2300      	movge	r3, #0
 80062d0:	f8c8 3000 	strge.w	r3, [r8]
 80062d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80062d8:	4ba3      	ldr	r3, [pc, #652]	; (8006568 <_dtoa_r+0x300>)
 80062da:	bfbc      	itt	lt
 80062dc:	2201      	movlt	r2, #1
 80062de:	f8c8 2000 	strlt.w	r2, [r8]
 80062e2:	ea33 0309 	bics.w	r3, r3, r9
 80062e6:	d11b      	bne.n	8006320 <_dtoa_r+0xb8>
 80062e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062f4:	4333      	orrs	r3, r6
 80062f6:	f000 857a 	beq.w	8006dee <_dtoa_r+0xb86>
 80062fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062fc:	b963      	cbnz	r3, 8006318 <_dtoa_r+0xb0>
 80062fe:	4b9b      	ldr	r3, [pc, #620]	; (800656c <_dtoa_r+0x304>)
 8006300:	e024      	b.n	800634c <_dtoa_r+0xe4>
 8006302:	4b9b      	ldr	r3, [pc, #620]	; (8006570 <_dtoa_r+0x308>)
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	9800      	ldr	r0, [sp, #0]
 800630e:	b015      	add	sp, #84	; 0x54
 8006310:	ecbd 8b02 	vpop	{d8}
 8006314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006318:	4b94      	ldr	r3, [pc, #592]	; (800656c <_dtoa_r+0x304>)
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	3303      	adds	r3, #3
 800631e:	e7f3      	b.n	8006308 <_dtoa_r+0xa0>
 8006320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	ec51 0b17 	vmov	r0, r1, d7
 800632a:	2300      	movs	r3, #0
 800632c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006330:	f7fa fbd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006334:	4680      	mov	r8, r0
 8006336:	b158      	cbz	r0, 8006350 <_dtoa_r+0xe8>
 8006338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800633a:	2301      	movs	r3, #1
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8551 	beq.w	8006de8 <_dtoa_r+0xb80>
 8006346:	488b      	ldr	r0, [pc, #556]	; (8006574 <_dtoa_r+0x30c>)
 8006348:	6018      	str	r0, [r3, #0]
 800634a:	1e43      	subs	r3, r0, #1
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	e7dd      	b.n	800630c <_dtoa_r+0xa4>
 8006350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006354:	aa12      	add	r2, sp, #72	; 0x48
 8006356:	a913      	add	r1, sp, #76	; 0x4c
 8006358:	4620      	mov	r0, r4
 800635a:	f001 f8ad 	bl	80074b8 <__d2b>
 800635e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006362:	4683      	mov	fp, r0
 8006364:	2d00      	cmp	r5, #0
 8006366:	d07c      	beq.n	8006462 <_dtoa_r+0x1fa>
 8006368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800636a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800637a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800637e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006382:	4b7d      	ldr	r3, [pc, #500]	; (8006578 <_dtoa_r+0x310>)
 8006384:	2200      	movs	r2, #0
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff85 	bl	8000298 <__aeabi_dsub>
 800638e:	a36e      	add	r3, pc, #440	; (adr r3, 8006548 <_dtoa_r+0x2e0>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f7fa f938 	bl	8000608 <__aeabi_dmul>
 8006398:	a36d      	add	r3, pc, #436	; (adr r3, 8006550 <_dtoa_r+0x2e8>)
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f7f9 ff7d 	bl	800029c <__adddf3>
 80063a2:	4606      	mov	r6, r0
 80063a4:	4628      	mov	r0, r5
 80063a6:	460f      	mov	r7, r1
 80063a8:	f7fa f8c4 	bl	8000534 <__aeabi_i2d>
 80063ac:	a36a      	add	r3, pc, #424	; (adr r3, 8006558 <_dtoa_r+0x2f0>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7fa f929 	bl	8000608 <__aeabi_dmul>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4630      	mov	r0, r6
 80063bc:	4639      	mov	r1, r7
 80063be:	f7f9 ff6d 	bl	800029c <__adddf3>
 80063c2:	4606      	mov	r6, r0
 80063c4:	460f      	mov	r7, r1
 80063c6:	f7fa fbcf 	bl	8000b68 <__aeabi_d2iz>
 80063ca:	2200      	movs	r2, #0
 80063cc:	4682      	mov	sl, r0
 80063ce:	2300      	movs	r3, #0
 80063d0:	4630      	mov	r0, r6
 80063d2:	4639      	mov	r1, r7
 80063d4:	f7fa fb8a 	bl	8000aec <__aeabi_dcmplt>
 80063d8:	b148      	cbz	r0, 80063ee <_dtoa_r+0x186>
 80063da:	4650      	mov	r0, sl
 80063dc:	f7fa f8aa 	bl	8000534 <__aeabi_i2d>
 80063e0:	4632      	mov	r2, r6
 80063e2:	463b      	mov	r3, r7
 80063e4:	f7fa fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e8:	b908      	cbnz	r0, 80063ee <_dtoa_r+0x186>
 80063ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063ee:	f1ba 0f16 	cmp.w	sl, #22
 80063f2:	d854      	bhi.n	800649e <_dtoa_r+0x236>
 80063f4:	4b61      	ldr	r3, [pc, #388]	; (800657c <_dtoa_r+0x314>)
 80063f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006402:	f7fa fb73 	bl	8000aec <__aeabi_dcmplt>
 8006406:	2800      	cmp	r0, #0
 8006408:	d04b      	beq.n	80064a2 <_dtoa_r+0x23a>
 800640a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800640e:	2300      	movs	r3, #0
 8006410:	930e      	str	r3, [sp, #56]	; 0x38
 8006412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006414:	1b5d      	subs	r5, r3, r5
 8006416:	1e6b      	subs	r3, r5, #1
 8006418:	9304      	str	r3, [sp, #16]
 800641a:	bf43      	ittte	mi
 800641c:	2300      	movmi	r3, #0
 800641e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006422:	9304      	strmi	r3, [sp, #16]
 8006424:	f04f 0800 	movpl.w	r8, #0
 8006428:	f1ba 0f00 	cmp.w	sl, #0
 800642c:	db3b      	blt.n	80064a6 <_dtoa_r+0x23e>
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006434:	4453      	add	r3, sl
 8006436:	9304      	str	r3, [sp, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	9306      	str	r3, [sp, #24]
 800643c:	9b05      	ldr	r3, [sp, #20]
 800643e:	2b09      	cmp	r3, #9
 8006440:	d869      	bhi.n	8006516 <_dtoa_r+0x2ae>
 8006442:	2b05      	cmp	r3, #5
 8006444:	bfc4      	itt	gt
 8006446:	3b04      	subgt	r3, #4
 8006448:	9305      	strgt	r3, [sp, #20]
 800644a:	9b05      	ldr	r3, [sp, #20]
 800644c:	f1a3 0302 	sub.w	r3, r3, #2
 8006450:	bfcc      	ite	gt
 8006452:	2500      	movgt	r5, #0
 8006454:	2501      	movle	r5, #1
 8006456:	2b03      	cmp	r3, #3
 8006458:	d869      	bhi.n	800652e <_dtoa_r+0x2c6>
 800645a:	e8df f003 	tbb	[pc, r3]
 800645e:	4e2c      	.short	0x4e2c
 8006460:	5a4c      	.short	0x5a4c
 8006462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006466:	441d      	add	r5, r3
 8006468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800646c:	2b20      	cmp	r3, #32
 800646e:	bfc1      	itttt	gt
 8006470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006478:	fa09 f303 	lslgt.w	r3, r9, r3
 800647c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006480:	bfda      	itte	le
 8006482:	f1c3 0320 	rsble	r3, r3, #32
 8006486:	fa06 f003 	lslle.w	r0, r6, r3
 800648a:	4318      	orrgt	r0, r3
 800648c:	f7fa f842 	bl	8000514 <__aeabi_ui2d>
 8006490:	2301      	movs	r3, #1
 8006492:	4606      	mov	r6, r0
 8006494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006498:	3d01      	subs	r5, #1
 800649a:	9310      	str	r3, [sp, #64]	; 0x40
 800649c:	e771      	b.n	8006382 <_dtoa_r+0x11a>
 800649e:	2301      	movs	r3, #1
 80064a0:	e7b6      	b.n	8006410 <_dtoa_r+0x1a8>
 80064a2:	900e      	str	r0, [sp, #56]	; 0x38
 80064a4:	e7b5      	b.n	8006412 <_dtoa_r+0x1aa>
 80064a6:	f1ca 0300 	rsb	r3, sl, #0
 80064aa:	9306      	str	r3, [sp, #24]
 80064ac:	2300      	movs	r3, #0
 80064ae:	eba8 080a 	sub.w	r8, r8, sl
 80064b2:	930d      	str	r3, [sp, #52]	; 0x34
 80064b4:	e7c2      	b.n	800643c <_dtoa_r+0x1d4>
 80064b6:	2300      	movs	r3, #0
 80064b8:	9308      	str	r3, [sp, #32]
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc39      	bgt.n	8006534 <_dtoa_r+0x2cc>
 80064c0:	f04f 0901 	mov.w	r9, #1
 80064c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80064c8:	464b      	mov	r3, r9
 80064ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80064ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064d0:	2200      	movs	r2, #0
 80064d2:	6042      	str	r2, [r0, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	f102 0614 	add.w	r6, r2, #20
 80064da:	429e      	cmp	r6, r3
 80064dc:	6841      	ldr	r1, [r0, #4]
 80064de:	d92f      	bls.n	8006540 <_dtoa_r+0x2d8>
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fcc7 	bl	8006e74 <_Balloc>
 80064e6:	9000      	str	r0, [sp, #0]
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d14b      	bne.n	8006584 <_dtoa_r+0x31c>
 80064ec:	4b24      	ldr	r3, [pc, #144]	; (8006580 <_dtoa_r+0x318>)
 80064ee:	4602      	mov	r2, r0
 80064f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064f4:	e6d1      	b.n	800629a <_dtoa_r+0x32>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7de      	b.n	80064b8 <_dtoa_r+0x250>
 80064fa:	2300      	movs	r3, #0
 80064fc:	9308      	str	r3, [sp, #32]
 80064fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006500:	eb0a 0903 	add.w	r9, sl, r3
 8006504:	f109 0301 	add.w	r3, r9, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	bfb8      	it	lt
 800650e:	2301      	movlt	r3, #1
 8006510:	e7dd      	b.n	80064ce <_dtoa_r+0x266>
 8006512:	2301      	movs	r3, #1
 8006514:	e7f2      	b.n	80064fc <_dtoa_r+0x294>
 8006516:	2501      	movs	r5, #1
 8006518:	2300      	movs	r3, #0
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	9508      	str	r5, [sp, #32]
 800651e:	f04f 39ff 	mov.w	r9, #4294967295
 8006522:	2200      	movs	r2, #0
 8006524:	f8cd 9004 	str.w	r9, [sp, #4]
 8006528:	2312      	movs	r3, #18
 800652a:	9209      	str	r2, [sp, #36]	; 0x24
 800652c:	e7cf      	b.n	80064ce <_dtoa_r+0x266>
 800652e:	2301      	movs	r3, #1
 8006530:	9308      	str	r3, [sp, #32]
 8006532:	e7f4      	b.n	800651e <_dtoa_r+0x2b6>
 8006534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006538:	f8cd 9004 	str.w	r9, [sp, #4]
 800653c:	464b      	mov	r3, r9
 800653e:	e7c6      	b.n	80064ce <_dtoa_r+0x266>
 8006540:	3101      	adds	r1, #1
 8006542:	6041      	str	r1, [r0, #4]
 8006544:	0052      	lsls	r2, r2, #1
 8006546:	e7c6      	b.n	80064d6 <_dtoa_r+0x26e>
 8006548:	636f4361 	.word	0x636f4361
 800654c:	3fd287a7 	.word	0x3fd287a7
 8006550:	8b60c8b3 	.word	0x8b60c8b3
 8006554:	3fc68a28 	.word	0x3fc68a28
 8006558:	509f79fb 	.word	0x509f79fb
 800655c:	3fd34413 	.word	0x3fd34413
 8006560:	08008b4d 	.word	0x08008b4d
 8006564:	08008b64 	.word	0x08008b64
 8006568:	7ff00000 	.word	0x7ff00000
 800656c:	08008b49 	.word	0x08008b49
 8006570:	08008b40 	.word	0x08008b40
 8006574:	08008b1d 	.word	0x08008b1d
 8006578:	3ff80000 	.word	0x3ff80000
 800657c:	08008c60 	.word	0x08008c60
 8006580:	08008bc3 	.word	0x08008bc3
 8006584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006586:	9a00      	ldr	r2, [sp, #0]
 8006588:	601a      	str	r2, [r3, #0]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	2b0e      	cmp	r3, #14
 800658e:	f200 80ad 	bhi.w	80066ec <_dtoa_r+0x484>
 8006592:	2d00      	cmp	r5, #0
 8006594:	f000 80aa 	beq.w	80066ec <_dtoa_r+0x484>
 8006598:	f1ba 0f00 	cmp.w	sl, #0
 800659c:	dd36      	ble.n	800660c <_dtoa_r+0x3a4>
 800659e:	4ac3      	ldr	r2, [pc, #780]	; (80068ac <_dtoa_r+0x644>)
 80065a0:	f00a 030f 	and.w	r3, sl, #15
 80065a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065a8:	ed93 7b00 	vldr	d7, [r3]
 80065ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80065b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80065b4:	eeb0 8a47 	vmov.f32	s16, s14
 80065b8:	eef0 8a67 	vmov.f32	s17, s15
 80065bc:	d016      	beq.n	80065ec <_dtoa_r+0x384>
 80065be:	4bbc      	ldr	r3, [pc, #752]	; (80068b0 <_dtoa_r+0x648>)
 80065c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065c8:	f7fa f948 	bl	800085c <__aeabi_ddiv>
 80065cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065d0:	f007 070f 	and.w	r7, r7, #15
 80065d4:	2503      	movs	r5, #3
 80065d6:	4eb6      	ldr	r6, [pc, #728]	; (80068b0 <_dtoa_r+0x648>)
 80065d8:	b957      	cbnz	r7, 80065f0 <_dtoa_r+0x388>
 80065da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065de:	ec53 2b18 	vmov	r2, r3, d8
 80065e2:	f7fa f93b 	bl	800085c <__aeabi_ddiv>
 80065e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ea:	e029      	b.n	8006640 <_dtoa_r+0x3d8>
 80065ec:	2502      	movs	r5, #2
 80065ee:	e7f2      	b.n	80065d6 <_dtoa_r+0x36e>
 80065f0:	07f9      	lsls	r1, r7, #31
 80065f2:	d508      	bpl.n	8006606 <_dtoa_r+0x39e>
 80065f4:	ec51 0b18 	vmov	r0, r1, d8
 80065f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065fc:	f7fa f804 	bl	8000608 <__aeabi_dmul>
 8006600:	ec41 0b18 	vmov	d8, r0, r1
 8006604:	3501      	adds	r5, #1
 8006606:	107f      	asrs	r7, r7, #1
 8006608:	3608      	adds	r6, #8
 800660a:	e7e5      	b.n	80065d8 <_dtoa_r+0x370>
 800660c:	f000 80a6 	beq.w	800675c <_dtoa_r+0x4f4>
 8006610:	f1ca 0600 	rsb	r6, sl, #0
 8006614:	4ba5      	ldr	r3, [pc, #660]	; (80068ac <_dtoa_r+0x644>)
 8006616:	4fa6      	ldr	r7, [pc, #664]	; (80068b0 <_dtoa_r+0x648>)
 8006618:	f006 020f 	and.w	r2, r6, #15
 800661c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006628:	f7f9 ffee 	bl	8000608 <__aeabi_dmul>
 800662c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006630:	1136      	asrs	r6, r6, #4
 8006632:	2300      	movs	r3, #0
 8006634:	2502      	movs	r5, #2
 8006636:	2e00      	cmp	r6, #0
 8006638:	f040 8085 	bne.w	8006746 <_dtoa_r+0x4de>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1d2      	bne.n	80065e6 <_dtoa_r+0x37e>
 8006640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 808c 	beq.w	8006760 <_dtoa_r+0x4f8>
 8006648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800664c:	4b99      	ldr	r3, [pc, #612]	; (80068b4 <_dtoa_r+0x64c>)
 800664e:	2200      	movs	r2, #0
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7fa fa4a 	bl	8000aec <__aeabi_dcmplt>
 8006658:	2800      	cmp	r0, #0
 800665a:	f000 8081 	beq.w	8006760 <_dtoa_r+0x4f8>
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d07d      	beq.n	8006760 <_dtoa_r+0x4f8>
 8006664:	f1b9 0f00 	cmp.w	r9, #0
 8006668:	dd3c      	ble.n	80066e4 <_dtoa_r+0x47c>
 800666a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800666e:	9307      	str	r3, [sp, #28]
 8006670:	2200      	movs	r2, #0
 8006672:	4b91      	ldr	r3, [pc, #580]	; (80068b8 <_dtoa_r+0x650>)
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7f9 ffc6 	bl	8000608 <__aeabi_dmul>
 800667c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006680:	3501      	adds	r5, #1
 8006682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 ff52 	bl	8000534 <__aeabi_i2d>
 8006690:	4632      	mov	r2, r6
 8006692:	463b      	mov	r3, r7
 8006694:	f7f9 ffb8 	bl	8000608 <__aeabi_dmul>
 8006698:	4b88      	ldr	r3, [pc, #544]	; (80068bc <_dtoa_r+0x654>)
 800669a:	2200      	movs	r2, #0
 800669c:	f7f9 fdfe 	bl	800029c <__adddf3>
 80066a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80066a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a8:	9303      	str	r3, [sp, #12]
 80066aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d15c      	bne.n	800676a <_dtoa_r+0x502>
 80066b0:	4b83      	ldr	r3, [pc, #524]	; (80068c0 <_dtoa_r+0x658>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7f9 fdee 	bl	8000298 <__aeabi_dsub>
 80066bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066c0:	4606      	mov	r6, r0
 80066c2:	460f      	mov	r7, r1
 80066c4:	f7fa fa30 	bl	8000b28 <__aeabi_dcmpgt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f040 8296 	bne.w	8006bfa <_dtoa_r+0x992>
 80066ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80066d2:	4630      	mov	r0, r6
 80066d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d8:	4639      	mov	r1, r7
 80066da:	f7fa fa07 	bl	8000aec <__aeabi_dcmplt>
 80066de:	2800      	cmp	r0, #0
 80066e0:	f040 8288 	bne.w	8006bf4 <_dtoa_r+0x98c>
 80066e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f2c0 8158 	blt.w	80069a4 <_dtoa_r+0x73c>
 80066f4:	f1ba 0f0e 	cmp.w	sl, #14
 80066f8:	f300 8154 	bgt.w	80069a4 <_dtoa_r+0x73c>
 80066fc:	4b6b      	ldr	r3, [pc, #428]	; (80068ac <_dtoa_r+0x644>)
 80066fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006702:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	f280 80e3 	bge.w	80068d4 <_dtoa_r+0x66c>
 800670e:	9b01      	ldr	r3, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f300 80df 	bgt.w	80068d4 <_dtoa_r+0x66c>
 8006716:	f040 826d 	bne.w	8006bf4 <_dtoa_r+0x98c>
 800671a:	4b69      	ldr	r3, [pc, #420]	; (80068c0 <_dtoa_r+0x658>)
 800671c:	2200      	movs	r2, #0
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 ff71 	bl	8000608 <__aeabi_dmul>
 8006726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800672a:	f7fa f9f3 	bl	8000b14 <__aeabi_dcmpge>
 800672e:	9e01      	ldr	r6, [sp, #4]
 8006730:	4637      	mov	r7, r6
 8006732:	2800      	cmp	r0, #0
 8006734:	f040 8243 	bne.w	8006bbe <_dtoa_r+0x956>
 8006738:	9d00      	ldr	r5, [sp, #0]
 800673a:	2331      	movs	r3, #49	; 0x31
 800673c:	f805 3b01 	strb.w	r3, [r5], #1
 8006740:	f10a 0a01 	add.w	sl, sl, #1
 8006744:	e23f      	b.n	8006bc6 <_dtoa_r+0x95e>
 8006746:	07f2      	lsls	r2, r6, #31
 8006748:	d505      	bpl.n	8006756 <_dtoa_r+0x4ee>
 800674a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674e:	f7f9 ff5b 	bl	8000608 <__aeabi_dmul>
 8006752:	3501      	adds	r5, #1
 8006754:	2301      	movs	r3, #1
 8006756:	1076      	asrs	r6, r6, #1
 8006758:	3708      	adds	r7, #8
 800675a:	e76c      	b.n	8006636 <_dtoa_r+0x3ce>
 800675c:	2502      	movs	r5, #2
 800675e:	e76f      	b.n	8006640 <_dtoa_r+0x3d8>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	f8cd a01c 	str.w	sl, [sp, #28]
 8006766:	930c      	str	r3, [sp, #48]	; 0x30
 8006768:	e78d      	b.n	8006686 <_dtoa_r+0x41e>
 800676a:	9900      	ldr	r1, [sp, #0]
 800676c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800676e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006770:	4b4e      	ldr	r3, [pc, #312]	; (80068ac <_dtoa_r+0x644>)
 8006772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006776:	4401      	add	r1, r0
 8006778:	9102      	str	r1, [sp, #8]
 800677a:	9908      	ldr	r1, [sp, #32]
 800677c:	eeb0 8a47 	vmov.f32	s16, s14
 8006780:	eef0 8a67 	vmov.f32	s17, s15
 8006784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800678c:	2900      	cmp	r1, #0
 800678e:	d045      	beq.n	800681c <_dtoa_r+0x5b4>
 8006790:	494c      	ldr	r1, [pc, #304]	; (80068c4 <_dtoa_r+0x65c>)
 8006792:	2000      	movs	r0, #0
 8006794:	f7fa f862 	bl	800085c <__aeabi_ddiv>
 8006798:	ec53 2b18 	vmov	r2, r3, d8
 800679c:	f7f9 fd7c 	bl	8000298 <__aeabi_dsub>
 80067a0:	9d00      	ldr	r5, [sp, #0]
 80067a2:	ec41 0b18 	vmov	d8, r0, r1
 80067a6:	4639      	mov	r1, r7
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7fa f9dd 	bl	8000b68 <__aeabi_d2iz>
 80067ae:	900c      	str	r0, [sp, #48]	; 0x30
 80067b0:	f7f9 fec0 	bl	8000534 <__aeabi_i2d>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4630      	mov	r0, r6
 80067ba:	4639      	mov	r1, r7
 80067bc:	f7f9 fd6c 	bl	8000298 <__aeabi_dsub>
 80067c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067c2:	3330      	adds	r3, #48	; 0x30
 80067c4:	f805 3b01 	strb.w	r3, [r5], #1
 80067c8:	ec53 2b18 	vmov	r2, r3, d8
 80067cc:	4606      	mov	r6, r0
 80067ce:	460f      	mov	r7, r1
 80067d0:	f7fa f98c 	bl	8000aec <__aeabi_dcmplt>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d165      	bne.n	80068a4 <_dtoa_r+0x63c>
 80067d8:	4632      	mov	r2, r6
 80067da:	463b      	mov	r3, r7
 80067dc:	4935      	ldr	r1, [pc, #212]	; (80068b4 <_dtoa_r+0x64c>)
 80067de:	2000      	movs	r0, #0
 80067e0:	f7f9 fd5a 	bl	8000298 <__aeabi_dsub>
 80067e4:	ec53 2b18 	vmov	r2, r3, d8
 80067e8:	f7fa f980 	bl	8000aec <__aeabi_dcmplt>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	f040 80b9 	bne.w	8006964 <_dtoa_r+0x6fc>
 80067f2:	9b02      	ldr	r3, [sp, #8]
 80067f4:	429d      	cmp	r5, r3
 80067f6:	f43f af75 	beq.w	80066e4 <_dtoa_r+0x47c>
 80067fa:	4b2f      	ldr	r3, [pc, #188]	; (80068b8 <_dtoa_r+0x650>)
 80067fc:	ec51 0b18 	vmov	r0, r1, d8
 8006800:	2200      	movs	r2, #0
 8006802:	f7f9 ff01 	bl	8000608 <__aeabi_dmul>
 8006806:	4b2c      	ldr	r3, [pc, #176]	; (80068b8 <_dtoa_r+0x650>)
 8006808:	ec41 0b18 	vmov	d8, r0, r1
 800680c:	2200      	movs	r2, #0
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7f9 fef9 	bl	8000608 <__aeabi_dmul>
 8006816:	4606      	mov	r6, r0
 8006818:	460f      	mov	r7, r1
 800681a:	e7c4      	b.n	80067a6 <_dtoa_r+0x53e>
 800681c:	ec51 0b17 	vmov	r0, r1, d7
 8006820:	f7f9 fef2 	bl	8000608 <__aeabi_dmul>
 8006824:	9b02      	ldr	r3, [sp, #8]
 8006826:	9d00      	ldr	r5, [sp, #0]
 8006828:	930c      	str	r3, [sp, #48]	; 0x30
 800682a:	ec41 0b18 	vmov	d8, r0, r1
 800682e:	4639      	mov	r1, r7
 8006830:	4630      	mov	r0, r6
 8006832:	f7fa f999 	bl	8000b68 <__aeabi_d2iz>
 8006836:	9011      	str	r0, [sp, #68]	; 0x44
 8006838:	f7f9 fe7c 	bl	8000534 <__aeabi_i2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fd28 	bl	8000298 <__aeabi_dsub>
 8006848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800684a:	3330      	adds	r3, #48	; 0x30
 800684c:	f805 3b01 	strb.w	r3, [r5], #1
 8006850:	9b02      	ldr	r3, [sp, #8]
 8006852:	429d      	cmp	r5, r3
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	d134      	bne.n	80068c8 <_dtoa_r+0x660>
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <_dtoa_r+0x65c>)
 8006860:	ec51 0b18 	vmov	r0, r1, d8
 8006864:	f7f9 fd1a 	bl	800029c <__adddf3>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7fa f95a 	bl	8000b28 <__aeabi_dcmpgt>
 8006874:	2800      	cmp	r0, #0
 8006876:	d175      	bne.n	8006964 <_dtoa_r+0x6fc>
 8006878:	ec53 2b18 	vmov	r2, r3, d8
 800687c:	4911      	ldr	r1, [pc, #68]	; (80068c4 <_dtoa_r+0x65c>)
 800687e:	2000      	movs	r0, #0
 8006880:	f7f9 fd0a 	bl	8000298 <__aeabi_dsub>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7fa f92e 	bl	8000aec <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f43f af27 	beq.w	80066e4 <_dtoa_r+0x47c>
 8006896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006898:	1e6b      	subs	r3, r5, #1
 800689a:	930c      	str	r3, [sp, #48]	; 0x30
 800689c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a0:	2b30      	cmp	r3, #48	; 0x30
 80068a2:	d0f8      	beq.n	8006896 <_dtoa_r+0x62e>
 80068a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80068a8:	e04a      	b.n	8006940 <_dtoa_r+0x6d8>
 80068aa:	bf00      	nop
 80068ac:	08008c60 	.word	0x08008c60
 80068b0:	08008c38 	.word	0x08008c38
 80068b4:	3ff00000 	.word	0x3ff00000
 80068b8:	40240000 	.word	0x40240000
 80068bc:	401c0000 	.word	0x401c0000
 80068c0:	40140000 	.word	0x40140000
 80068c4:	3fe00000 	.word	0x3fe00000
 80068c8:	4baf      	ldr	r3, [pc, #700]	; (8006b88 <_dtoa_r+0x920>)
 80068ca:	f7f9 fe9d 	bl	8000608 <__aeabi_dmul>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	e7ac      	b.n	800682e <_dtoa_r+0x5c6>
 80068d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068d8:	9d00      	ldr	r5, [sp, #0]
 80068da:	4642      	mov	r2, r8
 80068dc:	464b      	mov	r3, r9
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 ffbb 	bl	800085c <__aeabi_ddiv>
 80068e6:	f7fa f93f 	bl	8000b68 <__aeabi_d2iz>
 80068ea:	9002      	str	r0, [sp, #8]
 80068ec:	f7f9 fe22 	bl	8000534 <__aeabi_i2d>
 80068f0:	4642      	mov	r2, r8
 80068f2:	464b      	mov	r3, r9
 80068f4:	f7f9 fe88 	bl	8000608 <__aeabi_dmul>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4630      	mov	r0, r6
 80068fe:	4639      	mov	r1, r7
 8006900:	f7f9 fcca 	bl	8000298 <__aeabi_dsub>
 8006904:	9e02      	ldr	r6, [sp, #8]
 8006906:	9f01      	ldr	r7, [sp, #4]
 8006908:	3630      	adds	r6, #48	; 0x30
 800690a:	f805 6b01 	strb.w	r6, [r5], #1
 800690e:	9e00      	ldr	r6, [sp, #0]
 8006910:	1bae      	subs	r6, r5, r6
 8006912:	42b7      	cmp	r7, r6
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	d137      	bne.n	800698a <_dtoa_r+0x722>
 800691a:	f7f9 fcbf 	bl	800029c <__adddf3>
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	4606      	mov	r6, r0
 8006924:	460f      	mov	r7, r1
 8006926:	f7fa f8ff 	bl	8000b28 <__aeabi_dcmpgt>
 800692a:	b9c8      	cbnz	r0, 8006960 <_dtoa_r+0x6f8>
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	4630      	mov	r0, r6
 8006932:	4639      	mov	r1, r7
 8006934:	f7fa f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006938:	b110      	cbz	r0, 8006940 <_dtoa_r+0x6d8>
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d40f      	bmi.n	8006960 <_dtoa_r+0x6f8>
 8006940:	4620      	mov	r0, r4
 8006942:	4659      	mov	r1, fp
 8006944:	f000 fad6 	bl	8006ef4 <_Bfree>
 8006948:	2300      	movs	r3, #0
 800694a:	702b      	strb	r3, [r5, #0]
 800694c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800694e:	f10a 0001 	add.w	r0, sl, #1
 8006952:	6018      	str	r0, [r3, #0]
 8006954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006956:	2b00      	cmp	r3, #0
 8006958:	f43f acd8 	beq.w	800630c <_dtoa_r+0xa4>
 800695c:	601d      	str	r5, [r3, #0]
 800695e:	e4d5      	b.n	800630c <_dtoa_r+0xa4>
 8006960:	f8cd a01c 	str.w	sl, [sp, #28]
 8006964:	462b      	mov	r3, r5
 8006966:	461d      	mov	r5, r3
 8006968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800696c:	2a39      	cmp	r2, #57	; 0x39
 800696e:	d108      	bne.n	8006982 <_dtoa_r+0x71a>
 8006970:	9a00      	ldr	r2, [sp, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d1f7      	bne.n	8006966 <_dtoa_r+0x6fe>
 8006976:	9a07      	ldr	r2, [sp, #28]
 8006978:	9900      	ldr	r1, [sp, #0]
 800697a:	3201      	adds	r2, #1
 800697c:	9207      	str	r2, [sp, #28]
 800697e:	2230      	movs	r2, #48	; 0x30
 8006980:	700a      	strb	r2, [r1, #0]
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	3201      	adds	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	e78c      	b.n	80068a4 <_dtoa_r+0x63c>
 800698a:	4b7f      	ldr	r3, [pc, #508]	; (8006b88 <_dtoa_r+0x920>)
 800698c:	2200      	movs	r2, #0
 800698e:	f7f9 fe3b 	bl	8000608 <__aeabi_dmul>
 8006992:	2200      	movs	r2, #0
 8006994:	2300      	movs	r3, #0
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	f7fa f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d09b      	beq.n	80068da <_dtoa_r+0x672>
 80069a2:	e7cd      	b.n	8006940 <_dtoa_r+0x6d8>
 80069a4:	9a08      	ldr	r2, [sp, #32]
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	f000 80c4 	beq.w	8006b34 <_dtoa_r+0x8cc>
 80069ac:	9a05      	ldr	r2, [sp, #20]
 80069ae:	2a01      	cmp	r2, #1
 80069b0:	f300 80a8 	bgt.w	8006b04 <_dtoa_r+0x89c>
 80069b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069b6:	2a00      	cmp	r2, #0
 80069b8:	f000 80a0 	beq.w	8006afc <_dtoa_r+0x894>
 80069bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80069c0:	9e06      	ldr	r6, [sp, #24]
 80069c2:	4645      	mov	r5, r8
 80069c4:	9a04      	ldr	r2, [sp, #16]
 80069c6:	2101      	movs	r1, #1
 80069c8:	441a      	add	r2, r3
 80069ca:	4620      	mov	r0, r4
 80069cc:	4498      	add	r8, r3
 80069ce:	9204      	str	r2, [sp, #16]
 80069d0:	f000 fb4c 	bl	800706c <__i2b>
 80069d4:	4607      	mov	r7, r0
 80069d6:	2d00      	cmp	r5, #0
 80069d8:	dd0b      	ble.n	80069f2 <_dtoa_r+0x78a>
 80069da:	9b04      	ldr	r3, [sp, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	dd08      	ble.n	80069f2 <_dtoa_r+0x78a>
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	9a04      	ldr	r2, [sp, #16]
 80069e4:	bfa8      	it	ge
 80069e6:	462b      	movge	r3, r5
 80069e8:	eba8 0803 	sub.w	r8, r8, r3
 80069ec:	1aed      	subs	r5, r5, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	b1fb      	cbz	r3, 8006a36 <_dtoa_r+0x7ce>
 80069f6:	9b08      	ldr	r3, [sp, #32]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 809f 	beq.w	8006b3c <_dtoa_r+0x8d4>
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	dd11      	ble.n	8006a26 <_dtoa_r+0x7be>
 8006a02:	4639      	mov	r1, r7
 8006a04:	4632      	mov	r2, r6
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 fbec 	bl	80071e4 <__pow5mult>
 8006a0c:	465a      	mov	r2, fp
 8006a0e:	4601      	mov	r1, r0
 8006a10:	4607      	mov	r7, r0
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fb40 	bl	8007098 <__multiply>
 8006a18:	4659      	mov	r1, fp
 8006a1a:	9007      	str	r0, [sp, #28]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 fa69 	bl	8006ef4 <_Bfree>
 8006a22:	9b07      	ldr	r3, [sp, #28]
 8006a24:	469b      	mov	fp, r3
 8006a26:	9b06      	ldr	r3, [sp, #24]
 8006a28:	1b9a      	subs	r2, r3, r6
 8006a2a:	d004      	beq.n	8006a36 <_dtoa_r+0x7ce>
 8006a2c:	4659      	mov	r1, fp
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fbd8 	bl	80071e4 <__pow5mult>
 8006a34:	4683      	mov	fp, r0
 8006a36:	2101      	movs	r1, #1
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fb17 	bl	800706c <__i2b>
 8006a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	4606      	mov	r6, r0
 8006a44:	dd7c      	ble.n	8006b40 <_dtoa_r+0x8d8>
 8006a46:	461a      	mov	r2, r3
 8006a48:	4601      	mov	r1, r0
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f000 fbca 	bl	80071e4 <__pow5mult>
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	4606      	mov	r6, r0
 8006a56:	dd76      	ble.n	8006b46 <_dtoa_r+0x8de>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	9306      	str	r3, [sp, #24]
 8006a5c:	6933      	ldr	r3, [r6, #16]
 8006a5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a62:	6918      	ldr	r0, [r3, #16]
 8006a64:	f000 fab2 	bl	8006fcc <__hi0bits>
 8006a68:	f1c0 0020 	rsb	r0, r0, #32
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	4418      	add	r0, r3
 8006a70:	f010 001f 	ands.w	r0, r0, #31
 8006a74:	f000 8086 	beq.w	8006b84 <_dtoa_r+0x91c>
 8006a78:	f1c0 0320 	rsb	r3, r0, #32
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	dd7f      	ble.n	8006b80 <_dtoa_r+0x918>
 8006a80:	f1c0 001c 	rsb	r0, r0, #28
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	4403      	add	r3, r0
 8006a88:	4480      	add	r8, r0
 8006a8a:	4405      	add	r5, r0
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	f1b8 0f00 	cmp.w	r8, #0
 8006a92:	dd05      	ble.n	8006aa0 <_dtoa_r+0x838>
 8006a94:	4659      	mov	r1, fp
 8006a96:	4642      	mov	r2, r8
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 fbfd 	bl	8007298 <__lshift>
 8006a9e:	4683      	mov	fp, r0
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	dd05      	ble.n	8006ab2 <_dtoa_r+0x84a>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f000 fbf4 	bl	8007298 <__lshift>
 8006ab0:	4606      	mov	r6, r0
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d069      	beq.n	8006b8c <_dtoa_r+0x924>
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4658      	mov	r0, fp
 8006abc:	f000 fc58 	bl	8007370 <__mcmp>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	da63      	bge.n	8006b8c <_dtoa_r+0x924>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	220a      	movs	r2, #10
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 fa34 	bl	8006f38 <__multadd>
 8006ad0:	9b08      	ldr	r3, [sp, #32]
 8006ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ad6:	4683      	mov	fp, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 818f 	beq.w	8006dfc <_dtoa_r+0xb94>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	220a      	movs	r2, #10
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f000 fa27 	bl	8006f38 <__multadd>
 8006aea:	f1b9 0f00 	cmp.w	r9, #0
 8006aee:	4607      	mov	r7, r0
 8006af0:	f300 808e 	bgt.w	8006c10 <_dtoa_r+0x9a8>
 8006af4:	9b05      	ldr	r3, [sp, #20]
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	dc50      	bgt.n	8006b9c <_dtoa_r+0x934>
 8006afa:	e089      	b.n	8006c10 <_dtoa_r+0x9a8>
 8006afc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006afe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b02:	e75d      	b.n	80069c0 <_dtoa_r+0x758>
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	1e5e      	subs	r6, r3, #1
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	42b3      	cmp	r3, r6
 8006b0c:	bfbf      	itttt	lt
 8006b0e:	9b06      	ldrlt	r3, [sp, #24]
 8006b10:	9606      	strlt	r6, [sp, #24]
 8006b12:	1af2      	sublt	r2, r6, r3
 8006b14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b16:	bfb6      	itet	lt
 8006b18:	189b      	addlt	r3, r3, r2
 8006b1a:	1b9e      	subge	r6, r3, r6
 8006b1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	bfb8      	it	lt
 8006b22:	2600      	movlt	r6, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb5      	itete	lt
 8006b28:	eba8 0503 	sublt.w	r5, r8, r3
 8006b2c:	9b01      	ldrge	r3, [sp, #4]
 8006b2e:	2300      	movlt	r3, #0
 8006b30:	4645      	movge	r5, r8
 8006b32:	e747      	b.n	80069c4 <_dtoa_r+0x75c>
 8006b34:	9e06      	ldr	r6, [sp, #24]
 8006b36:	9f08      	ldr	r7, [sp, #32]
 8006b38:	4645      	mov	r5, r8
 8006b3a:	e74c      	b.n	80069d6 <_dtoa_r+0x76e>
 8006b3c:	9a06      	ldr	r2, [sp, #24]
 8006b3e:	e775      	b.n	8006a2c <_dtoa_r+0x7c4>
 8006b40:	9b05      	ldr	r3, [sp, #20]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dc18      	bgt.n	8006b78 <_dtoa_r+0x910>
 8006b46:	9b02      	ldr	r3, [sp, #8]
 8006b48:	b9b3      	cbnz	r3, 8006b78 <_dtoa_r+0x910>
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b50:	b9a3      	cbnz	r3, 8006b7c <_dtoa_r+0x914>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	0d1b      	lsrs	r3, r3, #20
 8006b5a:	051b      	lsls	r3, r3, #20
 8006b5c:	b12b      	cbz	r3, 8006b6a <_dtoa_r+0x902>
 8006b5e:	9b04      	ldr	r3, [sp, #16]
 8006b60:	3301      	adds	r3, #1
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	f108 0801 	add.w	r8, r8, #1
 8006b68:	2301      	movs	r3, #1
 8006b6a:	9306      	str	r3, [sp, #24]
 8006b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f47f af74 	bne.w	8006a5c <_dtoa_r+0x7f4>
 8006b74:	2001      	movs	r0, #1
 8006b76:	e779      	b.n	8006a6c <_dtoa_r+0x804>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e7f6      	b.n	8006b6a <_dtoa_r+0x902>
 8006b7c:	9b02      	ldr	r3, [sp, #8]
 8006b7e:	e7f4      	b.n	8006b6a <_dtoa_r+0x902>
 8006b80:	d085      	beq.n	8006a8e <_dtoa_r+0x826>
 8006b82:	4618      	mov	r0, r3
 8006b84:	301c      	adds	r0, #28
 8006b86:	e77d      	b.n	8006a84 <_dtoa_r+0x81c>
 8006b88:	40240000 	.word	0x40240000
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	dc38      	bgt.n	8006c04 <_dtoa_r+0x99c>
 8006b92:	9b05      	ldr	r3, [sp, #20]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	dd35      	ble.n	8006c04 <_dtoa_r+0x99c>
 8006b98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ba0:	d10d      	bne.n	8006bbe <_dtoa_r+0x956>
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	464b      	mov	r3, r9
 8006ba6:	2205      	movs	r2, #5
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f000 f9c5 	bl	8006f38 <__multadd>
 8006bae:	4601      	mov	r1, r0
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 fbdc 	bl	8007370 <__mcmp>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	f73f adbd 	bgt.w	8006738 <_dtoa_r+0x4d0>
 8006bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc0:	9d00      	ldr	r5, [sp, #0]
 8006bc2:	ea6f 0a03 	mvn.w	sl, r3
 8006bc6:	f04f 0800 	mov.w	r8, #0
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f991 	bl	8006ef4 <_Bfree>
 8006bd2:	2f00      	cmp	r7, #0
 8006bd4:	f43f aeb4 	beq.w	8006940 <_dtoa_r+0x6d8>
 8006bd8:	f1b8 0f00 	cmp.w	r8, #0
 8006bdc:	d005      	beq.n	8006bea <_dtoa_r+0x982>
 8006bde:	45b8      	cmp	r8, r7
 8006be0:	d003      	beq.n	8006bea <_dtoa_r+0x982>
 8006be2:	4641      	mov	r1, r8
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 f985 	bl	8006ef4 <_Bfree>
 8006bea:	4639      	mov	r1, r7
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 f981 	bl	8006ef4 <_Bfree>
 8006bf2:	e6a5      	b.n	8006940 <_dtoa_r+0x6d8>
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	4637      	mov	r7, r6
 8006bf8:	e7e1      	b.n	8006bbe <_dtoa_r+0x956>
 8006bfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006bfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c00:	4637      	mov	r7, r6
 8006c02:	e599      	b.n	8006738 <_dtoa_r+0x4d0>
 8006c04:	9b08      	ldr	r3, [sp, #32]
 8006c06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80fd 	beq.w	8006e0a <_dtoa_r+0xba2>
 8006c10:	2d00      	cmp	r5, #0
 8006c12:	dd05      	ble.n	8006c20 <_dtoa_r+0x9b8>
 8006c14:	4639      	mov	r1, r7
 8006c16:	462a      	mov	r2, r5
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 fb3d 	bl	8007298 <__lshift>
 8006c1e:	4607      	mov	r7, r0
 8006c20:	9b06      	ldr	r3, [sp, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d05c      	beq.n	8006ce0 <_dtoa_r+0xa78>
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 f923 	bl	8006e74 <_Balloc>
 8006c2e:	4605      	mov	r5, r0
 8006c30:	b928      	cbnz	r0, 8006c3e <_dtoa_r+0x9d6>
 8006c32:	4b80      	ldr	r3, [pc, #512]	; (8006e34 <_dtoa_r+0xbcc>)
 8006c34:	4602      	mov	r2, r0
 8006c36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c3a:	f7ff bb2e 	b.w	800629a <_dtoa_r+0x32>
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	3202      	adds	r2, #2
 8006c42:	0092      	lsls	r2, r2, #2
 8006c44:	f107 010c 	add.w	r1, r7, #12
 8006c48:	300c      	adds	r0, #12
 8006c4a:	f000 f905 	bl	8006e58 <memcpy>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4629      	mov	r1, r5
 8006c52:	4620      	mov	r0, r4
 8006c54:	f000 fb20 	bl	8007298 <__lshift>
 8006c58:	9b00      	ldr	r3, [sp, #0]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	444b      	add	r3, r9
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	9b02      	ldr	r3, [sp, #8]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	46b8      	mov	r8, r7
 8006c6c:	9306      	str	r3, [sp, #24]
 8006c6e:	4607      	mov	r7, r0
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	4631      	mov	r1, r6
 8006c74:	3b01      	subs	r3, #1
 8006c76:	4658      	mov	r0, fp
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	f7ff fa6a 	bl	8006152 <quorem>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	3330      	adds	r3, #48	; 0x30
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	4641      	mov	r1, r8
 8006c86:	4658      	mov	r0, fp
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	f000 fb71 	bl	8007370 <__mcmp>
 8006c8e:	463a      	mov	r2, r7
 8006c90:	4681      	mov	r9, r0
 8006c92:	4631      	mov	r1, r6
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fb87 	bl	80073a8 <__mdiff>
 8006c9a:	68c2      	ldr	r2, [r0, #12]
 8006c9c:	9b08      	ldr	r3, [sp, #32]
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	bb02      	cbnz	r2, 8006ce4 <_dtoa_r+0xa7c>
 8006ca2:	4601      	mov	r1, r0
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f000 fb63 	bl	8007370 <__mcmp>
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	4602      	mov	r2, r0
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006cb6:	f000 f91d 	bl	8006ef4 <_Bfree>
 8006cba:	9b05      	ldr	r3, [sp, #20]
 8006cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cbe:	9d01      	ldr	r5, [sp, #4]
 8006cc0:	ea43 0102 	orr.w	r1, r3, r2
 8006cc4:	9b06      	ldr	r3, [sp, #24]
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	d10d      	bne.n	8006ce8 <_dtoa_r+0xa80>
 8006ccc:	2b39      	cmp	r3, #57	; 0x39
 8006cce:	d029      	beq.n	8006d24 <_dtoa_r+0xabc>
 8006cd0:	f1b9 0f00 	cmp.w	r9, #0
 8006cd4:	dd01      	ble.n	8006cda <_dtoa_r+0xa72>
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	3331      	adds	r3, #49	; 0x31
 8006cda:	9a02      	ldr	r2, [sp, #8]
 8006cdc:	7013      	strb	r3, [r2, #0]
 8006cde:	e774      	b.n	8006bca <_dtoa_r+0x962>
 8006ce0:	4638      	mov	r0, r7
 8006ce2:	e7b9      	b.n	8006c58 <_dtoa_r+0x9f0>
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	e7e2      	b.n	8006cae <_dtoa_r+0xa46>
 8006ce8:	f1b9 0f00 	cmp.w	r9, #0
 8006cec:	db06      	blt.n	8006cfc <_dtoa_r+0xa94>
 8006cee:	9905      	ldr	r1, [sp, #20]
 8006cf0:	ea41 0909 	orr.w	r9, r1, r9
 8006cf4:	9906      	ldr	r1, [sp, #24]
 8006cf6:	ea59 0101 	orrs.w	r1, r9, r1
 8006cfa:	d120      	bne.n	8006d3e <_dtoa_r+0xad6>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	ddec      	ble.n	8006cda <_dtoa_r+0xa72>
 8006d00:	4659      	mov	r1, fp
 8006d02:	2201      	movs	r2, #1
 8006d04:	4620      	mov	r0, r4
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	f000 fac6 	bl	8007298 <__lshift>
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4683      	mov	fp, r0
 8006d10:	f000 fb2e 	bl	8007370 <__mcmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	9b01      	ldr	r3, [sp, #4]
 8006d18:	dc02      	bgt.n	8006d20 <_dtoa_r+0xab8>
 8006d1a:	d1de      	bne.n	8006cda <_dtoa_r+0xa72>
 8006d1c:	07da      	lsls	r2, r3, #31
 8006d1e:	d5dc      	bpl.n	8006cda <_dtoa_r+0xa72>
 8006d20:	2b39      	cmp	r3, #57	; 0x39
 8006d22:	d1d8      	bne.n	8006cd6 <_dtoa_r+0xa6e>
 8006d24:	9a02      	ldr	r2, [sp, #8]
 8006d26:	2339      	movs	r3, #57	; 0x39
 8006d28:	7013      	strb	r3, [r2, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d34:	2a39      	cmp	r2, #57	; 0x39
 8006d36:	d050      	beq.n	8006dda <_dtoa_r+0xb72>
 8006d38:	3201      	adds	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e745      	b.n	8006bca <_dtoa_r+0x962>
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	dd03      	ble.n	8006d4a <_dtoa_r+0xae2>
 8006d42:	2b39      	cmp	r3, #57	; 0x39
 8006d44:	d0ee      	beq.n	8006d24 <_dtoa_r+0xabc>
 8006d46:	3301      	adds	r3, #1
 8006d48:	e7c7      	b.n	8006cda <_dtoa_r+0xa72>
 8006d4a:	9a01      	ldr	r2, [sp, #4]
 8006d4c:	9907      	ldr	r1, [sp, #28]
 8006d4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006d52:	428a      	cmp	r2, r1
 8006d54:	d02a      	beq.n	8006dac <_dtoa_r+0xb44>
 8006d56:	4659      	mov	r1, fp
 8006d58:	2300      	movs	r3, #0
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f8eb 	bl	8006f38 <__multadd>
 8006d62:	45b8      	cmp	r8, r7
 8006d64:	4683      	mov	fp, r0
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	f04f 020a 	mov.w	r2, #10
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4620      	mov	r0, r4
 8006d72:	d107      	bne.n	8006d84 <_dtoa_r+0xb1c>
 8006d74:	f000 f8e0 	bl	8006f38 <__multadd>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	9b01      	ldr	r3, [sp, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	e775      	b.n	8006c70 <_dtoa_r+0xa08>
 8006d84:	f000 f8d8 	bl	8006f38 <__multadd>
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	220a      	movs	r2, #10
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 f8d1 	bl	8006f38 <__multadd>
 8006d96:	4607      	mov	r7, r0
 8006d98:	e7f0      	b.n	8006d7c <_dtoa_r+0xb14>
 8006d9a:	f1b9 0f00 	cmp.w	r9, #0
 8006d9e:	9a00      	ldr	r2, [sp, #0]
 8006da0:	bfcc      	ite	gt
 8006da2:	464d      	movgt	r5, r9
 8006da4:	2501      	movle	r5, #1
 8006da6:	4415      	add	r5, r2
 8006da8:	f04f 0800 	mov.w	r8, #0
 8006dac:	4659      	mov	r1, fp
 8006dae:	2201      	movs	r2, #1
 8006db0:	4620      	mov	r0, r4
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	f000 fa70 	bl	8007298 <__lshift>
 8006db8:	4631      	mov	r1, r6
 8006dba:	4683      	mov	fp, r0
 8006dbc:	f000 fad8 	bl	8007370 <__mcmp>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	dcb2      	bgt.n	8006d2a <_dtoa_r+0xac2>
 8006dc4:	d102      	bne.n	8006dcc <_dtoa_r+0xb64>
 8006dc6:	9b01      	ldr	r3, [sp, #4]
 8006dc8:	07db      	lsls	r3, r3, #31
 8006dca:	d4ae      	bmi.n	8006d2a <_dtoa_r+0xac2>
 8006dcc:	462b      	mov	r3, r5
 8006dce:	461d      	mov	r5, r3
 8006dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dd4:	2a30      	cmp	r2, #48	; 0x30
 8006dd6:	d0fa      	beq.n	8006dce <_dtoa_r+0xb66>
 8006dd8:	e6f7      	b.n	8006bca <_dtoa_r+0x962>
 8006dda:	9a00      	ldr	r2, [sp, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d1a5      	bne.n	8006d2c <_dtoa_r+0xac4>
 8006de0:	f10a 0a01 	add.w	sl, sl, #1
 8006de4:	2331      	movs	r3, #49	; 0x31
 8006de6:	e779      	b.n	8006cdc <_dtoa_r+0xa74>
 8006de8:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <_dtoa_r+0xbd0>)
 8006dea:	f7ff baaf 	b.w	800634c <_dtoa_r+0xe4>
 8006dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f47f aa86 	bne.w	8006302 <_dtoa_r+0x9a>
 8006df6:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <_dtoa_r+0xbd4>)
 8006df8:	f7ff baa8 	b.w	800634c <_dtoa_r+0xe4>
 8006dfc:	f1b9 0f00 	cmp.w	r9, #0
 8006e00:	dc03      	bgt.n	8006e0a <_dtoa_r+0xba2>
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	f73f aec9 	bgt.w	8006b9c <_dtoa_r+0x934>
 8006e0a:	9d00      	ldr	r5, [sp, #0]
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4658      	mov	r0, fp
 8006e10:	f7ff f99f 	bl	8006152 <quorem>
 8006e14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006e18:	f805 3b01 	strb.w	r3, [r5], #1
 8006e1c:	9a00      	ldr	r2, [sp, #0]
 8006e1e:	1aaa      	subs	r2, r5, r2
 8006e20:	4591      	cmp	r9, r2
 8006e22:	ddba      	ble.n	8006d9a <_dtoa_r+0xb32>
 8006e24:	4659      	mov	r1, fp
 8006e26:	2300      	movs	r3, #0
 8006e28:	220a      	movs	r2, #10
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	f000 f884 	bl	8006f38 <__multadd>
 8006e30:	4683      	mov	fp, r0
 8006e32:	e7eb      	b.n	8006e0c <_dtoa_r+0xba4>
 8006e34:	08008bc3 	.word	0x08008bc3
 8006e38:	08008b1c 	.word	0x08008b1c
 8006e3c:	08008b40 	.word	0x08008b40

08006e40 <_localeconv_r>:
 8006e40:	4800      	ldr	r0, [pc, #0]	; (8006e44 <_localeconv_r+0x4>)
 8006e42:	4770      	bx	lr
 8006e44:	20000160 	.word	0x20000160

08006e48 <malloc>:
 8006e48:	4b02      	ldr	r3, [pc, #8]	; (8006e54 <malloc+0xc>)
 8006e4a:	4601      	mov	r1, r0
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	f000 bbef 	b.w	8007630 <_malloc_r>
 8006e52:	bf00      	nop
 8006e54:	2000000c 	.word	0x2000000c

08006e58 <memcpy>:
 8006e58:	440a      	add	r2, r1
 8006e5a:	4291      	cmp	r1, r2
 8006e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e60:	d100      	bne.n	8006e64 <memcpy+0xc>
 8006e62:	4770      	bx	lr
 8006e64:	b510      	push	{r4, lr}
 8006e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e6e:	4291      	cmp	r1, r2
 8006e70:	d1f9      	bne.n	8006e66 <memcpy+0xe>
 8006e72:	bd10      	pop	{r4, pc}

08006e74 <_Balloc>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e78:	4604      	mov	r4, r0
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	b976      	cbnz	r6, 8006e9c <_Balloc+0x28>
 8006e7e:	2010      	movs	r0, #16
 8006e80:	f7ff ffe2 	bl	8006e48 <malloc>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6260      	str	r0, [r4, #36]	; 0x24
 8006e88:	b920      	cbnz	r0, 8006e94 <_Balloc+0x20>
 8006e8a:	4b18      	ldr	r3, [pc, #96]	; (8006eec <_Balloc+0x78>)
 8006e8c:	4818      	ldr	r0, [pc, #96]	; (8006ef0 <_Balloc+0x7c>)
 8006e8e:	2166      	movs	r1, #102	; 0x66
 8006e90:	f000 fd94 	bl	80079bc <__assert_func>
 8006e94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e98:	6006      	str	r6, [r0, #0]
 8006e9a:	60c6      	str	r6, [r0, #12]
 8006e9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e9e:	68f3      	ldr	r3, [r6, #12]
 8006ea0:	b183      	cbz	r3, 8006ec4 <_Balloc+0x50>
 8006ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006eaa:	b9b8      	cbnz	r0, 8006edc <_Balloc+0x68>
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f605 	lsl.w	r6, r1, r5
 8006eb2:	1d72      	adds	r2, r6, #5
 8006eb4:	0092      	lsls	r2, r2, #2
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 fb5a 	bl	8007570 <_calloc_r>
 8006ebc:	b160      	cbz	r0, 8006ed8 <_Balloc+0x64>
 8006ebe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ec2:	e00e      	b.n	8006ee2 <_Balloc+0x6e>
 8006ec4:	2221      	movs	r2, #33	; 0x21
 8006ec6:	2104      	movs	r1, #4
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f000 fb51 	bl	8007570 <_calloc_r>
 8006ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed0:	60f0      	str	r0, [r6, #12]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1e4      	bne.n	8006ea2 <_Balloc+0x2e>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	bd70      	pop	{r4, r5, r6, pc}
 8006edc:	6802      	ldr	r2, [r0, #0]
 8006ede:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ee8:	e7f7      	b.n	8006eda <_Balloc+0x66>
 8006eea:	bf00      	nop
 8006eec:	08008b4d 	.word	0x08008b4d
 8006ef0:	08008bd4 	.word	0x08008bd4

08006ef4 <_Bfree>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ef8:	4605      	mov	r5, r0
 8006efa:	460c      	mov	r4, r1
 8006efc:	b976      	cbnz	r6, 8006f1c <_Bfree+0x28>
 8006efe:	2010      	movs	r0, #16
 8006f00:	f7ff ffa2 	bl	8006e48 <malloc>
 8006f04:	4602      	mov	r2, r0
 8006f06:	6268      	str	r0, [r5, #36]	; 0x24
 8006f08:	b920      	cbnz	r0, 8006f14 <_Bfree+0x20>
 8006f0a:	4b09      	ldr	r3, [pc, #36]	; (8006f30 <_Bfree+0x3c>)
 8006f0c:	4809      	ldr	r0, [pc, #36]	; (8006f34 <_Bfree+0x40>)
 8006f0e:	218a      	movs	r1, #138	; 0x8a
 8006f10:	f000 fd54 	bl	80079bc <__assert_func>
 8006f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f18:	6006      	str	r6, [r0, #0]
 8006f1a:	60c6      	str	r6, [r0, #12]
 8006f1c:	b13c      	cbz	r4, 8006f2e <_Bfree+0x3a>
 8006f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f20:	6862      	ldr	r2, [r4, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f28:	6021      	str	r1, [r4, #0]
 8006f2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f2e:	bd70      	pop	{r4, r5, r6, pc}
 8006f30:	08008b4d 	.word	0x08008b4d
 8006f34:	08008bd4 	.word	0x08008bd4

08006f38 <__multadd>:
 8006f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3c:	690e      	ldr	r6, [r1, #16]
 8006f3e:	4607      	mov	r7, r0
 8006f40:	4698      	mov	r8, r3
 8006f42:	460c      	mov	r4, r1
 8006f44:	f101 0014 	add.w	r0, r1, #20
 8006f48:	2300      	movs	r3, #0
 8006f4a:	6805      	ldr	r5, [r0, #0]
 8006f4c:	b2a9      	uxth	r1, r5
 8006f4e:	fb02 8101 	mla	r1, r2, r1, r8
 8006f52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006f56:	0c2d      	lsrs	r5, r5, #16
 8006f58:	fb02 c505 	mla	r5, r2, r5, ip
 8006f5c:	b289      	uxth	r1, r1
 8006f5e:	3301      	adds	r3, #1
 8006f60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006f64:	429e      	cmp	r6, r3
 8006f66:	f840 1b04 	str.w	r1, [r0], #4
 8006f6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006f6e:	dcec      	bgt.n	8006f4a <__multadd+0x12>
 8006f70:	f1b8 0f00 	cmp.w	r8, #0
 8006f74:	d022      	beq.n	8006fbc <__multadd+0x84>
 8006f76:	68a3      	ldr	r3, [r4, #8]
 8006f78:	42b3      	cmp	r3, r6
 8006f7a:	dc19      	bgt.n	8006fb0 <__multadd+0x78>
 8006f7c:	6861      	ldr	r1, [r4, #4]
 8006f7e:	4638      	mov	r0, r7
 8006f80:	3101      	adds	r1, #1
 8006f82:	f7ff ff77 	bl	8006e74 <_Balloc>
 8006f86:	4605      	mov	r5, r0
 8006f88:	b928      	cbnz	r0, 8006f96 <__multadd+0x5e>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <__multadd+0x8c>)
 8006f8e:	480e      	ldr	r0, [pc, #56]	; (8006fc8 <__multadd+0x90>)
 8006f90:	21b5      	movs	r1, #181	; 0xb5
 8006f92:	f000 fd13 	bl	80079bc <__assert_func>
 8006f96:	6922      	ldr	r2, [r4, #16]
 8006f98:	3202      	adds	r2, #2
 8006f9a:	f104 010c 	add.w	r1, r4, #12
 8006f9e:	0092      	lsls	r2, r2, #2
 8006fa0:	300c      	adds	r0, #12
 8006fa2:	f7ff ff59 	bl	8006e58 <memcpy>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4638      	mov	r0, r7
 8006faa:	f7ff ffa3 	bl	8006ef4 <_Bfree>
 8006fae:	462c      	mov	r4, r5
 8006fb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	f8c3 8014 	str.w	r8, [r3, #20]
 8006fba:	6126      	str	r6, [r4, #16]
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc2:	bf00      	nop
 8006fc4:	08008bc3 	.word	0x08008bc3
 8006fc8:	08008bd4 	.word	0x08008bd4

08006fcc <__hi0bits>:
 8006fcc:	0c03      	lsrs	r3, r0, #16
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	b9d3      	cbnz	r3, 8007008 <__hi0bits+0x3c>
 8006fd2:	0400      	lsls	r0, r0, #16
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fda:	bf04      	itt	eq
 8006fdc:	0200      	lsleq	r0, r0, #8
 8006fde:	3308      	addeq	r3, #8
 8006fe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fe4:	bf04      	itt	eq
 8006fe6:	0100      	lsleq	r0, r0, #4
 8006fe8:	3304      	addeq	r3, #4
 8006fea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fee:	bf04      	itt	eq
 8006ff0:	0080      	lsleq	r0, r0, #2
 8006ff2:	3302      	addeq	r3, #2
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	db05      	blt.n	8007004 <__hi0bits+0x38>
 8006ff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ffc:	f103 0301 	add.w	r3, r3, #1
 8007000:	bf08      	it	eq
 8007002:	2320      	moveq	r3, #32
 8007004:	4618      	mov	r0, r3
 8007006:	4770      	bx	lr
 8007008:	2300      	movs	r3, #0
 800700a:	e7e4      	b.n	8006fd6 <__hi0bits+0xa>

0800700c <__lo0bits>:
 800700c:	6803      	ldr	r3, [r0, #0]
 800700e:	f013 0207 	ands.w	r2, r3, #7
 8007012:	4601      	mov	r1, r0
 8007014:	d00b      	beq.n	800702e <__lo0bits+0x22>
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d424      	bmi.n	8007064 <__lo0bits+0x58>
 800701a:	0798      	lsls	r0, r3, #30
 800701c:	bf49      	itett	mi
 800701e:	085b      	lsrmi	r3, r3, #1
 8007020:	089b      	lsrpl	r3, r3, #2
 8007022:	2001      	movmi	r0, #1
 8007024:	600b      	strmi	r3, [r1, #0]
 8007026:	bf5c      	itt	pl
 8007028:	600b      	strpl	r3, [r1, #0]
 800702a:	2002      	movpl	r0, #2
 800702c:	4770      	bx	lr
 800702e:	b298      	uxth	r0, r3
 8007030:	b9b0      	cbnz	r0, 8007060 <__lo0bits+0x54>
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	2010      	movs	r0, #16
 8007036:	f013 0fff 	tst.w	r3, #255	; 0xff
 800703a:	bf04      	itt	eq
 800703c:	0a1b      	lsreq	r3, r3, #8
 800703e:	3008      	addeq	r0, #8
 8007040:	071a      	lsls	r2, r3, #28
 8007042:	bf04      	itt	eq
 8007044:	091b      	lsreq	r3, r3, #4
 8007046:	3004      	addeq	r0, #4
 8007048:	079a      	lsls	r2, r3, #30
 800704a:	bf04      	itt	eq
 800704c:	089b      	lsreq	r3, r3, #2
 800704e:	3002      	addeq	r0, #2
 8007050:	07da      	lsls	r2, r3, #31
 8007052:	d403      	bmi.n	800705c <__lo0bits+0x50>
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	f100 0001 	add.w	r0, r0, #1
 800705a:	d005      	beq.n	8007068 <__lo0bits+0x5c>
 800705c:	600b      	str	r3, [r1, #0]
 800705e:	4770      	bx	lr
 8007060:	4610      	mov	r0, r2
 8007062:	e7e8      	b.n	8007036 <__lo0bits+0x2a>
 8007064:	2000      	movs	r0, #0
 8007066:	4770      	bx	lr
 8007068:	2020      	movs	r0, #32
 800706a:	4770      	bx	lr

0800706c <__i2b>:
 800706c:	b510      	push	{r4, lr}
 800706e:	460c      	mov	r4, r1
 8007070:	2101      	movs	r1, #1
 8007072:	f7ff feff 	bl	8006e74 <_Balloc>
 8007076:	4602      	mov	r2, r0
 8007078:	b928      	cbnz	r0, 8007086 <__i2b+0x1a>
 800707a:	4b05      	ldr	r3, [pc, #20]	; (8007090 <__i2b+0x24>)
 800707c:	4805      	ldr	r0, [pc, #20]	; (8007094 <__i2b+0x28>)
 800707e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007082:	f000 fc9b 	bl	80079bc <__assert_func>
 8007086:	2301      	movs	r3, #1
 8007088:	6144      	str	r4, [r0, #20]
 800708a:	6103      	str	r3, [r0, #16]
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	08008bc3 	.word	0x08008bc3
 8007094:	08008bd4 	.word	0x08008bd4

08007098 <__multiply>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	4614      	mov	r4, r2
 800709e:	690a      	ldr	r2, [r1, #16]
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	bfb8      	it	lt
 80070a6:	460b      	movlt	r3, r1
 80070a8:	460d      	mov	r5, r1
 80070aa:	bfbc      	itt	lt
 80070ac:	4625      	movlt	r5, r4
 80070ae:	461c      	movlt	r4, r3
 80070b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80070b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80070b8:	68ab      	ldr	r3, [r5, #8]
 80070ba:	6869      	ldr	r1, [r5, #4]
 80070bc:	eb0a 0709 	add.w	r7, sl, r9
 80070c0:	42bb      	cmp	r3, r7
 80070c2:	b085      	sub	sp, #20
 80070c4:	bfb8      	it	lt
 80070c6:	3101      	addlt	r1, #1
 80070c8:	f7ff fed4 	bl	8006e74 <_Balloc>
 80070cc:	b930      	cbnz	r0, 80070dc <__multiply+0x44>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b42      	ldr	r3, [pc, #264]	; (80071dc <__multiply+0x144>)
 80070d2:	4843      	ldr	r0, [pc, #268]	; (80071e0 <__multiply+0x148>)
 80070d4:	f240 115d 	movw	r1, #349	; 0x15d
 80070d8:	f000 fc70 	bl	80079bc <__assert_func>
 80070dc:	f100 0614 	add.w	r6, r0, #20
 80070e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80070e4:	4633      	mov	r3, r6
 80070e6:	2200      	movs	r2, #0
 80070e8:	4543      	cmp	r3, r8
 80070ea:	d31e      	bcc.n	800712a <__multiply+0x92>
 80070ec:	f105 0c14 	add.w	ip, r5, #20
 80070f0:	f104 0314 	add.w	r3, r4, #20
 80070f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80070f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80070fc:	9202      	str	r2, [sp, #8]
 80070fe:	ebac 0205 	sub.w	r2, ip, r5
 8007102:	3a15      	subs	r2, #21
 8007104:	f022 0203 	bic.w	r2, r2, #3
 8007108:	3204      	adds	r2, #4
 800710a:	f105 0115 	add.w	r1, r5, #21
 800710e:	458c      	cmp	ip, r1
 8007110:	bf38      	it	cc
 8007112:	2204      	movcc	r2, #4
 8007114:	9201      	str	r2, [sp, #4]
 8007116:	9a02      	ldr	r2, [sp, #8]
 8007118:	9303      	str	r3, [sp, #12]
 800711a:	429a      	cmp	r2, r3
 800711c:	d808      	bhi.n	8007130 <__multiply+0x98>
 800711e:	2f00      	cmp	r7, #0
 8007120:	dc55      	bgt.n	80071ce <__multiply+0x136>
 8007122:	6107      	str	r7, [r0, #16]
 8007124:	b005      	add	sp, #20
 8007126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712a:	f843 2b04 	str.w	r2, [r3], #4
 800712e:	e7db      	b.n	80070e8 <__multiply+0x50>
 8007130:	f8b3 a000 	ldrh.w	sl, [r3]
 8007134:	f1ba 0f00 	cmp.w	sl, #0
 8007138:	d020      	beq.n	800717c <__multiply+0xe4>
 800713a:	f105 0e14 	add.w	lr, r5, #20
 800713e:	46b1      	mov	r9, r6
 8007140:	2200      	movs	r2, #0
 8007142:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007146:	f8d9 b000 	ldr.w	fp, [r9]
 800714a:	b2a1      	uxth	r1, r4
 800714c:	fa1f fb8b 	uxth.w	fp, fp
 8007150:	fb0a b101 	mla	r1, sl, r1, fp
 8007154:	4411      	add	r1, r2
 8007156:	f8d9 2000 	ldr.w	r2, [r9]
 800715a:	0c24      	lsrs	r4, r4, #16
 800715c:	0c12      	lsrs	r2, r2, #16
 800715e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007162:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007166:	b289      	uxth	r1, r1
 8007168:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800716c:	45f4      	cmp	ip, lr
 800716e:	f849 1b04 	str.w	r1, [r9], #4
 8007172:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007176:	d8e4      	bhi.n	8007142 <__multiply+0xaa>
 8007178:	9901      	ldr	r1, [sp, #4]
 800717a:	5072      	str	r2, [r6, r1]
 800717c:	9a03      	ldr	r2, [sp, #12]
 800717e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007182:	3304      	adds	r3, #4
 8007184:	f1b9 0f00 	cmp.w	r9, #0
 8007188:	d01f      	beq.n	80071ca <__multiply+0x132>
 800718a:	6834      	ldr	r4, [r6, #0]
 800718c:	f105 0114 	add.w	r1, r5, #20
 8007190:	46b6      	mov	lr, r6
 8007192:	f04f 0a00 	mov.w	sl, #0
 8007196:	880a      	ldrh	r2, [r1, #0]
 8007198:	f8be b002 	ldrh.w	fp, [lr, #2]
 800719c:	fb09 b202 	mla	r2, r9, r2, fp
 80071a0:	4492      	add	sl, r2
 80071a2:	b2a4      	uxth	r4, r4
 80071a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80071a8:	f84e 4b04 	str.w	r4, [lr], #4
 80071ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80071b0:	f8be 2000 	ldrh.w	r2, [lr]
 80071b4:	0c24      	lsrs	r4, r4, #16
 80071b6:	fb09 2404 	mla	r4, r9, r4, r2
 80071ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80071be:	458c      	cmp	ip, r1
 80071c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071c4:	d8e7      	bhi.n	8007196 <__multiply+0xfe>
 80071c6:	9a01      	ldr	r2, [sp, #4]
 80071c8:	50b4      	str	r4, [r6, r2]
 80071ca:	3604      	adds	r6, #4
 80071cc:	e7a3      	b.n	8007116 <__multiply+0x7e>
 80071ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1a5      	bne.n	8007122 <__multiply+0x8a>
 80071d6:	3f01      	subs	r7, #1
 80071d8:	e7a1      	b.n	800711e <__multiply+0x86>
 80071da:	bf00      	nop
 80071dc:	08008bc3 	.word	0x08008bc3
 80071e0:	08008bd4 	.word	0x08008bd4

080071e4 <__pow5mult>:
 80071e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e8:	4615      	mov	r5, r2
 80071ea:	f012 0203 	ands.w	r2, r2, #3
 80071ee:	4606      	mov	r6, r0
 80071f0:	460f      	mov	r7, r1
 80071f2:	d007      	beq.n	8007204 <__pow5mult+0x20>
 80071f4:	4c25      	ldr	r4, [pc, #148]	; (800728c <__pow5mult+0xa8>)
 80071f6:	3a01      	subs	r2, #1
 80071f8:	2300      	movs	r3, #0
 80071fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071fe:	f7ff fe9b 	bl	8006f38 <__multadd>
 8007202:	4607      	mov	r7, r0
 8007204:	10ad      	asrs	r5, r5, #2
 8007206:	d03d      	beq.n	8007284 <__pow5mult+0xa0>
 8007208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800720a:	b97c      	cbnz	r4, 800722c <__pow5mult+0x48>
 800720c:	2010      	movs	r0, #16
 800720e:	f7ff fe1b 	bl	8006e48 <malloc>
 8007212:	4602      	mov	r2, r0
 8007214:	6270      	str	r0, [r6, #36]	; 0x24
 8007216:	b928      	cbnz	r0, 8007224 <__pow5mult+0x40>
 8007218:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <__pow5mult+0xac>)
 800721a:	481e      	ldr	r0, [pc, #120]	; (8007294 <__pow5mult+0xb0>)
 800721c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007220:	f000 fbcc 	bl	80079bc <__assert_func>
 8007224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007228:	6004      	str	r4, [r0, #0]
 800722a:	60c4      	str	r4, [r0, #12]
 800722c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007234:	b94c      	cbnz	r4, 800724a <__pow5mult+0x66>
 8007236:	f240 2171 	movw	r1, #625	; 0x271
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ff16 	bl	800706c <__i2b>
 8007240:	2300      	movs	r3, #0
 8007242:	f8c8 0008 	str.w	r0, [r8, #8]
 8007246:	4604      	mov	r4, r0
 8007248:	6003      	str	r3, [r0, #0]
 800724a:	f04f 0900 	mov.w	r9, #0
 800724e:	07eb      	lsls	r3, r5, #31
 8007250:	d50a      	bpl.n	8007268 <__pow5mult+0x84>
 8007252:	4639      	mov	r1, r7
 8007254:	4622      	mov	r2, r4
 8007256:	4630      	mov	r0, r6
 8007258:	f7ff ff1e 	bl	8007098 <__multiply>
 800725c:	4639      	mov	r1, r7
 800725e:	4680      	mov	r8, r0
 8007260:	4630      	mov	r0, r6
 8007262:	f7ff fe47 	bl	8006ef4 <_Bfree>
 8007266:	4647      	mov	r7, r8
 8007268:	106d      	asrs	r5, r5, #1
 800726a:	d00b      	beq.n	8007284 <__pow5mult+0xa0>
 800726c:	6820      	ldr	r0, [r4, #0]
 800726e:	b938      	cbnz	r0, 8007280 <__pow5mult+0x9c>
 8007270:	4622      	mov	r2, r4
 8007272:	4621      	mov	r1, r4
 8007274:	4630      	mov	r0, r6
 8007276:	f7ff ff0f 	bl	8007098 <__multiply>
 800727a:	6020      	str	r0, [r4, #0]
 800727c:	f8c0 9000 	str.w	r9, [r0]
 8007280:	4604      	mov	r4, r0
 8007282:	e7e4      	b.n	800724e <__pow5mult+0x6a>
 8007284:	4638      	mov	r0, r7
 8007286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800728a:	bf00      	nop
 800728c:	08008d28 	.word	0x08008d28
 8007290:	08008b4d 	.word	0x08008b4d
 8007294:	08008bd4 	.word	0x08008bd4

08007298 <__lshift>:
 8007298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800729c:	460c      	mov	r4, r1
 800729e:	6849      	ldr	r1, [r1, #4]
 80072a0:	6923      	ldr	r3, [r4, #16]
 80072a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	4607      	mov	r7, r0
 80072aa:	4691      	mov	r9, r2
 80072ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072b0:	f108 0601 	add.w	r6, r8, #1
 80072b4:	42b3      	cmp	r3, r6
 80072b6:	db0b      	blt.n	80072d0 <__lshift+0x38>
 80072b8:	4638      	mov	r0, r7
 80072ba:	f7ff fddb 	bl	8006e74 <_Balloc>
 80072be:	4605      	mov	r5, r0
 80072c0:	b948      	cbnz	r0, 80072d6 <__lshift+0x3e>
 80072c2:	4602      	mov	r2, r0
 80072c4:	4b28      	ldr	r3, [pc, #160]	; (8007368 <__lshift+0xd0>)
 80072c6:	4829      	ldr	r0, [pc, #164]	; (800736c <__lshift+0xd4>)
 80072c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80072cc:	f000 fb76 	bl	80079bc <__assert_func>
 80072d0:	3101      	adds	r1, #1
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	e7ee      	b.n	80072b4 <__lshift+0x1c>
 80072d6:	2300      	movs	r3, #0
 80072d8:	f100 0114 	add.w	r1, r0, #20
 80072dc:	f100 0210 	add.w	r2, r0, #16
 80072e0:	4618      	mov	r0, r3
 80072e2:	4553      	cmp	r3, sl
 80072e4:	db33      	blt.n	800734e <__lshift+0xb6>
 80072e6:	6920      	ldr	r0, [r4, #16]
 80072e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072ec:	f104 0314 	add.w	r3, r4, #20
 80072f0:	f019 091f 	ands.w	r9, r9, #31
 80072f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072fc:	d02b      	beq.n	8007356 <__lshift+0xbe>
 80072fe:	f1c9 0e20 	rsb	lr, r9, #32
 8007302:	468a      	mov	sl, r1
 8007304:	2200      	movs	r2, #0
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	fa00 f009 	lsl.w	r0, r0, r9
 800730c:	4302      	orrs	r2, r0
 800730e:	f84a 2b04 	str.w	r2, [sl], #4
 8007312:	f853 2b04 	ldr.w	r2, [r3], #4
 8007316:	459c      	cmp	ip, r3
 8007318:	fa22 f20e 	lsr.w	r2, r2, lr
 800731c:	d8f3      	bhi.n	8007306 <__lshift+0x6e>
 800731e:	ebac 0304 	sub.w	r3, ip, r4
 8007322:	3b15      	subs	r3, #21
 8007324:	f023 0303 	bic.w	r3, r3, #3
 8007328:	3304      	adds	r3, #4
 800732a:	f104 0015 	add.w	r0, r4, #21
 800732e:	4584      	cmp	ip, r0
 8007330:	bf38      	it	cc
 8007332:	2304      	movcc	r3, #4
 8007334:	50ca      	str	r2, [r1, r3]
 8007336:	b10a      	cbz	r2, 800733c <__lshift+0xa4>
 8007338:	f108 0602 	add.w	r6, r8, #2
 800733c:	3e01      	subs	r6, #1
 800733e:	4638      	mov	r0, r7
 8007340:	612e      	str	r6, [r5, #16]
 8007342:	4621      	mov	r1, r4
 8007344:	f7ff fdd6 	bl	8006ef4 <_Bfree>
 8007348:	4628      	mov	r0, r5
 800734a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007352:	3301      	adds	r3, #1
 8007354:	e7c5      	b.n	80072e2 <__lshift+0x4a>
 8007356:	3904      	subs	r1, #4
 8007358:	f853 2b04 	ldr.w	r2, [r3], #4
 800735c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007360:	459c      	cmp	ip, r3
 8007362:	d8f9      	bhi.n	8007358 <__lshift+0xc0>
 8007364:	e7ea      	b.n	800733c <__lshift+0xa4>
 8007366:	bf00      	nop
 8007368:	08008bc3 	.word	0x08008bc3
 800736c:	08008bd4 	.word	0x08008bd4

08007370 <__mcmp>:
 8007370:	b530      	push	{r4, r5, lr}
 8007372:	6902      	ldr	r2, [r0, #16]
 8007374:	690c      	ldr	r4, [r1, #16]
 8007376:	1b12      	subs	r2, r2, r4
 8007378:	d10e      	bne.n	8007398 <__mcmp+0x28>
 800737a:	f100 0314 	add.w	r3, r0, #20
 800737e:	3114      	adds	r1, #20
 8007380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800738c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007390:	42a5      	cmp	r5, r4
 8007392:	d003      	beq.n	800739c <__mcmp+0x2c>
 8007394:	d305      	bcc.n	80073a2 <__mcmp+0x32>
 8007396:	2201      	movs	r2, #1
 8007398:	4610      	mov	r0, r2
 800739a:	bd30      	pop	{r4, r5, pc}
 800739c:	4283      	cmp	r3, r0
 800739e:	d3f3      	bcc.n	8007388 <__mcmp+0x18>
 80073a0:	e7fa      	b.n	8007398 <__mcmp+0x28>
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	e7f7      	b.n	8007398 <__mcmp+0x28>

080073a8 <__mdiff>:
 80073a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	4606      	mov	r6, r0
 80073b0:	4611      	mov	r1, r2
 80073b2:	4620      	mov	r0, r4
 80073b4:	4617      	mov	r7, r2
 80073b6:	f7ff ffdb 	bl	8007370 <__mcmp>
 80073ba:	1e05      	subs	r5, r0, #0
 80073bc:	d110      	bne.n	80073e0 <__mdiff+0x38>
 80073be:	4629      	mov	r1, r5
 80073c0:	4630      	mov	r0, r6
 80073c2:	f7ff fd57 	bl	8006e74 <_Balloc>
 80073c6:	b930      	cbnz	r0, 80073d6 <__mdiff+0x2e>
 80073c8:	4b39      	ldr	r3, [pc, #228]	; (80074b0 <__mdiff+0x108>)
 80073ca:	4602      	mov	r2, r0
 80073cc:	f240 2132 	movw	r1, #562	; 0x232
 80073d0:	4838      	ldr	r0, [pc, #224]	; (80074b4 <__mdiff+0x10c>)
 80073d2:	f000 faf3 	bl	80079bc <__assert_func>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e0:	bfa4      	itt	ge
 80073e2:	463b      	movge	r3, r7
 80073e4:	4627      	movge	r7, r4
 80073e6:	4630      	mov	r0, r6
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	bfa6      	itte	ge
 80073ec:	461c      	movge	r4, r3
 80073ee:	2500      	movge	r5, #0
 80073f0:	2501      	movlt	r5, #1
 80073f2:	f7ff fd3f 	bl	8006e74 <_Balloc>
 80073f6:	b920      	cbnz	r0, 8007402 <__mdiff+0x5a>
 80073f8:	4b2d      	ldr	r3, [pc, #180]	; (80074b0 <__mdiff+0x108>)
 80073fa:	4602      	mov	r2, r0
 80073fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007400:	e7e6      	b.n	80073d0 <__mdiff+0x28>
 8007402:	693e      	ldr	r6, [r7, #16]
 8007404:	60c5      	str	r5, [r0, #12]
 8007406:	6925      	ldr	r5, [r4, #16]
 8007408:	f107 0114 	add.w	r1, r7, #20
 800740c:	f104 0914 	add.w	r9, r4, #20
 8007410:	f100 0e14 	add.w	lr, r0, #20
 8007414:	f107 0210 	add.w	r2, r7, #16
 8007418:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800741c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007420:	46f2      	mov	sl, lr
 8007422:	2700      	movs	r7, #0
 8007424:	f859 3b04 	ldr.w	r3, [r9], #4
 8007428:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800742c:	fa1f f883 	uxth.w	r8, r3
 8007430:	fa17 f78b 	uxtah	r7, r7, fp
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	eba7 0808 	sub.w	r8, r7, r8
 800743a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800743e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007442:	fa1f f888 	uxth.w	r8, r8
 8007446:	141f      	asrs	r7, r3, #16
 8007448:	454d      	cmp	r5, r9
 800744a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800744e:	f84a 3b04 	str.w	r3, [sl], #4
 8007452:	d8e7      	bhi.n	8007424 <__mdiff+0x7c>
 8007454:	1b2b      	subs	r3, r5, r4
 8007456:	3b15      	subs	r3, #21
 8007458:	f023 0303 	bic.w	r3, r3, #3
 800745c:	3304      	adds	r3, #4
 800745e:	3415      	adds	r4, #21
 8007460:	42a5      	cmp	r5, r4
 8007462:	bf38      	it	cc
 8007464:	2304      	movcc	r3, #4
 8007466:	4419      	add	r1, r3
 8007468:	4473      	add	r3, lr
 800746a:	469e      	mov	lr, r3
 800746c:	460d      	mov	r5, r1
 800746e:	4565      	cmp	r5, ip
 8007470:	d30e      	bcc.n	8007490 <__mdiff+0xe8>
 8007472:	f10c 0203 	add.w	r2, ip, #3
 8007476:	1a52      	subs	r2, r2, r1
 8007478:	f022 0203 	bic.w	r2, r2, #3
 800747c:	3903      	subs	r1, #3
 800747e:	458c      	cmp	ip, r1
 8007480:	bf38      	it	cc
 8007482:	2200      	movcc	r2, #0
 8007484:	441a      	add	r2, r3
 8007486:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800748a:	b17b      	cbz	r3, 80074ac <__mdiff+0x104>
 800748c:	6106      	str	r6, [r0, #16]
 800748e:	e7a5      	b.n	80073dc <__mdiff+0x34>
 8007490:	f855 8b04 	ldr.w	r8, [r5], #4
 8007494:	fa17 f488 	uxtah	r4, r7, r8
 8007498:	1422      	asrs	r2, r4, #16
 800749a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800749e:	b2a4      	uxth	r4, r4
 80074a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80074a4:	f84e 4b04 	str.w	r4, [lr], #4
 80074a8:	1417      	asrs	r7, r2, #16
 80074aa:	e7e0      	b.n	800746e <__mdiff+0xc6>
 80074ac:	3e01      	subs	r6, #1
 80074ae:	e7ea      	b.n	8007486 <__mdiff+0xde>
 80074b0:	08008bc3 	.word	0x08008bc3
 80074b4:	08008bd4 	.word	0x08008bd4

080074b8 <__d2b>:
 80074b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4689      	mov	r9, r1
 80074be:	2101      	movs	r1, #1
 80074c0:	ec57 6b10 	vmov	r6, r7, d0
 80074c4:	4690      	mov	r8, r2
 80074c6:	f7ff fcd5 	bl	8006e74 <_Balloc>
 80074ca:	4604      	mov	r4, r0
 80074cc:	b930      	cbnz	r0, 80074dc <__d2b+0x24>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b25      	ldr	r3, [pc, #148]	; (8007568 <__d2b+0xb0>)
 80074d2:	4826      	ldr	r0, [pc, #152]	; (800756c <__d2b+0xb4>)
 80074d4:	f240 310a 	movw	r1, #778	; 0x30a
 80074d8:	f000 fa70 	bl	80079bc <__assert_func>
 80074dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80074e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074e4:	bb35      	cbnz	r5, 8007534 <__d2b+0x7c>
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	d028      	beq.n	800753e <__d2b+0x86>
 80074ec:	4668      	mov	r0, sp
 80074ee:	9600      	str	r6, [sp, #0]
 80074f0:	f7ff fd8c 	bl	800700c <__lo0bits>
 80074f4:	9900      	ldr	r1, [sp, #0]
 80074f6:	b300      	cbz	r0, 800753a <__d2b+0x82>
 80074f8:	9a01      	ldr	r2, [sp, #4]
 80074fa:	f1c0 0320 	rsb	r3, r0, #32
 80074fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007502:	430b      	orrs	r3, r1
 8007504:	40c2      	lsrs	r2, r0
 8007506:	6163      	str	r3, [r4, #20]
 8007508:	9201      	str	r2, [sp, #4]
 800750a:	9b01      	ldr	r3, [sp, #4]
 800750c:	61a3      	str	r3, [r4, #24]
 800750e:	2b00      	cmp	r3, #0
 8007510:	bf14      	ite	ne
 8007512:	2202      	movne	r2, #2
 8007514:	2201      	moveq	r2, #1
 8007516:	6122      	str	r2, [r4, #16]
 8007518:	b1d5      	cbz	r5, 8007550 <__d2b+0x98>
 800751a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800751e:	4405      	add	r5, r0
 8007520:	f8c9 5000 	str.w	r5, [r9]
 8007524:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007528:	f8c8 0000 	str.w	r0, [r8]
 800752c:	4620      	mov	r0, r4
 800752e:	b003      	add	sp, #12
 8007530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007538:	e7d5      	b.n	80074e6 <__d2b+0x2e>
 800753a:	6161      	str	r1, [r4, #20]
 800753c:	e7e5      	b.n	800750a <__d2b+0x52>
 800753e:	a801      	add	r0, sp, #4
 8007540:	f7ff fd64 	bl	800700c <__lo0bits>
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	6163      	str	r3, [r4, #20]
 8007548:	2201      	movs	r2, #1
 800754a:	6122      	str	r2, [r4, #16]
 800754c:	3020      	adds	r0, #32
 800754e:	e7e3      	b.n	8007518 <__d2b+0x60>
 8007550:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007554:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007558:	f8c9 0000 	str.w	r0, [r9]
 800755c:	6918      	ldr	r0, [r3, #16]
 800755e:	f7ff fd35 	bl	8006fcc <__hi0bits>
 8007562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007566:	e7df      	b.n	8007528 <__d2b+0x70>
 8007568:	08008bc3 	.word	0x08008bc3
 800756c:	08008bd4 	.word	0x08008bd4

08007570 <_calloc_r>:
 8007570:	b513      	push	{r0, r1, r4, lr}
 8007572:	434a      	muls	r2, r1
 8007574:	4611      	mov	r1, r2
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	f000 f85a 	bl	8007630 <_malloc_r>
 800757c:	4604      	mov	r4, r0
 800757e:	b118      	cbz	r0, 8007588 <_calloc_r+0x18>
 8007580:	9a01      	ldr	r2, [sp, #4]
 8007582:	2100      	movs	r1, #0
 8007584:	f7fe f944 	bl	8005810 <memset>
 8007588:	4620      	mov	r0, r4
 800758a:	b002      	add	sp, #8
 800758c:	bd10      	pop	{r4, pc}
	...

08007590 <_free_r>:
 8007590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007592:	2900      	cmp	r1, #0
 8007594:	d048      	beq.n	8007628 <_free_r+0x98>
 8007596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759a:	9001      	str	r0, [sp, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f1a1 0404 	sub.w	r4, r1, #4
 80075a2:	bfb8      	it	lt
 80075a4:	18e4      	addlt	r4, r4, r3
 80075a6:	f000 fa65 	bl	8007a74 <__malloc_lock>
 80075aa:	4a20      	ldr	r2, [pc, #128]	; (800762c <_free_r+0x9c>)
 80075ac:	9801      	ldr	r0, [sp, #4]
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	4615      	mov	r5, r2
 80075b2:	b933      	cbnz	r3, 80075c2 <_free_r+0x32>
 80075b4:	6063      	str	r3, [r4, #4]
 80075b6:	6014      	str	r4, [r2, #0]
 80075b8:	b003      	add	sp, #12
 80075ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075be:	f000 ba5f 	b.w	8007a80 <__malloc_unlock>
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d90b      	bls.n	80075de <_free_r+0x4e>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	1862      	adds	r2, r4, r1
 80075ca:	4293      	cmp	r3, r2
 80075cc:	bf04      	itt	eq
 80075ce:	681a      	ldreq	r2, [r3, #0]
 80075d0:	685b      	ldreq	r3, [r3, #4]
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	bf04      	itt	eq
 80075d6:	1852      	addeq	r2, r2, r1
 80075d8:	6022      	streq	r2, [r4, #0]
 80075da:	602c      	str	r4, [r5, #0]
 80075dc:	e7ec      	b.n	80075b8 <_free_r+0x28>
 80075de:	461a      	mov	r2, r3
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	b10b      	cbz	r3, 80075e8 <_free_r+0x58>
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	d9fa      	bls.n	80075de <_free_r+0x4e>
 80075e8:	6811      	ldr	r1, [r2, #0]
 80075ea:	1855      	adds	r5, r2, r1
 80075ec:	42a5      	cmp	r5, r4
 80075ee:	d10b      	bne.n	8007608 <_free_r+0x78>
 80075f0:	6824      	ldr	r4, [r4, #0]
 80075f2:	4421      	add	r1, r4
 80075f4:	1854      	adds	r4, r2, r1
 80075f6:	42a3      	cmp	r3, r4
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	d1dd      	bne.n	80075b8 <_free_r+0x28>
 80075fc:	681c      	ldr	r4, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	6053      	str	r3, [r2, #4]
 8007602:	4421      	add	r1, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	e7d7      	b.n	80075b8 <_free_r+0x28>
 8007608:	d902      	bls.n	8007610 <_free_r+0x80>
 800760a:	230c      	movs	r3, #12
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	e7d3      	b.n	80075b8 <_free_r+0x28>
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	1961      	adds	r1, r4, r5
 8007614:	428b      	cmp	r3, r1
 8007616:	bf04      	itt	eq
 8007618:	6819      	ldreq	r1, [r3, #0]
 800761a:	685b      	ldreq	r3, [r3, #4]
 800761c:	6063      	str	r3, [r4, #4]
 800761e:	bf04      	itt	eq
 8007620:	1949      	addeq	r1, r1, r5
 8007622:	6021      	streq	r1, [r4, #0]
 8007624:	6054      	str	r4, [r2, #4]
 8007626:	e7c7      	b.n	80075b8 <_free_r+0x28>
 8007628:	b003      	add	sp, #12
 800762a:	bd30      	pop	{r4, r5, pc}
 800762c:	20000600 	.word	0x20000600

08007630 <_malloc_r>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	1ccd      	adds	r5, r1, #3
 8007634:	f025 0503 	bic.w	r5, r5, #3
 8007638:	3508      	adds	r5, #8
 800763a:	2d0c      	cmp	r5, #12
 800763c:	bf38      	it	cc
 800763e:	250c      	movcc	r5, #12
 8007640:	2d00      	cmp	r5, #0
 8007642:	4606      	mov	r6, r0
 8007644:	db01      	blt.n	800764a <_malloc_r+0x1a>
 8007646:	42a9      	cmp	r1, r5
 8007648:	d903      	bls.n	8007652 <_malloc_r+0x22>
 800764a:	230c      	movs	r3, #12
 800764c:	6033      	str	r3, [r6, #0]
 800764e:	2000      	movs	r0, #0
 8007650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007652:	f000 fa0f 	bl	8007a74 <__malloc_lock>
 8007656:	4921      	ldr	r1, [pc, #132]	; (80076dc <_malloc_r+0xac>)
 8007658:	680a      	ldr	r2, [r1, #0]
 800765a:	4614      	mov	r4, r2
 800765c:	b99c      	cbnz	r4, 8007686 <_malloc_r+0x56>
 800765e:	4f20      	ldr	r7, [pc, #128]	; (80076e0 <_malloc_r+0xb0>)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	b923      	cbnz	r3, 800766e <_malloc_r+0x3e>
 8007664:	4621      	mov	r1, r4
 8007666:	4630      	mov	r0, r6
 8007668:	f000 f998 	bl	800799c <_sbrk_r>
 800766c:	6038      	str	r0, [r7, #0]
 800766e:	4629      	mov	r1, r5
 8007670:	4630      	mov	r0, r6
 8007672:	f000 f993 	bl	800799c <_sbrk_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	d123      	bne.n	80076c2 <_malloc_r+0x92>
 800767a:	230c      	movs	r3, #12
 800767c:	6033      	str	r3, [r6, #0]
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f9fe 	bl	8007a80 <__malloc_unlock>
 8007684:	e7e3      	b.n	800764e <_malloc_r+0x1e>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	1b5b      	subs	r3, r3, r5
 800768a:	d417      	bmi.n	80076bc <_malloc_r+0x8c>
 800768c:	2b0b      	cmp	r3, #11
 800768e:	d903      	bls.n	8007698 <_malloc_r+0x68>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	441c      	add	r4, r3
 8007694:	6025      	str	r5, [r4, #0]
 8007696:	e004      	b.n	80076a2 <_malloc_r+0x72>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	42a2      	cmp	r2, r4
 800769c:	bf0c      	ite	eq
 800769e:	600b      	streq	r3, [r1, #0]
 80076a0:	6053      	strne	r3, [r2, #4]
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 f9ec 	bl	8007a80 <__malloc_unlock>
 80076a8:	f104 000b 	add.w	r0, r4, #11
 80076ac:	1d23      	adds	r3, r4, #4
 80076ae:	f020 0007 	bic.w	r0, r0, #7
 80076b2:	1ac2      	subs	r2, r0, r3
 80076b4:	d0cc      	beq.n	8007650 <_malloc_r+0x20>
 80076b6:	1a1b      	subs	r3, r3, r0
 80076b8:	50a3      	str	r3, [r4, r2]
 80076ba:	e7c9      	b.n	8007650 <_malloc_r+0x20>
 80076bc:	4622      	mov	r2, r4
 80076be:	6864      	ldr	r4, [r4, #4]
 80076c0:	e7cc      	b.n	800765c <_malloc_r+0x2c>
 80076c2:	1cc4      	adds	r4, r0, #3
 80076c4:	f024 0403 	bic.w	r4, r4, #3
 80076c8:	42a0      	cmp	r0, r4
 80076ca:	d0e3      	beq.n	8007694 <_malloc_r+0x64>
 80076cc:	1a21      	subs	r1, r4, r0
 80076ce:	4630      	mov	r0, r6
 80076d0:	f000 f964 	bl	800799c <_sbrk_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1dd      	bne.n	8007694 <_malloc_r+0x64>
 80076d8:	e7cf      	b.n	800767a <_malloc_r+0x4a>
 80076da:	bf00      	nop
 80076dc:	20000600 	.word	0x20000600
 80076e0:	20000604 	.word	0x20000604

080076e4 <__ssputs_r>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	688e      	ldr	r6, [r1, #8]
 80076ea:	429e      	cmp	r6, r3
 80076ec:	4682      	mov	sl, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4690      	mov	r8, r2
 80076f2:	461f      	mov	r7, r3
 80076f4:	d838      	bhi.n	8007768 <__ssputs_r+0x84>
 80076f6:	898a      	ldrh	r2, [r1, #12]
 80076f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076fc:	d032      	beq.n	8007764 <__ssputs_r+0x80>
 80076fe:	6825      	ldr	r5, [r4, #0]
 8007700:	6909      	ldr	r1, [r1, #16]
 8007702:	eba5 0901 	sub.w	r9, r5, r1
 8007706:	6965      	ldr	r5, [r4, #20]
 8007708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800770c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007710:	3301      	adds	r3, #1
 8007712:	444b      	add	r3, r9
 8007714:	106d      	asrs	r5, r5, #1
 8007716:	429d      	cmp	r5, r3
 8007718:	bf38      	it	cc
 800771a:	461d      	movcc	r5, r3
 800771c:	0553      	lsls	r3, r2, #21
 800771e:	d531      	bpl.n	8007784 <__ssputs_r+0xa0>
 8007720:	4629      	mov	r1, r5
 8007722:	f7ff ff85 	bl	8007630 <_malloc_r>
 8007726:	4606      	mov	r6, r0
 8007728:	b950      	cbnz	r0, 8007740 <__ssputs_r+0x5c>
 800772a:	230c      	movs	r3, #12
 800772c:	f8ca 3000 	str.w	r3, [sl]
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	6921      	ldr	r1, [r4, #16]
 8007742:	464a      	mov	r2, r9
 8007744:	f7ff fb88 	bl	8006e58 <memcpy>
 8007748:	89a3      	ldrh	r3, [r4, #12]
 800774a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800774e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	6126      	str	r6, [r4, #16]
 8007756:	6165      	str	r5, [r4, #20]
 8007758:	444e      	add	r6, r9
 800775a:	eba5 0509 	sub.w	r5, r5, r9
 800775e:	6026      	str	r6, [r4, #0]
 8007760:	60a5      	str	r5, [r4, #8]
 8007762:	463e      	mov	r6, r7
 8007764:	42be      	cmp	r6, r7
 8007766:	d900      	bls.n	800776a <__ssputs_r+0x86>
 8007768:	463e      	mov	r6, r7
 800776a:	4632      	mov	r2, r6
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	4641      	mov	r1, r8
 8007770:	f000 f966 	bl	8007a40 <memmove>
 8007774:	68a3      	ldr	r3, [r4, #8]
 8007776:	6822      	ldr	r2, [r4, #0]
 8007778:	1b9b      	subs	r3, r3, r6
 800777a:	4432      	add	r2, r6
 800777c:	60a3      	str	r3, [r4, #8]
 800777e:	6022      	str	r2, [r4, #0]
 8007780:	2000      	movs	r0, #0
 8007782:	e7db      	b.n	800773c <__ssputs_r+0x58>
 8007784:	462a      	mov	r2, r5
 8007786:	f000 f981 	bl	8007a8c <_realloc_r>
 800778a:	4606      	mov	r6, r0
 800778c:	2800      	cmp	r0, #0
 800778e:	d1e1      	bne.n	8007754 <__ssputs_r+0x70>
 8007790:	6921      	ldr	r1, [r4, #16]
 8007792:	4650      	mov	r0, sl
 8007794:	f7ff fefc 	bl	8007590 <_free_r>
 8007798:	e7c7      	b.n	800772a <__ssputs_r+0x46>
	...

0800779c <_svfiprintf_r>:
 800779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a0:	4698      	mov	r8, r3
 80077a2:	898b      	ldrh	r3, [r1, #12]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	b09d      	sub	sp, #116	; 0x74
 80077a8:	4607      	mov	r7, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	4614      	mov	r4, r2
 80077ae:	d50e      	bpl.n	80077ce <_svfiprintf_r+0x32>
 80077b0:	690b      	ldr	r3, [r1, #16]
 80077b2:	b963      	cbnz	r3, 80077ce <_svfiprintf_r+0x32>
 80077b4:	2140      	movs	r1, #64	; 0x40
 80077b6:	f7ff ff3b 	bl	8007630 <_malloc_r>
 80077ba:	6028      	str	r0, [r5, #0]
 80077bc:	6128      	str	r0, [r5, #16]
 80077be:	b920      	cbnz	r0, 80077ca <_svfiprintf_r+0x2e>
 80077c0:	230c      	movs	r3, #12
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	e0d1      	b.n	800796e <_svfiprintf_r+0x1d2>
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	616b      	str	r3, [r5, #20]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9309      	str	r3, [sp, #36]	; 0x24
 80077d2:	2320      	movs	r3, #32
 80077d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80077dc:	2330      	movs	r3, #48	; 0x30
 80077de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007988 <_svfiprintf_r+0x1ec>
 80077e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e6:	f04f 0901 	mov.w	r9, #1
 80077ea:	4623      	mov	r3, r4
 80077ec:	469a      	mov	sl, r3
 80077ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f2:	b10a      	cbz	r2, 80077f8 <_svfiprintf_r+0x5c>
 80077f4:	2a25      	cmp	r2, #37	; 0x25
 80077f6:	d1f9      	bne.n	80077ec <_svfiprintf_r+0x50>
 80077f8:	ebba 0b04 	subs.w	fp, sl, r4
 80077fc:	d00b      	beq.n	8007816 <_svfiprintf_r+0x7a>
 80077fe:	465b      	mov	r3, fp
 8007800:	4622      	mov	r2, r4
 8007802:	4629      	mov	r1, r5
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff ff6d 	bl	80076e4 <__ssputs_r>
 800780a:	3001      	adds	r0, #1
 800780c:	f000 80aa 	beq.w	8007964 <_svfiprintf_r+0x1c8>
 8007810:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007812:	445a      	add	r2, fp
 8007814:	9209      	str	r2, [sp, #36]	; 0x24
 8007816:	f89a 3000 	ldrb.w	r3, [sl]
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 80a2 	beq.w	8007964 <_svfiprintf_r+0x1c8>
 8007820:	2300      	movs	r3, #0
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800782a:	f10a 0a01 	add.w	sl, sl, #1
 800782e:	9304      	str	r3, [sp, #16]
 8007830:	9307      	str	r3, [sp, #28]
 8007832:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007836:	931a      	str	r3, [sp, #104]	; 0x68
 8007838:	4654      	mov	r4, sl
 800783a:	2205      	movs	r2, #5
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	4851      	ldr	r0, [pc, #324]	; (8007988 <_svfiprintf_r+0x1ec>)
 8007842:	f7f8 fcd5 	bl	80001f0 <memchr>
 8007846:	9a04      	ldr	r2, [sp, #16]
 8007848:	b9d8      	cbnz	r0, 8007882 <_svfiprintf_r+0xe6>
 800784a:	06d0      	lsls	r0, r2, #27
 800784c:	bf44      	itt	mi
 800784e:	2320      	movmi	r3, #32
 8007850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007854:	0711      	lsls	r1, r2, #28
 8007856:	bf44      	itt	mi
 8007858:	232b      	movmi	r3, #43	; 0x2b
 800785a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785e:	f89a 3000 	ldrb.w	r3, [sl]
 8007862:	2b2a      	cmp	r3, #42	; 0x2a
 8007864:	d015      	beq.n	8007892 <_svfiprintf_r+0xf6>
 8007866:	9a07      	ldr	r2, [sp, #28]
 8007868:	4654      	mov	r4, sl
 800786a:	2000      	movs	r0, #0
 800786c:	f04f 0c0a 	mov.w	ip, #10
 8007870:	4621      	mov	r1, r4
 8007872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007876:	3b30      	subs	r3, #48	; 0x30
 8007878:	2b09      	cmp	r3, #9
 800787a:	d94e      	bls.n	800791a <_svfiprintf_r+0x17e>
 800787c:	b1b0      	cbz	r0, 80078ac <_svfiprintf_r+0x110>
 800787e:	9207      	str	r2, [sp, #28]
 8007880:	e014      	b.n	80078ac <_svfiprintf_r+0x110>
 8007882:	eba0 0308 	sub.w	r3, r0, r8
 8007886:	fa09 f303 	lsl.w	r3, r9, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	46a2      	mov	sl, r4
 8007890:	e7d2      	b.n	8007838 <_svfiprintf_r+0x9c>
 8007892:	9b03      	ldr	r3, [sp, #12]
 8007894:	1d19      	adds	r1, r3, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	9103      	str	r1, [sp, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfbb      	ittet	lt
 800789e:	425b      	neglt	r3, r3
 80078a0:	f042 0202 	orrlt.w	r2, r2, #2
 80078a4:	9307      	strge	r3, [sp, #28]
 80078a6:	9307      	strlt	r3, [sp, #28]
 80078a8:	bfb8      	it	lt
 80078aa:	9204      	strlt	r2, [sp, #16]
 80078ac:	7823      	ldrb	r3, [r4, #0]
 80078ae:	2b2e      	cmp	r3, #46	; 0x2e
 80078b0:	d10c      	bne.n	80078cc <_svfiprintf_r+0x130>
 80078b2:	7863      	ldrb	r3, [r4, #1]
 80078b4:	2b2a      	cmp	r3, #42	; 0x2a
 80078b6:	d135      	bne.n	8007924 <_svfiprintf_r+0x188>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	1d1a      	adds	r2, r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	9203      	str	r2, [sp, #12]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bfb8      	it	lt
 80078c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c8:	3402      	adds	r4, #2
 80078ca:	9305      	str	r3, [sp, #20]
 80078cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007998 <_svfiprintf_r+0x1fc>
 80078d0:	7821      	ldrb	r1, [r4, #0]
 80078d2:	2203      	movs	r2, #3
 80078d4:	4650      	mov	r0, sl
 80078d6:	f7f8 fc8b 	bl	80001f0 <memchr>
 80078da:	b140      	cbz	r0, 80078ee <_svfiprintf_r+0x152>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	eba0 000a 	sub.w	r0, r0, sl
 80078e2:	fa03 f000 	lsl.w	r0, r3, r0
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	4303      	orrs	r3, r0
 80078ea:	3401      	adds	r4, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f2:	4826      	ldr	r0, [pc, #152]	; (800798c <_svfiprintf_r+0x1f0>)
 80078f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f8:	2206      	movs	r2, #6
 80078fa:	f7f8 fc79 	bl	80001f0 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d038      	beq.n	8007974 <_svfiprintf_r+0x1d8>
 8007902:	4b23      	ldr	r3, [pc, #140]	; (8007990 <_svfiprintf_r+0x1f4>)
 8007904:	bb1b      	cbnz	r3, 800794e <_svfiprintf_r+0x1b2>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	3308      	adds	r3, #8
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	4433      	add	r3, r6
 8007916:	9309      	str	r3, [sp, #36]	; 0x24
 8007918:	e767      	b.n	80077ea <_svfiprintf_r+0x4e>
 800791a:	fb0c 3202 	mla	r2, ip, r2, r3
 800791e:	460c      	mov	r4, r1
 8007920:	2001      	movs	r0, #1
 8007922:	e7a5      	b.n	8007870 <_svfiprintf_r+0xd4>
 8007924:	2300      	movs	r3, #0
 8007926:	3401      	adds	r4, #1
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4619      	mov	r1, r3
 800792c:	f04f 0c0a 	mov.w	ip, #10
 8007930:	4620      	mov	r0, r4
 8007932:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007936:	3a30      	subs	r2, #48	; 0x30
 8007938:	2a09      	cmp	r2, #9
 800793a:	d903      	bls.n	8007944 <_svfiprintf_r+0x1a8>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0c5      	beq.n	80078cc <_svfiprintf_r+0x130>
 8007940:	9105      	str	r1, [sp, #20]
 8007942:	e7c3      	b.n	80078cc <_svfiprintf_r+0x130>
 8007944:	fb0c 2101 	mla	r1, ip, r1, r2
 8007948:	4604      	mov	r4, r0
 800794a:	2301      	movs	r3, #1
 800794c:	e7f0      	b.n	8007930 <_svfiprintf_r+0x194>
 800794e:	ab03      	add	r3, sp, #12
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	462a      	mov	r2, r5
 8007954:	4b0f      	ldr	r3, [pc, #60]	; (8007994 <_svfiprintf_r+0x1f8>)
 8007956:	a904      	add	r1, sp, #16
 8007958:	4638      	mov	r0, r7
 800795a:	f7fe f801 	bl	8005960 <_printf_float>
 800795e:	1c42      	adds	r2, r0, #1
 8007960:	4606      	mov	r6, r0
 8007962:	d1d6      	bne.n	8007912 <_svfiprintf_r+0x176>
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	065b      	lsls	r3, r3, #25
 8007968:	f53f af2c 	bmi.w	80077c4 <_svfiprintf_r+0x28>
 800796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800796e:	b01d      	add	sp, #116	; 0x74
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	462a      	mov	r2, r5
 800797a:	4b06      	ldr	r3, [pc, #24]	; (8007994 <_svfiprintf_r+0x1f8>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	4638      	mov	r0, r7
 8007980:	f7fe fa92 	bl	8005ea8 <_printf_i>
 8007984:	e7eb      	b.n	800795e <_svfiprintf_r+0x1c2>
 8007986:	bf00      	nop
 8007988:	08008d34 	.word	0x08008d34
 800798c:	08008d3e 	.word	0x08008d3e
 8007990:	08005961 	.word	0x08005961
 8007994:	080076e5 	.word	0x080076e5
 8007998:	08008d3a 	.word	0x08008d3a

0800799c <_sbrk_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d06      	ldr	r5, [pc, #24]	; (80079b8 <_sbrk_r+0x1c>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7fa fce8 	bl	800237c <_sbrk>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_sbrk_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_sbrk_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	200007cc 	.word	0x200007cc

080079bc <__assert_func>:
 80079bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079be:	4614      	mov	r4, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <__assert_func+0x2c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4605      	mov	r5, r0
 80079c8:	68d8      	ldr	r0, [r3, #12]
 80079ca:	b14c      	cbz	r4, 80079e0 <__assert_func+0x24>
 80079cc:	4b07      	ldr	r3, [pc, #28]	; (80079ec <__assert_func+0x30>)
 80079ce:	9100      	str	r1, [sp, #0]
 80079d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80079d4:	4906      	ldr	r1, [pc, #24]	; (80079f0 <__assert_func+0x34>)
 80079d6:	462b      	mov	r3, r5
 80079d8:	f000 f80e 	bl	80079f8 <fiprintf>
 80079dc:	f000 faa4 	bl	8007f28 <abort>
 80079e0:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <__assert_func+0x38>)
 80079e2:	461c      	mov	r4, r3
 80079e4:	e7f3      	b.n	80079ce <__assert_func+0x12>
 80079e6:	bf00      	nop
 80079e8:	2000000c 	.word	0x2000000c
 80079ec:	08008d45 	.word	0x08008d45
 80079f0:	08008d52 	.word	0x08008d52
 80079f4:	08008d80 	.word	0x08008d80

080079f8 <fiprintf>:
 80079f8:	b40e      	push	{r1, r2, r3}
 80079fa:	b503      	push	{r0, r1, lr}
 80079fc:	4601      	mov	r1, r0
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	4805      	ldr	r0, [pc, #20]	; (8007a18 <fiprintf+0x20>)
 8007a02:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	9301      	str	r3, [sp, #4]
 8007a0a:	f000 f88f 	bl	8007b2c <_vfiprintf_r>
 8007a0e:	b002      	add	sp, #8
 8007a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a14:	b003      	add	sp, #12
 8007a16:	4770      	bx	lr
 8007a18:	2000000c 	.word	0x2000000c

08007a1c <__ascii_mbtowc>:
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	b901      	cbnz	r1, 8007a22 <__ascii_mbtowc+0x6>
 8007a20:	a901      	add	r1, sp, #4
 8007a22:	b142      	cbz	r2, 8007a36 <__ascii_mbtowc+0x1a>
 8007a24:	b14b      	cbz	r3, 8007a3a <__ascii_mbtowc+0x1e>
 8007a26:	7813      	ldrb	r3, [r2, #0]
 8007a28:	600b      	str	r3, [r1, #0]
 8007a2a:	7812      	ldrb	r2, [r2, #0]
 8007a2c:	1e10      	subs	r0, r2, #0
 8007a2e:	bf18      	it	ne
 8007a30:	2001      	movne	r0, #1
 8007a32:	b002      	add	sp, #8
 8007a34:	4770      	bx	lr
 8007a36:	4610      	mov	r0, r2
 8007a38:	e7fb      	b.n	8007a32 <__ascii_mbtowc+0x16>
 8007a3a:	f06f 0001 	mvn.w	r0, #1
 8007a3e:	e7f8      	b.n	8007a32 <__ascii_mbtowc+0x16>

08007a40 <memmove>:
 8007a40:	4288      	cmp	r0, r1
 8007a42:	b510      	push	{r4, lr}
 8007a44:	eb01 0402 	add.w	r4, r1, r2
 8007a48:	d902      	bls.n	8007a50 <memmove+0x10>
 8007a4a:	4284      	cmp	r4, r0
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	d807      	bhi.n	8007a60 <memmove+0x20>
 8007a50:	1e43      	subs	r3, r0, #1
 8007a52:	42a1      	cmp	r1, r4
 8007a54:	d008      	beq.n	8007a68 <memmove+0x28>
 8007a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a5e:	e7f8      	b.n	8007a52 <memmove+0x12>
 8007a60:	4402      	add	r2, r0
 8007a62:	4601      	mov	r1, r0
 8007a64:	428a      	cmp	r2, r1
 8007a66:	d100      	bne.n	8007a6a <memmove+0x2a>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a72:	e7f7      	b.n	8007a64 <memmove+0x24>

08007a74 <__malloc_lock>:
 8007a74:	4801      	ldr	r0, [pc, #4]	; (8007a7c <__malloc_lock+0x8>)
 8007a76:	f000 bc17 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 8007a7a:	bf00      	nop
 8007a7c:	200007d4 	.word	0x200007d4

08007a80 <__malloc_unlock>:
 8007a80:	4801      	ldr	r0, [pc, #4]	; (8007a88 <__malloc_unlock+0x8>)
 8007a82:	f000 bc12 	b.w	80082aa <__retarget_lock_release_recursive>
 8007a86:	bf00      	nop
 8007a88:	200007d4 	.word	0x200007d4

08007a8c <_realloc_r>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	4607      	mov	r7, r0
 8007a90:	4614      	mov	r4, r2
 8007a92:	460e      	mov	r6, r1
 8007a94:	b921      	cbnz	r1, 8007aa0 <_realloc_r+0x14>
 8007a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	f7ff bdc8 	b.w	8007630 <_malloc_r>
 8007aa0:	b922      	cbnz	r2, 8007aac <_realloc_r+0x20>
 8007aa2:	f7ff fd75 	bl	8007590 <_free_r>
 8007aa6:	4625      	mov	r5, r4
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aac:	f000 fc62 	bl	8008374 <_malloc_usable_size_r>
 8007ab0:	42a0      	cmp	r0, r4
 8007ab2:	d20f      	bcs.n	8007ad4 <_realloc_r+0x48>
 8007ab4:	4621      	mov	r1, r4
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff fdba 	bl	8007630 <_malloc_r>
 8007abc:	4605      	mov	r5, r0
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	d0f2      	beq.n	8007aa8 <_realloc_r+0x1c>
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	f7ff f9c7 	bl	8006e58 <memcpy>
 8007aca:	4631      	mov	r1, r6
 8007acc:	4638      	mov	r0, r7
 8007ace:	f7ff fd5f 	bl	8007590 <_free_r>
 8007ad2:	e7e9      	b.n	8007aa8 <_realloc_r+0x1c>
 8007ad4:	4635      	mov	r5, r6
 8007ad6:	e7e7      	b.n	8007aa8 <_realloc_r+0x1c>

08007ad8 <__sfputc_r>:
 8007ad8:	6893      	ldr	r3, [r2, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	b410      	push	{r4}
 8007ae0:	6093      	str	r3, [r2, #8]
 8007ae2:	da08      	bge.n	8007af6 <__sfputc_r+0x1e>
 8007ae4:	6994      	ldr	r4, [r2, #24]
 8007ae6:	42a3      	cmp	r3, r4
 8007ae8:	db01      	blt.n	8007aee <__sfputc_r+0x16>
 8007aea:	290a      	cmp	r1, #10
 8007aec:	d103      	bne.n	8007af6 <__sfputc_r+0x1e>
 8007aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007af2:	f000 b94b 	b.w	8007d8c <__swbuf_r>
 8007af6:	6813      	ldr	r3, [r2, #0]
 8007af8:	1c58      	adds	r0, r3, #1
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	7019      	strb	r1, [r3, #0]
 8007afe:	4608      	mov	r0, r1
 8007b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <__sfputs_r>:
 8007b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	18d5      	adds	r5, r2, r3
 8007b10:	42ac      	cmp	r4, r5
 8007b12:	d101      	bne.n	8007b18 <__sfputs_r+0x12>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e007      	b.n	8007b28 <__sfputs_r+0x22>
 8007b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1c:	463a      	mov	r2, r7
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7ff ffda 	bl	8007ad8 <__sfputc_r>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d1f3      	bne.n	8007b10 <__sfputs_r+0xa>
 8007b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b2c <_vfiprintf_r>:
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	460d      	mov	r5, r1
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	4614      	mov	r4, r2
 8007b36:	4698      	mov	r8, r3
 8007b38:	4606      	mov	r6, r0
 8007b3a:	b118      	cbz	r0, 8007b44 <_vfiprintf_r+0x18>
 8007b3c:	6983      	ldr	r3, [r0, #24]
 8007b3e:	b90b      	cbnz	r3, 8007b44 <_vfiprintf_r+0x18>
 8007b40:	f000 fb14 	bl	800816c <__sinit>
 8007b44:	4b89      	ldr	r3, [pc, #548]	; (8007d6c <_vfiprintf_r+0x240>)
 8007b46:	429d      	cmp	r5, r3
 8007b48:	d11b      	bne.n	8007b82 <_vfiprintf_r+0x56>
 8007b4a:	6875      	ldr	r5, [r6, #4]
 8007b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b4e:	07d9      	lsls	r1, r3, #31
 8007b50:	d405      	bmi.n	8007b5e <_vfiprintf_r+0x32>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	059a      	lsls	r2, r3, #22
 8007b56:	d402      	bmi.n	8007b5e <_vfiprintf_r+0x32>
 8007b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5a:	f000 fba5 	bl	80082a8 <__retarget_lock_acquire_recursive>
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	071b      	lsls	r3, r3, #28
 8007b62:	d501      	bpl.n	8007b68 <_vfiprintf_r+0x3c>
 8007b64:	692b      	ldr	r3, [r5, #16]
 8007b66:	b9eb      	cbnz	r3, 8007ba4 <_vfiprintf_r+0x78>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 f96e 	bl	8007e4c <__swsetup_r>
 8007b70:	b1c0      	cbz	r0, 8007ba4 <_vfiprintf_r+0x78>
 8007b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b74:	07dc      	lsls	r4, r3, #31
 8007b76:	d50e      	bpl.n	8007b96 <_vfiprintf_r+0x6a>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	b01d      	add	sp, #116	; 0x74
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	4b7b      	ldr	r3, [pc, #492]	; (8007d70 <_vfiprintf_r+0x244>)
 8007b84:	429d      	cmp	r5, r3
 8007b86:	d101      	bne.n	8007b8c <_vfiprintf_r+0x60>
 8007b88:	68b5      	ldr	r5, [r6, #8]
 8007b8a:	e7df      	b.n	8007b4c <_vfiprintf_r+0x20>
 8007b8c:	4b79      	ldr	r3, [pc, #484]	; (8007d74 <_vfiprintf_r+0x248>)
 8007b8e:	429d      	cmp	r5, r3
 8007b90:	bf08      	it	eq
 8007b92:	68f5      	ldreq	r5, [r6, #12]
 8007b94:	e7da      	b.n	8007b4c <_vfiprintf_r+0x20>
 8007b96:	89ab      	ldrh	r3, [r5, #12]
 8007b98:	0598      	lsls	r0, r3, #22
 8007b9a:	d4ed      	bmi.n	8007b78 <_vfiprintf_r+0x4c>
 8007b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b9e:	f000 fb84 	bl	80082aa <__retarget_lock_release_recursive>
 8007ba2:	e7e9      	b.n	8007b78 <_vfiprintf_r+0x4c>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba8:	2320      	movs	r3, #32
 8007baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bb2:	2330      	movs	r3, #48	; 0x30
 8007bb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d78 <_vfiprintf_r+0x24c>
 8007bb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bbc:	f04f 0901 	mov.w	r9, #1
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	469a      	mov	sl, r3
 8007bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bc8:	b10a      	cbz	r2, 8007bce <_vfiprintf_r+0xa2>
 8007bca:	2a25      	cmp	r2, #37	; 0x25
 8007bcc:	d1f9      	bne.n	8007bc2 <_vfiprintf_r+0x96>
 8007bce:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd2:	d00b      	beq.n	8007bec <_vfiprintf_r+0xc0>
 8007bd4:	465b      	mov	r3, fp
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ff93 	bl	8007b06 <__sfputs_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	f000 80aa 	beq.w	8007d3a <_vfiprintf_r+0x20e>
 8007be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be8:	445a      	add	r2, fp
 8007bea:	9209      	str	r2, [sp, #36]	; 0x24
 8007bec:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 80a2 	beq.w	8007d3a <_vfiprintf_r+0x20e>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c00:	f10a 0a01 	add.w	sl, sl, #1
 8007c04:	9304      	str	r3, [sp, #16]
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007c0e:	4654      	mov	r4, sl
 8007c10:	2205      	movs	r2, #5
 8007c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c16:	4858      	ldr	r0, [pc, #352]	; (8007d78 <_vfiprintf_r+0x24c>)
 8007c18:	f7f8 faea 	bl	80001f0 <memchr>
 8007c1c:	9a04      	ldr	r2, [sp, #16]
 8007c1e:	b9d8      	cbnz	r0, 8007c58 <_vfiprintf_r+0x12c>
 8007c20:	06d1      	lsls	r1, r2, #27
 8007c22:	bf44      	itt	mi
 8007c24:	2320      	movmi	r3, #32
 8007c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c2a:	0713      	lsls	r3, r2, #28
 8007c2c:	bf44      	itt	mi
 8007c2e:	232b      	movmi	r3, #43	; 0x2b
 8007c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c34:	f89a 3000 	ldrb.w	r3, [sl]
 8007c38:	2b2a      	cmp	r3, #42	; 0x2a
 8007c3a:	d015      	beq.n	8007c68 <_vfiprintf_r+0x13c>
 8007c3c:	9a07      	ldr	r2, [sp, #28]
 8007c3e:	4654      	mov	r4, sl
 8007c40:	2000      	movs	r0, #0
 8007c42:	f04f 0c0a 	mov.w	ip, #10
 8007c46:	4621      	mov	r1, r4
 8007c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c4c:	3b30      	subs	r3, #48	; 0x30
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d94e      	bls.n	8007cf0 <_vfiprintf_r+0x1c4>
 8007c52:	b1b0      	cbz	r0, 8007c82 <_vfiprintf_r+0x156>
 8007c54:	9207      	str	r2, [sp, #28]
 8007c56:	e014      	b.n	8007c82 <_vfiprintf_r+0x156>
 8007c58:	eba0 0308 	sub.w	r3, r0, r8
 8007c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007c60:	4313      	orrs	r3, r2
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	46a2      	mov	sl, r4
 8007c66:	e7d2      	b.n	8007c0e <_vfiprintf_r+0xe2>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	1d19      	adds	r1, r3, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	9103      	str	r1, [sp, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfbb      	ittet	lt
 8007c74:	425b      	neglt	r3, r3
 8007c76:	f042 0202 	orrlt.w	r2, r2, #2
 8007c7a:	9307      	strge	r3, [sp, #28]
 8007c7c:	9307      	strlt	r3, [sp, #28]
 8007c7e:	bfb8      	it	lt
 8007c80:	9204      	strlt	r2, [sp, #16]
 8007c82:	7823      	ldrb	r3, [r4, #0]
 8007c84:	2b2e      	cmp	r3, #46	; 0x2e
 8007c86:	d10c      	bne.n	8007ca2 <_vfiprintf_r+0x176>
 8007c88:	7863      	ldrb	r3, [r4, #1]
 8007c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8c:	d135      	bne.n	8007cfa <_vfiprintf_r+0x1ce>
 8007c8e:	9b03      	ldr	r3, [sp, #12]
 8007c90:	1d1a      	adds	r2, r3, #4
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	9203      	str	r2, [sp, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	bfb8      	it	lt
 8007c9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c9e:	3402      	adds	r4, #2
 8007ca0:	9305      	str	r3, [sp, #20]
 8007ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d88 <_vfiprintf_r+0x25c>
 8007ca6:	7821      	ldrb	r1, [r4, #0]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 faa0 	bl	80001f0 <memchr>
 8007cb0:	b140      	cbz	r0, 8007cc4 <_vfiprintf_r+0x198>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	eba0 000a 	sub.w	r0, r0, sl
 8007cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007cbc:	9b04      	ldr	r3, [sp, #16]
 8007cbe:	4303      	orrs	r3, r0
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cc8:	482c      	ldr	r0, [pc, #176]	; (8007d7c <_vfiprintf_r+0x250>)
 8007cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cce:	2206      	movs	r2, #6
 8007cd0:	f7f8 fa8e 	bl	80001f0 <memchr>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d03f      	beq.n	8007d58 <_vfiprintf_r+0x22c>
 8007cd8:	4b29      	ldr	r3, [pc, #164]	; (8007d80 <_vfiprintf_r+0x254>)
 8007cda:	bb1b      	cbnz	r3, 8007d24 <_vfiprintf_r+0x1f8>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	f023 0307 	bic.w	r3, r3, #7
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	9303      	str	r3, [sp, #12]
 8007ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cea:	443b      	add	r3, r7
 8007cec:	9309      	str	r3, [sp, #36]	; 0x24
 8007cee:	e767      	b.n	8007bc0 <_vfiprintf_r+0x94>
 8007cf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	2001      	movs	r0, #1
 8007cf8:	e7a5      	b.n	8007c46 <_vfiprintf_r+0x11a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	3401      	adds	r4, #1
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	4619      	mov	r1, r3
 8007d02:	f04f 0c0a 	mov.w	ip, #10
 8007d06:	4620      	mov	r0, r4
 8007d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d0c:	3a30      	subs	r2, #48	; 0x30
 8007d0e:	2a09      	cmp	r2, #9
 8007d10:	d903      	bls.n	8007d1a <_vfiprintf_r+0x1ee>
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0c5      	beq.n	8007ca2 <_vfiprintf_r+0x176>
 8007d16:	9105      	str	r1, [sp, #20]
 8007d18:	e7c3      	b.n	8007ca2 <_vfiprintf_r+0x176>
 8007d1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d1e:	4604      	mov	r4, r0
 8007d20:	2301      	movs	r3, #1
 8007d22:	e7f0      	b.n	8007d06 <_vfiprintf_r+0x1da>
 8007d24:	ab03      	add	r3, sp, #12
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <_vfiprintf_r+0x258>)
 8007d2c:	a904      	add	r1, sp, #16
 8007d2e:	4630      	mov	r0, r6
 8007d30:	f7fd fe16 	bl	8005960 <_printf_float>
 8007d34:	4607      	mov	r7, r0
 8007d36:	1c78      	adds	r0, r7, #1
 8007d38:	d1d6      	bne.n	8007ce8 <_vfiprintf_r+0x1bc>
 8007d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d3c:	07d9      	lsls	r1, r3, #31
 8007d3e:	d405      	bmi.n	8007d4c <_vfiprintf_r+0x220>
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	059a      	lsls	r2, r3, #22
 8007d44:	d402      	bmi.n	8007d4c <_vfiprintf_r+0x220>
 8007d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d48:	f000 faaf 	bl	80082aa <__retarget_lock_release_recursive>
 8007d4c:	89ab      	ldrh	r3, [r5, #12]
 8007d4e:	065b      	lsls	r3, r3, #25
 8007d50:	f53f af12 	bmi.w	8007b78 <_vfiprintf_r+0x4c>
 8007d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d56:	e711      	b.n	8007b7c <_vfiprintf_r+0x50>
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <_vfiprintf_r+0x258>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4630      	mov	r0, r6
 8007d64:	f7fe f8a0 	bl	8005ea8 <_printf_i>
 8007d68:	e7e4      	b.n	8007d34 <_vfiprintf_r+0x208>
 8007d6a:	bf00      	nop
 8007d6c:	08008eac 	.word	0x08008eac
 8007d70:	08008ecc 	.word	0x08008ecc
 8007d74:	08008e8c 	.word	0x08008e8c
 8007d78:	08008d34 	.word	0x08008d34
 8007d7c:	08008d3e 	.word	0x08008d3e
 8007d80:	08005961 	.word	0x08005961
 8007d84:	08007b07 	.word	0x08007b07
 8007d88:	08008d3a 	.word	0x08008d3a

08007d8c <__swbuf_r>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	460e      	mov	r6, r1
 8007d90:	4614      	mov	r4, r2
 8007d92:	4605      	mov	r5, r0
 8007d94:	b118      	cbz	r0, 8007d9e <__swbuf_r+0x12>
 8007d96:	6983      	ldr	r3, [r0, #24]
 8007d98:	b90b      	cbnz	r3, 8007d9e <__swbuf_r+0x12>
 8007d9a:	f000 f9e7 	bl	800816c <__sinit>
 8007d9e:	4b21      	ldr	r3, [pc, #132]	; (8007e24 <__swbuf_r+0x98>)
 8007da0:	429c      	cmp	r4, r3
 8007da2:	d12b      	bne.n	8007dfc <__swbuf_r+0x70>
 8007da4:	686c      	ldr	r4, [r5, #4]
 8007da6:	69a3      	ldr	r3, [r4, #24]
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	071a      	lsls	r2, r3, #28
 8007dae:	d52f      	bpl.n	8007e10 <__swbuf_r+0x84>
 8007db0:	6923      	ldr	r3, [r4, #16]
 8007db2:	b36b      	cbz	r3, 8007e10 <__swbuf_r+0x84>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	6820      	ldr	r0, [r4, #0]
 8007db8:	1ac0      	subs	r0, r0, r3
 8007dba:	6963      	ldr	r3, [r4, #20]
 8007dbc:	b2f6      	uxtb	r6, r6
 8007dbe:	4283      	cmp	r3, r0
 8007dc0:	4637      	mov	r7, r6
 8007dc2:	dc04      	bgt.n	8007dce <__swbuf_r+0x42>
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f93c 	bl	8008044 <_fflush_r>
 8007dcc:	bb30      	cbnz	r0, 8007e1c <__swbuf_r+0x90>
 8007dce:	68a3      	ldr	r3, [r4, #8]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60a3      	str	r3, [r4, #8]
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	6022      	str	r2, [r4, #0]
 8007dda:	701e      	strb	r6, [r3, #0]
 8007ddc:	6963      	ldr	r3, [r4, #20]
 8007dde:	3001      	adds	r0, #1
 8007de0:	4283      	cmp	r3, r0
 8007de2:	d004      	beq.n	8007dee <__swbuf_r+0x62>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	07db      	lsls	r3, r3, #31
 8007de8:	d506      	bpl.n	8007df8 <__swbuf_r+0x6c>
 8007dea:	2e0a      	cmp	r6, #10
 8007dec:	d104      	bne.n	8007df8 <__swbuf_r+0x6c>
 8007dee:	4621      	mov	r1, r4
 8007df0:	4628      	mov	r0, r5
 8007df2:	f000 f927 	bl	8008044 <_fflush_r>
 8007df6:	b988      	cbnz	r0, 8007e1c <__swbuf_r+0x90>
 8007df8:	4638      	mov	r0, r7
 8007dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfc:	4b0a      	ldr	r3, [pc, #40]	; (8007e28 <__swbuf_r+0x9c>)
 8007dfe:	429c      	cmp	r4, r3
 8007e00:	d101      	bne.n	8007e06 <__swbuf_r+0x7a>
 8007e02:	68ac      	ldr	r4, [r5, #8]
 8007e04:	e7cf      	b.n	8007da6 <__swbuf_r+0x1a>
 8007e06:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <__swbuf_r+0xa0>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	bf08      	it	eq
 8007e0c:	68ec      	ldreq	r4, [r5, #12]
 8007e0e:	e7ca      	b.n	8007da6 <__swbuf_r+0x1a>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4628      	mov	r0, r5
 8007e14:	f000 f81a 	bl	8007e4c <__swsetup_r>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d0cb      	beq.n	8007db4 <__swbuf_r+0x28>
 8007e1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007e20:	e7ea      	b.n	8007df8 <__swbuf_r+0x6c>
 8007e22:	bf00      	nop
 8007e24:	08008eac 	.word	0x08008eac
 8007e28:	08008ecc 	.word	0x08008ecc
 8007e2c:	08008e8c 	.word	0x08008e8c

08007e30 <__ascii_wctomb>:
 8007e30:	b149      	cbz	r1, 8007e46 <__ascii_wctomb+0x16>
 8007e32:	2aff      	cmp	r2, #255	; 0xff
 8007e34:	bf85      	ittet	hi
 8007e36:	238a      	movhi	r3, #138	; 0x8a
 8007e38:	6003      	strhi	r3, [r0, #0]
 8007e3a:	700a      	strbls	r2, [r1, #0]
 8007e3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e40:	bf98      	it	ls
 8007e42:	2001      	movls	r0, #1
 8007e44:	4770      	bx	lr
 8007e46:	4608      	mov	r0, r1
 8007e48:	4770      	bx	lr
	...

08007e4c <__swsetup_r>:
 8007e4c:	4b32      	ldr	r3, [pc, #200]	; (8007f18 <__swsetup_r+0xcc>)
 8007e4e:	b570      	push	{r4, r5, r6, lr}
 8007e50:	681d      	ldr	r5, [r3, #0]
 8007e52:	4606      	mov	r6, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	b125      	cbz	r5, 8007e62 <__swsetup_r+0x16>
 8007e58:	69ab      	ldr	r3, [r5, #24]
 8007e5a:	b913      	cbnz	r3, 8007e62 <__swsetup_r+0x16>
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f000 f985 	bl	800816c <__sinit>
 8007e62:	4b2e      	ldr	r3, [pc, #184]	; (8007f1c <__swsetup_r+0xd0>)
 8007e64:	429c      	cmp	r4, r3
 8007e66:	d10f      	bne.n	8007e88 <__swsetup_r+0x3c>
 8007e68:	686c      	ldr	r4, [r5, #4]
 8007e6a:	89a3      	ldrh	r3, [r4, #12]
 8007e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e70:	0719      	lsls	r1, r3, #28
 8007e72:	d42c      	bmi.n	8007ece <__swsetup_r+0x82>
 8007e74:	06dd      	lsls	r5, r3, #27
 8007e76:	d411      	bmi.n	8007e9c <__swsetup_r+0x50>
 8007e78:	2309      	movs	r3, #9
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e80:	81a3      	strh	r3, [r4, #12]
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295
 8007e86:	e03e      	b.n	8007f06 <__swsetup_r+0xba>
 8007e88:	4b25      	ldr	r3, [pc, #148]	; (8007f20 <__swsetup_r+0xd4>)
 8007e8a:	429c      	cmp	r4, r3
 8007e8c:	d101      	bne.n	8007e92 <__swsetup_r+0x46>
 8007e8e:	68ac      	ldr	r4, [r5, #8]
 8007e90:	e7eb      	b.n	8007e6a <__swsetup_r+0x1e>
 8007e92:	4b24      	ldr	r3, [pc, #144]	; (8007f24 <__swsetup_r+0xd8>)
 8007e94:	429c      	cmp	r4, r3
 8007e96:	bf08      	it	eq
 8007e98:	68ec      	ldreq	r4, [r5, #12]
 8007e9a:	e7e6      	b.n	8007e6a <__swsetup_r+0x1e>
 8007e9c:	0758      	lsls	r0, r3, #29
 8007e9e:	d512      	bpl.n	8007ec6 <__swsetup_r+0x7a>
 8007ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea2:	b141      	cbz	r1, 8007eb6 <__swsetup_r+0x6a>
 8007ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	d002      	beq.n	8007eb2 <__swsetup_r+0x66>
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7ff fb6f 	bl	8007590 <_free_r>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6063      	str	r3, [r4, #4]
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	6023      	str	r3, [r4, #0]
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	f043 0308 	orr.w	r3, r3, #8
 8007ecc:	81a3      	strh	r3, [r4, #12]
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	b94b      	cbnz	r3, 8007ee6 <__swsetup_r+0x9a>
 8007ed2:	89a3      	ldrh	r3, [r4, #12]
 8007ed4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d003      	beq.n	8007ee6 <__swsetup_r+0x9a>
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f000 fa07 	bl	80082f4 <__smakebuf_r>
 8007ee6:	89a0      	ldrh	r0, [r4, #12]
 8007ee8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007eec:	f010 0301 	ands.w	r3, r0, #1
 8007ef0:	d00a      	beq.n	8007f08 <__swsetup_r+0xbc>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60a3      	str	r3, [r4, #8]
 8007ef6:	6963      	ldr	r3, [r4, #20]
 8007ef8:	425b      	negs	r3, r3
 8007efa:	61a3      	str	r3, [r4, #24]
 8007efc:	6923      	ldr	r3, [r4, #16]
 8007efe:	b943      	cbnz	r3, 8007f12 <__swsetup_r+0xc6>
 8007f00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f04:	d1ba      	bne.n	8007e7c <__swsetup_r+0x30>
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	0781      	lsls	r1, r0, #30
 8007f0a:	bf58      	it	pl
 8007f0c:	6963      	ldrpl	r3, [r4, #20]
 8007f0e:	60a3      	str	r3, [r4, #8]
 8007f10:	e7f4      	b.n	8007efc <__swsetup_r+0xb0>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e7f7      	b.n	8007f06 <__swsetup_r+0xba>
 8007f16:	bf00      	nop
 8007f18:	2000000c 	.word	0x2000000c
 8007f1c:	08008eac 	.word	0x08008eac
 8007f20:	08008ecc 	.word	0x08008ecc
 8007f24:	08008e8c 	.word	0x08008e8c

08007f28 <abort>:
 8007f28:	b508      	push	{r3, lr}
 8007f2a:	2006      	movs	r0, #6
 8007f2c:	f000 fa52 	bl	80083d4 <raise>
 8007f30:	2001      	movs	r0, #1
 8007f32:	f7fa f9ab 	bl	800228c <_exit>
	...

08007f38 <__sflush_r>:
 8007f38:	898a      	ldrh	r2, [r1, #12]
 8007f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f3e:	4605      	mov	r5, r0
 8007f40:	0710      	lsls	r0, r2, #28
 8007f42:	460c      	mov	r4, r1
 8007f44:	d458      	bmi.n	8007ff8 <__sflush_r+0xc0>
 8007f46:	684b      	ldr	r3, [r1, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc05      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dc02      	bgt.n	8007f58 <__sflush_r+0x20>
 8007f52:	2000      	movs	r0, #0
 8007f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	d0f9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f64:	682f      	ldr	r7, [r5, #0]
 8007f66:	602b      	str	r3, [r5, #0]
 8007f68:	d032      	beq.n	8007fd0 <__sflush_r+0x98>
 8007f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	075a      	lsls	r2, r3, #29
 8007f70:	d505      	bpl.n	8007f7e <__sflush_r+0x46>
 8007f72:	6863      	ldr	r3, [r4, #4]
 8007f74:	1ac0      	subs	r0, r0, r3
 8007f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f78:	b10b      	cbz	r3, 8007f7e <__sflush_r+0x46>
 8007f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f7c:	1ac0      	subs	r0, r0, r3
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4602      	mov	r2, r0
 8007f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f84:	6a21      	ldr	r1, [r4, #32]
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b0      	blx	r6
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	d106      	bne.n	8007f9e <__sflush_r+0x66>
 8007f90:	6829      	ldr	r1, [r5, #0]
 8007f92:	291d      	cmp	r1, #29
 8007f94:	d82c      	bhi.n	8007ff0 <__sflush_r+0xb8>
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <__sflush_r+0x108>)
 8007f98:	40ca      	lsrs	r2, r1
 8007f9a:	07d6      	lsls	r6, r2, #31
 8007f9c:	d528      	bpl.n	8007ff0 <__sflush_r+0xb8>
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	6062      	str	r2, [r4, #4]
 8007fa2:	04d9      	lsls	r1, r3, #19
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	6022      	str	r2, [r4, #0]
 8007fa8:	d504      	bpl.n	8007fb4 <__sflush_r+0x7c>
 8007faa:	1c42      	adds	r2, r0, #1
 8007fac:	d101      	bne.n	8007fb2 <__sflush_r+0x7a>
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	b903      	cbnz	r3, 8007fb4 <__sflush_r+0x7c>
 8007fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8007fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fb6:	602f      	str	r7, [r5, #0]
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d0ca      	beq.n	8007f52 <__sflush_r+0x1a>
 8007fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fc0:	4299      	cmp	r1, r3
 8007fc2:	d002      	beq.n	8007fca <__sflush_r+0x92>
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f7ff fae3 	bl	8007590 <_free_r>
 8007fca:	2000      	movs	r0, #0
 8007fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8007fce:	e7c1      	b.n	8007f54 <__sflush_r+0x1c>
 8007fd0:	6a21      	ldr	r1, [r4, #32]
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b0      	blx	r6
 8007fd8:	1c41      	adds	r1, r0, #1
 8007fda:	d1c7      	bne.n	8007f6c <__sflush_r+0x34>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c4      	beq.n	8007f6c <__sflush_r+0x34>
 8007fe2:	2b1d      	cmp	r3, #29
 8007fe4:	d001      	beq.n	8007fea <__sflush_r+0xb2>
 8007fe6:	2b16      	cmp	r3, #22
 8007fe8:	d101      	bne.n	8007fee <__sflush_r+0xb6>
 8007fea:	602f      	str	r7, [r5, #0]
 8007fec:	e7b1      	b.n	8007f52 <__sflush_r+0x1a>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff4:	81a3      	strh	r3, [r4, #12]
 8007ff6:	e7ad      	b.n	8007f54 <__sflush_r+0x1c>
 8007ff8:	690f      	ldr	r7, [r1, #16]
 8007ffa:	2f00      	cmp	r7, #0
 8007ffc:	d0a9      	beq.n	8007f52 <__sflush_r+0x1a>
 8007ffe:	0793      	lsls	r3, r2, #30
 8008000:	680e      	ldr	r6, [r1, #0]
 8008002:	bf08      	it	eq
 8008004:	694b      	ldreq	r3, [r1, #20]
 8008006:	600f      	str	r7, [r1, #0]
 8008008:	bf18      	it	ne
 800800a:	2300      	movne	r3, #0
 800800c:	eba6 0807 	sub.w	r8, r6, r7
 8008010:	608b      	str	r3, [r1, #8]
 8008012:	f1b8 0f00 	cmp.w	r8, #0
 8008016:	dd9c      	ble.n	8007f52 <__sflush_r+0x1a>
 8008018:	6a21      	ldr	r1, [r4, #32]
 800801a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800801c:	4643      	mov	r3, r8
 800801e:	463a      	mov	r2, r7
 8008020:	4628      	mov	r0, r5
 8008022:	47b0      	blx	r6
 8008024:	2800      	cmp	r0, #0
 8008026:	dc06      	bgt.n	8008036 <__sflush_r+0xfe>
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	f04f 30ff 	mov.w	r0, #4294967295
 8008034:	e78e      	b.n	8007f54 <__sflush_r+0x1c>
 8008036:	4407      	add	r7, r0
 8008038:	eba8 0800 	sub.w	r8, r8, r0
 800803c:	e7e9      	b.n	8008012 <__sflush_r+0xda>
 800803e:	bf00      	nop
 8008040:	20400001 	.word	0x20400001

08008044 <_fflush_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	690b      	ldr	r3, [r1, #16]
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	b913      	cbnz	r3, 8008054 <_fflush_r+0x10>
 800804e:	2500      	movs	r5, #0
 8008050:	4628      	mov	r0, r5
 8008052:	bd38      	pop	{r3, r4, r5, pc}
 8008054:	b118      	cbz	r0, 800805e <_fflush_r+0x1a>
 8008056:	6983      	ldr	r3, [r0, #24]
 8008058:	b90b      	cbnz	r3, 800805e <_fflush_r+0x1a>
 800805a:	f000 f887 	bl	800816c <__sinit>
 800805e:	4b14      	ldr	r3, [pc, #80]	; (80080b0 <_fflush_r+0x6c>)
 8008060:	429c      	cmp	r4, r3
 8008062:	d11b      	bne.n	800809c <_fflush_r+0x58>
 8008064:	686c      	ldr	r4, [r5, #4]
 8008066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0ef      	beq.n	800804e <_fflush_r+0xa>
 800806e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008070:	07d0      	lsls	r0, r2, #31
 8008072:	d404      	bmi.n	800807e <_fflush_r+0x3a>
 8008074:	0599      	lsls	r1, r3, #22
 8008076:	d402      	bmi.n	800807e <_fflush_r+0x3a>
 8008078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800807a:	f000 f915 	bl	80082a8 <__retarget_lock_acquire_recursive>
 800807e:	4628      	mov	r0, r5
 8008080:	4621      	mov	r1, r4
 8008082:	f7ff ff59 	bl	8007f38 <__sflush_r>
 8008086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008088:	07da      	lsls	r2, r3, #31
 800808a:	4605      	mov	r5, r0
 800808c:	d4e0      	bmi.n	8008050 <_fflush_r+0xc>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d4dd      	bmi.n	8008050 <_fflush_r+0xc>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f000 f908 	bl	80082aa <__retarget_lock_release_recursive>
 800809a:	e7d9      	b.n	8008050 <_fflush_r+0xc>
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <_fflush_r+0x70>)
 800809e:	429c      	cmp	r4, r3
 80080a0:	d101      	bne.n	80080a6 <_fflush_r+0x62>
 80080a2:	68ac      	ldr	r4, [r5, #8]
 80080a4:	e7df      	b.n	8008066 <_fflush_r+0x22>
 80080a6:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <_fflush_r+0x74>)
 80080a8:	429c      	cmp	r4, r3
 80080aa:	bf08      	it	eq
 80080ac:	68ec      	ldreq	r4, [r5, #12]
 80080ae:	e7da      	b.n	8008066 <_fflush_r+0x22>
 80080b0:	08008eac 	.word	0x08008eac
 80080b4:	08008ecc 	.word	0x08008ecc
 80080b8:	08008e8c 	.word	0x08008e8c

080080bc <std>:
 80080bc:	2300      	movs	r3, #0
 80080be:	b510      	push	{r4, lr}
 80080c0:	4604      	mov	r4, r0
 80080c2:	e9c0 3300 	strd	r3, r3, [r0]
 80080c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ca:	6083      	str	r3, [r0, #8]
 80080cc:	8181      	strh	r1, [r0, #12]
 80080ce:	6643      	str	r3, [r0, #100]	; 0x64
 80080d0:	81c2      	strh	r2, [r0, #14]
 80080d2:	6183      	str	r3, [r0, #24]
 80080d4:	4619      	mov	r1, r3
 80080d6:	2208      	movs	r2, #8
 80080d8:	305c      	adds	r0, #92	; 0x5c
 80080da:	f7fd fb99 	bl	8005810 <memset>
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <std+0x38>)
 80080e0:	6263      	str	r3, [r4, #36]	; 0x24
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <std+0x3c>)
 80080e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80080e6:	4b05      	ldr	r3, [pc, #20]	; (80080fc <std+0x40>)
 80080e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ea:	4b05      	ldr	r3, [pc, #20]	; (8008100 <std+0x44>)
 80080ec:	6224      	str	r4, [r4, #32]
 80080ee:	6323      	str	r3, [r4, #48]	; 0x30
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	0800840d 	.word	0x0800840d
 80080f8:	0800842f 	.word	0x0800842f
 80080fc:	08008467 	.word	0x08008467
 8008100:	0800848b 	.word	0x0800848b

08008104 <_cleanup_r>:
 8008104:	4901      	ldr	r1, [pc, #4]	; (800810c <_cleanup_r+0x8>)
 8008106:	f000 b8af 	b.w	8008268 <_fwalk_reent>
 800810a:	bf00      	nop
 800810c:	08008045 	.word	0x08008045

08008110 <__sfmoreglue>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	1e4a      	subs	r2, r1, #1
 8008114:	2568      	movs	r5, #104	; 0x68
 8008116:	4355      	muls	r5, r2
 8008118:	460e      	mov	r6, r1
 800811a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800811e:	f7ff fa87 	bl	8007630 <_malloc_r>
 8008122:	4604      	mov	r4, r0
 8008124:	b140      	cbz	r0, 8008138 <__sfmoreglue+0x28>
 8008126:	2100      	movs	r1, #0
 8008128:	e9c0 1600 	strd	r1, r6, [r0]
 800812c:	300c      	adds	r0, #12
 800812e:	60a0      	str	r0, [r4, #8]
 8008130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008134:	f7fd fb6c 	bl	8005810 <memset>
 8008138:	4620      	mov	r0, r4
 800813a:	bd70      	pop	{r4, r5, r6, pc}

0800813c <__sfp_lock_acquire>:
 800813c:	4801      	ldr	r0, [pc, #4]	; (8008144 <__sfp_lock_acquire+0x8>)
 800813e:	f000 b8b3 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 8008142:	bf00      	nop
 8008144:	200007d8 	.word	0x200007d8

08008148 <__sfp_lock_release>:
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <__sfp_lock_release+0x8>)
 800814a:	f000 b8ae 	b.w	80082aa <__retarget_lock_release_recursive>
 800814e:	bf00      	nop
 8008150:	200007d8 	.word	0x200007d8

08008154 <__sinit_lock_acquire>:
 8008154:	4801      	ldr	r0, [pc, #4]	; (800815c <__sinit_lock_acquire+0x8>)
 8008156:	f000 b8a7 	b.w	80082a8 <__retarget_lock_acquire_recursive>
 800815a:	bf00      	nop
 800815c:	200007d3 	.word	0x200007d3

08008160 <__sinit_lock_release>:
 8008160:	4801      	ldr	r0, [pc, #4]	; (8008168 <__sinit_lock_release+0x8>)
 8008162:	f000 b8a2 	b.w	80082aa <__retarget_lock_release_recursive>
 8008166:	bf00      	nop
 8008168:	200007d3 	.word	0x200007d3

0800816c <__sinit>:
 800816c:	b510      	push	{r4, lr}
 800816e:	4604      	mov	r4, r0
 8008170:	f7ff fff0 	bl	8008154 <__sinit_lock_acquire>
 8008174:	69a3      	ldr	r3, [r4, #24]
 8008176:	b11b      	cbz	r3, 8008180 <__sinit+0x14>
 8008178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817c:	f7ff bff0 	b.w	8008160 <__sinit_lock_release>
 8008180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008184:	6523      	str	r3, [r4, #80]	; 0x50
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <__sinit+0x68>)
 8008188:	4a13      	ldr	r2, [pc, #76]	; (80081d8 <__sinit+0x6c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	62a2      	str	r2, [r4, #40]	; 0x28
 800818e:	42a3      	cmp	r3, r4
 8008190:	bf04      	itt	eq
 8008192:	2301      	moveq	r3, #1
 8008194:	61a3      	streq	r3, [r4, #24]
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f820 	bl	80081dc <__sfp>
 800819c:	6060      	str	r0, [r4, #4]
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 f81c 	bl	80081dc <__sfp>
 80081a4:	60a0      	str	r0, [r4, #8]
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f818 	bl	80081dc <__sfp>
 80081ac:	2200      	movs	r2, #0
 80081ae:	60e0      	str	r0, [r4, #12]
 80081b0:	2104      	movs	r1, #4
 80081b2:	6860      	ldr	r0, [r4, #4]
 80081b4:	f7ff ff82 	bl	80080bc <std>
 80081b8:	68a0      	ldr	r0, [r4, #8]
 80081ba:	2201      	movs	r2, #1
 80081bc:	2109      	movs	r1, #9
 80081be:	f7ff ff7d 	bl	80080bc <std>
 80081c2:	68e0      	ldr	r0, [r4, #12]
 80081c4:	2202      	movs	r2, #2
 80081c6:	2112      	movs	r1, #18
 80081c8:	f7ff ff78 	bl	80080bc <std>
 80081cc:	2301      	movs	r3, #1
 80081ce:	61a3      	str	r3, [r4, #24]
 80081d0:	e7d2      	b.n	8008178 <__sinit+0xc>
 80081d2:	bf00      	nop
 80081d4:	08008b08 	.word	0x08008b08
 80081d8:	08008105 	.word	0x08008105

080081dc <__sfp>:
 80081dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081de:	4607      	mov	r7, r0
 80081e0:	f7ff ffac 	bl	800813c <__sfp_lock_acquire>
 80081e4:	4b1e      	ldr	r3, [pc, #120]	; (8008260 <__sfp+0x84>)
 80081e6:	681e      	ldr	r6, [r3, #0]
 80081e8:	69b3      	ldr	r3, [r6, #24]
 80081ea:	b913      	cbnz	r3, 80081f2 <__sfp+0x16>
 80081ec:	4630      	mov	r0, r6
 80081ee:	f7ff ffbd 	bl	800816c <__sinit>
 80081f2:	3648      	adds	r6, #72	; 0x48
 80081f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	d503      	bpl.n	8008204 <__sfp+0x28>
 80081fc:	6833      	ldr	r3, [r6, #0]
 80081fe:	b30b      	cbz	r3, 8008244 <__sfp+0x68>
 8008200:	6836      	ldr	r6, [r6, #0]
 8008202:	e7f7      	b.n	80081f4 <__sfp+0x18>
 8008204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008208:	b9d5      	cbnz	r5, 8008240 <__sfp+0x64>
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <__sfp+0x88>)
 800820c:	60e3      	str	r3, [r4, #12]
 800820e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008212:	6665      	str	r5, [r4, #100]	; 0x64
 8008214:	f000 f847 	bl	80082a6 <__retarget_lock_init_recursive>
 8008218:	f7ff ff96 	bl	8008148 <__sfp_lock_release>
 800821c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	61a5      	str	r5, [r4, #24]
 8008228:	2208      	movs	r2, #8
 800822a:	4629      	mov	r1, r5
 800822c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008230:	f7fd faee 	bl	8005810 <memset>
 8008234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800823c:	4620      	mov	r0, r4
 800823e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008240:	3468      	adds	r4, #104	; 0x68
 8008242:	e7d9      	b.n	80081f8 <__sfp+0x1c>
 8008244:	2104      	movs	r1, #4
 8008246:	4638      	mov	r0, r7
 8008248:	f7ff ff62 	bl	8008110 <__sfmoreglue>
 800824c:	4604      	mov	r4, r0
 800824e:	6030      	str	r0, [r6, #0]
 8008250:	2800      	cmp	r0, #0
 8008252:	d1d5      	bne.n	8008200 <__sfp+0x24>
 8008254:	f7ff ff78 	bl	8008148 <__sfp_lock_release>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	e7ee      	b.n	800823c <__sfp+0x60>
 800825e:	bf00      	nop
 8008260:	08008b08 	.word	0x08008b08
 8008264:	ffff0001 	.word	0xffff0001

08008268 <_fwalk_reent>:
 8008268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800826c:	4606      	mov	r6, r0
 800826e:	4688      	mov	r8, r1
 8008270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008274:	2700      	movs	r7, #0
 8008276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800827a:	f1b9 0901 	subs.w	r9, r9, #1
 800827e:	d505      	bpl.n	800828c <_fwalk_reent+0x24>
 8008280:	6824      	ldr	r4, [r4, #0]
 8008282:	2c00      	cmp	r4, #0
 8008284:	d1f7      	bne.n	8008276 <_fwalk_reent+0xe>
 8008286:	4638      	mov	r0, r7
 8008288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800828c:	89ab      	ldrh	r3, [r5, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d907      	bls.n	80082a2 <_fwalk_reent+0x3a>
 8008292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008296:	3301      	adds	r3, #1
 8008298:	d003      	beq.n	80082a2 <_fwalk_reent+0x3a>
 800829a:	4629      	mov	r1, r5
 800829c:	4630      	mov	r0, r6
 800829e:	47c0      	blx	r8
 80082a0:	4307      	orrs	r7, r0
 80082a2:	3568      	adds	r5, #104	; 0x68
 80082a4:	e7e9      	b.n	800827a <_fwalk_reent+0x12>

080082a6 <__retarget_lock_init_recursive>:
 80082a6:	4770      	bx	lr

080082a8 <__retarget_lock_acquire_recursive>:
 80082a8:	4770      	bx	lr

080082aa <__retarget_lock_release_recursive>:
 80082aa:	4770      	bx	lr

080082ac <__swhatbuf_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	460e      	mov	r6, r1
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	2900      	cmp	r1, #0
 80082b6:	b096      	sub	sp, #88	; 0x58
 80082b8:	4614      	mov	r4, r2
 80082ba:	461d      	mov	r5, r3
 80082bc:	da07      	bge.n	80082ce <__swhatbuf_r+0x22>
 80082be:	2300      	movs	r3, #0
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	89b3      	ldrh	r3, [r6, #12]
 80082c4:	061a      	lsls	r2, r3, #24
 80082c6:	d410      	bmi.n	80082ea <__swhatbuf_r+0x3e>
 80082c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082cc:	e00e      	b.n	80082ec <__swhatbuf_r+0x40>
 80082ce:	466a      	mov	r2, sp
 80082d0:	f000 f902 	bl	80084d8 <_fstat_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dbf2      	blt.n	80082be <__swhatbuf_r+0x12>
 80082d8:	9a01      	ldr	r2, [sp, #4]
 80082da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082e2:	425a      	negs	r2, r3
 80082e4:	415a      	adcs	r2, r3
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	e7ee      	b.n	80082c8 <__swhatbuf_r+0x1c>
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	2000      	movs	r0, #0
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	b016      	add	sp, #88	; 0x58
 80082f2:	bd70      	pop	{r4, r5, r6, pc}

080082f4 <__smakebuf_r>:
 80082f4:	898b      	ldrh	r3, [r1, #12]
 80082f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082f8:	079d      	lsls	r5, r3, #30
 80082fa:	4606      	mov	r6, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	d507      	bpl.n	8008310 <__smakebuf_r+0x1c>
 8008300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	6123      	str	r3, [r4, #16]
 8008308:	2301      	movs	r3, #1
 800830a:	6163      	str	r3, [r4, #20]
 800830c:	b002      	add	sp, #8
 800830e:	bd70      	pop	{r4, r5, r6, pc}
 8008310:	ab01      	add	r3, sp, #4
 8008312:	466a      	mov	r2, sp
 8008314:	f7ff ffca 	bl	80082ac <__swhatbuf_r>
 8008318:	9900      	ldr	r1, [sp, #0]
 800831a:	4605      	mov	r5, r0
 800831c:	4630      	mov	r0, r6
 800831e:	f7ff f987 	bl	8007630 <_malloc_r>
 8008322:	b948      	cbnz	r0, 8008338 <__smakebuf_r+0x44>
 8008324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008328:	059a      	lsls	r2, r3, #22
 800832a:	d4ef      	bmi.n	800830c <__smakebuf_r+0x18>
 800832c:	f023 0303 	bic.w	r3, r3, #3
 8008330:	f043 0302 	orr.w	r3, r3, #2
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	e7e3      	b.n	8008300 <__smakebuf_r+0xc>
 8008338:	4b0d      	ldr	r3, [pc, #52]	; (8008370 <__smakebuf_r+0x7c>)
 800833a:	62b3      	str	r3, [r6, #40]	; 0x28
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	6020      	str	r0, [r4, #0]
 8008340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008344:	81a3      	strh	r3, [r4, #12]
 8008346:	9b00      	ldr	r3, [sp, #0]
 8008348:	6163      	str	r3, [r4, #20]
 800834a:	9b01      	ldr	r3, [sp, #4]
 800834c:	6120      	str	r0, [r4, #16]
 800834e:	b15b      	cbz	r3, 8008368 <__smakebuf_r+0x74>
 8008350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f8d1 	bl	80084fc <_isatty_r>
 800835a:	b128      	cbz	r0, 8008368 <__smakebuf_r+0x74>
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	81a3      	strh	r3, [r4, #12]
 8008368:	89a0      	ldrh	r0, [r4, #12]
 800836a:	4305      	orrs	r5, r0
 800836c:	81a5      	strh	r5, [r4, #12]
 800836e:	e7cd      	b.n	800830c <__smakebuf_r+0x18>
 8008370:	08008105 	.word	0x08008105

08008374 <_malloc_usable_size_r>:
 8008374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008378:	1f18      	subs	r0, r3, #4
 800837a:	2b00      	cmp	r3, #0
 800837c:	bfbc      	itt	lt
 800837e:	580b      	ldrlt	r3, [r1, r0]
 8008380:	18c0      	addlt	r0, r0, r3
 8008382:	4770      	bx	lr

08008384 <_raise_r>:
 8008384:	291f      	cmp	r1, #31
 8008386:	b538      	push	{r3, r4, r5, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	460d      	mov	r5, r1
 800838c:	d904      	bls.n	8008398 <_raise_r+0x14>
 800838e:	2316      	movs	r3, #22
 8008390:	6003      	str	r3, [r0, #0]
 8008392:	f04f 30ff 	mov.w	r0, #4294967295
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800839a:	b112      	cbz	r2, 80083a2 <_raise_r+0x1e>
 800839c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083a0:	b94b      	cbnz	r3, 80083b6 <_raise_r+0x32>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f830 	bl	8008408 <_getpid_r>
 80083a8:	462a      	mov	r2, r5
 80083aa:	4601      	mov	r1, r0
 80083ac:	4620      	mov	r0, r4
 80083ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083b2:	f000 b817 	b.w	80083e4 <_kill_r>
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d00a      	beq.n	80083d0 <_raise_r+0x4c>
 80083ba:	1c59      	adds	r1, r3, #1
 80083bc:	d103      	bne.n	80083c6 <_raise_r+0x42>
 80083be:	2316      	movs	r3, #22
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7e7      	b.n	8008396 <_raise_r+0x12>
 80083c6:	2400      	movs	r4, #0
 80083c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80083cc:	4628      	mov	r0, r5
 80083ce:	4798      	blx	r3
 80083d0:	2000      	movs	r0, #0
 80083d2:	e7e0      	b.n	8008396 <_raise_r+0x12>

080083d4 <raise>:
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <raise+0xc>)
 80083d6:	4601      	mov	r1, r0
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	f7ff bfd3 	b.w	8008384 <_raise_r>
 80083de:	bf00      	nop
 80083e0:	2000000c 	.word	0x2000000c

080083e4 <_kill_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d07      	ldr	r5, [pc, #28]	; (8008404 <_kill_r+0x20>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	4611      	mov	r1, r2
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	f7f9 ff3b 	bl	800226c <_kill>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d102      	bne.n	8008400 <_kill_r+0x1c>
 80083fa:	682b      	ldr	r3, [r5, #0]
 80083fc:	b103      	cbz	r3, 8008400 <_kill_r+0x1c>
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	bd38      	pop	{r3, r4, r5, pc}
 8008402:	bf00      	nop
 8008404:	200007cc 	.word	0x200007cc

08008408 <_getpid_r>:
 8008408:	f7f9 bf28 	b.w	800225c <_getpid>

0800840c <__sread>:
 800840c:	b510      	push	{r4, lr}
 800840e:	460c      	mov	r4, r1
 8008410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008414:	f000 f894 	bl	8008540 <_read_r>
 8008418:	2800      	cmp	r0, #0
 800841a:	bfab      	itete	ge
 800841c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800841e:	89a3      	ldrhlt	r3, [r4, #12]
 8008420:	181b      	addge	r3, r3, r0
 8008422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008426:	bfac      	ite	ge
 8008428:	6563      	strge	r3, [r4, #84]	; 0x54
 800842a:	81a3      	strhlt	r3, [r4, #12]
 800842c:	bd10      	pop	{r4, pc}

0800842e <__swrite>:
 800842e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008432:	461f      	mov	r7, r3
 8008434:	898b      	ldrh	r3, [r1, #12]
 8008436:	05db      	lsls	r3, r3, #23
 8008438:	4605      	mov	r5, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4616      	mov	r6, r2
 800843e:	d505      	bpl.n	800844c <__swrite+0x1e>
 8008440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008444:	2302      	movs	r3, #2
 8008446:	2200      	movs	r2, #0
 8008448:	f000 f868 	bl	800851c <_lseek_r>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	4632      	mov	r2, r6
 800845a:	463b      	mov	r3, r7
 800845c:	4628      	mov	r0, r5
 800845e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	f000 b817 	b.w	8008494 <_write_r>

08008466 <__sseek>:
 8008466:	b510      	push	{r4, lr}
 8008468:	460c      	mov	r4, r1
 800846a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846e:	f000 f855 	bl	800851c <_lseek_r>
 8008472:	1c43      	adds	r3, r0, #1
 8008474:	89a3      	ldrh	r3, [r4, #12]
 8008476:	bf15      	itete	ne
 8008478:	6560      	strne	r0, [r4, #84]	; 0x54
 800847a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800847e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008482:	81a3      	strheq	r3, [r4, #12]
 8008484:	bf18      	it	ne
 8008486:	81a3      	strhne	r3, [r4, #12]
 8008488:	bd10      	pop	{r4, pc}

0800848a <__sclose>:
 800848a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848e:	f000 b813 	b.w	80084b8 <_close_r>
	...

08008494 <_write_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_write_r+0x20>)
 8008498:	4604      	mov	r4, r0
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f7f9 ff19 	bl	80022da <_write>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_write_r+0x1e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_write_r+0x1e>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	200007cc 	.word	0x200007cc

080084b8 <_close_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d06      	ldr	r5, [pc, #24]	; (80084d4 <_close_r+0x1c>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	f7f9 ff25 	bl	8002312 <_close>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d102      	bne.n	80084d2 <_close_r+0x1a>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b103      	cbz	r3, 80084d2 <_close_r+0x1a>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	200007cc 	.word	0x200007cc

080084d8 <_fstat_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	; (80084f8 <_fstat_r+0x20>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f7f9 ff20 	bl	800232a <_fstat>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d102      	bne.n	80084f4 <_fstat_r+0x1c>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	b103      	cbz	r3, 80084f4 <_fstat_r+0x1c>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	200007cc 	.word	0x200007cc

080084fc <_isatty_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d06      	ldr	r5, [pc, #24]	; (8008518 <_isatty_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	f7f9 ff1f 	bl	800234a <_isatty>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_isatty_r+0x1a>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_isatty_r+0x1a>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	200007cc 	.word	0x200007cc

0800851c <_lseek_r>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	4d07      	ldr	r5, [pc, #28]	; (800853c <_lseek_r+0x20>)
 8008520:	4604      	mov	r4, r0
 8008522:	4608      	mov	r0, r1
 8008524:	4611      	mov	r1, r2
 8008526:	2200      	movs	r2, #0
 8008528:	602a      	str	r2, [r5, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	f7f9 ff18 	bl	8002360 <_lseek>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_lseek_r+0x1e>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_lseek_r+0x1e>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	200007cc 	.word	0x200007cc

08008540 <_read_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d07      	ldr	r5, [pc, #28]	; (8008560 <_read_r+0x20>)
 8008544:	4604      	mov	r4, r0
 8008546:	4608      	mov	r0, r1
 8008548:	4611      	mov	r1, r2
 800854a:	2200      	movs	r2, #0
 800854c:	602a      	str	r2, [r5, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	f7f9 fea6 	bl	80022a0 <_read>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d102      	bne.n	800855e <_read_r+0x1e>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	b103      	cbz	r3, 800855e <_read_r+0x1e>
 800855c:	6023      	str	r3, [r4, #0]
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	200007cc 	.word	0x200007cc

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr
