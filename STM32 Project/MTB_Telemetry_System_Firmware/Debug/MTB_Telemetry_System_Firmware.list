
MTB_Telemetry_System_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b84  0800cc18  0800cc18  0001cc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d79c  0800d79c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d79c  0800d79c  0001d79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7a4  0800d7a4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7a4  0800d7a4  0001d7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7a8  0800d7a8  0001d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa0  200001f4  0800d9a0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001194  0800d9a0  00021194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f3a  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000490b  00000000  00000000  0004215e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  00046a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e0  00000000  00000000  00048178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001da5d  00000000  00000000  00049658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000210f5  00000000  00000000  000670b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4c36  00000000  00000000  000881aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cde0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f9c  00000000  00000000  0012ce34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc00 	.word	0x0800cc00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800cc00 	.word	0x0800cc00

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <Brake_Sensor_Read>:
#include "BrakeSensors.h"


uint16_t Brake_Sensor_Read(uint8_t sensor)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_reading = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]

	if(sensor == SENSOR_LEFT)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d111      	bne.n	8000f28 <Brake_Sensor_Read+0x38>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_LEFT);
 8000f04:	2100      	movs	r1, #0
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f08:	f000 f970 	bl	80011ec <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f0c:	4819      	ldr	r0, [pc, #100]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f0e:	f002 f93b 	bl	8003188 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f12:	f04f 31ff 	mov.w	r1, #4294967295
 8000f16:	4817      	ldr	r0, [pc, #92]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f18:	f002 fa1d 	bl	8003356 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f1c:	4815      	ldr	r0, [pc, #84]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f1e:	f002 faa5 	bl	800346c <HAL_ADC_GetValue>
 8000f22:	4603      	mov	r3, r0
 8000f24:	81fb      	strh	r3, [r7, #14]
 8000f26:	e017      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else if (sensor == SENSOR_RIGHT)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d111      	bne.n	8000f52 <Brake_Sensor_Read+0x62>
	{
		ADC_SetActiveChannel(&handler_1_brakes, CHANNEL_RIGHT);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f32:	f000 f95b 	bl	80011ec <ADC_SetActiveChannel>
		HAL_ADC_Start(&handler_1_brakes);
 8000f36:	480f      	ldr	r0, [pc, #60]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f38:	f002 f926 	bl	8003188 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&handler_1_brakes, HAL_MAX_DELAY);
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f42:	f002 fa08 	bl	8003356 <HAL_ADC_PollForConversion>
		ADC_reading = HAL_ADC_GetValue(&handler_1_brakes);
 8000f46:	480b      	ldr	r0, [pc, #44]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f48:	f002 fa90 	bl	800346c <HAL_ADC_GetValue>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
 8000f50:	e002      	b.n	8000f58 <Brake_Sensor_Read+0x68>
	}
	else
	{
		ADC_reading = 999;
 8000f52:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f56:	81fb      	strh	r3, [r7, #14]
	}

	HAL_ADC_Stop(&handler_1_brakes);
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <Brake_Sensor_Read+0x84>)
 8000f5a:	f002 f9c9 	bl	80032f0 <HAL_ADC_Stop>

	// Scale to 0-100 range
	ADC_reading = ADC_reading / 40;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <Brake_Sensor_Read+0x88>)
 8000f62:	fba2 2303 	umull	r2, r3, r2, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	81fb      	strh	r3, [r7, #14]

	return ADC_reading;
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000065c 	.word	0x2000065c
 8000f78:	cccccccd 	.word	0xcccccccd

08000f7c <HMC5883L_initialize>:
#include "HMC5883L.h"

void HMC5883L_initialize(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af04      	add	r7, sp, #16
	uint8_t RegSettingA = HMC5883l_Enable_A;
 8000f82:	2378      	movs	r3, #120	; 0x78
 8000f84:	71fb      	strb	r3, [r7, #7]
	uint8_t RegSettingB = HMC5883l_Enable_B;
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	71bb      	strb	r3, [r7, #6]
	uint8_t RegSettingMR = HMC5883l_MR;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	717b      	strb	r3, [r7, #5]

	// Sensor 1
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	213c      	movs	r1, #60	; 0x3c
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fa2:	f003 f8e5 	bl	8004170 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8000fa6:	2364      	movs	r3, #100	; 0x64
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	213c      	movs	r1, #60	; 0x3c
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fba:	f003 f8d9 	bl	8004170 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_1_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8000fbe:	2364      	movs	r3, #100	; 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1d7b      	adds	r3, r7, #5
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	213c      	movs	r1, #60	; 0x3c
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <HMC5883L_initialize+0xac>)
 8000fd2:	f003 f8cd 	bl	8004170 <HAL_I2C_Mem_Write>

	// Sensor 2
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x00 , 1, &RegSettingA , 1, 100);
 8000fd6:	2364      	movs	r3, #100	; 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	213c      	movs	r1, #60	; 0x3c
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <HMC5883L_initialize+0xb0>)
 8000fea:	f003 f8c1 	bl	8004170 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x01 , 1, &RegSettingB , 1, 100);
 8000fee:	2364      	movs	r3, #100	; 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	213c      	movs	r1, #60	; 0x3c
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <HMC5883L_initialize+0xb0>)
 8001002:	f003 f8b5 	bl	8004170 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&handler_2_HMC, HMC5883l_ADDRESS, 0x02 , 1, &RegSettingMR , 1, 100);
 8001006:	2364      	movs	r3, #100	; 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1d7b      	adds	r3, r7, #5
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2202      	movs	r2, #2
 8001016:	213c      	movs	r1, #60	; 0x3c
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <HMC5883L_initialize+0xb0>)
 800101a:	f003 f8a9 	bl	8004170 <HAL_I2C_Mem_Write>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200006a4 	.word	0x200006a4
 800102c:	200006f8 	.word	0x200006f8

08001030 <HMC5883L_get_X>:

uint16_t HMC5883L_get_X(uint8_t sensor)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
	uint8_t DataX[2];
	uint16_t Xaxis = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	81fb      	strh	r3, [r7, #14]
	uint8_t temp[2];

	// Read the register
	if(sensor == 0)
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d127      	bne.n	8001094 <HMC5883L_get_X+0x64>
	{
		// RECEIVE X_axis
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2302      	movs	r3, #2
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2283      	movs	r2, #131	; 0x83
 8001056:	213c      	movs	r1, #60	; 0x3c
 8001058:	482c      	ldr	r0, [pc, #176]	; (800110c <HMC5883L_get_X+0xdc>)
 800105a:	f003 f983 	bl	8004364 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	2302      	movs	r3, #2
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2287      	movs	r2, #135	; 0x87
 8001070:	213c      	movs	r1, #60	; 0x3c
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <HMC5883L_get_X+0xdc>)
 8001074:	f003 f976 	bl	8004364 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_1_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2302      	movs	r3, #2
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2285      	movs	r2, #133	; 0x85
 800108a:	213c      	movs	r1, #60	; 0x3c
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <HMC5883L_get_X+0xdc>)
 800108e:	f003 f969 	bl	8004364 <HAL_I2C_Mem_Read>
 8001092:	e026      	b.n	80010e2 <HMC5883L_get_X+0xb2>
	}
	//	HAL_I2C_Mem_Read(&handler_1_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
	else
	{
		//HAL_I2C_Mem_Read(&handler_2_HMC, HMC5883l_ADDRESS, HMC5883l_ADD_DATAX_MSB_MULTI, 1, DataX, 2, 100);
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAX_MSB_MULTI,1,DataX,2,100);
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	2302      	movs	r3, #2
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	2283      	movs	r2, #131	; 0x83
 80010a6:	213c      	movs	r1, #60	; 0x3c
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010aa:	f003 f95b 	bl	8004364 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAY_MSB_MULTI,1,temp,2,100);
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2302      	movs	r3, #2
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2301      	movs	r3, #1
 80010be:	2287      	movs	r2, #135	; 0x87
 80010c0:	213c      	movs	r1, #60	; 0x3c
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010c4:	f003 f94e 	bl	8004364 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(&handler_2_HMC,HMC5883l_ADDRESS,HMC5883l_ADD_DATAZ_MSB_MULTI,1,temp,2,100);
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2302      	movs	r3, #2
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2285      	movs	r2, #133	; 0x85
 80010da:	213c      	movs	r1, #60	; 0x3c
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HMC5883L_get_X+0xe0>)
 80010de:	f003 f941 	bl	8004364 <HAL_I2C_Mem_Read>
	}

	Xaxis = ((DataX[1]<<8) | DataX[0]);
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	7b3b      	ldrb	r3, [r7, #12]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	81fb      	strh	r3, [r7, #14]
	return Xaxis / 655;
 80010f2:	89fa      	ldrh	r2, [r7, #14]
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <HMC5883L_get_X+0xe4>)
 80010f6:	fba3 1302 	umull	r1, r3, r3, r2
 80010fa:	1ad2      	subs	r2, r2, r3
 80010fc:	0852      	lsrs	r2, r2, #1
 80010fe:	4413      	add	r3, r2
 8001100:	0a5b      	lsrs	r3, r3, #9
 8001102:	b29b      	uxth	r3, r3
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200006a4 	.word	0x200006a4
 8001110:	200006f8 	.word	0x200006f8
 8001114:	903847eb 	.word	0x903847eb

08001118 <MPU6050_initialize>:
#include "MPU6050.h"

uint8_t MPU6050_initialize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
	uint8_t check;

	// Check the device id
	HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 030f 	add.w	r3, r7, #15
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2275      	movs	r2, #117	; 0x75
 8001132:	21d0      	movs	r1, #208	; 0xd0
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MPU6050_initialize+0xd0>)
 8001136:	f003 f915 	bl	8004364 <HAL_I2C_Mem_Read>

	if (check == 104)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b68      	cmp	r3, #104	; 0x68
 800113e:	d14e      	bne.n	80011de <MPU6050_initialize+0xc6>
	{
		// Set power register to 0
		uint8_t command = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &command, 1, 1000);
 8001144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2301      	movs	r3, #1
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 030e 	add.w	r3, r7, #14
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	226b      	movs	r2, #107	; 0x6b
 8001158:	21d0      	movs	r1, #208	; 0xd0
 800115a:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MPU6050_initialize+0xd0>)
 800115c:	f003 f808 	bl	8004170 <HAL_I2C_Mem_Write>

		// Set data rate of 1kHz
		command = 0x07;
 8001160:	2307      	movs	r3, #7
 8001162:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &command, 1, 1000);
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2301      	movs	r3, #1
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f107 030e 	add.w	r3, r7, #14
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	2301      	movs	r3, #1
 8001176:	2219      	movs	r2, #25
 8001178:	21d0      	movs	r1, #208	; 0xd0
 800117a:	481b      	ldr	r0, [pc, #108]	; (80011e8 <MPU6050_initialize+0xd0>)
 800117c:	f002 fff8 	bl	8004170 <HAL_I2C_Mem_Write>

		// Accelerometer configuration
		command = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &command, 1, 1000);
 8001184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 030e 	add.w	r3, r7, #14
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	221c      	movs	r2, #28
 8001198:	21d0      	movs	r1, #208	; 0xd0
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MPU6050_initialize+0xd0>)
 800119c:	f002 ffe8 	bl	8004170 <HAL_I2C_Mem_Write>

		// Gyroscope config
		command = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(&handler_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &command, 1, 1000);
 80011a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f107 030e 	add.w	r3, r7, #14
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	221b      	movs	r2, #27
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MPU6050_initialize+0xd0>)
 80011bc:	f002 ffd8 	bl	8004170 <HAL_I2C_Mem_Write>

		// Read all data from sensor
		uint8_t Rec_Data[14];
		HAL_I2C_Mem_Read(&handler_MPU6050, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	230e      	movs	r3, #14
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	463b      	mov	r3, r7
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	223b      	movs	r2, #59	; 0x3b
 80011d2:	21d0      	movs	r1, #208	; 0xd0
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MPU6050_initialize+0xd0>)
 80011d6:	f003 f8c5 	bl	8004364 <HAL_I2C_Mem_Read>

		return 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <MPU6050_initialize+0xc8>
	}
	else
	{
		return 1; // error
 80011de:	2301      	movs	r3, #1
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200006a4 	.word	0x200006a4

080011ec <ADC_SetActiveChannel>:
#include "MiscellaneousFunctions.h"


void ADC_SetActiveChannel(ADC_HandleTypeDef *hadc, uint32_t AdcChannel)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
	sConfig.Channel = AdcChannel;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800120c:	2304      	movs	r3, #4
 800120e:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f002 f936 	bl	8003488 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <ADC_SetActiveChannel+0x3a>
	{
		Error_Handler();
 8001222:	f001 f8ed 	bl	8002400 <Error_Handler>
	}
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <Read_Battery_Voltage>:


uint8_t Read_Battery_Voltage()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
	uint16_t ADC_reading = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	80bb      	strh	r3, [r7, #4]
	uint8_t battery_out = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	71fb      	strb	r3, [r7, #7]
	const uint16_t bat_min = 2172; // minimum battery reading (about 3.5V)
 800123e:	f640 037c 	movw	r3, #2172	; 0x87c
 8001242:	807b      	strh	r3, [r7, #2]

	// Get the ADC reading
	ADC_SetActiveChannel(&handler_batt_adc, CHANNEL_BATT_ADC);
 8001244:	2102      	movs	r1, #2
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <Read_Battery_Voltage+0x6c>)
 8001248:	f7ff ffd0 	bl	80011ec <ADC_SetActiveChannel>
	HAL_ADC_Start(&handler_batt_adc);
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <Read_Battery_Voltage+0x6c>)
 800124e:	f001 ff9b 	bl	8003188 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&handler_batt_adc, HAL_MAX_DELAY);
 8001252:	f04f 31ff 	mov.w	r1, #4294967295
 8001256:	4811      	ldr	r0, [pc, #68]	; (800129c <Read_Battery_Voltage+0x6c>)
 8001258:	f002 f87d 	bl	8003356 <HAL_ADC_PollForConversion>
	ADC_reading = HAL_ADC_GetValue(&handler_batt_adc);
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <Read_Battery_Voltage+0x6c>)
 800125e:	f002 f905 	bl	800346c <HAL_ADC_GetValue>
 8001262:	4603      	mov	r3, r0
 8001264:	80bb      	strh	r3, [r7, #4]

	// Return the battery %
	if (ADC_reading < bat_min)
 8001266:	88ba      	ldrh	r2, [r7, #4]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	429a      	cmp	r2, r3
 800126c:	d202      	bcs.n	8001274 <Read_Battery_Voltage+0x44>
	{
		battery_out = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e00e      	b.n	8001292 <Read_Battery_Voltage+0x62>
	}
	else
	{
		battery_out = (ADC_reading - bat_min) / 5;
 8001274:	88ba      	ldrh	r2, [r7, #4]
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <Read_Battery_Voltage+0x70>)
 800127c:	fb82 1203 	smull	r1, r2, r2, r3
 8001280:	1052      	asrs	r2, r2, #1
 8001282:	17db      	asrs	r3, r3, #31
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	71fb      	strb	r3, [r7, #7]
		if (battery_out > 100) // if the voltage exceeds about 4.15 V (depends on the ADC supply voltage, so it might shift a little)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <Read_Battery_Voltage+0x62>
		{
			battery_out = 100;
 800128e:	2364      	movs	r3, #100	; 0x64
 8001290:	71fb      	strb	r3, [r7, #7]
		}
	}

	return battery_out;
 8001292:	79fb      	ldrb	r3, [r7, #7]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000065c 	.word	0x2000065c
 80012a0:	66666667 	.word	0x66666667

080012a4 <ST7565_updateBoundingBox>:
#ifdef enablePartialUpdate
	static uint8_t xUpdateMin, xUpdateMax, yUpdateMin, yUpdateMax;
#endif

static void ST7565_updateBoundingBox(uint8_t xmin, uint8_t ymin, uint8_t xmax, uint8_t ymax)
{
 80012a4:	b490      	push	{r4, r7}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	71fb      	strb	r3, [r7, #7]
 80012b6:	4603      	mov	r3, r0
 80012b8:	71bb      	strb	r3, [r7, #6]
 80012ba:	460b      	mov	r3, r1
 80012bc:	717b      	strb	r3, [r7, #5]
 80012be:	4613      	mov	r3, r2
 80012c0:	713b      	strb	r3, [r7, #4]
	#ifdef enablePartialUpdate
		if (xmin < xUpdateMin) xUpdateMin = xmin;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <ST7565_updateBoundingBox+0x68>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d202      	bcs.n	80012d2 <ST7565_updateBoundingBox+0x2e>
 80012cc:	4a0f      	ldr	r2, [pc, #60]	; (800130c <ST7565_updateBoundingBox+0x68>)
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	7013      	strb	r3, [r2, #0]
		if (xmax > xUpdateMax) xUpdateMax = xmax;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <ST7565_updateBoundingBox+0x6c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	797a      	ldrb	r2, [r7, #5]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d902      	bls.n	80012e2 <ST7565_updateBoundingBox+0x3e>
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <ST7565_updateBoundingBox+0x6c>)
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	7013      	strb	r3, [r2, #0]
		if (ymin < yUpdateMin) yUpdateMin = ymin;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <ST7565_updateBoundingBox+0x70>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d202      	bcs.n	80012f2 <ST7565_updateBoundingBox+0x4e>
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <ST7565_updateBoundingBox+0x70>)
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	7013      	strb	r3, [r2, #0]
		if (ymax > yUpdateMax) yUpdateMax = ymax;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <ST7565_updateBoundingBox+0x74>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	793a      	ldrb	r2, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d902      	bls.n	8001302 <ST7565_updateBoundingBox+0x5e>
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <ST7565_updateBoundingBox+0x74>)
 80012fe:	793b      	ldrb	r3, [r7, #4]
 8001300:	7013      	strb	r3, [r2, #0]
	#endif
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bc90      	pop	{r4, r7}
 800130a:	4770      	bx	lr
 800130c:	20000610 	.word	0x20000610
 8001310:	20000611 	.word	0x20000611
 8001314:	20000612 	.word	0x20000612
 8001318:	20000613 	.word	0x20000613

0800131c <ST7565_drawbitmap>:

void ST7565_drawbitmap(uint8_t x, uint8_t y, const uint8_t* bitmap, uint8_t w, uint8_t h, uint8_t color)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	603a      	str	r2, [r7, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	4613      	mov	r3, r2
 8001330:	717b      	strb	r3, [r7, #5]
	uint8_t i, j;
	for (j = 0; j < h; j++)
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]
 8001336:	e030      	b.n	800139a <ST7565_drawbitmap+0x7e>
	{
		for (i = 0; i < w; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e026      	b.n	800138c <ST7565_drawbitmap+0x70>
		{
			if (bitmap[i + (j / 8) * w] & (1 << (j % 8)))
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	08db      	lsrs	r3, r3, #3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	4619      	mov	r1, r3
 8001348:	797b      	ldrb	r3, [r7, #5]
 800134a:	fb03 f301 	mul.w	r3, r3, r1
 800134e:	4413      	add	r3, r2
 8001350:	461a      	mov	r2, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	fa42 f303 	asr.w	r3, r2, r3
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <ST7565_drawbitmap+0x6a>
			{
				ST7565_my_setpixel(x + i, y + j, color);
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	4413      	add	r3, r2
 8001372:	b2d8      	uxtb	r0, r3
 8001374:	79ba      	ldrb	r2, [r7, #6]
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	4413      	add	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001380:	4619      	mov	r1, r3
 8001382:	f000 f8c7 	bl	8001514 <ST7565_my_setpixel>
		for (i = 0; i < w; i++)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	3301      	adds	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	797b      	ldrb	r3, [r7, #5]
 8001390:	429a      	cmp	r2, r3
 8001392:	d3d4      	bcc.n	800133e <ST7565_drawbitmap+0x22>
	for (j = 0; j < h; j++)
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	3301      	adds	r3, #1
 8001398:	73bb      	strb	r3, [r7, #14]
 800139a:	7bba      	ldrb	r2, [r7, #14]
 800139c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3c9      	bcc.n	8001338 <ST7565_drawbitmap+0x1c>
			}
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 80013a4:	79fa      	ldrb	r2, [r7, #7]
 80013a6:	797b      	ldrb	r3, [r7, #5]
 80013a8:	4413      	add	r3, r2
 80013aa:	b2dc      	uxtb	r4, r3
 80013ac:	79ba      	ldrb	r2, [r7, #6]
 80013ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b2:	4413      	add	r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	79b9      	ldrb	r1, [r7, #6]
 80013b8:	79f8      	ldrb	r0, [r7, #7]
 80013ba:	4622      	mov	r2, r4
 80013bc:	f7ff ff72 	bl	80012a4 <ST7565_updateBoundingBox>
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd90      	pop	{r4, r7, pc}

080013c8 <ST7565_drawstring>:

	ST7565_updateBoundingBox(x, y, x + w, y + h);
}

void ST7565_drawstring(uint8_t x, uint8_t line, char* c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	603a      	str	r2, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	460b      	mov	r3, r1
 80013d6:	71bb      	strb	r3, [r7, #6]
	while (c[0] != 0)
 80013d8:	e017      	b.n	800140a <ST7565_drawstring+0x42>
	{
		ST7565_drawchar(x, line, c[0]);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	79b9      	ldrb	r1, [r7, #6]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f81a 	bl	800141c <ST7565_drawchar>
		c++;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	603b      	str	r3, [r7, #0]
		x += 6;       // 6 pixels wide
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	3306      	adds	r3, #6
 80013f2:	71fb      	strb	r3, [r7, #7]
		if (x + 6 >= LCDWIDTH)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b79      	cmp	r3, #121	; 0x79
 80013f8:	d904      	bls.n	8001404 <ST7565_drawstring+0x3c>
		{
			x = 0;    // ran out of line
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
			line++;
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	3301      	adds	r3, #1
 8001402:	71bb      	strb	r3, [r7, #6]
		}

		if (line >= (LCDHEIGHT / 8))
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d804      	bhi.n	8001414 <ST7565_drawstring+0x4c>
	while (c[0] != 0)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e3      	bne.n	80013da <ST7565_drawstring+0x12>
 8001412:	e000      	b.n	8001416 <ST7565_drawstring+0x4e>
			return;  // ran out of space
 8001414:	bf00      	nop
	}
}
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <ST7565_drawchar>:
			return;  // ran out of space
	}
}

void  ST7565_drawchar(uint8_t x, uint8_t line, char c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
 8001426:	460b      	mov	r3, r1
 8001428:	71bb      	strb	r3, [r7, #6]
 800142a:	4613      	mov	r3, r2
 800142c:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < 5; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e013      	b.n	800145c <ST7565_drawchar+0x40>
	{
		st7565_buffer[x + (line * 128)] = font[((unsigned char)c * 5) + i];
 8001434:	797a      	ldrb	r2, [r7, #5]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	441a      	add	r2, r3
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	441a      	add	r2, r3
 8001440:	79f9      	ldrb	r1, [r7, #7]
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	01db      	lsls	r3, r3, #7
 8001446:	440b      	add	r3, r1
 8001448:	4910      	ldr	r1, [pc, #64]	; (800148c <ST7565_drawchar+0x70>)
 800144a:	5c89      	ldrb	r1, [r1, r2]
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <ST7565_drawchar+0x74>)
 800144e:	54d1      	strb	r1, [r2, r3]
		x++;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3301      	adds	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
	for (i = 0; i < 5; i++)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	3301      	adds	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b04      	cmp	r3, #4
 8001460:	d9e8      	bls.n	8001434 <ST7565_drawchar+0x18>
	}

	ST7565_updateBoundingBox(x - 5, line * 8, x - 1, line * 8 + 8);
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3b05      	subs	r3, #5
 8001466:	b2d8      	uxtb	r0, r3
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3b01      	subs	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	3301      	adds	r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f7ff ff11 	bl	80012a4 <ST7565_updateBoundingBox>
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800cd1c 	.word	0x0800cd1c
 8001490:	20000210 	.word	0x20000210

08001494 <ST7565_fillrect>:
		}
	}
}

void ST7565_fillrect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4623      	mov	r3, r4
 80014a4:	71fb      	strb	r3, [r7, #7]
 80014a6:	4603      	mov	r3, r0
 80014a8:	71bb      	strb	r3, [r7, #6]
 80014aa:	460b      	mov	r3, r1
 80014ac:	717b      	strb	r3, [r7, #5]
 80014ae:	4613      	mov	r3, r2
 80014b0:	713b      	strb	r3, [r7, #4]
	uint8_t i, j;

	for (i = x; i < x + w; i++)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e015      	b.n	80014e4 <ST7565_fillrect+0x50>
	{
		for (j = y; j < y + h; j++)
 80014b8:	79bb      	ldrb	r3, [r7, #6]
 80014ba:	73bb      	strb	r3, [r7, #14]
 80014bc:	e009      	b.n	80014d2 <ST7565_fillrect+0x3e>
		{
			ST7565_my_setpixel(i, j, color);
 80014be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014c2:	7bb9      	ldrb	r1, [r7, #14]
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f824 	bl	8001514 <ST7565_my_setpixel>
		for (j = y; j < y + h; j++)
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	79b9      	ldrb	r1, [r7, #6]
 80014d6:	793b      	ldrb	r3, [r7, #4]
 80014d8:	440b      	add	r3, r1
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbef      	blt.n	80014be <ST7565_fillrect+0x2a>
	for (i = x; i < x + w; i++)
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	3301      	adds	r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	7bfa      	ldrb	r2, [r7, #15]
 80014e6:	79f9      	ldrb	r1, [r7, #7]
 80014e8:	797b      	ldrb	r3, [r7, #5]
 80014ea:	440b      	add	r3, r1
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbe3      	blt.n	80014b8 <ST7565_fillrect+0x24>
		}
	}

	ST7565_updateBoundingBox(x, y, x + w, y + h);
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	797b      	ldrb	r3, [r7, #5]
 80014f4:	4413      	add	r3, r2
 80014f6:	b2dc      	uxtb	r4, r3
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	793b      	ldrb	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	79b9      	ldrb	r1, [r7, #6]
 8001502:	79f8      	ldrb	r0, [r7, #7]
 8001504:	4622      	mov	r2, r4
 8001506:	f7ff fecd 	bl	80012a4 <ST7565_updateBoundingBox>
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
	...

08001514 <ST7565_my_setpixel>:
		}
	}
}

void ST7565_my_setpixel(uint8_t x, uint8_t y, uint8_t color)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	460b      	mov	r3, r1
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
	if ((x >= LCDWIDTH) || (y >= LCDHEIGHT))
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db3f      	blt.n	80015ae <ST7565_my_setpixel+0x9a>
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	2b3f      	cmp	r3, #63	; 0x3f
 8001532:	d83c      	bhi.n	80015ae <ST7565_my_setpixel+0x9a>
		return;

	if (color)
 8001534:	797b      	ldrb	r3, [r7, #5]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d01b      	beq.n	8001572 <ST7565_my_setpixel+0x5e>
		st7565_buffer[x + (y / 8) * 128] |= (1 << (7 - (y % 8)));
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	08db      	lsrs	r3, r3, #3
 8001540:	b2d8      	uxtb	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	01db      	lsls	r3, r3, #7
 8001546:	4413      	add	r3, r2
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <ST7565_my_setpixel+0xa8>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	43db      	mvns	r3, r3
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b259      	sxtb	r1, r3
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	4603      	mov	r3, r0
 8001566:	01db      	lsls	r3, r3, #7
 8001568:	4413      	add	r3, r2
 800156a:	b2c9      	uxtb	r1, r1
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <ST7565_my_setpixel+0xa8>)
 800156e:	54d1      	strb	r1, [r2, r3]
 8001570:	e01e      	b.n	80015b0 <ST7565_my_setpixel+0x9c>
	else
		st7565_buffer[x + (y / 8) * 128] &= ~(1 << (7 - (y % 8)));
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	b2d8      	uxtb	r0, r3
 800157a:	4603      	mov	r3, r0
 800157c:	01db      	lsls	r3, r3, #7
 800157e:	4413      	add	r3, r2
 8001580:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <ST7565_my_setpixel+0xa8>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	43db      	mvns	r3, r3
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	2101      	movs	r1, #1
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	b25b      	sxtb	r3, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4013      	ands	r3, r2
 800159c:	b259      	sxtb	r1, r3
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	4603      	mov	r3, r0
 80015a2:	01db      	lsls	r3, r3, #7
 80015a4:	4413      	add	r3, r2
 80015a6:	b2c9      	uxtb	r1, r1
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <ST7565_my_setpixel+0xa8>)
 80015aa:	54d1      	strb	r1, [r2, r3]
 80015ac:	e000      	b.n	80015b0 <ST7565_my_setpixel+0x9c>
		return;
 80015ae:	bf00      	nop
}
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000210 	.word	0x20000210

080015c0 <ST7565_begin>:

	return (st7565_buffer[x + (y / 8) * 128] >> (7 - (y % 8))) & 0x1;
}

void ST7565_begin(uint8_t contrast)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_init();
 80015ca:	f000 f80f 	bl	80015ec <ST7565_st7565_init>
	ST7565_st7565_command(CMD_DISPLAY_ON);
 80015ce:	20af      	movs	r0, #175	; 0xaf
 80015d0:	f000 f866 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_ALLPTS_NORMAL);
 80015d4:	20a4      	movs	r0, #164	; 0xa4
 80015d6:	f000 f863 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_set_brightness(contrast);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f887 	bl	80016f0 <ST7565_st7565_set_brightness>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <ST7565_st7565_init>:

void ST7565_st7565_init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	// Toggle RST low to reset; CS low so it'll listen to us
	HAL_GPIO_WritePin(CS_port, CS_pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	481c      	ldr	r0, [pc, #112]	; (8001668 <ST7565_st7565_init+0x7c>)
 80015f6:	f002 fc45 	bl	8003e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	481a      	ldr	r0, [pc, #104]	; (8001668 <ST7565_st7565_init+0x7c>)
 8001600:	f002 fc40 	bl	8003e84 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001604:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001608:	f001 fd56 	bl	80030b8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_port, RST_pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	2108      	movs	r1, #8
 8001610:	4815      	ldr	r0, [pc, #84]	; (8001668 <ST7565_st7565_init+0x7c>)
 8001612:	f002 fc37 	bl	8003e84 <HAL_GPIO_WritePin>

	// LCD bias select
	ST7565_st7565_command(CMD_SET_BIAS_7);
 8001616:	20a3      	movs	r0, #163	; 0xa3
 8001618:	f000 f842 	bl	80016a0 <ST7565_st7565_command>
	// ADC select
	ST7565_st7565_command(CMD_SET_ADC_NORMAL);
 800161c:	20a0      	movs	r0, #160	; 0xa0
 800161e:	f000 f83f 	bl	80016a0 <ST7565_st7565_command>
	// SHL select
	ST7565_st7565_command(CMD_SET_COM_NORMAL);
 8001622:	20c0      	movs	r0, #192	; 0xc0
 8001624:	f000 f83c 	bl	80016a0 <ST7565_st7565_command>
	// Initial display line
	ST7565_st7565_command(CMD_SET_DISP_START_LINE);
 8001628:	2040      	movs	r0, #64	; 0x40
 800162a:	f000 f839 	bl	80016a0 <ST7565_st7565_command>

	// Turn on voltage converter (VC=1, VR=0, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x4);
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f000 f836 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001634:	2032      	movs	r0, #50	; 0x32
 8001636:	f001 fd3f 	bl	80030b8 <HAL_Delay>

	// Turn on voltage regulator (VC=1, VR=1, VF=0)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x6);
 800163a:	202e      	movs	r0, #46	; 0x2e
 800163c:	f000 f830 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(50);
 8001640:	2032      	movs	r0, #50	; 0x32
 8001642:	f001 fd39 	bl	80030b8 <HAL_Delay>

	// Turn on voltage follower (VC=1, VR=1, VF=1)
	ST7565_st7565_command(CMD_SET_POWER_CONTROL | 0x7);
 8001646:	202f      	movs	r0, #47	; 0x2f
 8001648:	f000 f82a 	bl	80016a0 <ST7565_st7565_command>
	HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f001 fd33 	bl	80030b8 <HAL_Delay>

	// Set lcd operating voltage (regulator resistor, ref voltage resistor)
	ST7565_st7565_command(CMD_SET_RESISTOR_RATIO | 0x6);
 8001652:	2026      	movs	r0, #38	; 0x26
 8001654:	f000 f824 	bl	80016a0 <ST7565_st7565_command>

	// Set up a bounding box for screen updates
	ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
 8001658:	233f      	movs	r3, #63	; 0x3f
 800165a:	227f      	movs	r2, #127	; 0x7f
 800165c:	2100      	movs	r1, #0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fe20 	bl	80012a4 <ST7565_updateBoundingBox>
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020000 	.word	0x40020000

0800166c <ST7565_spiwrite>:

inline void ST7565_spiwrite(uint8_t c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&handler_1, (uint8_t *)&c, sizeof(uint8_t), 1000);
 8001676:	1df9      	adds	r1, r7, #7
 8001678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167c:	2201      	movs	r2, #1
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <ST7565_spiwrite+0x30>)
 8001680:	f004 fccf 	bl	8006022 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&handler_1) != HAL_SPI_STATE_READY); // Wait for the transmission to end
 8001684:	bf00      	nop
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <ST7565_spiwrite+0x30>)
 8001688:	f004 ffa9 	bl	80065de <HAL_SPI_GetState>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d1f9      	bne.n	8001686 <ST7565_spiwrite+0x1a>
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	2000074c 	.word	0x2000074c

080016a0 <ST7565_st7565_command>:

void ST7565_st7565_command(uint8_t c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2110      	movs	r1, #16
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <ST7565_st7565_command+0x24>)
 80016b0:	f002 fbe8 	bl	8003e84 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ffd8 	bl	800166c <ST7565_spiwrite>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020000 	.word	0x40020000

080016c8 <ST7565_st7565_data>:

void ST7565_st7565_data(uint8_t c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_port, RS_pin, GPIO_PIN_SET);
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <ST7565_st7565_data+0x24>)
 80016d8:	f002 fbd4 	bl	8003e84 <HAL_GPIO_WritePin>
	ST7565_spiwrite(c);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ffc4 	bl	800166c <ST7565_spiwrite>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40020000 	.word	0x40020000

080016f0 <ST7565_st7565_set_brightness>:

void ST7565_st7565_set_brightness(uint8_t val)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	ST7565_st7565_command(CMD_SET_VOLUME_FIRST);
 80016fa:	2081      	movs	r0, #129	; 0x81
 80016fc:	f7ff ffd0 	bl	80016a0 <ST7565_st7565_command>
	ST7565_st7565_command(CMD_SET_VOLUME_SECOND | (val & 0x3f));
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001706:	b2db      	uxtb	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ffc9 	bl	80016a0 <ST7565_st7565_command>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <ST7565_display>:

void ST7565_display(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
	uint8_t col, maxcol, p;

	for (p = 0; p < 8; p++)
 800171e:	2300      	movs	r3, #0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	e055      	b.n	80017d0 <ST7565_display+0xb8>
	{
		#ifdef enablePartialUpdate
			// check if this page is part of update
			if (yUpdateMin >= ((p + 1) * 8))
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <ST7565_display+0xe4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3301      	adds	r3, #1
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	429a      	cmp	r2, r3
 8001732:	da49      	bge.n	80017c8 <ST7565_display+0xb0>
			{
				continue;   // nope, skip it!
			}
				if (yUpdateMax < p * 8)
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <ST7565_display+0xe8>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	429a      	cmp	r2, r3
 8001740:	db4a      	blt.n	80017d8 <ST7565_display+0xc0>
				{
					break;
				}
		#endif

		HAL_Delay(1);
 8001742:	2001      	movs	r0, #1
 8001744:	f001 fcb8 	bl	80030b8 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_PAGE | pagemap[p]);
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	4a2e      	ldr	r2, [pc, #184]	; (8001804 <ST7565_display+0xec>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8001752:	b2db      	uxtb	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ffa3 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f001 fcac 	bl	80030b8 <HAL_Delay>

		#ifdef enablePartialUpdate
			col = xUpdateMin;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <ST7565_display+0xf0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	71fb      	strb	r3, [r7, #7]
			maxcol = xUpdateMax;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <ST7565_display+0xf4>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	717b      	strb	r3, [r7, #5]
			// Start at the beginning of the row
			col = 0;
			maxcol = LCDWIDTH;
		#endif

		ST7565_st7565_command(CMD_SET_COLUMN_LOWER | ((col + ST7565_STARTBYTES) & 0xf));
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff93 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800177a:	2001      	movs	r0, #1
 800177c:	f001 fc9c 	bl	80030b8 <HAL_Delay>
		ST7565_st7565_command(CMD_SET_COLUMN_UPPER | (((col + ST7565_STARTBYTES) >> 4) & 0x0F));
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	b2db      	uxtb	r3, r3
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff87 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 8001792:	2001      	movs	r0, #1
 8001794:	f001 fc90 	bl	80030b8 <HAL_Delay>
		ST7565_st7565_command(CMD_RMW);
 8001798:	20e0      	movs	r0, #224	; 0xe0
 800179a:	f7ff ff81 	bl	80016a0 <ST7565_st7565_command>
		HAL_Delay(1);
 800179e:	2001      	movs	r0, #1
 80017a0:	f001 fc8a 	bl	80030b8 <HAL_Delay>

		for (; col < maxcol; col++)
 80017a4:	e00b      	b.n	80017be <ST7565_display+0xa6>
		{
			ST7565_st7565_data(st7565_buffer[(128 * p) + col]);
 80017a6:	79bb      	ldrb	r3, [r7, #6]
 80017a8:	01da      	lsls	r2, r3, #7
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <ST7565_display+0xf8>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff88 	bl	80016c8 <ST7565_st7565_data>
		for (; col < maxcol; col++)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	3301      	adds	r3, #1
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	79fa      	ldrb	r2, [r7, #7]
 80017c0:	797b      	ldrb	r3, [r7, #5]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3ef      	bcc.n	80017a6 <ST7565_display+0x8e>
 80017c6:	e000      	b.n	80017ca <ST7565_display+0xb2>
				continue;   // nope, skip it!
 80017c8:	bf00      	nop
	for (p = 0; p < 8; p++)
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	3301      	adds	r3, #1
 80017ce:	71bb      	strb	r3, [r7, #6]
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	d9a6      	bls.n	8001724 <ST7565_display+0xc>
 80017d6:	e000      	b.n	80017da <ST7565_display+0xc2>
					break;
 80017d8:	bf00      	nop
		}
	}

	#ifdef enablePartialUpdate
		xUpdateMin = LCDWIDTH;  // -1;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <ST7565_display+0xf0>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	701a      	strb	r2, [r3, #0]
		xUpdateMax = 0;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <ST7565_display+0xf4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		yUpdateMin = LCDHEIGHT; // -1;
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <ST7565_display+0xe4>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	701a      	strb	r2, [r3, #0]
		yUpdateMax = 0;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <ST7565_display+0xe8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	#endif
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000612 	.word	0x20000612
 8001800:	20000613 	.word	0x20000613
 8001804:	0800cd14 	.word	0x0800cd14
 8001808:	20000610 	.word	0x20000610
 800180c:	20000611 	.word	0x20000611
 8001810:	20000210 	.word	0x20000210

08001814 <ST7565_clear>:

void ST7565_clear(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	memset(st7565_buffer, 0, 1024);
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <ST7565_clear+0x20>)
 8001820:	f008 fb3e 	bl	8009ea0 <memset>
	ST7565_updateBoundingBox(0, 0, LCDWIDTH, LCDHEIGHT);
 8001824:	2340      	movs	r3, #64	; 0x40
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	2100      	movs	r1, #0
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fd3a 	bl	80012a4 <ST7565_updateBoundingBox>
	//ST7565_updateBoundingBox(0, 0, LCDWIDTH - 1, LCDHEIGHT - 1);
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000210 	.word	0x20000210

08001838 <ST7565_get_big_font_bmp>:
		}
	}
}

void ST7565_get_big_font_bmp(uint8_t number, uint8_t* buffer)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 22; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	e00e      	b.n	8001868 <ST7565_get_big_font_bmp+0x30>
	{
		buffer[i] = font12x16[i + number * 22];
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2216      	movs	r2, #22
 800184e:	fb02 f203 	mul.w	r2, r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	441a      	add	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6839      	ldr	r1, [r7, #0]
 800185a:	440b      	add	r3, r1
 800185c:	4907      	ldr	r1, [pc, #28]	; (800187c <ST7565_get_big_font_bmp+0x44>)
 800185e:	5c8a      	ldrb	r2, [r1, r2]
 8001860:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 22; i++)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b15      	cmp	r3, #21
 800186c:	dded      	ble.n	800184a <ST7565_get_big_font_bmp+0x12>
	}
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	0800d218 	.word	0x0800d218

08001880 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001892:	4b21      	ldr	r3, [pc, #132]	; (8001918 <MX_ADC1_Init+0x98>)
 8001894:	4a21      	ldr	r2, [pc, #132]	; (800191c <MX_ADC1_Init+0x9c>)
 8001896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001898:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <MX_ADC1_Init+0x98>)
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <MX_ADC1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <MX_ADC1_Init+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MX_ADC1_Init+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <MX_ADC1_Init+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <MX_ADC1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <MX_ADC1_Init+0x98>)
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <MX_ADC1_Init+0xa0>)
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <MX_ADC1_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <MX_ADC1_Init+0x98>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_ADC1_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <MX_ADC1_Init+0x98>)
 80018da:	2201      	movs	r2, #1
 80018dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018de:	480e      	ldr	r0, [pc, #56]	; (8001918 <MX_ADC1_Init+0x98>)
 80018e0:	f001 fc0e 	bl	8003100 <HAL_ADC_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80018ea:	f000 fd89 	bl	8002400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018f2:	2301      	movs	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fa:	463b      	mov	r3, r7
 80018fc:	4619      	mov	r1, r3
 80018fe:	4806      	ldr	r0, [pc, #24]	; (8001918 <MX_ADC1_Init+0x98>)
 8001900:	f001 fdc2 	bl	8003488 <HAL_ADC_ConfigChannel>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800190a:	f000 fd79 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000065c 	.word	0x2000065c
 800191c:	40012000 	.word	0x40012000
 8001920:	0f000001 	.word	0x0f000001

08001924 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_ADC_MspInit+0x7c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d127      	bne.n	8001996 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0x80>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = BrakeADC1_Pin|BrakeADC2_Pin|BatteryADC_Pin;
 800197e:	2307      	movs	r3, #7
 8001980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001982:	2303      	movs	r3, #3
 8001984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_ADC_MspInit+0x84>)
 8001992:	f002 f8db 	bl	8003b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40012000 	.word	0x40012000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000

080019ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b48      	ldr	r3, [pc, #288]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b45      	ldr	r3, [pc, #276]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a40      	ldr	r2, [pc, #256]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b3a      	ldr	r3, [pc, #232]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a39      	ldr	r2, [pc, #228]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <MX_GPIO_Init+0x13c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2158      	movs	r1, #88	; 0x58
 8001a36:	482d      	ldr	r0, [pc, #180]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a38:	f002 fa24 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDCS_GPIO_Port, SDCS_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a42:	482b      	ldr	r0, [pc, #172]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001a44:	f002 fa1e 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DisplayRSE_Pin|DisplayRS_Pin|DisplayCS_Pin;
 8001a48:	2358      	movs	r3, #88	; 0x58
 8001a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4823      	ldr	r0, [pc, #140]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a60:	f002 f874 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDCS_Pin;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SDCS_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	481c      	ldr	r0, [pc, #112]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001a7e:	f002 f865 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4814      	ldr	r0, [pc, #80]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a9a:	f002 f857 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW2_Pin|SW3_Pin;
 8001a9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	; (8001aec <MX_GPIO_Init+0x140>)
 8001ab4:	f002 f84a 	bl	8003b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DRDY1_Pin|DRDY2_Pin|MPU6050INT_Pin;
 8001ab8:	23e0      	movs	r3, #224	; 0xe0
 8001aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4809      	ldr	r0, [pc, #36]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001acc:	f002 f83e 	bl	8003b4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2028      	movs	r0, #40	; 0x28
 8001ad6:	f001 fff4 	bl	8003ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ada:	2028      	movs	r0, #40	; 0x28
 8001adc:	f002 f80d 	bl	8003afa <HAL_NVIC_EnableIRQ>

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400

08001af4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C1_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C1_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C1_Init+0x50>)
 8001b32:	f002 f9d9 	bl	8003ee8 <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 fc60 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200006a4 	.word	0x200006a4
 8001b48:	40005400 	.word	0x40005400
 8001b4c:	000186a0 	.word	0x000186a0

08001b50 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b56:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <MX_I2C2_Init+0x54>)
 8001b58:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <MX_I2C2_Init+0x58>)
 8001b5e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b72:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b8c:	4804      	ldr	r0, [pc, #16]	; (8001ba0 <MX_I2C2_Init+0x50>)
 8001b8e:	f002 f9ab 	bl	8003ee8 <HAL_I2C_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b98:	f000 fc32 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200006f8 	.word	0x200006f8
 8001ba4:	40005800 	.word	0x40005800
 8001ba8:	000186a0 	.word	0x000186a0

08001bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08c      	sub	sp, #48	; 0x30
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 031c 	add.w	r3, r7, #28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_I2C_MspInit+0x10c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d12d      	bne.n	8001c2a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a39      	ldr	r2, [pc, #228]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf0:	2312      	movs	r3, #18
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c08:	f001 ffa0 	bl	8003b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a29      	ldr	r2, [pc, #164]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b27      	ldr	r3, [pc, #156]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c28:	e041      	b.n	8001cae <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <HAL_I2C_MspInit+0x118>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d13c      	bne.n	8001cae <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	6313      	str	r3, [r2, #48]	; 0x30
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c56:	2312      	movs	r3, #18
 8001c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c62:	2304      	movs	r3, #4
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c6e:	f001 ff6d 	bl	8003b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c72:	2308      	movs	r3, #8
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c76:	2312      	movs	r3, #18
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c82:	2309      	movs	r3, #9
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <HAL_I2C_MspInit+0x114>)
 8001c8e:	f001 ff5d 	bl	8003b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_I2C_MspInit+0x110>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	3730      	adds	r7, #48	; 0x30
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40005800 	.word	0x40005800

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b092      	sub	sp, #72	; 0x48
 8001ccc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cce:	f001 f981 	bl	8002fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd2:	f000 f9c5 	bl	8002060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd6:	f7ff fe69 	bl	80019ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cda:	f7ff fdd1 	bl	8001880 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cde:	f7ff ff09 	bl	8001af4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ce2:	f7ff ff35 	bl	8001b50 <MX_I2C2_Init>
  MX_RTC_Init();
 8001ce6:	f000 fb91 	bl	800240c <MX_RTC_Init>
  MX_SPI1_Init();
 8001cea:	f000 feab 	bl	8002a44 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001cee:	f000 fee1 	bl	8002ab4 <MX_SPI2_Init>
  MX_TIM4_Init();
 8001cf2:	f001 f8cf 	bl	8002e94 <MX_TIM4_Init>
  MX_FATFS_Init();
 8001cf6:	f005 f991 	bl	800701c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001cfa:	201e      	movs	r0, #30
 8001cfc:	f001 ff0b 	bl	8003b16 <HAL_NVIC_DisableIRQ>

  ST7565_begin(0x7); // Initialize display
 8001d00:	2007      	movs	r0, #7
 8001d02:	f7ff fc5d 	bl	80015c0 <ST7565_begin>
  ST7565_clear(); // Clear the display
 8001d06:	f7ff fd85 	bl	8001814 <ST7565_clear>

  HMC5883L_initialize(); // Initialize magnetometers
 8001d0a:	f7ff f937 	bl	8000f7c <HMC5883L_initialize>

  uint8_t check = MPU6050_initialize(); // Initialize MPU6050
 8001d0e:	f7ff fa03 	bl	8001118 <MPU6050_initialize>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (check == 1)
 8001d18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <main+0x5c>
  {
	  Error_Handler();
 8001d20:	f000 fb6e 	bl	8002400 <Error_Handler>
  }

  HAL_TIM_Base_Start_IT(&htim4);
 8001d24:	48bc      	ldr	r0, [pc, #752]	; (8002018 <main+0x350>)
 8001d26:	f004 fd83 	bl	8006830 <HAL_TIM_Base_Start_IT>

  //SD CARD
  HAL_Delay(2000);
 8001d2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d2e:	f001 f9c3 	bl	80030b8 <HAL_Delay>
  f_mount(&FatFs, "", 1); // open file system
 8001d32:	2201      	movs	r2, #1
 8001d34:	49b9      	ldr	r1, [pc, #740]	; (800201c <main+0x354>)
 8001d36:	48ba      	ldr	r0, [pc, #744]	; (8002020 <main+0x358>)
 8001d38:	f007 fbfc 	bl	8009534 <f_mount>

  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d3c:	201e      	movs	r0, #30
 8001d3e:	f001 fedc 	bl	8003afa <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (button_pressed == 1)
 8001d42:	4bb8      	ldr	r3, [pc, #736]	; (8002024 <main+0x35c>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d112      	bne.n	8001d70 <main+0xa8>
	  {
		  // Disable button interrupt so that it does not interfere with our menu
		  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001d4a:	2028      	movs	r0, #40	; 0x28
 8001d4c:	f001 fee3 	bl	8003b16 <HAL_NVIC_DisableIRQ>

		  // Go into the menu display function in file setup_menu.c
		  enterMenu();
 8001d50:	f000 fbe2 	bl	8002518 <enterMenu>

		  HAL_Delay(200);
 8001d54:	20c8      	movs	r0, #200	; 0xc8
 8001d56:	f001 f9af 	bl	80030b8 <HAL_Delay>
		  __HAL_GPIO_EXTI_CLEAR_IT(SW1_Pin); // clear interrupts
 8001d5a:	4bb3      	ldr	r3, [pc, #716]	; (8002028 <main+0x360>)
 8001d5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d60:	615a      	str	r2, [r3, #20]
		  button_pressed = 0;
 8001d62:	4bb0      	ldr	r3, [pc, #704]	; (8002024 <main+0x35c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]

		  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d68:	2028      	movs	r0, #40	; 0x28
 8001d6a:	f001 fec6 	bl	8003afa <HAL_NVIC_EnableIRQ>
 8001d6e:	e7e8      	b.n	8001d42 <main+0x7a>
	  }
	  else
	  {
	  	  HAL_Delay(100);
 8001d70:	2064      	movs	r0, #100	; 0x64
 8001d72:	f001 f9a1 	bl	80030b8 <HAL_Delay>
		  ST7565_clear(); // clear the display
 8001d76:	f7ff fd4d 	bl	8001814 <ST7565_clear>

		  char str[10] = "";
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	809a      	strh	r2, [r3, #4]
		  char str_temp[20] = "";
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]

		  // Brake lever bar graph
		  Brake_left = (uint16_t)(Brake_left / 2.3);
 8001d9a:	4ba4      	ldr	r3, [pc, #656]	; (800202c <main+0x364>)
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fbc8 	bl	8000534 <__aeabi_i2d>
 8001da4:	a39a      	add	r3, pc, #616	; (adr r3, 8002010 <main+0x348>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	f7fe fd57 	bl	800085c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe feff 	bl	8000bb8 <__aeabi_d2uiz>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b9b      	ldr	r3, [pc, #620]	; (800202c <main+0x364>)
 8001dc0:	801a      	strh	r2, [r3, #0]
		  Brake_right = (uint16_t)(Brake_right / 2.3);
 8001dc2:	4b9b      	ldr	r3, [pc, #620]	; (8002030 <main+0x368>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fbb4 	bl	8000534 <__aeabi_i2d>
 8001dcc:	a390      	add	r3, pc, #576	; (adr r3, 8002010 <main+0x348>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fd43 	bl	800085c <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe feeb 	bl	8000bb8 <__aeabi_d2uiz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b92      	ldr	r3, [pc, #584]	; (8002030 <main+0x368>)
 8001de8:	801a      	strh	r2, [r3, #0]
		  ST7565_fillrect(0, 0, Brake_left, 10, BLACK);
 8001dea:	4b90      	ldr	r3, [pc, #576]	; (800202c <main+0x364>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	2301      	movs	r3, #1
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	230a      	movs	r3, #10
 8001df6:	2100      	movs	r1, #0
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff fb4b 	bl	8001494 <ST7565_fillrect>
		  ST7565_fillrect((128-Brake_right), 0, Brake_right, 10, BLACK);
 8001dfe:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <main+0x368>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	b2d8      	uxtb	r0, r3
 8001e0c:	4b88      	ldr	r3, [pc, #544]	; (8002030 <main+0x368>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	2301      	movs	r3, #1
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	230a      	movs	r3, #10
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f7ff fb3b 	bl	8001494 <ST7565_fillrect>
		  ST7565_drawstring(50, 0, "BRAKE");
 8001e1e:	4a85      	ldr	r2, [pc, #532]	; (8002034 <main+0x36c>)
 8001e20:	2100      	movs	r1, #0
 8001e22:	2032      	movs	r0, #50	; 0x32
 8001e24:	f7ff fad0 	bl	80013c8 <ST7565_drawstring>

		  // Suspension percent
		  ST7565_drawstring(48, 2, "TRAVEL");
 8001e28:	4a83      	ldr	r2, [pc, #524]	; (8002038 <main+0x370>)
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	2030      	movs	r0, #48	; 0x30
 8001e2e:	f7ff facb 	bl	80013c8 <ST7565_drawstring>
		  uint8_t suspension_front_1 = HMC_x_axis_front % 10;
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <main+0x374>)
 8001e34:	881a      	ldrh	r2, [r3, #0]
 8001e36:	4b82      	ldr	r3, [pc, #520]	; (8002040 <main+0x378>)
 8001e38:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3c:	08d9      	lsrs	r1, r3, #3
 8001e3e:	460b      	mov	r3, r1
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  uint8_t suspension_front_10 = HMC_x_axis_front / 10;
 8001e4e:	4b7b      	ldr	r3, [pc, #492]	; (800203c <main+0x374>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	4a7b      	ldr	r2, [pc, #492]	; (8002040 <main+0x378>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  uint8_t suspension_rear_1 = HMC_x_axis_rear % 10;
 8001e60:	4b78      	ldr	r3, [pc, #480]	; (8002044 <main+0x37c>)
 8001e62:	881a      	ldrh	r2, [r3, #0]
 8001e64:	4b76      	ldr	r3, [pc, #472]	; (8002040 <main+0x378>)
 8001e66:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6a:	08d9      	lsrs	r1, r3, #3
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  uint8_t suspension_rear_10 = HMC_x_axis_rear / 10;
 8001e7c:	4b71      	ldr	r3, [pc, #452]	; (8002044 <main+0x37c>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	4a6f      	ldr	r2, [pc, #444]	; (8002040 <main+0x378>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  uint8_t buffer[22];

		  ST7565_get_big_font_bmp(suspension_front_10, buffer);
 8001e8e:	1d3a      	adds	r2, r7, #4
 8001e90:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fcce 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(10, 15, buffer, 11, 16, BLACK);
 8001e9c:	1d3a      	adds	r2, r7, #4
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	230b      	movs	r3, #11
 8001ea8:	210f      	movs	r1, #15
 8001eaa:	200a      	movs	r0, #10
 8001eac:	f7ff fa36 	bl	800131c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_front_1, buffer);
 8001eb0:	1d3a      	adds	r2, r7, #4
 8001eb2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fcbd 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(25, 15, buffer, 11, 16, BLACK);
 8001ebe:	1d3a      	adds	r2, r7, #4
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	230b      	movs	r3, #11
 8001eca:	210f      	movs	r1, #15
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f7ff fa25 	bl	800131c <ST7565_drawbitmap>

		  ST7565_get_big_font_bmp(suspension_rear_10, buffer);
 8001ed2:	1d3a      	adds	r2, r7, #4
 8001ed4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fcac 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(90, 15, buffer, 11, 16, BLACK);
 8001ee0:	1d3a      	adds	r2, r7, #4
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	230b      	movs	r3, #11
 8001eec:	210f      	movs	r1, #15
 8001eee:	205a      	movs	r0, #90	; 0x5a
 8001ef0:	f7ff fa14 	bl	800131c <ST7565_drawbitmap>
		  ST7565_get_big_font_bmp(suspension_rear_1, buffer);
 8001ef4:	1d3a      	adds	r2, r7, #4
 8001ef6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc9b 	bl	8001838 <ST7565_get_big_font_bmp>
		  ST7565_drawbitmap(105, 15, buffer, 11, 16, BLACK);
 8001f02:	1d3a      	adds	r2, r7, #4
 8001f04:	2301      	movs	r3, #1
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2310      	movs	r3, #16
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	230b      	movs	r3, #11
 8001f0e:	210f      	movs	r1, #15
 8001f10:	2069      	movs	r0, #105	; 0x69
 8001f12:	f7ff fa03 	bl	800131c <ST7565_drawbitmap>
		  //HMC_x_axis_rear = (uint16_t)(HMC_x_axis_rear / 2.3);
		  //ST7565_fillrect(0, 35, HMC_x_axis_front, 10, BLACK);
		  //ST7565_fillrect((128-HMC_x_axis_rear), 35, HMC_x_axis_rear, 10, BLACK);

		  // Current time
		  ST7565_drawstring(10, 6, "TIME");
 8001f16:	4a4c      	ldr	r2, [pc, #304]	; (8002048 <main+0x380>)
 8001f18:	2106      	movs	r1, #6
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	f7ff fa54 	bl	80013c8 <ST7565_drawstring>
		  sprintf(str, "%02u", time.Hours);
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <main+0x384>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	4949      	ldr	r1, [pc, #292]	; (8002050 <main+0x388>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f008 fc29 	bl	800a784 <siprintf>
		  strcat(str_temp, str);
 8001f32:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f008 fc41 	bl	800a7c4 <strcat>
		  strcpy(str, ":");
 8001f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f46:	223a      	movs	r2, #58	; 0x3a
 8001f48:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 8001f4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f008 fc35 	bl	800a7c4 <strcat>
		  sprintf(str, "%02u", time.Minutes);
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <main+0x384>)
 8001f5c:	785b      	ldrb	r3, [r3, #1]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f64:	493a      	ldr	r1, [pc, #232]	; (8002050 <main+0x388>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f008 fc0c 	bl	800a784 <siprintf>
		  strcat(str_temp, str);
 8001f6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f008 fc24 	bl	800a7c4 <strcat>
		  strcpy(str, ":");
 8001f7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f80:	223a      	movs	r2, #58	; 0x3a
 8001f82:	801a      	strh	r2, [r3, #0]
		  strcat(str_temp, str);
 8001f84:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f008 fc18 	bl	800a7c4 <strcat>
		  sprintf(str, "%02u", time.Seconds);
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <main+0x384>)
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f9e:	492c      	ldr	r1, [pc, #176]	; (8002050 <main+0x388>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f008 fbef 	bl	800a784 <siprintf>
		  strcat(str_temp, str);
 8001fa6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f008 fc07 	bl	800a7c4 <strcat>
		  ST7565_drawstring(0, 7, str_temp);
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2107      	movs	r1, #7
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff fa02 	bl	80013c8 <ST7565_drawstring>

		  // Battery %
		  ST7565_drawstring(95, 6, "BATT");
 8001fc4:	4a23      	ldr	r2, [pc, #140]	; (8002054 <main+0x38c>)
 8001fc6:	2106      	movs	r1, #6
 8001fc8:	205f      	movs	r0, #95	; 0x5f
 8001fca:	f7ff f9fd 	bl	80013c8 <ST7565_drawstring>
		  sprintf(str, "%u", battery_voltage);
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <main+0x390>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd8:	4920      	ldr	r1, [pc, #128]	; (800205c <main+0x394>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f008 fbd2 	bl	800a784 <siprintf>
		  strcpy(str_temp, "%");
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	2225      	movs	r2, #37	; 0x25
 8001fe6:	801a      	strh	r2, [r3, #0]
		  strcat(str, str_temp);
 8001fe8:	f107 021c 	add.w	r2, r7, #28
 8001fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f008 fbe6 	bl	800a7c4 <strcat>
		  ST7565_drawstring(105, 7, str);
 8001ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2107      	movs	r1, #7
 8002000:	2069      	movs	r0, #105	; 0x69
 8002002:	f7ff f9e1 	bl	80013c8 <ST7565_drawstring>

		  // Send data to display
		  ST7565_display();
 8002006:	f7ff fb87 	bl	8001718 <ST7565_display>
	  if (button_pressed == 1)
 800200a:	e69a      	b.n	8001d42 <main+0x7a>
 800200c:	f3af 8000 	nop.w
 8002010:	66666666 	.word	0x66666666
 8002014:	40026666 	.word	0x40026666
 8002018:	20000cc8 	.word	0x20000cc8
 800201c:	0800cc18 	.word	0x0800cc18
 8002020:	200007ac 	.word	0x200007ac
 8002024:	20000614 	.word	0x20000614
 8002028:	40013c00 	.word	0x40013c00
 800202c:	200009de 	.word	0x200009de
 8002030:	200007a8 	.word	0x200007a8
 8002034:	0800cc1c 	.word	0x0800cc1c
 8002038:	0800cc24 	.word	0x0800cc24
 800203c:	200009e0 	.word	0x200009e0
 8002040:	cccccccd 	.word	0xcccccccd
 8002044:	200009dc 	.word	0x200009dc
 8002048:	0800cc2c 	.word	0x0800cc2c
 800204c:	20000a04 	.word	0x20000a04
 8002050:	0800cc34 	.word	0x0800cc34
 8002054:	0800cc3c 	.word	0x0800cc3c
 8002058:	200007aa 	.word	0x200007aa
 800205c:	0800cc44 	.word	0x0800cc44

08002060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
 8002064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	2230      	movs	r2, #48	; 0x30
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f007 ff16 	bl	8009ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	4b24      	ldr	r3, [pc, #144]	; (800211c <SystemClock_Config+0xbc>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a23      	ldr	r2, [pc, #140]	; (800211c <SystemClock_Config+0xbc>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b21      	ldr	r3, [pc, #132]	; (800211c <SystemClock_Config+0xbc>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <SystemClock_Config+0xc0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020ac:	4a1c      	ldr	r2, [pc, #112]	; (8002120 <SystemClock_Config+0xc0>)
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <SystemClock_Config+0xc0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80020c0:	2306      	movs	r3, #6
 80020c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020cc:	2310      	movs	r3, #16
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fec5 	bl	8004e68 <HAL_RCC_OscConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80020e4:	f000 f98c 	bl	8002400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e8:	230f      	movs	r3, #15
 80020ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f928 	bl	8005358 <HAL_RCC_ClockConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800210e:	f000 f977 	bl	8002400 <Error_Handler>
  }
}
 8002112:	bf00      	nop
 8002114:	3750      	adds	r7, #80	; 0x50
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

// Timer interrupt
// On every timer interrupt read the current sensor states and write to SD card
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback
  if (htim == &htim4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a9b      	ldr	r2, [pc, #620]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002130:	4293      	cmp	r3, r2
 8002132:	f040 812e 	bne.w	8002392 <HAL_TIM_PeriodElapsedCallback+0x26e>
  {
	  // Read magnetometer data
	  HMC_x_axis_front = HMC5883L_get_X(1);
 8002136:	2001      	movs	r0, #1
 8002138:	f7fe ff7a 	bl	8001030 <HMC5883L_get_X>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b97      	ldr	r3, [pc, #604]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002142:	801a      	strh	r2, [r3, #0]
	  HMC_x_axis_rear = HMC5883L_get_X(0);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe ff73 	bl	8001030 <HMC5883L_get_X>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b95      	ldr	r3, [pc, #596]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002150:	801a      	strh	r2, [r3, #0]

	  // Read brake sensor ADC
	  Brake_left = Brake_Sensor_Read(SENSOR_LEFT);
 8002152:	2000      	movs	r0, #0
 8002154:	f7fe fecc 	bl	8000ef0 <Brake_Sensor_Read>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	4b92      	ldr	r3, [pc, #584]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800215e:	801a      	strh	r2, [r3, #0]
	  Brake_right = Brake_Sensor_Read(SENSOR_RIGHT);
 8002160:	2001      	movs	r0, #1
 8002162:	f7fe fec5 	bl	8000ef0 <Brake_Sensor_Read>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b90      	ldr	r3, [pc, #576]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x288>)
 800216c:	801a      	strh	r2, [r3, #0]

	  // Read battery voltage
	  battery_voltage = Read_Battery_Voltage();
 800216e:	f7ff f85f 	bl	8001230 <Read_Battery_Voltage>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b8e      	ldr	r3, [pc, #568]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002178:	701a      	strb	r2, [r3, #0]
	  // Read accelerometer and gyroscpe
	  //float accel_x = MPU6050_accel_read(Xaxis);
	  //float gyro_x = MPU6050_gyro_read(Zaxis);

	  // Get current time
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800217a:	2200      	movs	r2, #0
 800217c:	498d      	ldr	r1, [pc, #564]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800217e:	488e      	ldr	r0, [pc, #568]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002180:	f003 fce2 	bl	8005b48 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002184:	2200      	movs	r2, #0
 8002186:	498d      	ldr	r1, [pc, #564]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002188:	488b      	ldr	r0, [pc, #556]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800218a:	f003 fde2 	bl	8005d52 <HAL_RTC_GetDate>

	  // Write to SD card
	  // TODO

	  // Copy all sensor data to string
	  char str_temp[20] = "";
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
	  char str[20] = "";
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
	  memset(str, '\0', sizeof(str));
 80021b2:	f107 0310 	add.w	r3, r7, #16
 80021b6:	2214      	movs	r2, #20
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f007 fe70 	bl	8009ea0 <memset>
	  memset(str_temp, '\0', sizeof(str_temp));
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2214      	movs	r2, #20
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f007 fe69 	bl	8009ea0 <memset>

	  // time
	  sprintf(str_temp, "%02u", time.Hours);
 80021ce:	4b79      	ldr	r3, [pc, #484]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d8:	4979      	ldr	r1, [pc, #484]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80021da:	4618      	mov	r0, r3
 80021dc:	f008 fad2 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 80021e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f008 faea 	bl	800a7c4 <strcat>
	  sprintf(str_temp, "%02u", time.Minutes);
 80021f0:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fa:	4971      	ldr	r1, [pc, #452]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f008 fac1 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 8002202:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f008 fad9 	bl	800a7c4 <strcat>
	  sprintf(str_temp, "%02u", time.Seconds);
 8002212:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002214:	789b      	ldrb	r3, [r3, #2]
 8002216:	461a      	mov	r2, r3
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	4968      	ldr	r1, [pc, #416]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800221e:	4618      	mov	r0, r3
 8002220:	f008 fab0 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 8002224:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f008 fac8 	bl	800a7c4 <strcat>
	  strcat(str, ";");
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4618      	mov	r0, r3
 800223a:	f7fd ffd1 	bl	80001e0 <strlen>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	f107 0310 	add.w	r3, r7, #16
 8002246:	4413      	add	r3, r2
 8002248:	495e      	ldr	r1, [pc, #376]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800224a:	461a      	mov	r2, r3
 800224c:	460b      	mov	r3, r1
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	8013      	strh	r3, [r2, #0]

	  // suspension
	  sprintf(str_temp, "%02u", HMC_x_axis_front);
 8002252:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4958      	ldr	r1, [pc, #352]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800225e:	4618      	mov	r0, r3
 8002260:	f008 fa90 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 8002264:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f008 faa8 	bl	800a7c4 <strcat>
	  strcat(str, ";");
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4618      	mov	r0, r3
 800227a:	f7fd ffb1 	bl	80001e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	461a      	mov	r2, r3
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4413      	add	r3, r2
 8002288:	494e      	ldr	r1, [pc, #312]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	8013      	strh	r3, [r2, #0]
	  sprintf(str_temp, "%02u", HMC_x_axis_rear);
 8002292:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	461a      	mov	r2, r3
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4948      	ldr	r1, [pc, #288]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800229e:	4618      	mov	r0, r3
 80022a0:	f008 fa70 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 80022a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022a8:	f107 0310 	add.w	r3, r7, #16
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f008 fa88 	bl	800a7c4 <strcat>
	  strcat(str, ";");
 80022b4:	f107 0310 	add.w	r3, r7, #16
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fd ff91 	bl	80001e0 <strlen>
 80022be:	4603      	mov	r3, r0
 80022c0:	461a      	mov	r2, r3
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	4413      	add	r3, r2
 80022c8:	493e      	ldr	r1, [pc, #248]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80022ca:	461a      	mov	r2, r3
 80022cc:	460b      	mov	r3, r1
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	8013      	strh	r3, [r2, #0]

	  // brakes
	  sprintf(str_temp, "%02u", Brake_left);
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022dc:	4938      	ldr	r1, [pc, #224]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f008 fa50 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 80022e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f008 fa68 	bl	800a7c4 <strcat>
	  strcat(str, ";");
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fd ff71 	bl	80001e0 <strlen>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4413      	add	r3, r2
 8002308:	492e      	ldr	r1, [pc, #184]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	8013      	strh	r3, [r2, #0]
	  sprintf(str_temp, "%02u", Brake_right);
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4928      	ldr	r1, [pc, #160]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800231e:	4618      	mov	r0, r3
 8002320:	f008 fa30 	bl	800a784 <siprintf>
	  strcat(str, str_temp);
 8002324:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f008 fa48 	bl	800a7c4 <strcat>
	  strcat(str, "\n");
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	4618      	mov	r0, r3
 800233a:	f7fd ff51 	bl	80001e0 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4413      	add	r3, r2
 8002348:	491f      	ldr	r1, [pc, #124]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	8013      	strh	r3, [r2, #0]


	  // Write string onto SD
	  strncpy((char*)buffer, str, strlen(str));
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ff42 	bl	80001e0 <strlen>
 800235c:	4602      	mov	r2, r0
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	4619      	mov	r1, r3
 8002364:	4819      	ldr	r0, [pc, #100]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002366:	f008 fa3c 	bl	800a7e2 <strncpy>
	  UINT bytesWrote;
	  f_open(&fil, "results.txt", FA_WRITE | FA_OPEN_EXISTING | FA_OPEN_ALWAYS | FA_OPEN_APPEND); // open for write and append only
 800236a:	2232      	movs	r2, #50	; 0x32
 800236c:	4918      	ldr	r1, [pc, #96]	; (80023d0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800236e:	4819      	ldr	r0, [pc, #100]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002370:	f007 f926 	bl	80095c0 <f_open>
	  f_write(&fil, buffer, strlen(str), &bytesWrote); // Write to file
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4618      	mov	r0, r3
 800237a:	f7fd ff31 	bl	80001e0 <strlen>
 800237e:	4602      	mov	r2, r0
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4911      	ldr	r1, [pc, #68]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002388:	f007 fad8 	bl	800993c <f_write>
	  f_close(&fil); // Close the file
 800238c:	4811      	ldr	r0, [pc, #68]	; (80023d4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800238e:	f007 fcc8 	bl	8009d22 <f_close>
  }
}
 8002392:	bf00      	nop
 8002394:	3738      	adds	r7, #56	; 0x38
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000cc8 	.word	0x20000cc8
 80023a0:	200009e0 	.word	0x200009e0
 80023a4:	200009dc 	.word	0x200009dc
 80023a8:	200009de 	.word	0x200009de
 80023ac:	200007a8 	.word	0x200007a8
 80023b0:	200007aa 	.word	0x200007aa
 80023b4:	20000a04 	.word	0x20000a04
 80023b8:	20000c50 	.word	0x20000c50
 80023bc:	20000a1c 	.word	0x20000a1c
 80023c0:	0800cc34 	.word	0x0800cc34
 80023c4:	0800cc48 	.word	0x0800cc48
 80023c8:	0800cc4c 	.word	0x0800cc4c
 80023cc:	200009e4 	.word	0x200009e4
 80023d0:	0800cc50 	.word	0x0800cc50
 80023d4:	20000a20 	.word	0x20000a20

080023d8 <HAL_GPIO_EXTI_Callback>:


// Button interrupt
// Disables all interrupts, stops main loop, shows basic menu
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	80fb      	strh	r3, [r7, #6]
	// Check the interrupt source
    if(GPIO_Pin == SW1_Pin)
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e8:	d102      	bne.n	80023f0 <HAL_GPIO_EXTI_Callback+0x18>
    {
    	button_pressed = 1;
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_GPIO_EXTI_Callback+0x24>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
    }
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	20000614 	.word	0x20000614

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002408:	e7fe      	b.n	8002408 <Error_Handler+0x8>
	...

0800240c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002420:	2300      	movs	r3, #0
 8002422:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <MX_RTC_Init+0xac>)
 8002426:	4a25      	ldr	r2, [pc, #148]	; (80024bc <MX_RTC_Init+0xb0>)
 8002428:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <MX_RTC_Init+0xac>)
 800242c:	2200      	movs	r2, #0
 800242e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002430:	4b21      	ldr	r3, [pc, #132]	; (80024b8 <MX_RTC_Init+0xac>)
 8002432:	227f      	movs	r2, #127	; 0x7f
 8002434:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <MX_RTC_Init+0xac>)
 8002438:	22ff      	movs	r2, #255	; 0xff
 800243a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800243c:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <MX_RTC_Init+0xac>)
 800243e:	2200      	movs	r2, #0
 8002440:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <MX_RTC_Init+0xac>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_RTC_Init+0xac>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800244e:	481a      	ldr	r0, [pc, #104]	; (80024b8 <MX_RTC_Init+0xac>)
 8002450:	f003 fa2c 	bl	80058ac <HAL_RTC_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800245a:	f7ff ffd1 	bl	8002400 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 800245e:	2312      	movs	r3, #18
 8002460:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002462:	2300      	movs	r3, #0
 8002464:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002466:	2300      	movs	r3, #0
 8002468:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	2201      	movs	r2, #1
 8002476:	4619      	mov	r1, r3
 8002478:	480f      	ldr	r0, [pc, #60]	; (80024b8 <MX_RTC_Init+0xac>)
 800247a:	f003 faa8 	bl	80059ce <HAL_RTC_SetTime>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002484:	f7ff ffbc 	bl	8002400 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002488:	2301      	movs	r3, #1
 800248a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800248c:	2301      	movs	r3, #1
 800248e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002490:	2301      	movs	r3, #1
 8002492:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002494:	2300      	movs	r3, #0
 8002496:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	2201      	movs	r2, #1
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <MX_RTC_Init+0xac>)
 80024a0:	f003 fbb0 	bl	8005c04 <HAL_RTC_SetDate>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80024aa:	f7ff ffa9 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000c50 	.word	0x20000c50
 80024bc:	40002800 	.word	0x40002800

080024c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <HAL_RTC_MspInit+0x50>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d111      	bne.n	8002506 <HAL_RTC_MspInit+0x46>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024e2:	2302      	movs	r3, #2
 80024e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f8ed 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024fc:	f7ff ff80 	bl	8002400 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <HAL_RTC_MspInit+0x54>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002506:	bf00      	nop
 8002508:	3720      	adds	r7, #32
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40002800 	.word	0x40002800
 8002514:	42470e3c 	.word	0x42470e3c

08002518 <enterMenu>:
#include "setup_menu.h"

void enterMenu()
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b09a      	sub	sp, #104	; 0x68
 800251c:	af00      	add	r7, sp, #0
	ST7565_clear();
 800251e:	f7ff f979 	bl	8001814 <ST7565_clear>
	ST7565_drawstring(40, 0, "SETTINGS");
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <enterMenu+0x1b0>)
 8002524:	2100      	movs	r1, #0
 8002526:	2028      	movs	r0, #40	; 0x28
 8002528:	f7fe ff4e 	bl	80013c8 <ST7565_drawstring>

	char menu_items[4][20] = {"Set time", "Set travel", "Set brakes", "Exit"};
 800252c:	4a67      	ldr	r2, [pc, #412]	; (80026cc <enterMenu+0x1b4>)
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4611      	mov	r1, r2
 8002534:	2250      	movs	r2, #80	; 0x50
 8002536:	4618      	mov	r0, r3
 8002538:	f007 fca4 	bl	8009e84 <memcpy>
	uint8_t cursor_position = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	char str_temp[20];
	uint8_t exit = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	while(exit == 0)
 8002548:	e0b3      	b.n	80026b2 <enterMenu+0x19a>
	{
		ST7565_clear();
 800254a:	f7ff f963 	bl	8001814 <ST7565_clear>
		ST7565_drawstring(40, 0, "SETTINGS");
 800254e:	4a5e      	ldr	r2, [pc, #376]	; (80026c8 <enterMenu+0x1b0>)
 8002550:	2100      	movs	r1, #0
 8002552:	2028      	movs	r0, #40	; 0x28
 8002554:	f7fe ff38 	bl	80013c8 <ST7565_drawstring>

		// Print menu items
		for(uint8_t i = 0; i < 4; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 800255e:	e037      	b.n	80025d0 <enterMenu+0xb8>
		{
			if (cursor_position == i)
 8002560:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8002564:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002568:	429a      	cmp	r2, r3
 800256a:	d11a      	bne.n	80025a2 <enterMenu+0x8a>
			{
				  strcpy(str_temp, "-> ");
 800256c:	463b      	mov	r3, r7
 800256e:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <enterMenu+0x1b8>)
 8002570:	601a      	str	r2, [r3, #0]
				  strcat(str_temp, menu_items[i]);
 8002572:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8002576:	f107 0114 	add.w	r1, r7, #20
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	18ca      	adds	r2, r1, r3
 8002584:	463b      	mov	r3, r7
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f008 f91b 	bl	800a7c4 <strcat>
				  ST7565_drawstring(0, i+2, str_temp);
 800258e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002592:	3302      	adds	r3, #2
 8002594:	b2db      	uxtb	r3, r3
 8002596:	463a      	mov	r2, r7
 8002598:	4619      	mov	r1, r3
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe ff14 	bl	80013c8 <ST7565_drawstring>
 80025a0:	e011      	b.n	80025c6 <enterMenu+0xae>
			}
			else
			{
				ST7565_drawstring(0, i+2, menu_items[i]);
 80025a2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80025a6:	3302      	adds	r3, #2
 80025a8:	b2d8      	uxtb	r0, r3
 80025aa:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80025ae:	f107 0114 	add.w	r1, r7, #20
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	461a      	mov	r2, r3
 80025be:	4601      	mov	r1, r0
 80025c0:	2000      	movs	r0, #0
 80025c2:	f7fe ff01 	bl	80013c8 <ST7565_drawstring>
		for(uint8_t i = 0; i < 4; i++)
 80025c6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80025d0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d9c3      	bls.n	8002560 <enterMenu+0x48>
			}
		}


		// Button inputs
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET) // button down
 80025d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025dc:	483d      	ldr	r0, [pc, #244]	; (80026d4 <enterMenu+0x1bc>)
 80025de:	f001 fc39 	bl	8003e54 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d118      	bne.n	800261a <enterMenu+0x102>
		{
			HAL_Delay(100);
 80025e8:	2064      	movs	r0, #100	; 0x64
 80025ea:	f000 fd65 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET)
 80025ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f2:	4838      	ldr	r0, [pc, #224]	; (80026d4 <enterMenu+0x1bc>)
 80025f4:	f001 fc2e 	bl	8003e54 <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d157      	bne.n	80026ae <enterMenu+0x196>
			{
				if(cursor_position < 3)
 80025fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002602:	2b02      	cmp	r3, #2
 8002604:	d805      	bhi.n	8002612 <enterMenu+0xfa>
				{
					cursor_position++;
 8002606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800260a:	3301      	adds	r3, #1
 800260c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002610:	e04d      	b.n	80026ae <enterMenu+0x196>
				}
				else
				{
					cursor_position = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002618:	e049      	b.n	80026ae <enterMenu+0x196>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET) // button up
 800261a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261e:	482d      	ldr	r0, [pc, #180]	; (80026d4 <enterMenu+0x1bc>)
 8002620:	f001 fc18 	bl	8003e54 <HAL_GPIO_ReadPin>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d118      	bne.n	800265c <enterMenu+0x144>
		{
			HAL_Delay(100);
 800262a:	2064      	movs	r0, #100	; 0x64
 800262c:	f000 fd44 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 8002630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002634:	4827      	ldr	r0, [pc, #156]	; (80026d4 <enterMenu+0x1bc>)
 8002636:	f001 fc0d 	bl	8003e54 <HAL_GPIO_ReadPin>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d136      	bne.n	80026ae <enterMenu+0x196>
			{
				if(cursor_position > 0)
 8002640:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002644:	2b00      	cmp	r3, #0
 8002646:	d005      	beq.n	8002654 <enterMenu+0x13c>
				{
					cursor_position--;
 8002648:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800264c:	3b01      	subs	r3, #1
 800264e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002652:	e02c      	b.n	80026ae <enterMenu+0x196>
				}
				else
				{
					cursor_position = 3;
 8002654:	2303      	movs	r3, #3
 8002656:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800265a:	e028      	b.n	80026ae <enterMenu+0x196>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET) // enter
 800265c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002660:	481c      	ldr	r0, [pc, #112]	; (80026d4 <enterMenu+0x1bc>)
 8002662:	f001 fbf7 	bl	8003e54 <HAL_GPIO_ReadPin>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d120      	bne.n	80026ae <enterMenu+0x196>
		{
			HAL_Delay(100);
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f000 fd23 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET)
 8002672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002676:	4817      	ldr	r0, [pc, #92]	; (80026d4 <enterMenu+0x1bc>)
 8002678:	f001 fbec 	bl	8003e54 <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <enterMenu+0x196>
			{
				if (cursor_position == 3)
 8002682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002686:	2b03      	cmp	r3, #3
 8002688:	d103      	bne.n	8002692 <enterMenu+0x17a>
					exit = 1;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8002690:	e00d      	b.n	80026ae <enterMenu+0x196>
				else if (cursor_position == 2)
 8002692:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002696:	2b02      	cmp	r3, #2
 8002698:	d009      	beq.n	80026ae <enterMenu+0x196>
					;//setup_brakes(); TODO
				else if (cursor_position == 1)
 800269a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d005      	beq.n	80026ae <enterMenu+0x196>
					;//setup_suspension(); TODO
				else if (cursor_position == 0)
 80026a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <enterMenu+0x196>
					setupTime();
 80026aa:	f000 f815 	bl	80026d8 <setupTime>
			}
		}

		ST7565_display();
 80026ae:	f7ff f833 	bl	8001718 <ST7565_display>
	while(exit == 0)
 80026b2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f43f af47 	beq.w	800254a <enterMenu+0x32>
	}
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3768      	adds	r7, #104	; 0x68
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	0800cc5c 	.word	0x0800cc5c
 80026cc:	0800cc68 	.word	0x0800cc68
 80026d0:	00203e2d 	.word	0x00203e2d
 80026d4:	40020000 	.word	0x40020000

080026d8 <setupTime>:


void setupTime()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b098      	sub	sp, #96	; 0x60
 80026dc:	af00      	add	r7, sp, #0
	uint8_t exit = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t cursor_position = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	char str[30] = "";
 80026ea:	2300      	movs	r3, #0
 80026ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	615a      	str	r2, [r3, #20]
 8002700:	831a      	strh	r2, [r3, #24]
	char str_temp[30] = "";
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	f107 0320 	add.w	r3, r7, #32
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
 8002716:	615a      	str	r2, [r3, #20]
 8002718:	831a      	strh	r2, [r3, #24]

	RTC_TimeTypeDef time_temp;
	RTC_DateTypeDef date_temp;

	HAL_RTC_GetTime(&hrtc, &time_temp, RTC_FORMAT_BIN);
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	2200      	movs	r2, #0
 8002720:	4619      	mov	r1, r3
 8002722:	48c3      	ldr	r0, [pc, #780]	; (8002a30 <setupTime+0x358>)
 8002724:	f003 fa10 	bl	8005b48 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date_temp, RTC_FORMAT_BIN);
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2200      	movs	r2, #0
 800272c:	4619      	mov	r1, r3
 800272e:	48c0      	ldr	r0, [pc, #768]	; (8002a30 <setupTime+0x358>)
 8002730:	f003 fb0f 	bl	8005d52 <HAL_RTC_GetDate>

	uint8_t hour = time_temp.Hours;
 8002734:	7a3b      	ldrb	r3, [r7, #8]
 8002736:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint8_t minute = time_temp.Minutes;
 800273a:	7a7b      	ldrb	r3, [r7, #9]
 800273c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	uint8_t second = time_temp.Seconds;
 8002740:	7abb      	ldrb	r3, [r7, #10]
 8002742:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	memset(str, '\0', sizeof(str));
 8002746:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800274a:	221e      	movs	r2, #30
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f007 fba6 	bl	8009ea0 <memset>
	memset(str_temp, '\0', sizeof(str_temp));
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	221e      	movs	r2, #30
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f007 fb9f 	bl	8009ea0 <memset>

	sprintf(str, "%02u", hour);
 8002762:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8002766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800276a:	49b2      	ldr	r1, [pc, #712]	; (8002a34 <setupTime+0x35c>)
 800276c:	4618      	mov	r0, r3
 800276e:	f008 f809 	bl	800a784 <siprintf>
	strcat(str_temp, str);
 8002772:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f008 f821 	bl	800a7c4 <strcat>
	strcat(str_temp, " : ");
 8002782:	f107 031c 	add.w	r3, r7, #28
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fd2a 	bl	80001e0 <strlen>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	f107 031c 	add.w	r3, r7, #28
 8002794:	4413      	add	r3, r2
 8002796:	4aa8      	ldr	r2, [pc, #672]	; (8002a38 <setupTime+0x360>)
 8002798:	6810      	ldr	r0, [r2, #0]
 800279a:	6018      	str	r0, [r3, #0]
	sprintf(str, "%02u", minute);
 800279c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80027a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a4:	49a3      	ldr	r1, [pc, #652]	; (8002a34 <setupTime+0x35c>)
 80027a6:	4618      	mov	r0, r3
 80027a8:	f007 ffec 	bl	800a784 <siprintf>
	strcat(str_temp, str);
 80027ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f008 f804 	bl	800a7c4 <strcat>
	strcat(str_temp, " : ");
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fd0d 	bl	80001e0 <strlen>
 80027c6:	4603      	mov	r3, r0
 80027c8:	461a      	mov	r2, r3
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4413      	add	r3, r2
 80027d0:	4a99      	ldr	r2, [pc, #612]	; (8002a38 <setupTime+0x360>)
 80027d2:	6810      	ldr	r0, [r2, #0]
 80027d4:	6018      	str	r0, [r3, #0]
	sprintf(str, "%02u", second);
 80027d6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80027da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027de:	4995      	ldr	r1, [pc, #596]	; (8002a34 <setupTime+0x35c>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f007 ffcf 	bl	800a784 <siprintf>
	strcat(str_temp, str);
 80027e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f007 ffe7 	bl	800a7c4 <strcat>

	while(exit == 0)
 80027f6:	e110      	b.n	8002a1a <setupTime+0x342>
	{
		ST7565_clear();
 80027f8:	f7ff f80c 	bl	8001814 <ST7565_clear>
		ST7565_drawstring(30, 0, "TIME SETUP");
 80027fc:	4a8f      	ldr	r2, [pc, #572]	; (8002a3c <setupTime+0x364>)
 80027fe:	2100      	movs	r1, #0
 8002800:	201e      	movs	r0, #30
 8002802:	f7fe fde1 	bl	80013c8 <ST7565_drawstring>

		memset(str, '\0', sizeof(str));
 8002806:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800280a:	221e      	movs	r2, #30
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f007 fb46 	bl	8009ea0 <memset>
		memset(str_temp, '\0', sizeof(str_temp));
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	221e      	movs	r2, #30
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f007 fb3f 	bl	8009ea0 <memset>

		sprintf(str, "%02u", hour);
 8002822:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8002826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800282a:	4982      	ldr	r1, [pc, #520]	; (8002a34 <setupTime+0x35c>)
 800282c:	4618      	mov	r0, r3
 800282e:	f007 ffa9 	bl	800a784 <siprintf>
		strcat(str_temp, str);
 8002832:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f007 ffc1 	bl	800a7c4 <strcat>
		strcat(str_temp, " : ");
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fcca 	bl	80001e0 <strlen>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4413      	add	r3, r2
 8002856:	4a78      	ldr	r2, [pc, #480]	; (8002a38 <setupTime+0x360>)
 8002858:	6810      	ldr	r0, [r2, #0]
 800285a:	6018      	str	r0, [r3, #0]
		sprintf(str, "%02u", minute);
 800285c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8002860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002864:	4973      	ldr	r1, [pc, #460]	; (8002a34 <setupTime+0x35c>)
 8002866:	4618      	mov	r0, r3
 8002868:	f007 ff8c 	bl	800a784 <siprintf>
		strcat(str_temp, str);
 800286c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f007 ffa4 	bl	800a7c4 <strcat>
		strcat(str_temp, " : ");
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fcad 	bl	80001e0 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	f107 031c 	add.w	r3, r7, #28
 800288e:	4413      	add	r3, r2
 8002890:	4a69      	ldr	r2, [pc, #420]	; (8002a38 <setupTime+0x360>)
 8002892:	6810      	ldr	r0, [r2, #0]
 8002894:	6018      	str	r0, [r3, #0]
		sprintf(str, "%02u", second);
 8002896:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800289a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800289e:	4965      	ldr	r1, [pc, #404]	; (8002a34 <setupTime+0x35c>)
 80028a0:	4618      	mov	r0, r3
 80028a2:	f007 ff6f 	bl	800a784 <siprintf>
		strcat(str_temp, str);
 80028a6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80028aa:	f107 031c 	add.w	r3, r7, #28
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f007 ff87 	bl	800a7c4 <strcat>

		ST7565_drawstring(20, 3, str_temp);
 80028b6:	f107 031c 	add.w	r3, r7, #28
 80028ba:	461a      	mov	r2, r3
 80028bc:	2103      	movs	r1, #3
 80028be:	2014      	movs	r0, #20
 80028c0:	f7fe fd82 	bl	80013c8 <ST7565_drawstring>

		// Button inputs
		if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET) // button down
 80028c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c8:	485d      	ldr	r0, [pc, #372]	; (8002a40 <setupTime+0x368>)
 80028ca:	f001 fac3 	bl	8003e54 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d132      	bne.n	800293a <setupTime+0x262>
		{
			HAL_Delay(100);
 80028d4:	2064      	movs	r0, #100	; 0x64
 80028d6:	f000 fbef 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin) == GPIO_PIN_RESET)
 80028da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028de:	4858      	ldr	r0, [pc, #352]	; (8002a40 <setupTime+0x368>)
 80028e0:	f001 fab8 	bl	8003e54 <HAL_GPIO_ReadPin>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f040 8095 	bne.w	8002a16 <setupTime+0x33e>
			{
				if (cursor_position == 0)
 80028ec:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <setupTime+0x232>
				{
					if (hour > 0)
 80028f4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 808c 	beq.w	8002a16 <setupTime+0x33e>
						hour--;
 80028fe:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002902:	3b01      	subs	r3, #1
 8002904:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8002908:	e085      	b.n	8002a16 <setupTime+0x33e>
				}
				else if (cursor_position == 1)
 800290a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800290e:	2b01      	cmp	r3, #1
 8002910:	d109      	bne.n	8002926 <setupTime+0x24e>
				{
					if (minute > 0)
 8002912:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d07d      	beq.n	8002a16 <setupTime+0x33e>
						minute--;
 800291a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800291e:	3b01      	subs	r3, #1
 8002920:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002924:	e077      	b.n	8002a16 <setupTime+0x33e>
				}
				else
				{
					if (second > 0)
 8002926:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800292a:	2b00      	cmp	r3, #0
 800292c:	d073      	beq.n	8002a16 <setupTime+0x33e>
						second--;
 800292e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002932:	3b01      	subs	r3, #1
 8002934:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002938:	e06d      	b.n	8002a16 <setupTime+0x33e>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET) // button up
 800293a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293e:	4840      	ldr	r0, [pc, #256]	; (8002a40 <setupTime+0x368>)
 8002940:	f001 fa88 	bl	8003e54 <HAL_GPIO_ReadPin>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <setupTime+0x2d4>
		{
			HAL_Delay(100);
 800294a:	2064      	movs	r0, #100	; 0x64
 800294c:	f000 fbb4 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW3_GPIO_Port, SW3_Pin) == GPIO_PIN_RESET)
 8002950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002954:	483a      	ldr	r0, [pc, #232]	; (8002a40 <setupTime+0x368>)
 8002956:	f001 fa7d 	bl	8003e54 <HAL_GPIO_ReadPin>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d15a      	bne.n	8002a16 <setupTime+0x33e>
			{
				if (cursor_position == 0)
 8002960:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <setupTime+0x2a4>
				{
					if (hour < 23)
 8002968:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800296c:	2b16      	cmp	r3, #22
 800296e:	d852      	bhi.n	8002a16 <setupTime+0x33e>
						hour++;
 8002970:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002974:	3301      	adds	r3, #1
 8002976:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800297a:	e04c      	b.n	8002a16 <setupTime+0x33e>
				}
				else if (cursor_position == 1)
 800297c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002980:	2b01      	cmp	r3, #1
 8002982:	d109      	bne.n	8002998 <setupTime+0x2c0>
				{
					if (minute < 59)
 8002984:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002988:	2b3a      	cmp	r3, #58	; 0x3a
 800298a:	d844      	bhi.n	8002a16 <setupTime+0x33e>
						minute++;
 800298c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002990:	3301      	adds	r3, #1
 8002992:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8002996:	e03e      	b.n	8002a16 <setupTime+0x33e>
				}
				else
				{
					if (second < 59)
 8002998:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800299c:	2b3a      	cmp	r3, #58	; 0x3a
 800299e:	d83a      	bhi.n	8002a16 <setupTime+0x33e>
						second++;
 80029a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80029a4:	3301      	adds	r3, #1
 80029a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80029aa:	e034      	b.n	8002a16 <setupTime+0x33e>
				}
			}
		}
		else if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET) // button enter
 80029ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029b0:	4823      	ldr	r0, [pc, #140]	; (8002a40 <setupTime+0x368>)
 80029b2:	f001 fa4f 	bl	8003e54 <HAL_GPIO_ReadPin>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d12c      	bne.n	8002a16 <setupTime+0x33e>
		{
			HAL_Delay(100);
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	f000 fb7b 	bl	80030b8 <HAL_Delay>
			if (HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin) == GPIO_PIN_RESET)
 80029c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c6:	481e      	ldr	r0, [pc, #120]	; (8002a40 <setupTime+0x368>)
 80029c8:	f001 fa44 	bl	8003e54 <HAL_GPIO_ReadPin>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d121      	bne.n	8002a16 <setupTime+0x33e>
			{
				cursor_position++;
 80029d2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80029d6:	3301      	adds	r3, #1
 80029d8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				if(cursor_position >= 3)
 80029dc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d918      	bls.n	8002a16 <setupTime+0x33e>
				{
					// Write to RTC registers on exit
					time_temp.Hours = hour;
 80029e4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80029e8:	723b      	strb	r3, [r7, #8]
					time_temp.Minutes = minute;
 80029ea:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80029ee:	727b      	strb	r3, [r7, #9]
					time_temp.Seconds = second;
 80029f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80029f4:	72bb      	strb	r3, [r7, #10]

					HAL_RTC_SetTime(&hrtc, &time_temp, RTC_FORMAT_BIN);
 80029f6:	f107 0308 	add.w	r3, r7, #8
 80029fa:	2200      	movs	r2, #0
 80029fc:	4619      	mov	r1, r3
 80029fe:	480c      	ldr	r0, [pc, #48]	; (8002a30 <setupTime+0x358>)
 8002a00:	f002 ffe5 	bl	80059ce <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &date_temp, RTC_FORMAT_BIN);
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	2200      	movs	r2, #0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4809      	ldr	r0, [pc, #36]	; (8002a30 <setupTime+0x358>)
 8002a0c:	f003 f8fa 	bl	8005c04 <HAL_RTC_SetDate>

					exit = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}

		ST7565_display();
 8002a16:	f7fe fe7f 	bl	8001718 <ST7565_display>
	while(exit == 0)
 8002a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f43f aeea 	beq.w	80027f8 <setupTime+0x120>
	}
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3760      	adds	r7, #96	; 0x60
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000c50 	.word	0x20000c50
 8002a34:	0800ccb8 	.word	0x0800ccb8
 8002a38:	0800ccc0 	.word	0x0800ccc0
 8002a3c:	0800ccc4 	.word	0x0800ccc4
 8002a40:	40020000 	.word	0x40020000

08002a44 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a4a:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <MX_SPI1_Init+0x6c>)
 8002a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a56:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a66:	2202      	movs	r2, #2
 8002a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a92:	220a      	movs	r2, #10
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_SPI1_Init+0x68>)
 8002a98:	f003 fa3a 	bl	8005f10 <HAL_SPI_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002aa2:	f7ff fcad 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000074c 	.word	0x2000074c
 8002ab0:	40013000 	.word	0x40013000

08002ab4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <MX_SPI2_Init+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ac4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ae8:	2228      	movs	r2, #40	; 0x28
 8002aea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002b00:	220a      	movs	r2, #10
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002b06:	f003 fa03 	bl	8005f10 <HAL_SPI_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b10:	f7ff fc76 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000c70 	.word	0x20000c70
 8002b1c:	40003800 	.word	0x40003800

08002b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <HAL_SPI_MspInit+0xe8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12c      	bne.n	8002b9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
 8002b46:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b2e      	ldr	r3, [pc, #184]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b7a:	23a0      	movs	r3, #160	; 0xa0
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b8a:	2305      	movs	r3, #5
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	481e      	ldr	r0, [pc, #120]	; (8002c10 <HAL_SPI_MspInit+0xf0>)
 8002b96:	f000 ffd9 	bl	8003b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b9a:	e031      	b.n	8002c00 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_SPI_MspInit+0xf4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d12c      	bne.n	8002c00 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a17      	ldr	r2, [pc, #92]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_SPI_MspInit+0xec>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bde:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bf0:	2305      	movs	r3, #5
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <HAL_SPI_MspInit+0xf8>)
 8002bfc:	f000 ffa6 	bl	8003b4c <HAL_GPIO_Init>
}
 8002c00:	bf00      	nop
 8002c02:	3730      	adds	r7, #48	; 0x30
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40013000 	.word	0x40013000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020000 	.word	0x40020000
 8002c14:	40003800 	.word	0x40003800
 8002c18:	40020400 	.word	0x40020400

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a08      	ldr	r2, [pc, #32]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_MspInit+0x4c>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <NMI_Handler+0x4>

08002c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c76:	e7fe      	b.n	8002c76 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	e7fe      	b.n	8002c7c <MemManage_Handler+0x4>

08002c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c82:	e7fe      	b.n	8002c82 <BusFault_Handler+0x4>

08002c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <UsageFault_Handler+0x4>

08002c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb8:	f000 f9de 	bl	8003078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cbc:	bf00      	nop
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <TIM4_IRQHandler+0x10>)
 8002cc6:	f003 fe15 	bl	80068f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000cc8 	.word	0x20000cc8

08002cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002cd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002cdc:	f001 f8ec 	bl	8003eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
	return 1;
 8002ce8:	2301      	movs	r3, #1
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <_kill>:

int _kill(int pid, int sig)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cfe:	f007 f897 	bl	8009e30 <__errno>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2216      	movs	r2, #22
 8002d06:	601a      	str	r2, [r3, #0]
	return -1;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_exit>:

void _exit (int status)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ffe7 	bl	8002cf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d26:	e7fe      	b.n	8002d26 <_exit+0x12>

08002d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	e00a      	b.n	8002d50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d3a:	f3af 8000 	nop.w
 8002d3e:	4601      	mov	r1, r0
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	b2ca      	uxtb	r2, r1
 8002d48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	dbf0      	blt.n	8002d3a <_read+0x12>
	}

return len;
 8002d58:	687b      	ldr	r3, [r7, #4]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e009      	b.n	8002d88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	60ba      	str	r2, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	dbf1      	blt.n	8002d74 <_write+0x12>
	}
	return len;
 8002d90:	687b      	ldr	r3, [r7, #4]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_close>:

int _close(int file)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	return -1;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_isatty>:

int _isatty(int file)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
	return 0;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3714      	adds	r7, #20
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <_sbrk+0x5c>)
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <_sbrk+0x60>)
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e20:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <_sbrk+0x64>)
 8002e22:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <_sbrk+0x68>)
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d207      	bcs.n	8002e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e34:	f006 fffc 	bl	8009e30 <__errno>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	220c      	movs	r2, #12
 8002e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e009      	b.n	8002e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e44:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <_sbrk+0x64>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <_sbrk+0x64>)
 8002e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20010000 	.word	0x20010000
 8002e64:	00000400 	.word	0x00000400
 8002e68:	20000618 	.word	0x20000618
 8002e6c:	20001198 	.word	0x20001198

08002e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <SystemInit+0x20>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	4a05      	ldr	r2, [pc, #20]	; (8002e90 <SystemInit+0x20>)
 8002e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9a:	f107 0308 	add.w	r3, r7, #8
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002eb2:	4a1e      	ldr	r2, [pc, #120]	; (8002f2c <MX_TIM4_Init+0x98>)
 8002eb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002eb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ebc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1600;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002ec6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002eca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ed8:	4813      	ldr	r0, [pc, #76]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002eda:	f003 fc59 	bl	8006790 <HAL_TIM_Base_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002ee4:	f7ff fa8c 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002eee:	f107 0308 	add.w	r3, r7, #8
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002ef6:	f003 fe05 	bl	8006b04 <HAL_TIM_ConfigClockSource>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002f00:	f7ff fa7e 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f04:	2300      	movs	r3, #0
 8002f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f0c:	463b      	mov	r3, r7
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_TIM4_Init+0x94>)
 8002f12:	f004 f801 	bl	8006f18 <HAL_TIMEx_MasterConfigSynchronization>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002f1c:	f7ff fa70 	bl	8002400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f20:	bf00      	nop
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000cc8 	.word	0x20000cc8
 8002f2c:	40000800 	.word	0x40000800

08002f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d115      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_TIM_Base_MspInit+0x4c>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_TIM_Base_MspInit+0x4c>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_TIM_Base_MspInit+0x4c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201e      	movs	r0, #30
 8002f64:	f000 fdad 	bl	8003ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f68:	201e      	movs	r0, #30
 8002f6a:	f000 fdc6 	bl	8003afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40000800 	.word	0x40000800
 8002f7c:	40023800 	.word	0x40023800

08002f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f84:	480d      	ldr	r0, [pc, #52]	; (8002fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f86:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f8c:	e002      	b.n	8002f94 <LoopCopyDataInit>

08002f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f92:	3304      	adds	r3, #4

08002f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f98:	d3f9      	bcc.n	8002f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f9a:	4a0b      	ldr	r2, [pc, #44]	; (8002fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f9c:	4c0b      	ldr	r4, [pc, #44]	; (8002fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa0:	e001      	b.n	8002fa6 <LoopFillZerobss>

08002fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fa4:	3204      	adds	r2, #4

08002fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa8:	d3fb      	bcc.n	8002fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002faa:	f7ff ff61 	bl	8002e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fae:	f006 ff45 	bl	8009e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fb2:	f7fe fe89 	bl	8001cc8 <main>
  bx  lr    
 8002fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002fc4:	0800d7ac 	.word	0x0800d7ac
  ldr r2, =_sbss
 8002fc8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002fcc:	20001194 	.word	0x20001194

08002fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd0:	e7fe      	b.n	8002fd0 <ADC_IRQHandler>
	...

08002fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	; (8003014 <HAL_Init+0x40>)
 8002fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_Init+0x40>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_Init+0x40>)
 8002fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff0:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_Init+0x40>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a07      	ldr	r2, [pc, #28]	; (8003014 <HAL_Init+0x40>)
 8002ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	f000 fd55 	bl	8003aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003002:	200f      	movs	r0, #15
 8003004:	f000 f808 	bl	8003018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003008:	f7ff fe08 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00

08003018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <HAL_InitTick+0x54>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_InitTick+0x58>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fd7b 	bl	8003b32 <HAL_SYSTICK_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e00e      	b.n	8003064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b0f      	cmp	r3, #15
 800304a:	d80a      	bhi.n	8003062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800304c:	2200      	movs	r2, #0
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f000 fd35 	bl	8003ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <HAL_InitTick+0x5c>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000000 	.word	0x20000000
 8003070:	20000008 	.word	0x20000008
 8003074:	20000004 	.word	0x20000004

08003078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_IncTick+0x20>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_IncTick+0x24>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4413      	add	r3, r2
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <HAL_IncTick+0x24>)
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000008 	.word	0x20000008
 800309c:	20000d10 	.word	0x20000d10

080030a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return uwTick;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_GetTick+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000d10 	.word	0x20000d10

080030b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c0:	f7ff ffee 	bl	80030a0 <HAL_GetTick>
 80030c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d005      	beq.n	80030de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <HAL_Delay+0x44>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	461a      	mov	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030de:	bf00      	nop
 80030e0:	f7ff ffde 	bl	80030a0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d8f7      	bhi.n	80030e0 <HAL_Delay+0x28>
  {
  }
}
 80030f0:	bf00      	nop
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008

08003100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e033      	b.n	800317e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d109      	bne.n	8003132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fc00 	bl	8001924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d118      	bne.n	8003170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003146:	f023 0302 	bic.w	r3, r3, #2
 800314a:	f043 0202 	orr.w	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 faba 	bl	80036cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	f023 0303 	bic.w	r3, r3, #3
 8003166:	f043 0201 	orr.w	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
 800316e:	e001      	b.n	8003174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_Start+0x1a>
 800319e:	2302      	movs	r3, #2
 80031a0:	e097      	b.n	80032d2 <HAL_ADC_Start+0x14a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d018      	beq.n	80031ea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031c8:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <HAL_ADC_Start+0x158>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <HAL_ADC_Start+0x15c>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	0c9a      	lsrs	r2, r3, #18
 80031d4:	4613      	mov	r3, r2
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	4413      	add	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031dc:	e002      	b.n	80031e4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f9      	bne.n	80031de <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d15f      	bne.n	80032b8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003222:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003236:	d106      	bne.n	8003246 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	f023 0206 	bic.w	r2, r3, #6
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	645a      	str	r2, [r3, #68]	; 0x44
 8003244:	e002      	b.n	800324c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_ADC_Start+0x160>)
 8003256:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003260:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10f      	bne.n	800328e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d129      	bne.n	80032d0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	e020      	b.n	80032d0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_ADC_Start+0x164>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d11b      	bne.n	80032d0 <HAL_ADC_Start+0x148>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d114      	bne.n	80032d0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	e00b      	b.n	80032d0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000000 	.word	0x20000000
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	40012300 	.word	0x40012300
 80032ec:	40012000 	.word	0x40012000

080032f0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_ADC_Stop+0x16>
 8003302:	2302      	movs	r3, #2
 8003304:	e021      	b.n	800334a <HAL_ADC_Stop+0x5a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689a      	ldr	r2, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0201 	bic.w	r2, r2, #1
 800331c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f043 0201 	orr.w	r2, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d113      	bne.n	800339c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d10b      	bne.n	800339c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e063      	b.n	8003464 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800339c:	f7ff fe80 	bl	80030a0 <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033a2:	e021      	b.n	80033e8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d01d      	beq.n	80033e8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x6c>
 80033b2:	f7ff fe75 	bl	80030a0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d212      	bcs.n	80033e8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d00b      	beq.n	80033e8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e03d      	b.n	8003464 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d1d6      	bne.n	80033a4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f06f 0212 	mvn.w	r2, #18
 80033fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d123      	bne.n	8003462 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800341e:	2b00      	cmp	r3, #0
 8003420:	d11f      	bne.n	8003462 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800343a:	2b00      	cmp	r3, #0
 800343c:	d111      	bne.n	8003462 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d105      	bne.n	8003462 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0201 	orr.w	r2, r3, #1
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e105      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x228>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b09      	cmp	r3, #9
 80034b2:	d925      	bls.n	8003500 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	3b1e      	subs	r3, #30
 80034ca:	2207      	movs	r2, #7
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68d9      	ldr	r1, [r3, #12]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	4603      	mov	r3, r0
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4403      	add	r3, r0
 80034f2:	3b1e      	subs	r3, #30
 80034f4:	409a      	lsls	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	e022      	b.n	8003546 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6919      	ldr	r1, [r3, #16]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	2207      	movs	r2, #7
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	4603      	mov	r3, r0
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4403      	add	r3, r0
 800353c:	409a      	lsls	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b06      	cmp	r3, #6
 800354c:	d824      	bhi.n	8003598 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b05      	subs	r3, #5
 8003560:	221f      	movs	r2, #31
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	400a      	ands	r2, r1
 800356e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	4618      	mov	r0, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	3b05      	subs	r3, #5
 800358a:	fa00 f203 	lsl.w	r2, r0, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	635a      	str	r2, [r3, #52]	; 0x34
 8003596:	e04c      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	d824      	bhi.n	80035ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b23      	subs	r3, #35	; 0x23
 80035b2:	221f      	movs	r2, #31
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43da      	mvns	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	400a      	ands	r2, r1
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4618      	mov	r0, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3b23      	subs	r3, #35	; 0x23
 80035dc:	fa00 f203 	lsl.w	r2, r0, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	631a      	str	r2, [r3, #48]	; 0x30
 80035e8:	e023      	b.n	8003632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3b41      	subs	r3, #65	; 0x41
 80035fc:	221f      	movs	r2, #31
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	43da      	mvns	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	400a      	ands	r2, r1
 800360a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4618      	mov	r0, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3b41      	subs	r3, #65	; 0x41
 8003626:	fa00 f203 	lsl.w	r2, r0, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003632:	4b22      	ldr	r3, [pc, #136]	; (80036bc <HAL_ADC_ConfigChannel+0x234>)
 8003634:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a21      	ldr	r2, [pc, #132]	; (80036c0 <HAL_ADC_ConfigChannel+0x238>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1cc>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b12      	cmp	r3, #18
 8003646:	d105      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_ADC_ConfigChannel+0x238>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d123      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b10      	cmp	r3, #16
 8003664:	d003      	beq.n	800366e <HAL_ADC_ConfigChannel+0x1e6>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b11      	cmp	r3, #17
 800366c:	d11b      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d111      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_ADC_ConfigChannel+0x23c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <HAL_ADC_ConfigChannel+0x240>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	0c9a      	lsrs	r2, r3, #18
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003698:	e002      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3b01      	subs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	40012300 	.word	0x40012300
 80036c0:	40012000 	.word	0x40012000
 80036c4:	20000000 	.word	0x20000000
 80036c8:	431bde83 	.word	0x431bde83

080036cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036d4:	4b79      	ldr	r3, [pc, #484]	; (80038bc <ADC_Init+0x1f0>)
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	021a      	lsls	r2, r3, #8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375e:	4a58      	ldr	r2, [pc, #352]	; (80038c0 <ADC_Init+0x1f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d022      	beq.n	80037aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003772:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6899      	ldr	r1, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6899      	ldr	r1, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	e00f      	b.n	80037ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0202 	bic.w	r2, r2, #2
 80037d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7e1b      	ldrb	r3, [r3, #24]
 80037e4:	005a      	lsls	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003806:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003816:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	3b01      	subs	r3, #1
 8003824:	035a      	lsls	r2, r3, #13
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	e007      	b.n	8003840 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800383e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	3b01      	subs	r3, #1
 800385c:	051a      	lsls	r2, r3, #20
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6899      	ldr	r1, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003882:	025a      	lsls	r2, r3, #9
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	029a      	lsls	r2, r3, #10
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40012300 	.word	0x40012300
 80038c0:	0f000001 	.word	0x0f000001

080038c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <__NVIC_SetPriorityGrouping+0x44>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e0:	4013      	ands	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f6:	4a04      	ldr	r2, [pc, #16]	; (8003908 <__NVIC_SetPriorityGrouping+0x44>)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	60d3      	str	r3, [r2, #12]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003910:	4b04      	ldr	r3, [pc, #16]	; (8003924 <__NVIC_GetPriorityGrouping+0x18>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	0a1b      	lsrs	r3, r3, #8
 8003916:	f003 0307 	and.w	r3, r3, #7
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db0b      	blt.n	8003952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4907      	ldr	r1, [pc, #28]	; (8003960 <__NVIC_EnableIRQ+0x38>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f202 	lsl.w	r2, r0, r2
 800394e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	db12      	blt.n	800399c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	f003 021f 	and.w	r2, r3, #31
 800397c:	490a      	ldr	r1, [pc, #40]	; (80039a8 <__NVIC_DisableIRQ+0x44>)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2001      	movs	r0, #1
 8003986:	fa00 f202 	lsl.w	r2, r0, r2
 800398a:	3320      	adds	r3, #32
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003990:	f3bf 8f4f 	dsb	sy
}
 8003994:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003996:	f3bf 8f6f 	isb	sy
}
 800399a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	; (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a78:	d301      	bcc.n	8003a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00f      	b.n	8003a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7e:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <SysTick_Config+0x40>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a86:	210f      	movs	r1, #15
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	f7ff ff8e 	bl	80039ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <SysTick_Config+0x40>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a96:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <SysTick_Config+0x40>)
 8003a98:	2207      	movs	r2, #7
 8003a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e000e010 	.word	0xe000e010

08003aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff05 	bl	80038c4 <__NVIC_SetPriorityGrouping>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b086      	sub	sp, #24
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad4:	f7ff ff1a 	bl	800390c <__NVIC_GetPriorityGrouping>
 8003ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f7ff ff8e 	bl	8003a00 <NVIC_EncodePriority>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aea:	4611      	mov	r1, r2
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff5d 	bl	80039ac <__NVIC_SetPriority>
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff0d 	bl	8003928 <__NVIC_EnableIRQ>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ff1d 	bl	8003964 <__NVIC_DisableIRQ>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff ff94 	bl	8003a68 <SysTick_Config>
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
 8003b66:	e159      	b.n	8003e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8148 	bne.w	8003e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d005      	beq.n	8003b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d130      	bne.n	8003c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 0201 	and.w	r2, r3, #1
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d017      	beq.n	8003c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	2203      	movs	r2, #3
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	4013      	ands	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d123      	bne.n	8003c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	08da      	lsrs	r2, r3, #3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3208      	adds	r2, #8
 8003c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	220f      	movs	r2, #15
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	08da      	lsrs	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	3208      	adds	r2, #8
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 0203 	and.w	r2, r3, #3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80a2 	beq.w	8003e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	4a56      	ldr	r2, [pc, #344]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_GPIO_Init+0x2e8>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	220f      	movs	r2, #15
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a49      	ldr	r2, [pc, #292]	; (8003e3c <HAL_GPIO_Init+0x2f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d019      	beq.n	8003d4e <HAL_GPIO_Init+0x202>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a48      	ldr	r2, [pc, #288]	; (8003e40 <HAL_GPIO_Init+0x2f4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0x1fe>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a47      	ldr	r2, [pc, #284]	; (8003e44 <HAL_GPIO_Init+0x2f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <HAL_GPIO_Init+0x1fa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a46      	ldr	r2, [pc, #280]	; (8003e48 <HAL_GPIO_Init+0x2fc>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d007      	beq.n	8003d42 <HAL_GPIO_Init+0x1f6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a45      	ldr	r2, [pc, #276]	; (8003e4c <HAL_GPIO_Init+0x300>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <HAL_GPIO_Init+0x1f2>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e008      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d3e:	2307      	movs	r3, #7
 8003d40:	e006      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d42:	2303      	movs	r3, #3
 8003d44:	e004      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e002      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_GPIO_Init+0x204>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	69fa      	ldr	r2, [r7, #28]
 8003d52:	f002 0203 	and.w	r2, r2, #3
 8003d56:	0092      	lsls	r2, r2, #2
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d60:	4935      	ldr	r1, [pc, #212]	; (8003e38 <HAL_GPIO_Init+0x2ec>)
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	089b      	lsrs	r3, r3, #2
 8003d66:	3302      	adds	r3, #2
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d92:	4a2f      	ldr	r2, [pc, #188]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dbc:	4a24      	ldr	r2, [pc, #144]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dec:	4b18      	ldr	r3, [pc, #96]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <HAL_GPIO_Init+0x304>)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	f67f aea2 	bls.w	8003b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40013800 	.word	0x40013800
 8003e3c:	40020000 	.word	0x40020000
 8003e40:	40020400 	.word	0x40020400
 8003e44:	40020800 	.word	0x40020800
 8003e48:	40020c00 	.word	0x40020c00
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40013c00 	.word	0x40013c00

08003e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
 8003e70:	e001      	b.n	8003e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ec4:	695a      	ldr	r2, [r3, #20]
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d006      	beq.n	8003edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	88fb      	ldrh	r3, [r7, #6]
 8003ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe fa7e 	bl	80023d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003edc:	bf00      	nop
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e12b      	b.n	8004152 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd fe4c 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2224      	movs	r2, #36	; 0x24
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0201 	bic.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f4c:	f001 fbac 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8003f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a81      	ldr	r2, [pc, #516]	; (800415c <HAL_I2C_Init+0x274>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d807      	bhi.n	8003f6c <HAL_I2C_Init+0x84>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a80      	ldr	r2, [pc, #512]	; (8004160 <HAL_I2C_Init+0x278>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	bf94      	ite	ls
 8003f64:	2301      	movls	r3, #1
 8003f66:	2300      	movhi	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	e006      	b.n	8003f7a <HAL_I2C_Init+0x92>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a7d      	ldr	r2, [pc, #500]	; (8004164 <HAL_I2C_Init+0x27c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	bf94      	ite	ls
 8003f74:	2301      	movls	r3, #1
 8003f76:	2300      	movhi	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e0e7      	b.n	8004152 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a78      	ldr	r2, [pc, #480]	; (8004168 <HAL_I2C_Init+0x280>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a6a      	ldr	r2, [pc, #424]	; (800415c <HAL_I2C_Init+0x274>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d802      	bhi.n	8003fbc <HAL_I2C_Init+0xd4>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	e009      	b.n	8003fd0 <HAL_I2C_Init+0xe8>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	4a69      	ldr	r2, [pc, #420]	; (800416c <HAL_I2C_Init+0x284>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	495c      	ldr	r1, [pc, #368]	; (800415c <HAL_I2C_Init+0x274>)
 8003fec:	428b      	cmp	r3, r1
 8003fee:	d819      	bhi.n	8004024 <HAL_I2C_Init+0x13c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1e59      	subs	r1, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffe:	1c59      	adds	r1, r3, #1
 8004000:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004004:	400b      	ands	r3, r1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_I2C_Init+0x138>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1e59      	subs	r1, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb1 f3f3 	udiv	r3, r1, r3
 8004018:	3301      	adds	r3, #1
 800401a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401e:	e051      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004020:	2304      	movs	r3, #4
 8004022:	e04f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d111      	bne.n	8004050 <HAL_I2C_Init+0x168>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1e58      	subs	r0, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e012      	b.n	8004076 <HAL_I2C_Init+0x18e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1e58      	subs	r0, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	0099      	lsls	r1, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x196>
 800407a:	2301      	movs	r3, #1
 800407c:	e022      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10e      	bne.n	80040a4 <HAL_I2C_Init+0x1bc>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1e58      	subs	r0, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	440b      	add	r3, r1
 8004094:	fbb0 f3f3 	udiv	r3, r0, r3
 8004098:	3301      	adds	r3, #1
 800409a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	e00f      	b.n	80040c4 <HAL_I2C_Init+0x1dc>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1e58      	subs	r0, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	0099      	lsls	r1, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ba:	3301      	adds	r3, #1
 80040bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	6809      	ldr	r1, [r1, #0]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6911      	ldr	r1, [r2, #16]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68d2      	ldr	r2, [r2, #12]
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2220      	movs	r2, #32
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	000186a0 	.word	0x000186a0
 8004160:	001e847f 	.word	0x001e847f
 8004164:	003d08ff 	.word	0x003d08ff
 8004168:	431bde83 	.word	0x431bde83
 800416c:	10624dd3 	.word	0x10624dd3

08004170 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	461a      	mov	r2, r3
 800417e:	4603      	mov	r3, r0
 8004180:	817b      	strh	r3, [r7, #10]
 8004182:	460b      	mov	r3, r1
 8004184:	813b      	strh	r3, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800418a:	f7fe ff89 	bl	80030a0 <HAL_GetTick>
 800418e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b20      	cmp	r3, #32
 800419a:	f040 80d9 	bne.w	8004350 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	2319      	movs	r3, #25
 80041a4:	2201      	movs	r2, #1
 80041a6:	496d      	ldr	r1, [pc, #436]	; (800435c <HAL_I2C_Mem_Write+0x1ec>)
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fc7f 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
 80041b6:	e0cc      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Mem_Write+0x56>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e0c5      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d007      	beq.n	80041ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2221      	movs	r2, #33	; 0x21
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2240      	movs	r2, #64	; 0x40
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a4d      	ldr	r2, [pc, #308]	; (8004360 <HAL_I2C_Mem_Write+0x1f0>)
 800422c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800422e:	88f8      	ldrh	r0, [r7, #6]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	4603      	mov	r3, r0
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fab6 	bl	80047b0 <I2C_RequestMemoryWrite>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d052      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e081      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 fd00 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00d      	beq.n	800427a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b04      	cmp	r3, #4
 8004264:	d107      	bne.n	8004276 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e06b      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d11b      	bne.n	80042f0 <HAL_I2C_Mem_Write+0x180>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d017      	beq.n	80042f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	781a      	ldrb	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1aa      	bne.n	800424e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fcec 	bl	8004cda <I2C_WaitOnBTFFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	2b04      	cmp	r3, #4
 800430e:	d107      	bne.n	8004320 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e016      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	e000      	b.n	8004352 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004350:	2302      	movs	r3, #2
  }
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	00100002 	.word	0x00100002
 8004360:	ffff0000 	.word	0xffff0000

08004364 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b08c      	sub	sp, #48	; 0x30
 8004368:	af02      	add	r7, sp, #8
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	461a      	mov	r2, r3
 8004372:	4603      	mov	r3, r0
 8004374:	817b      	strh	r3, [r7, #10]
 8004376:	460b      	mov	r3, r1
 8004378:	813b      	strh	r3, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800437e:	f7fe fe8f 	bl	80030a0 <HAL_GetTick>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b20      	cmp	r3, #32
 800438e:	f040 8208 	bne.w	80047a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	2319      	movs	r3, #25
 8004398:	2201      	movs	r2, #1
 800439a:	497b      	ldr	r1, [pc, #492]	; (8004588 <HAL_I2C_Mem_Read+0x224>)
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fb85 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043a8:	2302      	movs	r3, #2
 80043aa:	e1fb      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_I2C_Mem_Read+0x56>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e1f4      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d007      	beq.n	80043e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2222      	movs	r2, #34	; 0x22
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2240      	movs	r2, #64	; 0x40
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a5b      	ldr	r2, [pc, #364]	; (800458c <HAL_I2C_Mem_Read+0x228>)
 8004420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004422:	88f8      	ldrh	r0, [r7, #6]
 8004424:	893a      	ldrh	r2, [r7, #8]
 8004426:	8979      	ldrh	r1, [r7, #10]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	9301      	str	r3, [sp, #4]
 800442c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4603      	mov	r3, r0
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 fa52 	bl	80048dc <I2C_RequestMemoryRead>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e1b0      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	2b00      	cmp	r3, #0
 8004448:	d113      	bne.n	8004472 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e184      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004476:	2b01      	cmp	r3, #1
 8004478:	d11b      	bne.n	80044b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	61fb      	str	r3, [r7, #28]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e164      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d11b      	bne.n	80044f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	e144      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004508:	e138      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	2b03      	cmp	r3, #3
 8004510:	f200 80f1 	bhi.w	80046f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004518:	2b01      	cmp	r3, #1
 800451a:	d123      	bne.n	8004564 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fc1b 	bl	8004d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e139      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004562:	e10b      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b02      	cmp	r3, #2
 800456a:	d14e      	bne.n	800460a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2200      	movs	r2, #0
 8004574:	4906      	ldr	r1, [pc, #24]	; (8004590 <HAL_I2C_Mem_Read+0x22c>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa98 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e10e      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
 8004586:	bf00      	nop
 8004588:	00100002 	.word	0x00100002
 800458c:	ffff0000 	.word	0xffff0000
 8004590:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004608:	e0b8      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2200      	movs	r2, #0
 8004612:	4966      	ldr	r1, [pc, #408]	; (80047ac <HAL_I2C_Mem_Read+0x448>)
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fa49 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0bf      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	2200      	movs	r2, #0
 800466e:	494f      	ldr	r1, [pc, #316]	; (80047ac <HAL_I2C_Mem_Read+0x448>)
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fa1b 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e091      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046f4:	e042      	b.n	800477c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fb2e 	bl	8004d5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e04c      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d118      	bne.n	800477c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	2b00      	cmp	r3, #0
 8004782:	f47f aec2 	bne.w	800450a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
  }
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	00010004 	.word	0x00010004

080047b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f960 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004800:	d103      	bne.n	800480a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e05f      	b.n	80048ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800480e:	897b      	ldrh	r3, [r7, #10]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800481c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	492d      	ldr	r1, [pc, #180]	; (80048d8 <I2C_RequestMemoryWrite+0x128>)
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f998 	bl	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04c      	b.n	80048ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484c:	6a39      	ldr	r1, [r7, #32]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fa02 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	2b04      	cmp	r3, #4
 8004860:	d107      	bne.n	8004872 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e02b      	b.n	80048ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800487c:	893b      	ldrh	r3, [r7, #8]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	e021      	b.n	80048cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	b29b      	uxth	r3, r3
 800488e:	b2da      	uxtb	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004898:	6a39      	ldr	r1, [r7, #32]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f9dc 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d107      	bne.n	80048be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e005      	b.n	80048ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c2:	893b      	ldrh	r3, [r7, #8]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	00010002 	.word	0x00010002

080048dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	4608      	mov	r0, r1
 80048e6:	4611      	mov	r1, r2
 80048e8:	461a      	mov	r2, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	817b      	strh	r3, [r7, #10]
 80048ee:	460b      	mov	r3, r1
 80048f0:	813b      	strh	r3, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004904:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	2200      	movs	r2, #0
 800491e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 f8c2 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493c:	d103      	bne.n	8004946 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e0aa      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494a:	897b      	ldrh	r3, [r7, #10]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	6a3a      	ldr	r2, [r7, #32]
 800495e:	4952      	ldr	r1, [pc, #328]	; (8004aa8 <I2C_RequestMemoryRead+0x1cc>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f8fa 	bl	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e097      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	617b      	str	r3, [r7, #20]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004988:	6a39      	ldr	r1, [r7, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f964 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	2b04      	cmp	r3, #4
 800499c:	d107      	bne.n	80049ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e076      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b8:	893b      	ldrh	r3, [r7, #8]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]
 80049c2:	e021      	b.n	8004a08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049c4:	893b      	ldrh	r3, [r7, #8]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	b2da      	uxtb	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f93e 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d107      	bne.n	80049fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e050      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049fe:	893b      	ldrh	r3, [r7, #8]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	6a39      	ldr	r1, [r7, #32]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f923 	bl	8004c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d107      	bne.n	8004a30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e035      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f82b 	bl	8004aac <I2C_WaitOnFlagUntilTimeout>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	d103      	bne.n	8004a74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e013      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a78:	897b      	ldrh	r3, [r7, #10]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	6a3a      	ldr	r2, [r7, #32]
 8004a8c:	4906      	ldr	r1, [pc, #24]	; (8004aa8 <I2C_RequestMemoryRead+0x1cc>)
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f863 	bl	8004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	00010002 	.word	0x00010002

08004aac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	603b      	str	r3, [r7, #0]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004abc:	e025      	b.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d021      	beq.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac6:	f7fe faeb 	bl	80030a0 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d302      	bcc.n	8004adc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d116      	bne.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0220 	orr.w	r2, r3, #32
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e023      	b.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10d      	bne.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	43da      	mvns	r2, r3
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	e00c      	b.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d0b6      	beq.n	8004abe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	60b9      	str	r1, [r7, #8]
 8004b64:	607a      	str	r2, [r7, #4]
 8004b66:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b68:	e051      	b.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d123      	bne.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b92:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0204 	orr.w	r2, r3, #4
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e046      	b.n	8004c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d021      	beq.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fe fa69 	bl	80030a0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d116      	bne.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e020      	b.n	8004c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d10c      	bne.n	8004c32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e00b      	b.n	8004c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	43da      	mvns	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d18d      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c64:	e02d      	b.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f8ce 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e02d      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7c:	d021      	beq.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fe fa0f 	bl	80030a0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d116      	bne.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e007      	b.n	8004cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d1ca      	bne.n	8004c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ce6:	e02d      	b.n	8004d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f88d 	bl	8004e08 <I2C_IsAcknowledgeFailed>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e02d      	b.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfe:	d021      	beq.n	8004d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d00:	f7fe f9ce 	bl	80030a0 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d116      	bne.n	8004d44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e007      	b.n	8004d54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d1ca      	bne.n	8004ce8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d68:	e042      	b.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	2b10      	cmp	r3, #16
 8004d76:	d119      	bne.n	8004dac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0210 	mvn.w	r2, #16
 8004d80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e029      	b.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fe f978 	bl	80030a0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d302      	bcc.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f043 0220 	orr.w	r2, r3, #32
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e007      	b.n	8004e00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfa:	2b40      	cmp	r3, #64	; 0x40
 8004dfc:	d1b5      	bne.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1e:	d11b      	bne.n	8004e58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f043 0204 	orr.w	r2, r3, #4
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e264      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d075      	beq.n	8004f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e86:	4ba3      	ldr	r3, [pc, #652]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d00c      	beq.n	8004eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4ba0      	ldr	r3, [pc, #640]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d112      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4b9d      	ldr	r3, [pc, #628]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4b99      	ldr	r3, [pc, #612]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05b      	beq.n	8004f70 <HAL_RCC_OscConfig+0x108>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d157      	bne.n	8004f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e23f      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d106      	bne.n	8004edc <HAL_RCC_OscConfig+0x74>
 8004ece:	4b91      	ldr	r3, [pc, #580]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a90      	ldr	r2, [pc, #576]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e01d      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0x98>
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a8a      	ldr	r2, [pc, #552]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b88      	ldr	r3, [pc, #544]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a87      	ldr	r2, [pc, #540]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xb0>
 8004f00:	4b84      	ldr	r3, [pc, #528]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a83      	ldr	r2, [pc, #524]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a80      	ldr	r2, [pc, #512]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe f8be 	bl	80030a0 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fe f8ba 	bl	80030a0 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e204      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b76      	ldr	r3, [pc, #472]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0xc0>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fe f8aa 	bl	80030a0 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fe f8a6 	bl	80030a0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e1f0      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	4b6c      	ldr	r3, [pc, #432]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0xe8>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d063      	beq.n	8005046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f7e:	4b65      	ldr	r3, [pc, #404]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8a:	4b62      	ldr	r3, [pc, #392]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d11c      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f96:	4b5f      	ldr	r3, [pc, #380]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d116      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	4b5c      	ldr	r3, [pc, #368]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d001      	beq.n	8004fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e1c4      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fba:	4b56      	ldr	r3, [pc, #344]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	4952      	ldr	r1, [pc, #328]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	e03a      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d020      	beq.n	800501a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd8:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <HAL_RCC_OscConfig+0x2b0>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fe f85f 	bl	80030a0 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe6:	f7fe f85b 	bl	80030a0 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1a5      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff8:	4b46      	ldr	r3, [pc, #280]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f0      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005004:	4b43      	ldr	r3, [pc, #268]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4940      	ldr	r1, [pc, #256]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	4313      	orrs	r3, r2
 8005016:	600b      	str	r3, [r1, #0]
 8005018:	e015      	b.n	8005046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501a:	4b3f      	ldr	r3, [pc, #252]	; (8005118 <HAL_RCC_OscConfig+0x2b0>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005020:	f7fe f83e 	bl	80030a0 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005028:	f7fe f83a 	bl	80030a0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e184      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503a:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d030      	beq.n	80050b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505a:	4b30      	ldr	r3, [pc, #192]	; (800511c <HAL_RCC_OscConfig+0x2b4>)
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fe f81e 	bl	80030a0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005068:	f7fe f81a 	bl	80030a0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e164      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	4b26      	ldr	r3, [pc, #152]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 800507c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x200>
 8005086:	e015      	b.n	80050b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005088:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_OscConfig+0x2b4>)
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508e:	f7fe f807 	bl	80030a0 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005096:	f7fe f803 	bl	80030a0 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e14d      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 80050aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1f0      	bne.n	8005096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80a0 	beq.w	8005202 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c6:	4b13      	ldr	r3, [pc, #76]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6413      	str	r3, [r2, #64]	; 0x40
 80050e2:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ee:	2301      	movs	r3, #1
 80050f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f2:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_OscConfig+0x2b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d121      	bne.n	8005142 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fe:	4b08      	ldr	r3, [pc, #32]	; (8005120 <HAL_RCC_OscConfig+0x2b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a07      	ldr	r2, [pc, #28]	; (8005120 <HAL_RCC_OscConfig+0x2b8>)
 8005104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510a:	f7fd ffc9 	bl	80030a0 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	e011      	b.n	8005136 <HAL_RCC_OscConfig+0x2ce>
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	42470000 	.word	0x42470000
 800511c:	42470e80 	.word	0x42470e80
 8005120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005124:	f7fd ffbc 	bl	80030a0 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e106      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005136:	4b85      	ldr	r3, [pc, #532]	; (800534c <HAL_RCC_OscConfig+0x4e4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0f0      	beq.n	8005124 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d106      	bne.n	8005158 <HAL_RCC_OscConfig+0x2f0>
 800514a:	4b81      	ldr	r3, [pc, #516]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	4a80      	ldr	r2, [pc, #512]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	6713      	str	r3, [r2, #112]	; 0x70
 8005156:	e01c      	b.n	8005192 <HAL_RCC_OscConfig+0x32a>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b05      	cmp	r3, #5
 800515e:	d10c      	bne.n	800517a <HAL_RCC_OscConfig+0x312>
 8005160:	4b7b      	ldr	r3, [pc, #492]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4a7a      	ldr	r2, [pc, #488]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005166:	f043 0304 	orr.w	r3, r3, #4
 800516a:	6713      	str	r3, [r2, #112]	; 0x70
 800516c:	4b78      	ldr	r3, [pc, #480]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a77      	ldr	r2, [pc, #476]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	e00b      	b.n	8005192 <HAL_RCC_OscConfig+0x32a>
 800517a:	4b75      	ldr	r3, [pc, #468]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a74      	ldr	r2, [pc, #464]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	4b72      	ldr	r3, [pc, #456]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a71      	ldr	r2, [pc, #452]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d015      	beq.n	80051c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fd ff81 	bl	80030a0 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a0:	e00a      	b.n	80051b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a2:	f7fd ff7d 	bl	80030a0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0c5      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b8:	4b65      	ldr	r3, [pc, #404]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ee      	beq.n	80051a2 <HAL_RCC_OscConfig+0x33a>
 80051c4:	e014      	b.n	80051f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051c6:	f7fd ff6b 	bl	80030a0 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fd ff67 	bl	80030a0 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0af      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e4:	4b5a      	ldr	r3, [pc, #360]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1ee      	bne.n	80051ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f0:	7dfb      	ldrb	r3, [r7, #23]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d105      	bne.n	8005202 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f6:	4b56      	ldr	r3, [pc, #344]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	4a55      	ldr	r2, [pc, #340]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80051fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005200:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 809b 	beq.w	8005342 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	d05c      	beq.n	80052d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d141      	bne.n	80052a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005220:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <HAL_RCC_OscConfig+0x4ec>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005226:	f7fd ff3b 	bl	80030a0 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522e:	f7fd ff37 	bl	80030a0 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e081      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005240:	4b43      	ldr	r3, [pc, #268]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f0      	bne.n	800522e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	019b      	lsls	r3, r3, #6
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	3b01      	subs	r3, #1
 8005266:	041b      	lsls	r3, r3, #16
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	4937      	ldr	r1, [pc, #220]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005272:	4313      	orrs	r3, r2
 8005274:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005276:	4b37      	ldr	r3, [pc, #220]	; (8005354 <HAL_RCC_OscConfig+0x4ec>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd ff10 	bl	80030a0 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd ff0c 	bl	80030a0 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e056      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005296:	4b2e      	ldr	r3, [pc, #184]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0x41c>
 80052a2:	e04e      	b.n	8005342 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a4:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x4ec>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fd fef9 	bl	80030a0 <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b0:	e008      	b.n	80052c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b2:	f7fd fef5 	bl	80030a0 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e03f      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c4:	4b22      	ldr	r3, [pc, #136]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f0      	bne.n	80052b2 <HAL_RCC_OscConfig+0x44a>
 80052d0:	e037      	b.n	8005342 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e032      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052de:	4b1c      	ldr	r3, [pc, #112]	; (8005350 <HAL_RCC_OscConfig+0x4e8>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d028      	beq.n	800533e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d121      	bne.n	800533e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d11a      	bne.n	800533e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005314:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005316:	4293      	cmp	r3, r2
 8005318:	d111      	bne.n	800533e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	085b      	lsrs	r3, r3, #1
 8005326:	3b01      	subs	r3, #1
 8005328:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d107      	bne.n	800533e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40007000 	.word	0x40007000
 8005350:	40023800 	.word	0x40023800
 8005354:	42470060 	.word	0x42470060

08005358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0cc      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b68      	ldr	r3, [pc, #416]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d90c      	bls.n	8005394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b65      	ldr	r3, [pc, #404]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005382:	4b63      	ldr	r3, [pc, #396]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	429a      	cmp	r2, r3
 800538e:	d001      	beq.n	8005394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0b8      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d005      	beq.n	80053b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ac:	4b59      	ldr	r3, [pc, #356]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	4a58      	ldr	r2, [pc, #352]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c4:	4b53      	ldr	r3, [pc, #332]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a52      	ldr	r2, [pc, #328]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b50      	ldr	r3, [pc, #320]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	494d      	ldr	r1, [pc, #308]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d044      	beq.n	8005478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d119      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d003      	beq.n	8005416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005412:	2b03      	cmp	r3, #3
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005416:	4b3f      	ldr	r3, [pc, #252]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e06f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005426:	4b3b      	ldr	r3, [pc, #236]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e067      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005436:	4b37      	ldr	r3, [pc, #220]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f023 0203 	bic.w	r2, r3, #3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4934      	ldr	r1, [pc, #208]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005448:	f7fd fe2a 	bl	80030a0 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544e:	e00a      	b.n	8005466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005450:	f7fd fe26 	bl	80030a0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	f241 3288 	movw	r2, #5000	; 0x1388
 800545e:	4293      	cmp	r3, r2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e04f      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005466:	4b2b      	ldr	r3, [pc, #172]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 020c 	and.w	r2, r3, #12
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	429a      	cmp	r2, r3
 8005476:	d1eb      	bne.n	8005450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005478:	4b25      	ldr	r3, [pc, #148]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d20c      	bcs.n	80054a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005486:	4b22      	ldr	r3, [pc, #136]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548e:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e032      	b.n	8005506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d008      	beq.n	80054be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ac:	4b19      	ldr	r3, [pc, #100]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	4916      	ldr	r1, [pc, #88]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	490e      	ldr	r1, [pc, #56]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054de:	f000 f821 	bl	8005524 <HAL_RCC_GetSysClockFreq>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	490a      	ldr	r1, [pc, #40]	; (8005518 <HAL_RCC_ClockConfig+0x1c0>)
 80054f0:	5ccb      	ldrb	r3, [r1, r3]
 80054f2:	fa22 f303 	lsr.w	r3, r2, r3
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <HAL_RCC_ClockConfig+0x1c8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fd fd8a 	bl	8003018 <HAL_InitTick>

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	40023c00 	.word	0x40023c00
 8005514:	40023800 	.word	0x40023800
 8005518:	0800d320 	.word	0x0800d320
 800551c:	20000000 	.word	0x20000000
 8005520:	20000004 	.word	0x20000004

08005524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005524:	b5b0      	push	{r4, r5, r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800552a:	2100      	movs	r1, #0
 800552c:	6079      	str	r1, [r7, #4]
 800552e:	2100      	movs	r1, #0
 8005530:	60f9      	str	r1, [r7, #12]
 8005532:	2100      	movs	r1, #0
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005536:	2100      	movs	r1, #0
 8005538:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800553a:	4952      	ldr	r1, [pc, #328]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 800553c:	6889      	ldr	r1, [r1, #8]
 800553e:	f001 010c 	and.w	r1, r1, #12
 8005542:	2908      	cmp	r1, #8
 8005544:	d00d      	beq.n	8005562 <HAL_RCC_GetSysClockFreq+0x3e>
 8005546:	2908      	cmp	r1, #8
 8005548:	f200 8094 	bhi.w	8005674 <HAL_RCC_GetSysClockFreq+0x150>
 800554c:	2900      	cmp	r1, #0
 800554e:	d002      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x32>
 8005550:	2904      	cmp	r1, #4
 8005552:	d003      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x38>
 8005554:	e08e      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005556:	4b4c      	ldr	r3, [pc, #304]	; (8005688 <HAL_RCC_GetSysClockFreq+0x164>)
 8005558:	60bb      	str	r3, [r7, #8]
       break;
 800555a:	e08e      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555c:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_RCC_GetSysClockFreq+0x168>)
 800555e:	60bb      	str	r3, [r7, #8]
      break;
 8005560:	e08b      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005562:	4948      	ldr	r1, [pc, #288]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 8005564:	6849      	ldr	r1, [r1, #4]
 8005566:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800556a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800556c:	4945      	ldr	r1, [pc, #276]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 800556e:	6849      	ldr	r1, [r1, #4]
 8005570:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005574:	2900      	cmp	r1, #0
 8005576:	d024      	beq.n	80055c2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005578:	4942      	ldr	r1, [pc, #264]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 800557a:	6849      	ldr	r1, [r1, #4]
 800557c:	0989      	lsrs	r1, r1, #6
 800557e:	4608      	mov	r0, r1
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005588:	f04f 0500 	mov.w	r5, #0
 800558c:	ea00 0204 	and.w	r2, r0, r4
 8005590:	ea01 0305 	and.w	r3, r1, r5
 8005594:	493d      	ldr	r1, [pc, #244]	; (800568c <HAL_RCC_GetSysClockFreq+0x168>)
 8005596:	fb01 f003 	mul.w	r0, r1, r3
 800559a:	2100      	movs	r1, #0
 800559c:	fb01 f102 	mul.w	r1, r1, r2
 80055a0:	1844      	adds	r4, r0, r1
 80055a2:	493a      	ldr	r1, [pc, #232]	; (800568c <HAL_RCC_GetSysClockFreq+0x168>)
 80055a4:	fba2 0101 	umull	r0, r1, r2, r1
 80055a8:	1863      	adds	r3, r4, r1
 80055aa:	4619      	mov	r1, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	f7fb fb20 	bl	8000bf8 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4613      	mov	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e04a      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c2:	4b30      	ldr	r3, [pc, #192]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	461a      	mov	r2, r3
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055d2:	f04f 0100 	mov.w	r1, #0
 80055d6:	ea02 0400 	and.w	r4, r2, r0
 80055da:	ea03 0501 	and.w	r5, r3, r1
 80055de:	4620      	mov	r0, r4
 80055e0:	4629      	mov	r1, r5
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	014b      	lsls	r3, r1, #5
 80055ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055f0:	0142      	lsls	r2, r0, #5
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	1b00      	subs	r0, r0, r4
 80055f8:	eb61 0105 	sbc.w	r1, r1, r5
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	018b      	lsls	r3, r1, #6
 8005606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800560a:	0182      	lsls	r2, r0, #6
 800560c:	1a12      	subs	r2, r2, r0
 800560e:	eb63 0301 	sbc.w	r3, r3, r1
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	00d9      	lsls	r1, r3, #3
 800561c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005620:	00d0      	lsls	r0, r2, #3
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	1912      	adds	r2, r2, r4
 8005628:	eb45 0303 	adc.w	r3, r5, r3
 800562c:	f04f 0000 	mov.w	r0, #0
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	0299      	lsls	r1, r3, #10
 8005636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800563a:	0290      	lsls	r0, r2, #10
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	461a      	mov	r2, r3
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	f7fb fad4 	bl	8000bf8 <__aeabi_uldivmod>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4613      	mov	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_RCC_GetSysClockFreq+0x160>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	0c1b      	lsrs	r3, r3, #16
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	3301      	adds	r3, #1
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	60bb      	str	r3, [r7, #8]
      break;
 8005672:	e002      	b.n	800567a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005674:	4b04      	ldr	r3, [pc, #16]	; (8005688 <HAL_RCC_GetSysClockFreq+0x164>)
 8005676:	60bb      	str	r3, [r7, #8]
      break;
 8005678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567a:	68bb      	ldr	r3, [r7, #8]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bdb0      	pop	{r4, r5, r7, pc}
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400
 800568c:	017d7840 	.word	0x017d7840

08005690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000000 	.word	0x20000000

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800d330 	.word	0x0800d330

080056d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d035      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056f8:	4b67      	ldr	r3, [pc, #412]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056fe:	f7fd fccf 	bl	80030a0 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005706:	f7fd fccb 	bl	80030a0 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e0ba      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005718:	4b60      	ldr	r3, [pc, #384]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	019a      	lsls	r2, r3, #6
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	071b      	lsls	r3, r3, #28
 8005730:	495a      	ldr	r1, [pc, #360]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005738:	4b57      	ldr	r3, [pc, #348]	; (8005898 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800573e:	f7fd fcaf 	bl	80030a0 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005746:	f7fd fcab 	bl	80030a0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e09a      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005758:	4b50      	ldr	r3, [pc, #320]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8083 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b49      	ldr	r3, [pc, #292]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a48      	ldr	r2, [pc, #288]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b46      	ldr	r3, [pc, #280]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800578e:	4b44      	ldr	r3, [pc, #272]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a43      	ldr	r2, [pc, #268]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579a:	f7fd fc81 	bl	80030a0 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fd fc7d 	bl	80030a0 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e06c      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057b4:	4b3a      	ldr	r3, [pc, #232]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c0:	4b36      	ldr	r3, [pc, #216]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d028      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057de:	4b2f      	ldr	r3, [pc, #188]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057e8:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ee:	4b2d      	ldr	r3, [pc, #180]	; (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057f4:	4a29      	ldr	r2, [pc, #164]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057fa:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d114      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005806:	f7fd fc4b 	bl	80030a0 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fd fc47 	bl	80030a0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e034      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583c:	d10d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	4912      	ldr	r1, [pc, #72]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]
 8005858:	e005      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a0f      	ldr	r2, [pc, #60]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005860:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005864:	6093      	str	r3, [r2, #8]
 8005866:	4b0d      	ldr	r3, [pc, #52]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	490a      	ldr	r1, [pc, #40]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005874:	4313      	orrs	r3, r2
 8005876:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7c1a      	ldrb	r2, [r3, #16]
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800588a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	42470068 	.word	0x42470068
 800589c:	40023800 	.word	0x40023800
 80058a0:	40007000 	.word	0x40007000
 80058a4:	42470e40 	.word	0x42470e40
 80058a8:	424711e0 	.word	0x424711e0

080058ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e083      	b.n	80059c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7f5b      	ldrb	r3, [r3, #29]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fc fdf6 	bl	80024c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	22ca      	movs	r2, #202	; 0xca
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2253      	movs	r2, #83	; 0x53
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 faa8 	bl	8005e40 <RTC_EnterInitMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2204      	movs	r2, #4
 8005902:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e05e      	b.n	80059c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68d2      	ldr	r2, [r2, #12]
 8005942:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	6919      	ldr	r1, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	041a      	lsls	r2, r3, #16
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	430a      	orrs	r2, r1
 8005956:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005966:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10e      	bne.n	8005994 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa3a 	bl	8005df0 <HAL_RTC_WaitForSynchro>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d008      	beq.n	8005994 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	22ff      	movs	r2, #255	; 0xff
 8005988:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2204      	movs	r2, #4
 800598e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e018      	b.n	80059c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	22ff      	movs	r2, #255	; 0xff
 80059bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
  }
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ce:	b590      	push	{r4, r7, lr}
 80059d0:	b087      	sub	sp, #28
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	7f1b      	ldrb	r3, [r3, #28]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d101      	bne.n	80059ea <HAL_RTC_SetTime+0x1c>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e0aa      	b.n	8005b40 <HAL_RTC_SetTime+0x172>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2202      	movs	r2, #2
 80059f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d126      	bne.n	8005a4a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d102      	bne.n	8005a10 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fa3f 	bl	8005e98 <RTC_ByteToBcd2>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fa38 	bl	8005e98 <RTC_ByteToBcd2>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a2c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	789b      	ldrb	r3, [r3, #2]
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fa30 	bl	8005e98 <RTC_ByteToBcd2>
 8005a38:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005a3a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e018      	b.n	8005a7c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d102      	bne.n	8005a5e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a6a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005a70:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	78db      	ldrb	r3, [r3, #3]
 8005a76:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	22ca      	movs	r2, #202	; 0xca
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2253      	movs	r2, #83	; 0x53
 8005a8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f9d7 	bl	8005e40 <RTC_EnterInitMode>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e047      	b.n	8005b40 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005aba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005abe:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ace:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6899      	ldr	r1, [r3, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d111      	bne.n	8005b2a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 f972 	bl	8005df0 <HAL_RTC_WaitForSynchro>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00b      	beq.n	8005b2a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e00a      	b.n	8005b40 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
  }
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd90      	pop	{r4, r7, pc}

08005b48 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b7a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	0c1b      	lsrs	r3, r3, #16
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d11a      	bne.n	8005bfa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f983 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	785b      	ldrb	r3, [r3, #1]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f97a 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	789b      	ldrb	r3, [r3, #2]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f971 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c04:	b590      	push	{r4, r7, lr}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	7f1b      	ldrb	r3, [r3, #28]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d101      	bne.n	8005c20 <HAL_RTC_SetDate+0x1c>
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e094      	b.n	8005d4a <HAL_RTC_SetDate+0x146>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2201      	movs	r2, #1
 8005c24:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10e      	bne.n	8005c50 <HAL_RTC_SetDate+0x4c>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	330a      	adds	r3, #10
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d11c      	bne.n	8005c90 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	78db      	ldrb	r3, [r3, #3]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f91c 	bl	8005e98 <RTC_ByteToBcd2>
 8005c60:	4603      	mov	r3, r0
 8005c62:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f915 	bl	8005e98 <RTC_ByteToBcd2>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c72:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	789b      	ldrb	r3, [r3, #2]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f90d 	bl	8005e98 <RTC_ByteToBcd2>
 8005c7e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c80:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e00e      	b.n	8005cae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	78db      	ldrb	r3, [r3, #3]
 8005c94:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005c9c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ca2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	22ca      	movs	r2, #202	; 0xca
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2253      	movs	r2, #83	; 0x53
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f8be 	bl	8005e40 <RTC_EnterInitMode>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00b      	beq.n	8005ce2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e033      	b.n	8005d4a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005cec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cf0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d111      	bne.n	8005d34 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 f86d 	bl	8005df0 <HAL_RTC_WaitForSynchro>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2204      	movs	r2, #4
 8005d28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e00a      	b.n	8005d4a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005d48:	2300      	movs	r3, #0
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}

08005d52 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	0b5b      	lsrs	r3, r3, #13
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d11a      	bne.n	8005de6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f88d 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f884 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	789b      	ldrb	r3, [r3, #2]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 f87b 	bl	8005ed4 <RTC_Bcd2ToByte>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461a      	mov	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0c:	f7fd f948 	bl	80030a0 <HAL_GetTick>
 8005e10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e12:	e009      	b.n	8005e28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e14:	f7fd f944 	bl	80030a0 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e22:	d901      	bls.n	8005e28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e007      	b.n	8005e38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ee      	beq.n	8005e14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d119      	bne.n	8005e8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e64:	f7fd f91c 	bl	80030a0 <HAL_GetTick>
 8005e68:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e6a:	e009      	b.n	8005e80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e6c:	f7fd f918 	bl	80030a0 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e7a:	d901      	bls.n	8005e80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e007      	b.n	8005e90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0ee      	beq.n	8005e6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005ea6:	e005      	b.n	8005eb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	3b0a      	subs	r3, #10
 8005eb2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	2b09      	cmp	r3, #9
 8005eb8:	d8f6      	bhi.n	8005ea8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	b2db      	uxtb	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	b2db      	uxtb	r3, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e07b      	b.n	800601a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f32:	d009      	beq.n	8005f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	61da      	str	r2, [r3, #28]
 8005f3a:	e005      	b.n	8005f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d106      	bne.n	8005f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fc fddc 	bl	8002b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fcc:	ea42 0103 	orr.w	r1, r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f003 0104 	and.w	r1, r3, #4
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	f003 0210 	and.w	r2, r3, #16
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b088      	sub	sp, #32
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_SPI_Transmit+0x22>
 8006040:	2302      	movs	r3, #2
 8006042:	e126      	b.n	8006292 <HAL_SPI_Transmit+0x270>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604c:	f7fd f828 	bl	80030a0 <HAL_GetTick>
 8006050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006052:	88fb      	ldrh	r3, [r7, #6]
 8006054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006062:	2302      	movs	r3, #2
 8006064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006066:	e10b      	b.n	8006280 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_SPI_Transmit+0x52>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d102      	bne.n	800607a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006078:	e102      	b.n	8006280 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2203      	movs	r2, #3
 800607e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	88fa      	ldrh	r2, [r7, #6]
 8006092:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	88fa      	ldrh	r2, [r7, #6]
 8006098:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060c0:	d10f      	bne.n	80060e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d007      	beq.n	8006100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006108:	d14b      	bne.n	80061a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Transmit+0xf6>
 8006112:	8afb      	ldrh	r3, [r7, #22]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d13e      	bne.n	8006196 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	881a      	ldrh	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006128:	1c9a      	adds	r2, r3, #2
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800613c:	e02b      	b.n	8006196 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d112      	bne.n	8006172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	881a      	ldrh	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	1c9a      	adds	r2, r3, #2
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006170:	e011      	b.n	8006196 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006172:	f7fc ff95 	bl	80030a0 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d803      	bhi.n	800618a <HAL_SPI_Transmit+0x168>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d102      	bne.n	8006190 <HAL_SPI_Transmit+0x16e>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006194:	e074      	b.n	8006280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1ce      	bne.n	800613e <HAL_SPI_Transmit+0x11c>
 80061a0:	e04c      	b.n	800623c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_SPI_Transmit+0x18e>
 80061aa:	8afb      	ldrh	r3, [r7, #22]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d140      	bne.n	8006232 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061d6:	e02c      	b.n	8006232 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d113      	bne.n	800620e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	330c      	adds	r3, #12
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	86da      	strh	r2, [r3, #54]	; 0x36
 800620c:	e011      	b.n	8006232 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800620e:	f7fc ff47 	bl	80030a0 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d803      	bhi.n	8006226 <HAL_SPI_Transmit+0x204>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d102      	bne.n	800622c <HAL_SPI_Transmit+0x20a>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006230:	e026      	b.n	8006280 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1cd      	bne.n	80061d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fa63 	bl	800670c <SPI_EndRxTxTransaction>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800625a:	2300      	movs	r3, #0
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	613b      	str	r3, [r7, #16]
 800626e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e000      	b.n	8006280 <HAL_SPI_Transmit+0x25e>
  }

error:
 800627e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006290:	7ffb      	ldrb	r3, [r7, #31]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b08c      	sub	sp, #48	; 0x30
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062a8:	2301      	movs	r3, #1
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_SPI_TransmitReceive+0x26>
 80062bc:	2302      	movs	r3, #2
 80062be:	e18a      	b.n	80065d6 <HAL_SPI_TransmitReceive+0x33c>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062c8:	f7fc feea 	bl	80030a0 <HAL_GetTick>
 80062cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062de:	887b      	ldrh	r3, [r7, #2]
 80062e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d00f      	beq.n	800630a <HAL_SPI_TransmitReceive+0x70>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f0:	d107      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <HAL_SPI_TransmitReceive+0x68>
 80062fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d003      	beq.n	800630a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006302:	2302      	movs	r3, #2
 8006304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006308:	e15b      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_SPI_TransmitReceive+0x82>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_SPI_TransmitReceive+0x82>
 8006316:	887b      	ldrh	r3, [r7, #2]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006322:	e14e      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b04      	cmp	r3, #4
 800632e:	d003      	beq.n	8006338 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2205      	movs	r2, #5
 8006334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	887a      	ldrh	r2, [r7, #2]
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	887a      	ldrh	r2, [r7, #2]
 800634e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	887a      	ldrh	r2, [r7, #2]
 800635a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	887a      	ldrh	r2, [r7, #2]
 8006360:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d007      	beq.n	800638c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006394:	d178      	bne.n	8006488 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d002      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x10a>
 800639e:	8b7b      	ldrh	r3, [r7, #26]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d166      	bne.n	8006472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	881a      	ldrh	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b4:	1c9a      	adds	r2, r3, #2
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063be:	b29b      	uxth	r3, r3
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c8:	e053      	b.n	8006472 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d11b      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x176>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d016      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x176>
 80063e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d113      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	881a      	ldrh	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	1c9a      	adds	r2, r3, #2
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	d119      	bne.n	8006452 <HAL_SPI_TransmitReceive+0x1b8>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006422:	b29b      	uxth	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d014      	beq.n	8006452 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	b292      	uxth	r2, r2
 8006434:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	1c9a      	adds	r2, r3, #2
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800644e:	2301      	movs	r3, #1
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006452:	f7fc fe25 	bl	80030a0 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800645e:	429a      	cmp	r2, r3
 8006460:	d807      	bhi.n	8006472 <HAL_SPI_TransmitReceive+0x1d8>
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d003      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006470:	e0a7      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1a6      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x130>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1a1      	bne.n	80063ca <HAL_SPI_TransmitReceive+0x130>
 8006486:	e07c      	b.n	8006582 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <HAL_SPI_TransmitReceive+0x1fc>
 8006490:	8b7b      	ldrh	r3, [r7, #26]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d16b      	bne.n	800656e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	330c      	adds	r3, #12
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064bc:	e057      	b.n	800656e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d11c      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x26c>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d017      	beq.n	8006506 <HAL_SPI_TransmitReceive+0x26c>
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d114      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	7812      	ldrb	r2, [r2, #0]
 80064e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	1c5a      	adds	r2, r3, #1
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d119      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x2ae>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d014      	beq.n	8006548 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006544:	2301      	movs	r3, #1
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006548:	f7fc fdaa 	bl	80030a0 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006554:	429a      	cmp	r2, r3
 8006556:	d803      	bhi.n	8006560 <HAL_SPI_TransmitReceive+0x2c6>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d102      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x2cc>
 8006560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800656c:	e029      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1a2      	bne.n	80064be <HAL_SPI_TransmitReceive+0x224>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d19d      	bne.n	80064be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 f8c0 	bl	800670c <SPI_EndRxTxTransaction>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d006      	beq.n	80065a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2220      	movs	r2, #32
 800659c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800659e:	e010      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	e000      	b.n	80065c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3730      	adds	r7, #48	; 0x30
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065ec:	b2db      	uxtb	r3, r3
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	4613      	mov	r3, r2
 800660a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800660c:	f7fc fd48 	bl	80030a0 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	4413      	add	r3, r2
 800661a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800661c:	f7fc fd40 	bl	80030a0 <HAL_GetTick>
 8006620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006622:	4b39      	ldr	r3, [pc, #228]	; (8006708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	015b      	lsls	r3, r3, #5
 8006628:	0d1b      	lsrs	r3, r3, #20
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	fb02 f303 	mul.w	r3, r2, r3
 8006630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006632:	e054      	b.n	80066de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663a:	d050      	beq.n	80066de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800663c:	f7fc fd30 	bl	80030a0 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	429a      	cmp	r2, r3
 800664a:	d902      	bls.n	8006652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d13d      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800666a:	d111      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006674:	d004      	beq.n	8006680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667e:	d107      	bne.n	8006690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800668e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006698:	d10f      	bne.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e017      	b.n	80066fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3b01      	subs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	bf0c      	ite	eq
 80066ee:	2301      	moveq	r3, #1
 80066f0:	2300      	movne	r3, #0
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d19b      	bne.n	8006634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000000 	.word	0x20000000

0800670c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <SPI_EndRxTxTransaction+0x7c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <SPI_EndRxTxTransaction+0x80>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	0d5b      	lsrs	r3, r3, #21
 8006724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006736:	d112      	bne.n	800675e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2200      	movs	r2, #0
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f7ff ff5a 	bl	80065fc <SPI_WaitFlagStateUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d016      	beq.n	800677c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	f043 0220 	orr.w	r2, r3, #32
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e00f      	b.n	800677e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3b01      	subs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006774:	2b80      	cmp	r3, #128	; 0x80
 8006776:	d0f2      	beq.n	800675e <SPI_EndRxTxTransaction+0x52>
 8006778:	e000      	b.n	800677c <SPI_EndRxTxTransaction+0x70>
        break;
 800677a:	bf00      	nop
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000000 	.word	0x20000000
 800678c:	165e9f81 	.word	0x165e9f81

08006790 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e041      	b.n	8006826 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fc fbba 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f000 fa88 	bl	8006ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b01      	cmp	r3, #1
 8006842:	d001      	beq.n	8006848 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e044      	b.n	80068d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d018      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x6c>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006872:	d013      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x6c>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1a      	ldr	r2, [pc, #104]	; (80068e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00e      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x6c>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a19      	ldr	r2, [pc, #100]	; (80068e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d009      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x6c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a17      	ldr	r2, [pc, #92]	; (80068ec <HAL_TIM_Base_Start_IT+0xbc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d004      	beq.n	800689c <HAL_TIM_Base_Start_IT+0x6c>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a16      	ldr	r2, [pc, #88]	; (80068f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d111      	bne.n	80068c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b06      	cmp	r3, #6
 80068ac:	d010      	beq.n	80068d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0201 	orr.w	r2, r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068be:	e007      	b.n	80068d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40000400 	.word	0x40000400
 80068e8:	40000800 	.word	0x40000800
 80068ec:	40000c00 	.word	0x40000c00
 80068f0:	40014000 	.word	0x40014000

080068f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d122      	bne.n	8006950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d11b      	bne.n	8006950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0202 	mvn.w	r2, #2
 8006920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f9b5 	bl	8006ca6 <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9a7 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f9b8 	bl	8006cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d122      	bne.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b04      	cmp	r3, #4
 800696a:	d11b      	bne.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0204 	mvn.w	r2, #4
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f98b 	bl	8006ca6 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f97d 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 f98e 	bl	8006cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0208 	mvn.w	r2, #8
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f961 	bl	8006ca6 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f953 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f964 	bl	8006cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0210 	mvn.w	r2, #16
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2208      	movs	r2, #8
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f937 	bl	8006ca6 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f929 	bl	8006c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f93a 	bl	8006cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10e      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0201 	mvn.w	r2, #1
 8006a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fb fb56 	bl	8002124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fab2 	bl	8007008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f8ff 	bl	8006cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	d10e      	bne.n	8006afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d107      	bne.n	8006afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f06f 0220 	mvn.w	r2, #32
 8006af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa7c 	bl	8006ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIM_ConfigClockSource+0x1c>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e0b4      	b.n	8006c8a <HAL_TIM_ConfigClockSource+0x186>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b58:	d03e      	beq.n	8006bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b5e:	f200 8087 	bhi.w	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b66:	f000 8086 	beq.w	8006c76 <HAL_TIM_ConfigClockSource+0x172>
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d87f      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b70:	2b70      	cmp	r3, #112	; 0x70
 8006b72:	d01a      	beq.n	8006baa <HAL_TIM_ConfigClockSource+0xa6>
 8006b74:	2b70      	cmp	r3, #112	; 0x70
 8006b76:	d87b      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b78:	2b60      	cmp	r3, #96	; 0x60
 8006b7a:	d050      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x11a>
 8006b7c:	2b60      	cmp	r3, #96	; 0x60
 8006b7e:	d877      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b80:	2b50      	cmp	r3, #80	; 0x50
 8006b82:	d03c      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0xfa>
 8006b84:	2b50      	cmp	r3, #80	; 0x50
 8006b86:	d873      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d058      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x13a>
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d86f      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b30      	cmp	r3, #48	; 0x30
 8006b92:	d064      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	2b30      	cmp	r3, #48	; 0x30
 8006b96:	d86b      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	d060      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d867      	bhi.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d05c      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d05a      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x15a>
 8006ba8:	e062      	b.n	8006c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6818      	ldr	r0, [r3, #0]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	6899      	ldr	r1, [r3, #8]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f000 f98d 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	609a      	str	r2, [r3, #8]
      break;
 8006bd6:	e04f      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6899      	ldr	r1, [r3, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f000 f976 	bl	8006ed8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bfa:	609a      	str	r2, [r3, #8]
      break;
 8006bfc:	e03c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f000 f8ea 	bl	8006de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2150      	movs	r1, #80	; 0x50
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f943 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006c1c:	e02c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 f909 	bl	8006e42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2160      	movs	r1, #96	; 0x60
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f933 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006c3c:	e01c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f8ca 	bl	8006de4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2140      	movs	r1, #64	; 0x40
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f923 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006c5c:	e00c      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f000 f91a 	bl	8006ea2 <TIM_ITRx_SetConfig>
      break;
 8006c6e:	e003      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	73fb      	strb	r3, [r7, #15]
      break;
 8006c74:	e000      	b.n	8006c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cce:	b480      	push	{r7}
 8006cd0:	b083      	sub	sp, #12
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a34      	ldr	r2, [pc, #208]	; (8006dc8 <TIM_Base_SetConfig+0xe4>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00f      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d02:	d00b      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a31      	ldr	r2, [pc, #196]	; (8006dcc <TIM_Base_SetConfig+0xe8>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d007      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a30      	ldr	r2, [pc, #192]	; (8006dd0 <TIM_Base_SetConfig+0xec>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d003      	beq.n	8006d1c <TIM_Base_SetConfig+0x38>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <TIM_Base_SetConfig+0xf0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d108      	bne.n	8006d2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a25      	ldr	r2, [pc, #148]	; (8006dc8 <TIM_Base_SetConfig+0xe4>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01b      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3c:	d017      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <TIM_Base_SetConfig+0xe8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a21      	ldr	r2, [pc, #132]	; (8006dd0 <TIM_Base_SetConfig+0xec>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d00f      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a20      	ldr	r2, [pc, #128]	; (8006dd4 <TIM_Base_SetConfig+0xf0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00b      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <TIM_Base_SetConfig+0xf4>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d007      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <TIM_Base_SetConfig+0xf8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_Base_SetConfig+0x8a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <TIM_Base_SetConfig+0xfc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d108      	bne.n	8006d80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a08      	ldr	r2, [pc, #32]	; (8006dc8 <TIM_Base_SetConfig+0xe4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d103      	bne.n	8006db4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	615a      	str	r2, [r3, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40014000 	.word	0x40014000
 8006ddc:	40014400 	.word	0x40014400
 8006de0:	40014800 	.word	0x40014800

08006de4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f023 0201 	bic.w	r2, r3, #1
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 030a 	bic.w	r3, r3, #10
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b087      	sub	sp, #28
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0210 	bic.w	r2, r3, #16
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	031b      	lsls	r3, r3, #12
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	621a      	str	r2, [r3, #32]
}
 8006e96:	bf00      	nop
 8006e98:	371c      	adds	r7, #28
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f043 0307 	orr.w	r3, r3, #7
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	021a      	lsls	r2, r3, #8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	609a      	str	r2, [r3, #8]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e050      	b.n	8006fd2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f7c:	d013      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a18      	ldr	r2, [pc, #96]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40010000 	.word	0x40010000
 8006fe4:	40000400 	.word	0x40000400
 8006fe8:	40000800 	.word	0x40000800
 8006fec:	40000c00 	.word	0x40000c00
 8006ff0:	40014000 	.word	0x40014000

08006ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007020:	4904      	ldr	r1, [pc, #16]	; (8007034 <MX_FATFS_Init+0x18>)
 8007022:	4805      	ldr	r0, [pc, #20]	; (8007038 <MX_FATFS_Init+0x1c>)
 8007024:	f002 fef4 	bl	8009e10 <FATFS_LinkDriver>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	4b03      	ldr	r3, [pc, #12]	; (800703c <MX_FATFS_Init+0x20>)
 800702e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20000d14 	.word	0x20000d14
 8007038:	2000000c 	.word	0x2000000c
 800703c:	20000d18 	.word	0x20000d18

08007040 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007044:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007046:	4618      	mov	r0, r3
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	4603      	mov	r3, r0
 8007058:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); // own init function
 800705a:	79fb      	ldrb	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f9d7 	bl	8007410 <USER_SPI_initialize>
 8007062:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); // own status function
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	4618      	mov	r0, r3
 800707a:	f000 fab5 	bl	80075e8 <USER_SPI_status>
 800707e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	60b9      	str	r1, [r7, #8]
 8007090:	607a      	str	r2, [r7, #4]
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); // own read function
 8007098:	7bf8      	ldrb	r0, [r7, #15]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	f000 fab8 	bl	8007614 <USER_SPI_read>
 80070a4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b084      	sub	sp, #16
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); // own write function
 80070be:	7bf8      	ldrb	r0, [r7, #15]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	f000 fb0b 	bl	80076e0 <USER_SPI_write>
 80070ca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	603a      	str	r2, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
 80070e0:	460b      	mov	r3, r1
 80070e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80070e4:	79b9      	ldrb	r1, [r7, #6]
 80070e6:	79fb      	ldrb	r3, [r7, #7]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fb74 	bl	80077d8 <USER_SPI_ioctl>
 80070f0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007104:	f7fb ffcc 	bl	80030a0 <HAL_GetTick>
 8007108:	4603      	mov	r3, r0
 800710a:	4a04      	ldr	r2, [pc, #16]	; (800711c <SPI_Timer_On+0x20>)
 800710c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800710e:	4a04      	ldr	r2, [pc, #16]	; (8007120 <SPI_Timer_On+0x24>)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6013      	str	r3, [r2, #0]
}
 8007114:	bf00      	nop
 8007116:	3708      	adds	r7, #8
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	2000117c 	.word	0x2000117c
 8007120:	20001180 	.word	0x20001180

08007124 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007128:	f7fb ffba 	bl	80030a0 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	4b06      	ldr	r3, [pc, #24]	; (8007148 <SPI_Timer_Status+0x24>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	1ad2      	subs	r2, r2, r3
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <SPI_Timer_Status+0x28>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	bf34      	ite	cc
 800713c:	2301      	movcc	r3, #1
 800713e:	2300      	movcs	r3, #0
 8007140:	b2db      	uxtb	r3, r3
}
 8007142:	4618      	mov	r0, r3
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2000117c 	.word	0x2000117c
 800714c:	20001180 	.word	0x20001180

08007150 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800715a:	f107 020f 	add.w	r2, r7, #15
 800715e:	1df9      	adds	r1, r7, #7
 8007160:	2332      	movs	r3, #50	; 0x32
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	2301      	movs	r3, #1
 8007166:	4804      	ldr	r0, [pc, #16]	; (8007178 <xchg_spi+0x28>)
 8007168:	f7ff f897 	bl	800629a <HAL_SPI_TransmitReceive>
    return rxDat;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000c70 	.word	0x20000c70

0800717c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800717c:	b590      	push	{r4, r7, lr}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e00a      	b.n	80071a2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	18d4      	adds	r4, r2, r3
 8007192:	20ff      	movs	r0, #255	; 0xff
 8007194:	f7ff ffdc 	bl	8007150 <xchg_spi>
 8007198:	4603      	mov	r3, r0
 800719a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d3f0      	bcc.n	800718c <rcvr_spi_multi+0x10>
	}
}
 80071aa:	bf00      	nop
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}

080071b4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4803      	ldr	r0, [pc, #12]	; (80071d8 <xmit_spi_multi+0x24>)
 80071ca:	f7fe ff2a 	bl	8006022 <HAL_SPI_Transmit>
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000c70 	.word	0x20000c70

080071dc <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80071e4:	f7fb ff5c 	bl	80030a0 <HAL_GetTick>
 80071e8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80071ee:	20ff      	movs	r0, #255	; 0xff
 80071f0:	f7ff ffae 	bl	8007150 <xchg_spi>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
 80071fa:	2bff      	cmp	r3, #255	; 0xff
 80071fc:	d007      	beq.n	800720e <wait_ready+0x32>
 80071fe:	f7fb ff4f 	bl	80030a0 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	429a      	cmp	r2, r3
 800720c:	d8ef      	bhi.n	80071ee <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2bff      	cmp	r3, #255	; 0xff
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007228:	2201      	movs	r2, #1
 800722a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800722e:	4804      	ldr	r0, [pc, #16]	; (8007240 <despiselect+0x1c>)
 8007230:	f7fc fe28 	bl	8003e84 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007234:	20ff      	movs	r0, #255	; 0xff
 8007236:	f7ff ff8b 	bl	8007150 <xchg_spi>

}
 800723a:	bf00      	nop
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	40020400 	.word	0x40020400

08007244 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800724e:	480a      	ldr	r0, [pc, #40]	; (8007278 <spiselect+0x34>)
 8007250:	f7fc fe18 	bl	8003e84 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007254:	20ff      	movs	r0, #255	; 0xff
 8007256:	f7ff ff7b 	bl	8007150 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800725a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800725e:	f7ff ffbd 	bl	80071dc <wait_ready>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <spiselect+0x28>
 8007268:	2301      	movs	r3, #1
 800726a:	e002      	b.n	8007272 <spiselect+0x2e>

	despiselect();
 800726c:	f7ff ffda 	bl	8007224 <despiselect>
	return 0;	/* Timeout */
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40020400 	.word	0x40020400

0800727c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007286:	20c8      	movs	r0, #200	; 0xc8
 8007288:	f7ff ff38 	bl	80070fc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800728c:	20ff      	movs	r0, #255	; 0xff
 800728e:	f7ff ff5f 	bl	8007150 <xchg_spi>
 8007292:	4603      	mov	r3, r0
 8007294:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2bff      	cmp	r3, #255	; 0xff
 800729a:	d104      	bne.n	80072a6 <rcvr_datablock+0x2a>
 800729c:	f7ff ff42 	bl	8007124 <SPI_Timer_Status>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1f2      	bne.n	800728c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2bfe      	cmp	r3, #254	; 0xfe
 80072aa:	d001      	beq.n	80072b0 <rcvr_datablock+0x34>
 80072ac:	2300      	movs	r3, #0
 80072ae:	e00a      	b.n	80072c6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff ff62 	bl	800717c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80072b8:	20ff      	movs	r0, #255	; 0xff
 80072ba:	f7ff ff49 	bl	8007150 <xchg_spi>
 80072be:	20ff      	movs	r0, #255	; 0xff
 80072c0:	f7ff ff46 	bl	8007150 <xchg_spi>

	return 1;						/* Function succeeded */
 80072c4:	2301      	movs	r3, #1
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80072da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072de:	f7ff ff7d 	bl	80071dc <wait_ready>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <xmit_datablock+0x1e>
 80072e8:	2300      	movs	r3, #0
 80072ea:	e01e      	b.n	800732a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ff2e 	bl	8007150 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	2bfd      	cmp	r3, #253	; 0xfd
 80072f8:	d016      	beq.n	8007328 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80072fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff ff58 	bl	80071b4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007304:	20ff      	movs	r0, #255	; 0xff
 8007306:	f7ff ff23 	bl	8007150 <xchg_spi>
 800730a:	20ff      	movs	r0, #255	; 0xff
 800730c:	f7ff ff20 	bl	8007150 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007310:	20ff      	movs	r0, #255	; 0xff
 8007312:	f7ff ff1d 	bl	8007150 <xchg_spi>
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	2b05      	cmp	r3, #5
 8007322:	d001      	beq.n	8007328 <xmit_datablock+0x5a>
 8007324:	2300      	movs	r3, #0
 8007326:	e000      	b.n	800732a <xmit_datablock+0x5c>
	}
	return 1;
 8007328:	2301      	movs	r3, #1
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	6039      	str	r1, [r7, #0]
 800733c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800733e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007342:	2b00      	cmp	r3, #0
 8007344:	da0e      	bge.n	8007364 <send_cmd+0x32>
		cmd &= 0x7F;
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800734e:	2100      	movs	r1, #0
 8007350:	2037      	movs	r0, #55	; 0x37
 8007352:	f7ff ffee 	bl	8007332 <send_cmd>
 8007356:	4603      	mov	r3, r0
 8007358:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d901      	bls.n	8007364 <send_cmd+0x32>
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	e051      	b.n	8007408 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	2b0c      	cmp	r3, #12
 8007368:	d008      	beq.n	800737c <send_cmd+0x4a>
		despiselect();
 800736a:	f7ff ff5b 	bl	8007224 <despiselect>
		if (!spiselect()) return 0xFF;
 800736e:	f7ff ff69 	bl	8007244 <spiselect>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <send_cmd+0x4a>
 8007378:	23ff      	movs	r3, #255	; 0xff
 800737a:	e045      	b.n	8007408 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800737c:	79fb      	ldrb	r3, [r7, #7]
 800737e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007382:	b2db      	uxtb	r3, r3
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fee3 	bl	8007150 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	0e1b      	lsrs	r3, r3, #24
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4618      	mov	r0, r3
 8007392:	f7ff fedd 	bl	8007150 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	b2db      	uxtb	r3, r3
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fed7 	bl	8007150 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	0a1b      	lsrs	r3, r3, #8
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fed1 	bl	8007150 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fecc 	bl	8007150 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80073b8:	2301      	movs	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80073bc:	79fb      	ldrb	r3, [r7, #7]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <send_cmd+0x94>
 80073c2:	2395      	movs	r3, #149	; 0x95
 80073c4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80073c6:	79fb      	ldrb	r3, [r7, #7]
 80073c8:	2b08      	cmp	r3, #8
 80073ca:	d101      	bne.n	80073d0 <send_cmd+0x9e>
 80073cc:	2387      	movs	r3, #135	; 0x87
 80073ce:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7ff febc 	bl	8007150 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	2b0c      	cmp	r3, #12
 80073dc:	d102      	bne.n	80073e4 <send_cmd+0xb2>
 80073de:	20ff      	movs	r0, #255	; 0xff
 80073e0:	f7ff feb6 	bl	8007150 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80073e4:	230a      	movs	r3, #10
 80073e6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80073e8:	20ff      	movs	r0, #255	; 0xff
 80073ea:	f7ff feb1 	bl	8007150 <xchg_spi>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80073f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da05      	bge.n	8007406 <send_cmd+0xd4>
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	73fb      	strb	r3, [r7, #15]
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f0      	bne.n	80073e8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007406:	7bbb      	ldrb	r3, [r7, #14]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800741a:	79fb      	ldrb	r3, [r7, #7]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <USER_SPI_initialize+0x14>
 8007420:	2301      	movs	r3, #1
 8007422:	e0d6      	b.n	80075d2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007424:	4b6d      	ldr	r3, [pc, #436]	; (80075dc <USER_SPI_initialize+0x1cc>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <USER_SPI_initialize+0x2a>
 8007432:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <USER_SPI_initialize+0x1cc>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	e0cb      	b.n	80075d2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800743a:	4b69      	ldr	r3, [pc, #420]	; (80075e0 <USER_SPI_initialize+0x1d0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007444:	4b66      	ldr	r3, [pc, #408]	; (80075e0 <USER_SPI_initialize+0x1d0>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800744c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800744e:	230a      	movs	r3, #10
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e005      	b.n	8007460 <USER_SPI_initialize+0x50>
 8007454:	20ff      	movs	r0, #255	; 0xff
 8007456:	f7ff fe7b 	bl	8007150 <xchg_spi>
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	3b01      	subs	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1f6      	bne.n	8007454 <USER_SPI_initialize+0x44>

	ty = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800746a:	2100      	movs	r1, #0
 800746c:	2000      	movs	r0, #0
 800746e:	f7ff ff60 	bl	8007332 <send_cmd>
 8007472:	4603      	mov	r3, r0
 8007474:	2b01      	cmp	r3, #1
 8007476:	f040 808b 	bne.w	8007590 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800747a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800747e:	f7ff fe3d 	bl	80070fc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007482:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007486:	2008      	movs	r0, #8
 8007488:	f7ff ff53 	bl	8007332 <send_cmd>
 800748c:	4603      	mov	r3, r0
 800748e:	2b01      	cmp	r3, #1
 8007490:	d151      	bne.n	8007536 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]
 8007496:	e00d      	b.n	80074b4 <USER_SPI_initialize+0xa4>
 8007498:	7bfc      	ldrb	r4, [r7, #15]
 800749a:	20ff      	movs	r0, #255	; 0xff
 800749c:	f7ff fe58 	bl	8007150 <xchg_spi>
 80074a0:	4603      	mov	r3, r0
 80074a2:	461a      	mov	r2, r3
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	4423      	add	r3, r4
 80074aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	3301      	adds	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d9ee      	bls.n	8007498 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80074ba:	7abb      	ldrb	r3, [r7, #10]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d167      	bne.n	8007590 <USER_SPI_initialize+0x180>
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	2baa      	cmp	r3, #170	; 0xaa
 80074c4:	d164      	bne.n	8007590 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80074c6:	bf00      	nop
 80074c8:	f7ff fe2c 	bl	8007124 <SPI_Timer_Status>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <USER_SPI_initialize+0xd2>
 80074d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80074d6:	20a9      	movs	r0, #169	; 0xa9
 80074d8:	f7ff ff2b 	bl	8007332 <send_cmd>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f2      	bne.n	80074c8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80074e2:	f7ff fe1f 	bl	8007124 <SPI_Timer_Status>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d051      	beq.n	8007590 <USER_SPI_initialize+0x180>
 80074ec:	2100      	movs	r1, #0
 80074ee:	203a      	movs	r0, #58	; 0x3a
 80074f0:	f7ff ff1f 	bl	8007332 <send_cmd>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d14a      	bne.n	8007590 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e00d      	b.n	800751c <USER_SPI_initialize+0x10c>
 8007500:	7bfc      	ldrb	r4, [r7, #15]
 8007502:	20ff      	movs	r0, #255	; 0xff
 8007504:	f7ff fe24 	bl	8007150 <xchg_spi>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	f107 0310 	add.w	r3, r7, #16
 8007510:	4423      	add	r3, r4
 8007512:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007516:	7bfb      	ldrb	r3, [r7, #15]
 8007518:	3301      	adds	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	2b03      	cmp	r3, #3
 8007520:	d9ee      	bls.n	8007500 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007522:	7a3b      	ldrb	r3, [r7, #8]
 8007524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USER_SPI_initialize+0x120>
 800752c:	230c      	movs	r3, #12
 800752e:	e000      	b.n	8007532 <USER_SPI_initialize+0x122>
 8007530:	2304      	movs	r3, #4
 8007532:	737b      	strb	r3, [r7, #13]
 8007534:	e02c      	b.n	8007590 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007536:	2100      	movs	r1, #0
 8007538:	20a9      	movs	r0, #169	; 0xa9
 800753a:	f7ff fefa 	bl	8007332 <send_cmd>
 800753e:	4603      	mov	r3, r0
 8007540:	2b01      	cmp	r3, #1
 8007542:	d804      	bhi.n	800754e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007544:	2302      	movs	r3, #2
 8007546:	737b      	strb	r3, [r7, #13]
 8007548:	23a9      	movs	r3, #169	; 0xa9
 800754a:	73bb      	strb	r3, [r7, #14]
 800754c:	e003      	b.n	8007556 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800754e:	2301      	movs	r3, #1
 8007550:	737b      	strb	r3, [r7, #13]
 8007552:	2301      	movs	r3, #1
 8007554:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007556:	bf00      	nop
 8007558:	f7ff fde4 	bl	8007124 <SPI_Timer_Status>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <USER_SPI_initialize+0x162>
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2100      	movs	r1, #0
 8007566:	4618      	mov	r0, r3
 8007568:	f7ff fee3 	bl	8007332 <send_cmd>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1f2      	bne.n	8007558 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007572:	f7ff fdd7 	bl	8007124 <SPI_Timer_Status>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d007      	beq.n	800758c <USER_SPI_initialize+0x17c>
 800757c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007580:	2010      	movs	r0, #16
 8007582:	f7ff fed6 	bl	8007332 <send_cmd>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <USER_SPI_initialize+0x180>
				ty = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007590:	4a14      	ldr	r2, [pc, #80]	; (80075e4 <USER_SPI_initialize+0x1d4>)
 8007592:	7b7b      	ldrb	r3, [r7, #13]
 8007594:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007596:	f7ff fe45 	bl	8007224 <despiselect>

	if (ty) {			/* OK */
 800759a:	7b7b      	ldrb	r3, [r7, #13]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d012      	beq.n	80075c6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80075a0:	4b0f      	ldr	r3, [pc, #60]	; (80075e0 <USER_SPI_initialize+0x1d0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <USER_SPI_initialize+0x1d0>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0210 	orr.w	r2, r2, #16
 80075b2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <USER_SPI_initialize+0x1cc>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <USER_SPI_initialize+0x1cc>)
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e002      	b.n	80075cc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <USER_SPI_initialize+0x1cc>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USER_SPI_initialize+0x1cc>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b2db      	uxtb	r3, r3
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd90      	pop	{r4, r7, pc}
 80075da:	bf00      	nop
 80075dc:	20000020 	.word	0x20000020
 80075e0:	20000c70 	.word	0x20000c70
 80075e4:	2000061c 	.word	0x2000061c

080075e8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80075f2:	79fb      	ldrb	r3, [r7, #7]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <USER_SPI_status+0x14>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e002      	b.n	8007602 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <USER_SPI_status+0x28>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b2db      	uxtb	r3, r3
}
 8007602:	4618      	mov	r0, r3
 8007604:	370c      	adds	r7, #12
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000020 	.word	0x20000020

08007614 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d102      	bne.n	8007630 <USER_SPI_read+0x1c>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USER_SPI_read+0x20>
 8007630:	2304      	movs	r3, #4
 8007632:	e04d      	b.n	80076d0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007634:	4b28      	ldr	r3, [pc, #160]	; (80076d8 <USER_SPI_read+0xc4>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <USER_SPI_read+0x32>
 8007642:	2303      	movs	r3, #3
 8007644:	e044      	b.n	80076d0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007646:	4b25      	ldr	r3, [pc, #148]	; (80076dc <USER_SPI_read+0xc8>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <USER_SPI_read+0x44>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	025b      	lsls	r3, r3, #9
 8007656:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d111      	bne.n	8007682 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	2011      	movs	r0, #17
 8007662:	f7ff fe66 	bl	8007332 <send_cmd>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d129      	bne.n	80076c0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800766c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007670:	68b8      	ldr	r0, [r7, #8]
 8007672:	f7ff fe03 	bl	800727c <rcvr_datablock>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d021      	beq.n	80076c0 <USER_SPI_read+0xac>
			count = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	e01e      	b.n	80076c0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	2012      	movs	r0, #18
 8007686:	f7ff fe54 	bl	8007332 <send_cmd>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d117      	bne.n	80076c0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007694:	68b8      	ldr	r0, [r7, #8]
 8007696:	f7ff fdf1 	bl	800727c <rcvr_datablock>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00a      	beq.n	80076b6 <USER_SPI_read+0xa2>
				buff += 512;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80076a6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	603b      	str	r3, [r7, #0]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1ed      	bne.n	8007690 <USER_SPI_read+0x7c>
 80076b4:	e000      	b.n	80076b8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80076b6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80076b8:	2100      	movs	r1, #0
 80076ba:	200c      	movs	r0, #12
 80076bc:	f7ff fe39 	bl	8007332 <send_cmd>
		}
	}
	despiselect();
 80076c0:	f7ff fdb0 	bl	8007224 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf14      	ite	ne
 80076ca:	2301      	movne	r3, #1
 80076cc:	2300      	moveq	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000020 	.word	0x20000020
 80076dc:	2000061c 	.word	0x2000061c

080076e0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <USER_SPI_write+0x1c>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USER_SPI_write+0x20>
 80076fc:	2304      	movs	r3, #4
 80076fe:	e063      	b.n	80077c8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007700:	4b33      	ldr	r3, [pc, #204]	; (80077d0 <USER_SPI_write+0xf0>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <USER_SPI_write+0x32>
 800770e:	2303      	movs	r3, #3
 8007710:	e05a      	b.n	80077c8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007712:	4b2f      	ldr	r3, [pc, #188]	; (80077d0 <USER_SPI_write+0xf0>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <USER_SPI_write+0x44>
 8007720:	2302      	movs	r3, #2
 8007722:	e051      	b.n	80077c8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007724:	4b2b      	ldr	r3, [pc, #172]	; (80077d4 <USER_SPI_write+0xf4>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	f003 0308 	and.w	r3, r3, #8
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <USER_SPI_write+0x56>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	025b      	lsls	r3, r3, #9
 8007734:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d110      	bne.n	800775e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	2018      	movs	r0, #24
 8007740:	f7ff fdf7 	bl	8007332 <send_cmd>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d136      	bne.n	80077b8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800774a:	21fe      	movs	r1, #254	; 0xfe
 800774c:	68b8      	ldr	r0, [r7, #8]
 800774e:	f7ff fdbe 	bl	80072ce <xmit_datablock>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d02f      	beq.n	80077b8 <USER_SPI_write+0xd8>
			count = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	e02c      	b.n	80077b8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800775e:	4b1d      	ldr	r3, [pc, #116]	; (80077d4 <USER_SPI_write+0xf4>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	f003 0306 	and.w	r3, r3, #6
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <USER_SPI_write+0x92>
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	2097      	movs	r0, #151	; 0x97
 800776e:	f7ff fde0 	bl	8007332 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	2019      	movs	r0, #25
 8007776:	f7ff fddc 	bl	8007332 <send_cmd>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11b      	bne.n	80077b8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007780:	21fc      	movs	r1, #252	; 0xfc
 8007782:	68b8      	ldr	r0, [r7, #8]
 8007784:	f7ff fda3 	bl	80072ce <xmit_datablock>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <USER_SPI_write+0xc4>
				buff += 512;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007794:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	3b01      	subs	r3, #1
 800779a:	603b      	str	r3, [r7, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1ee      	bne.n	8007780 <USER_SPI_write+0xa0>
 80077a2:	e000      	b.n	80077a6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80077a4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80077a6:	21fd      	movs	r1, #253	; 0xfd
 80077a8:	2000      	movs	r0, #0
 80077aa:	f7ff fd90 	bl	80072ce <xmit_datablock>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <USER_SPI_write+0xd8>
 80077b4:	2301      	movs	r3, #1
 80077b6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80077b8:	f7ff fd34 	bl	8007224 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf14      	ite	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	2300      	moveq	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000020 	.word	0x20000020
 80077d4:	2000061c 	.word	0x2000061c

080077d8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08c      	sub	sp, #48	; 0x30
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	603a      	str	r2, [r7, #0]
 80077e2:	71fb      	strb	r3, [r7, #7]
 80077e4:	460b      	mov	r3, r1
 80077e6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80077e8:	79fb      	ldrb	r3, [r7, #7]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <USER_SPI_ioctl+0x1a>
 80077ee:	2304      	movs	r3, #4
 80077f0:	e15a      	b.n	8007aa8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80077f2:	4baf      	ldr	r3, [pc, #700]	; (8007ab0 <USER_SPI_ioctl+0x2d8>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 0301 	and.w	r3, r3, #1
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USER_SPI_ioctl+0x2c>
 8007800:	2303      	movs	r3, #3
 8007802:	e151      	b.n	8007aa8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800780a:	79bb      	ldrb	r3, [r7, #6]
 800780c:	2b04      	cmp	r3, #4
 800780e:	f200 8136 	bhi.w	8007a7e <USER_SPI_ioctl+0x2a6>
 8007812:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <USER_SPI_ioctl+0x40>)
 8007814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007818:	0800782d 	.word	0x0800782d
 800781c:	08007841 	.word	0x08007841
 8007820:	08007a7f 	.word	0x08007a7f
 8007824:	080078ed 	.word	0x080078ed
 8007828:	080079e3 	.word	0x080079e3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800782c:	f7ff fd0a 	bl	8007244 <spiselect>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 8127 	beq.w	8007a86 <USER_SPI_ioctl+0x2ae>
 8007838:	2300      	movs	r3, #0
 800783a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800783e:	e122      	b.n	8007a86 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007840:	2100      	movs	r1, #0
 8007842:	2009      	movs	r0, #9
 8007844:	f7ff fd75 	bl	8007332 <send_cmd>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	f040 811d 	bne.w	8007a8a <USER_SPI_ioctl+0x2b2>
 8007850:	f107 030c 	add.w	r3, r7, #12
 8007854:	2110      	movs	r1, #16
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fd10 	bl	800727c <rcvr_datablock>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8113 	beq.w	8007a8a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007864:	7b3b      	ldrb	r3, [r7, #12]
 8007866:	099b      	lsrs	r3, r3, #6
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b01      	cmp	r3, #1
 800786c:	d111      	bne.n	8007892 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800786e:	7d7b      	ldrb	r3, [r7, #21]
 8007870:	461a      	mov	r2, r3
 8007872:	7d3b      	ldrb	r3, [r7, #20]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	4413      	add	r3, r2
 8007878:	461a      	mov	r2, r3
 800787a:	7cfb      	ldrb	r3, [r7, #19]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007882:	4413      	add	r3, r2
 8007884:	3301      	adds	r3, #1
 8007886:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	029a      	lsls	r2, r3, #10
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e028      	b.n	80078e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007892:	7c7b      	ldrb	r3, [r7, #17]
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	b2da      	uxtb	r2, r3
 800789a:	7dbb      	ldrb	r3, [r7, #22]
 800789c:	09db      	lsrs	r3, r3, #7
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4413      	add	r3, r2
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	7d7b      	ldrb	r3, [r7, #21]
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	f003 0306 	and.w	r3, r3, #6
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4413      	add	r3, r2
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	3302      	adds	r3, #2
 80078b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80078ba:	7d3b      	ldrb	r3, [r7, #20]
 80078bc:	099b      	lsrs	r3, r3, #6
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	461a      	mov	r2, r3
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	441a      	add	r2, r3
 80078c8:	7cbb      	ldrb	r3, [r7, #18]
 80078ca:	029b      	lsls	r3, r3, #10
 80078cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078d0:	4413      	add	r3, r2
 80078d2:	3301      	adds	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80078d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80078da:	3b09      	subs	r3, #9
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	409a      	lsls	r2, r3
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80078ea:	e0ce      	b.n	8007a8a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80078ec:	4b71      	ldr	r3, [pc, #452]	; (8007ab4 <USER_SPI_ioctl+0x2dc>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d031      	beq.n	800795c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80078f8:	2100      	movs	r1, #0
 80078fa:	208d      	movs	r0, #141	; 0x8d
 80078fc:	f7ff fd19 	bl	8007332 <send_cmd>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	f040 80c3 	bne.w	8007a8e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007908:	20ff      	movs	r0, #255	; 0xff
 800790a:	f7ff fc21 	bl	8007150 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	2110      	movs	r1, #16
 8007914:	4618      	mov	r0, r3
 8007916:	f7ff fcb1 	bl	800727c <rcvr_datablock>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80b6 	beq.w	8007a8e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007922:	2330      	movs	r3, #48	; 0x30
 8007924:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007928:	e007      	b.n	800793a <USER_SPI_ioctl+0x162>
 800792a:	20ff      	movs	r0, #255	; 0xff
 800792c:	f7ff fc10 	bl	8007150 <xchg_spi>
 8007930:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007934:	3b01      	subs	r3, #1
 8007936:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800793a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f3      	bne.n	800792a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007942:	7dbb      	ldrb	r3, [r7, #22]
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	b2db      	uxtb	r3, r3
 8007948:	461a      	mov	r2, r3
 800794a:	2310      	movs	r3, #16
 800794c:	fa03 f202 	lsl.w	r2, r3, r2
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800795a:	e098      	b.n	8007a8e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800795c:	2100      	movs	r1, #0
 800795e:	2009      	movs	r0, #9
 8007960:	f7ff fce7 	bl	8007332 <send_cmd>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	f040 8091 	bne.w	8007a8e <USER_SPI_ioctl+0x2b6>
 800796c:	f107 030c 	add.w	r3, r7, #12
 8007970:	2110      	movs	r1, #16
 8007972:	4618      	mov	r0, r3
 8007974:	f7ff fc82 	bl	800727c <rcvr_datablock>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f000 8087 	beq.w	8007a8e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007980:	4b4c      	ldr	r3, [pc, #304]	; (8007ab4 <USER_SPI_ioctl+0x2dc>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	f003 0302 	and.w	r3, r3, #2
 8007988:	2b00      	cmp	r3, #0
 800798a:	d012      	beq.n	80079b2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800798c:	7dbb      	ldrb	r3, [r7, #22]
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007994:	7dfa      	ldrb	r2, [r7, #23]
 8007996:	09d2      	lsrs	r2, r2, #7
 8007998:	b2d2      	uxtb	r2, r2
 800799a:	4413      	add	r3, r2
 800799c:	1c5a      	adds	r2, r3, #1
 800799e:	7e7b      	ldrb	r3, [r7, #25]
 80079a0:	099b      	lsrs	r3, r3, #6
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	3b01      	subs	r3, #1
 80079a6:	fa02 f303 	lsl.w	r3, r2, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e013      	b.n	80079da <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	109b      	asrs	r3, r3, #2
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	3301      	adds	r3, #1
 80079be:	7dfa      	ldrb	r2, [r7, #23]
 80079c0:	00d2      	lsls	r2, r2, #3
 80079c2:	f002 0218 	and.w	r2, r2, #24
 80079c6:	7df9      	ldrb	r1, [r7, #23]
 80079c8:	0949      	lsrs	r1, r1, #5
 80079ca:	b2c9      	uxtb	r1, r1
 80079cc:	440a      	add	r2, r1
 80079ce:	3201      	adds	r2, #1
 80079d0:	fb02 f303 	mul.w	r3, r2, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80079e0:	e055      	b.n	8007a8e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80079e2:	4b34      	ldr	r3, [pc, #208]	; (8007ab4 <USER_SPI_ioctl+0x2dc>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	f003 0306 	and.w	r3, r3, #6
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d051      	beq.n	8007a92 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80079ee:	f107 020c 	add.w	r2, r7, #12
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	210b      	movs	r1, #11
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff feee 	bl	80077d8 <USER_SPI_ioctl>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d149      	bne.n	8007a96 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a02:	7b3b      	ldrb	r3, [r7, #12]
 8007a04:	099b      	lsrs	r3, r3, #6
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <USER_SPI_ioctl+0x23e>
 8007a0c:	7dbb      	ldrb	r3, [r7, #22]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d041      	beq.n	8007a9a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007a26:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <USER_SPI_ioctl+0x2dc>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	f003 0308 	and.w	r3, r3, #8
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a34:	025b      	lsls	r3, r3, #9
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	025b      	lsls	r3, r3, #9
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a40:	2020      	movs	r0, #32
 8007a42:	f7ff fc76 	bl	8007332 <send_cmd>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d128      	bne.n	8007a9e <USER_SPI_ioctl+0x2c6>
 8007a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a4e:	2021      	movs	r0, #33	; 0x21
 8007a50:	f7ff fc6f 	bl	8007332 <send_cmd>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d121      	bne.n	8007a9e <USER_SPI_ioctl+0x2c6>
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	2026      	movs	r0, #38	; 0x26
 8007a5e:	f7ff fc68 	bl	8007332 <send_cmd>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11a      	bne.n	8007a9e <USER_SPI_ioctl+0x2c6>
 8007a68:	f247 5030 	movw	r0, #30000	; 0x7530
 8007a6c:	f7ff fbb6 	bl	80071dc <wait_ready>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d013      	beq.n	8007a9e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007a76:	2300      	movs	r3, #0
 8007a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007a7c:	e00f      	b.n	8007a9e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007a7e:	2304      	movs	r3, #4
 8007a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007a84:	e00c      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		break;
 8007a86:	bf00      	nop
 8007a88:	e00a      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		break;
 8007a8a:	bf00      	nop
 8007a8c:	e008      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		break;
 8007a8e:	bf00      	nop
 8007a90:	e006      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a92:	bf00      	nop
 8007a94:	e004      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a96:	bf00      	nop
 8007a98:	e002      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <USER_SPI_ioctl+0x2c8>
		break;
 8007a9e:	bf00      	nop
	}

	despiselect();
 8007aa0:	f7ff fbc0 	bl	8007224 <despiselect>

	return res;
 8007aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	; 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000020 	.word	0x20000020
 8007ab4:	2000061c 	.word	0x2000061c

08007ab8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007ac2:	79fb      	ldrb	r3, [r7, #7]
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <disk_status+0x30>)
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	79fa      	ldrb	r2, [r7, #7]
 8007ad0:	4905      	ldr	r1, [pc, #20]	; (8007ae8 <disk_status+0x30>)
 8007ad2:	440a      	add	r2, r1
 8007ad4:	7a12      	ldrb	r2, [r2, #8]
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4798      	blx	r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20000648 	.word	0x20000648

08007aec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	4a0d      	ldr	r2, [pc, #52]	; (8007b34 <disk_initialize+0x48>)
 8007afe:	5cd3      	ldrb	r3, [r2, r3]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d111      	bne.n	8007b28 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	4a0b      	ldr	r2, [pc, #44]	; (8007b34 <disk_initialize+0x48>)
 8007b08:	2101      	movs	r1, #1
 8007b0a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <disk_initialize+0x48>)
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	79fa      	ldrb	r2, [r7, #7]
 8007b1a:	4906      	ldr	r1, [pc, #24]	; (8007b34 <disk_initialize+0x48>)
 8007b1c:	440a      	add	r2, r1
 8007b1e:	7a12      	ldrb	r2, [r2, #8]
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	4603      	mov	r3, r0
 8007b26:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000648 	.word	0x20000648

08007b38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007b38:	b590      	push	{r4, r7, lr}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	; (8007b74 <disk_read+0x3c>)
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	689c      	ldr	r4, [r3, #8]
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	4a07      	ldr	r2, [pc, #28]	; (8007b74 <disk_read+0x3c>)
 8007b58:	4413      	add	r3, r2
 8007b5a:	7a18      	ldrb	r0, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	68b9      	ldr	r1, [r7, #8]
 8007b62:	47a0      	blx	r4
 8007b64:	4603      	mov	r3, r0
 8007b66:	75fb      	strb	r3, [r7, #23]
  return res;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000648 	.word	0x20000648

08007b78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007b78:	b590      	push	{r4, r7, lr}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <disk_write+0x3c>)
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	68dc      	ldr	r4, [r3, #12]
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	4a07      	ldr	r2, [pc, #28]	; (8007bb4 <disk_write+0x3c>)
 8007b98:	4413      	add	r3, r2
 8007b9a:	7a18      	ldrb	r0, [r3, #8]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68b9      	ldr	r1, [r7, #8]
 8007ba2:	47a0      	blx	r4
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]
  return res;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd90      	pop	{r4, r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20000648 	.word	0x20000648

08007bb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	603a      	str	r2, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <disk_ioctl+0x38>)
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	79fa      	ldrb	r2, [r7, #7]
 8007bd6:	4906      	ldr	r1, [pc, #24]	; (8007bf0 <disk_ioctl+0x38>)
 8007bd8:	440a      	add	r2, r1
 8007bda:	7a10      	ldrb	r0, [r2, #8]
 8007bdc:	79b9      	ldrb	r1, [r7, #6]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	4798      	blx	r3
 8007be2:	4603      	mov	r3, r0
 8007be4:	73fb      	strb	r3, [r7, #15]
  return res;
 8007be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000648 	.word	0x20000648

08007bf4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	b21a      	sxth	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	b21b      	sxth	r3, r3
 8007c10:	4313      	orrs	r3, r2
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007c16:	89fb      	ldrh	r3, [r7, #14]
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3303      	adds	r3, #3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	3202      	adds	r2, #2
 8007c3c:	7812      	ldrb	r2, [r2, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	3201      	adds	r2, #1
 8007c4a:	7812      	ldrb	r2, [r2, #0]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	887a      	ldrh	r2, [r7, #2]
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	887b      	ldrh	r3, [r7, #2]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	b2d2      	uxtb	r2, r2
 8007c92:	701a      	strb	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	701a      	strb	r2, [r3, #0]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	1c5a      	adds	r2, r3, #1
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	607a      	str	r2, [r7, #4]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	1c53      	adds	r3, r2, #1
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	1c59      	adds	r1, r3, #1
 8007d1c:	6179      	str	r1, [r7, #20]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1f1      	bne.n	8007d12 <mem_cpy+0x1a>
	}
}
 8007d2e:	bf00      	nop
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007d3a:	b480      	push	{r7}
 8007d3c:	b087      	sub	sp, #28
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	617a      	str	r2, [r7, #20]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	607b      	str	r3, [r7, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f3      	bne.n	8007d4a <mem_set+0x10>
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007d70:	b480      	push	{r7}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	61fa      	str	r2, [r7, #28]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	4619      	mov	r1, r3
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	61ba      	str	r2, [r7, #24]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	1acb      	subs	r3, r1, r3
 8007d9c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	607b      	str	r3, [r7, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <mem_cmp+0x40>
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d0eb      	beq.n	8007d88 <mem_cmp+0x18>

	return r;
 8007db0:	697b      	ldr	r3, [r7, #20]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3724      	adds	r7, #36	; 0x24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007dc8:	e002      	b.n	8007dd0 <chk_chr+0x12>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <chk_chr+0x26>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d1f2      	bne.n	8007dca <chk_chr+0xc>
	return *str;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	781b      	ldrb	r3, [r3, #0]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	e029      	b.n	8007e5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007e08:	4a27      	ldr	r2, [pc, #156]	; (8007ea8 <chk_lock+0xb4>)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	011b      	lsls	r3, r3, #4
 8007e0e:	4413      	add	r3, r2
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d01d      	beq.n	8007e52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e16:	4a24      	ldr	r2, [pc, #144]	; (8007ea8 <chk_lock+0xb4>)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	4413      	add	r3, r2
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d116      	bne.n	8007e56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007e28:	4a1f      	ldr	r2, [pc, #124]	; (8007ea8 <chk_lock+0xb4>)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d10c      	bne.n	8007e56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ea8 <chk_lock+0xb4>)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	4413      	add	r3, r2
 8007e44:	3308      	adds	r3, #8
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d102      	bne.n	8007e56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007e50:	e007      	b.n	8007e62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007e52:	2301      	movs	r3, #1
 8007e54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d9d2      	bls.n	8007e08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d109      	bne.n	8007e7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d102      	bne.n	8007e74 <chk_lock+0x80>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d101      	bne.n	8007e78 <chk_lock+0x84>
 8007e74:	2300      	movs	r3, #0
 8007e76:	e010      	b.n	8007e9a <chk_lock+0xa6>
 8007e78:	2312      	movs	r3, #18
 8007e7a:	e00e      	b.n	8007e9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d108      	bne.n	8007e94 <chk_lock+0xa0>
 8007e82:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <chk_lock+0xb4>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	011b      	lsls	r3, r3, #4
 8007e88:	4413      	add	r3, r2
 8007e8a:	330c      	adds	r3, #12
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e92:	d101      	bne.n	8007e98 <chk_lock+0xa4>
 8007e94:	2310      	movs	r3, #16
 8007e96:	e000      	b.n	8007e9a <chk_lock+0xa6>
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	20000628 	.word	0x20000628

08007eac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	e002      	b.n	8007ebe <enq_lock+0x12>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d806      	bhi.n	8007ed2 <enq_lock+0x26>
 8007ec4:	4a09      	ldr	r2, [pc, #36]	; (8007eec <enq_lock+0x40>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	011b      	lsls	r3, r3, #4
 8007eca:	4413      	add	r3, r2
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f2      	bne.n	8007eb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	20000628 	.word	0x20000628

08007ef0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	e01f      	b.n	8007f40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007f00:	4a41      	ldr	r2, [pc, #260]	; (8008008 <inc_lock+0x118>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	011b      	lsls	r3, r3, #4
 8007f06:	4413      	add	r3, r2
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d113      	bne.n	8007f3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007f12:	4a3d      	ldr	r2, [pc, #244]	; (8008008 <inc_lock+0x118>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	4413      	add	r3, r2
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d109      	bne.n	8007f3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007f26:	4a38      	ldr	r2, [pc, #224]	; (8008008 <inc_lock+0x118>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3308      	adds	r3, #8
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d006      	beq.n	8007f48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d9dc      	bls.n	8007f00 <inc_lock+0x10>
 8007f46:	e000      	b.n	8007f4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007f48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d132      	bne.n	8007fb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e002      	b.n	8007f5c <inc_lock+0x6c>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d806      	bhi.n	8007f70 <inc_lock+0x80>
 8007f62:	4a29      	ldr	r2, [pc, #164]	; (8008008 <inc_lock+0x118>)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	011b      	lsls	r3, r3, #4
 8007f68:	4413      	add	r3, r2
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1f2      	bne.n	8007f56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d101      	bne.n	8007f7a <inc_lock+0x8a>
 8007f76:	2300      	movs	r3, #0
 8007f78:	e040      	b.n	8007ffc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4922      	ldr	r1, [pc, #136]	; (8008008 <inc_lock+0x118>)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	440b      	add	r3, r1
 8007f86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	491e      	ldr	r1, [pc, #120]	; (8008008 <inc_lock+0x118>)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	011b      	lsls	r3, r3, #4
 8007f92:	440b      	add	r3, r1
 8007f94:	3304      	adds	r3, #4
 8007f96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	491a      	ldr	r1, [pc, #104]	; (8008008 <inc_lock+0x118>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	011b      	lsls	r3, r3, #4
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007fa8:	4a17      	ldr	r2, [pc, #92]	; (8008008 <inc_lock+0x118>)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	011b      	lsls	r3, r3, #4
 8007fae:	4413      	add	r3, r2
 8007fb0:	330c      	adds	r3, #12
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d009      	beq.n	8007fd0 <inc_lock+0xe0>
 8007fbc:	4a12      	ldr	r2, [pc, #72]	; (8008008 <inc_lock+0x118>)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	011b      	lsls	r3, r3, #4
 8007fc2:	4413      	add	r3, r2
 8007fc4:	330c      	adds	r3, #12
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <inc_lock+0xe0>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e015      	b.n	8007ffc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d108      	bne.n	8007fe8 <inc_lock+0xf8>
 8007fd6:	4a0c      	ldr	r2, [pc, #48]	; (8008008 <inc_lock+0x118>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4413      	add	r3, r2
 8007fde:	330c      	adds	r3, #12
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	e001      	b.n	8007fec <inc_lock+0xfc>
 8007fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fec:	4906      	ldr	r1, [pc, #24]	; (8008008 <inc_lock+0x118>)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	440b      	add	r3, r1
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3301      	adds	r3, #1
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	20000628 	.word	0x20000628

0800800c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	607b      	str	r3, [r7, #4]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d825      	bhi.n	800806c <dec_lock+0x60>
		n = Files[i].ctr;
 8008020:	4a17      	ldr	r2, [pc, #92]	; (8008080 <dec_lock+0x74>)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4413      	add	r3, r2
 8008028:	330c      	adds	r3, #12
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800802e:	89fb      	ldrh	r3, [r7, #14]
 8008030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008034:	d101      	bne.n	800803a <dec_lock+0x2e>
 8008036:	2300      	movs	r3, #0
 8008038:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800803a:	89fb      	ldrh	r3, [r7, #14]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <dec_lock+0x3a>
 8008040:	89fb      	ldrh	r3, [r7, #14]
 8008042:	3b01      	subs	r3, #1
 8008044:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008046:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <dec_lock+0x74>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	4413      	add	r3, r2
 800804e:	330c      	adds	r3, #12
 8008050:	89fa      	ldrh	r2, [r7, #14]
 8008052:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d105      	bne.n	8008066 <dec_lock+0x5a>
 800805a:	4a09      	ldr	r2, [pc, #36]	; (8008080 <dec_lock+0x74>)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	4413      	add	r3, r2
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	737b      	strb	r3, [r7, #13]
 800806a:	e001      	b.n	8008070 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800806c:	2302      	movs	r3, #2
 800806e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008070:	7b7b      	ldrb	r3, [r7, #13]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000628 	.word	0x20000628

08008084 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e010      	b.n	80080b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008092:	4a0d      	ldr	r2, [pc, #52]	; (80080c8 <clear_lock+0x44>)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	4413      	add	r3, r2
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d105      	bne.n	80080ae <clear_lock+0x2a>
 80080a2:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <clear_lock+0x44>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	4413      	add	r3, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3301      	adds	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d9eb      	bls.n	8008092 <clear_lock+0xe>
	}
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	3714      	adds	r7, #20
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	20000628 	.word	0x20000628

080080cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	78db      	ldrb	r3, [r3, #3]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d034      	beq.n	800814a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7858      	ldrb	r0, [r3, #1]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80080f0:	2301      	movs	r3, #1
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	f7ff fd40 	bl	8007b78 <disk_write>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <sync_window+0x38>
			res = FR_DISK_ERR;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
 8008102:	e022      	b.n	800814a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	429a      	cmp	r2, r3
 8008118:	d217      	bcs.n	800814a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	789b      	ldrb	r3, [r3, #2]
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	e010      	b.n	8008144 <sync_window+0x78>
					wsect += fs->fsize;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4413      	add	r3, r2
 800812a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7858      	ldrb	r0, [r3, #1]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008136:	2301      	movs	r3, #1
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	f7ff fd1d 	bl	8007b78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3b01      	subs	r3, #1
 8008142:	613b      	str	r3, [r7, #16]
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d8eb      	bhi.n	8008122 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d01b      	beq.n	80081a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff ffad 	bl	80080cc <sync_window>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d113      	bne.n	80081a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	7858      	ldrb	r0, [r3, #1]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008186:	2301      	movs	r3, #1
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	f7ff fcd5 	bl	8007b38 <disk_read>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008194:	f04f 33ff 	mov.w	r3, #4294967295
 8008198:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800819a:	2301      	movs	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff ff87 	bl	80080cc <sync_window>
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d158      	bne.n	800827a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d148      	bne.n	8008262 <sync_fs+0xb2>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	791b      	ldrb	r3, [r3, #4]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d144      	bne.n	8008262 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3330      	adds	r3, #48	; 0x30
 80081dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e0:	2100      	movs	r1, #0
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff fda9 	bl	8007d3a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3330      	adds	r3, #48	; 0x30
 80081ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80081f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7ff fd38 	bl	8007c6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3330      	adds	r3, #48	; 0x30
 80081fe:	4921      	ldr	r1, [pc, #132]	; (8008284 <sync_fs+0xd4>)
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff fd4d 	bl	8007ca0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3330      	adds	r3, #48	; 0x30
 800820a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800820e:	491e      	ldr	r1, [pc, #120]	; (8008288 <sync_fs+0xd8>)
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff fd45 	bl	8007ca0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3330      	adds	r3, #48	; 0x30
 800821a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7ff fd3b 	bl	8007ca0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3330      	adds	r3, #48	; 0x30
 800822e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	4619      	mov	r1, r3
 8008238:	4610      	mov	r0, r2
 800823a:	f7ff fd31 	bl	8007ca0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7858      	ldrb	r0, [r3, #1]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008256:	2301      	movs	r3, #1
 8008258:	f7ff fc8e 	bl	8007b78 <disk_write>
			fs->fsi_flag = 0;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	785b      	ldrb	r3, [r3, #1]
 8008266:	2200      	movs	r2, #0
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fca4 	bl	8007bb8 <disk_ioctl>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <sync_fs+0xca>
 8008276:	2301      	movs	r3, #1
 8008278:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800827a:	7bfb      	ldrb	r3, [r7, #15]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	41615252 	.word	0x41615252
 8008288:	61417272 	.word	0x61417272

0800828c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	3b02      	subs	r3, #2
 800829a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	3b02      	subs	r3, #2
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d301      	bcc.n	80082ac <clust2sect+0x20>
 80082a8:	2300      	movs	r3, #0
 80082aa:	e008      	b.n	80082be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	895b      	ldrh	r3, [r3, #10]
 80082b0:	461a      	mov	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	fb03 f202 	mul.w	r2, r3, r2
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082bc:	4413      	add	r3, r2
}
 80082be:	4618      	mov	r0, r3
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b086      	sub	sp, #24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d904      	bls.n	80082ea <get_fat+0x20>
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80082ea:	2301      	movs	r3, #1
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e08f      	b.n	8008410 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295
 80082f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d062      	beq.n	80083c4 <get_fat+0xfa>
 80082fe:	2b03      	cmp	r3, #3
 8008300:	dc7c      	bgt.n	80083fc <get_fat+0x132>
 8008302:	2b01      	cmp	r3, #1
 8008304:	d002      	beq.n	800830c <get_fat+0x42>
 8008306:	2b02      	cmp	r3, #2
 8008308:	d042      	beq.n	8008390 <get_fat+0xc6>
 800830a:	e077      	b.n	80083fc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	085b      	lsrs	r3, r3, #1
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	6a1a      	ldr	r2, [r3, #32]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	0a5b      	lsrs	r3, r3, #9
 8008322:	4413      	add	r3, r2
 8008324:	4619      	mov	r1, r3
 8008326:	6938      	ldr	r0, [r7, #16]
 8008328:	f7ff ff14 	bl	8008154 <move_window>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d167      	bne.n	8008402 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	60fa      	str	r2, [r7, #12]
 8008338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4413      	add	r3, r2
 8008340:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008344:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	6a1a      	ldr	r2, [r3, #32]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0a5b      	lsrs	r3, r3, #9
 800834e:	4413      	add	r3, r2
 8008350:	4619      	mov	r1, r3
 8008352:	6938      	ldr	r0, [r7, #16]
 8008354:	f7ff fefe 	bl	8008154 <move_window>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d153      	bne.n	8008406 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800836c:	021b      	lsls	r3, r3, #8
 800836e:	461a      	mov	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4313      	orrs	r3, r2
 8008374:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d002      	beq.n	8008386 <get_fat+0xbc>
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	091b      	lsrs	r3, r3, #4
 8008384:	e002      	b.n	800838c <get_fat+0xc2>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800838c:	617b      	str	r3, [r7, #20]
			break;
 800838e:	e03f      	b.n	8008410 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	6a1a      	ldr	r2, [r3, #32]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	4413      	add	r3, r2
 800839a:	4619      	mov	r1, r3
 800839c:	6938      	ldr	r0, [r7, #16]
 800839e:	f7ff fed9 	bl	8008154 <move_window>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d130      	bne.n	800840a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80083b6:	4413      	add	r3, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fc1b 	bl	8007bf4 <ld_word>
 80083be:	4603      	mov	r3, r0
 80083c0:	617b      	str	r3, [r7, #20]
			break;
 80083c2:	e025      	b.n	8008410 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	09db      	lsrs	r3, r3, #7
 80083cc:	4413      	add	r3, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6938      	ldr	r0, [r7, #16]
 80083d2:	f7ff febf 	bl	8008154 <move_window>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d118      	bne.n	800840e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083ea:	4413      	add	r3, r2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fc19 	bl	8007c24 <ld_dword>
 80083f2:	4603      	mov	r3, r0
 80083f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80083f8:	617b      	str	r3, [r7, #20]
			break;
 80083fa:	e009      	b.n	8008410 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80083fc:	2301      	movs	r3, #1
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e006      	b.n	8008410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008402:	bf00      	nop
 8008404:	e004      	b.n	8008410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008406:	bf00      	nop
 8008408:	e002      	b.n	8008410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800840a:	bf00      	nop
 800840c:	e000      	b.n	8008410 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800840e:	bf00      	nop
		}
	}

	return val;
 8008410:	697b      	ldr	r3, [r7, #20]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800841a:	b590      	push	{r4, r7, lr}
 800841c:	b089      	sub	sp, #36	; 0x24
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	60b9      	str	r1, [r7, #8]
 8008424:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008426:	2302      	movs	r3, #2
 8008428:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b01      	cmp	r3, #1
 800842e:	f240 80d2 	bls.w	80085d6 <put_fat+0x1bc>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	f080 80cc 	bcs.w	80085d6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b03      	cmp	r3, #3
 8008444:	f000 8096 	beq.w	8008574 <put_fat+0x15a>
 8008448:	2b03      	cmp	r3, #3
 800844a:	f300 80cd 	bgt.w	80085e8 <put_fat+0x1ce>
 800844e:	2b01      	cmp	r3, #1
 8008450:	d002      	beq.n	8008458 <put_fat+0x3e>
 8008452:	2b02      	cmp	r3, #2
 8008454:	d06e      	beq.n	8008534 <put_fat+0x11a>
 8008456:	e0c7      	b.n	80085e8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	085b      	lsrs	r3, r3, #1
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	4413      	add	r3, r2
 8008464:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a1a      	ldr	r2, [r3, #32]
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	0a5b      	lsrs	r3, r3, #9
 800846e:	4413      	add	r3, r2
 8008470:	4619      	mov	r1, r3
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f7ff fe6e 	bl	8008154 <move_window>
 8008478:	4603      	mov	r3, r0
 800847a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800847c:	7ffb      	ldrb	r3, [r7, #31]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f040 80ab 	bne.w	80085da <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	1c59      	adds	r1, r3, #1
 800848e:	61b9      	str	r1, [r7, #24]
 8008490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008494:	4413      	add	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00d      	beq.n	80084be <put_fat+0xa4>
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b25b      	sxtb	r3, r3
 80084a8:	f003 030f 	and.w	r3, r3, #15
 80084ac:	b25a      	sxtb	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	b25b      	sxtb	r3, r3
 80084b6:	4313      	orrs	r3, r2
 80084b8:	b25b      	sxtb	r3, r3
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	e001      	b.n	80084c2 <put_fat+0xa8>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1a      	ldr	r2, [r3, #32]
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	0a5b      	lsrs	r3, r3, #9
 80084d4:	4413      	add	r3, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f7ff fe3b 	bl	8008154 <move_window>
 80084de:	4603      	mov	r3, r0
 80084e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084e2:	7ffb      	ldrb	r3, [r7, #31]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d17a      	bne.n	80085de <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f4:	4413      	add	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <put_fat+0xf0>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	b2db      	uxtb	r3, r3
 8008508:	e00e      	b.n	8008528 <put_fat+0x10e>
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	b25b      	sxtb	r3, r3
 8008510:	f023 030f 	bic.w	r3, r3, #15
 8008514:	b25a      	sxtb	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0a1b      	lsrs	r3, r3, #8
 800851a:	b25b      	sxtb	r3, r3
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	b25b      	sxtb	r3, r3
 8008522:	4313      	orrs	r3, r2
 8008524:	b25b      	sxtb	r3, r3
 8008526:	b2db      	uxtb	r3, r3
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2201      	movs	r2, #1
 8008530:	70da      	strb	r2, [r3, #3]
			break;
 8008532:	e059      	b.n	80085e8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1a      	ldr	r2, [r3, #32]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	4413      	add	r3, r2
 800853e:	4619      	mov	r1, r3
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f7ff fe07 	bl	8008154 <move_window>
 8008546:	4603      	mov	r3, r0
 8008548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800854a:	7ffb      	ldrb	r3, [r7, #31]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d148      	bne.n	80085e2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	005b      	lsls	r3, r3, #1
 800855a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800855e:	4413      	add	r3, r2
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	b292      	uxth	r2, r2
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff fb7f 	bl	8007c6a <st_word>
			fs->wflag = 1;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	70da      	strb	r2, [r3, #3]
			break;
 8008572:	e039      	b.n	80085e8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6a1a      	ldr	r2, [r3, #32]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	09db      	lsrs	r3, r3, #7
 800857c:	4413      	add	r3, r2
 800857e:	4619      	mov	r1, r3
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fde7 	bl	8008154 <move_window>
 8008586:	4603      	mov	r3, r0
 8008588:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800858a:	7ffb      	ldrb	r3, [r7, #31]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d12a      	bne.n	80085e6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80085a4:	4413      	add	r3, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fb3c 	bl	8007c24 <ld_dword>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085b2:	4323      	orrs	r3, r4
 80085b4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80085c4:	4413      	add	r3, r2
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fb69 	bl	8007ca0 <st_dword>
			fs->wflag = 1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	70da      	strb	r2, [r3, #3]
			break;
 80085d4:	e008      	b.n	80085e8 <put_fat+0x1ce>
		}
	}
 80085d6:	bf00      	nop
 80085d8:	e006      	b.n	80085e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80085da:	bf00      	nop
 80085dc:	e004      	b.n	80085e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80085de:	bf00      	nop
 80085e0:	e002      	b.n	80085e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80085e2:	bf00      	nop
 80085e4:	e000      	b.n	80085e8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80085e6:	bf00      	nop
	return res;
 80085e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3724      	adds	r7, #36	; 0x24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd90      	pop	{r4, r7, pc}

080085f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	60f8      	str	r0, [r7, #12]
 80085fa:	60b9      	str	r1, [r7, #8]
 80085fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d904      	bls.n	8008618 <remove_chain+0x26>
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	68ba      	ldr	r2, [r7, #8]
 8008614:	429a      	cmp	r2, r3
 8008616:	d301      	bcc.n	800861c <remove_chain+0x2a>
 8008618:	2302      	movs	r3, #2
 800861a:	e04b      	b.n	80086b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00c      	beq.n	800863c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008622:	f04f 32ff 	mov.w	r2, #4294967295
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	69b8      	ldr	r0, [r7, #24]
 800862a:	f7ff fef6 	bl	800841a <put_fat>
 800862e:	4603      	mov	r3, r0
 8008630:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008632:	7ffb      	ldrb	r3, [r7, #31]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <remove_chain+0x4a>
 8008638:	7ffb      	ldrb	r3, [r7, #31]
 800863a:	e03b      	b.n	80086b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff fe43 	bl	80082ca <get_fat>
 8008644:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d031      	beq.n	80086b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <remove_chain+0x64>
 8008652:	2302      	movs	r3, #2
 8008654:	e02e      	b.n	80086b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	d101      	bne.n	8008662 <remove_chain+0x70>
 800865e:	2301      	movs	r3, #1
 8008660:	e028      	b.n	80086b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008662:	2200      	movs	r2, #0
 8008664:	68b9      	ldr	r1, [r7, #8]
 8008666:	69b8      	ldr	r0, [r7, #24]
 8008668:	f7ff fed7 	bl	800841a <put_fat>
 800866c:	4603      	mov	r3, r0
 800866e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008670:	7ffb      	ldrb	r3, [r7, #31]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d001      	beq.n	800867a <remove_chain+0x88>
 8008676:	7ffb      	ldrb	r3, [r7, #31]
 8008678:	e01c      	b.n	80086b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	691a      	ldr	r2, [r3, #16]
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	3b02      	subs	r3, #2
 8008684:	429a      	cmp	r2, r3
 8008686:	d20b      	bcs.n	80086a0 <remove_chain+0xae>
			fs->free_clst++;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	791b      	ldrb	r3, [r3, #4]
 8008696:	f043 0301 	orr.w	r3, r3, #1
 800869a:	b2da      	uxtb	r2, r3
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d3c6      	bcc.n	800863c <remove_chain+0x4a>
 80086ae:	e000      	b.n	80086b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80086b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10d      	bne.n	80086ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d004      	beq.n	80086e8 <create_chain+0x2c>
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d31b      	bcc.n	8008720 <create_chain+0x64>
 80086e8:	2301      	movs	r3, #1
 80086ea:	61bb      	str	r3, [r7, #24]
 80086ec:	e018      	b.n	8008720 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7ff fdea 	bl	80082ca <get_fat>
 80086f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d801      	bhi.n	8008702 <create_chain+0x46>
 80086fe:	2301      	movs	r3, #1
 8008700:	e070      	b.n	80087e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d101      	bne.n	800870e <create_chain+0x52>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	e06a      	b.n	80087e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	429a      	cmp	r2, r3
 8008716:	d201      	bcs.n	800871c <create_chain+0x60>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	e063      	b.n	80087e4 <create_chain+0x128>
		scl = clst;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	3301      	adds	r3, #1
 8008728:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	429a      	cmp	r2, r3
 8008732:	d307      	bcc.n	8008744 <create_chain+0x88>
				ncl = 2;
 8008734:	2302      	movs	r3, #2
 8008736:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	429a      	cmp	r2, r3
 800873e:	d901      	bls.n	8008744 <create_chain+0x88>
 8008740:	2300      	movs	r3, #0
 8008742:	e04f      	b.n	80087e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008744:	69f9      	ldr	r1, [r7, #28]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7ff fdbf 	bl	80082ca <get_fat>
 800874c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00e      	beq.n	8008772 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d003      	beq.n	8008762 <create_chain+0xa6>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008760:	d101      	bne.n	8008766 <create_chain+0xaa>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	e03e      	b.n	80087e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	429a      	cmp	r2, r3
 800876c:	d1da      	bne.n	8008724 <create_chain+0x68>
 800876e:	2300      	movs	r3, #0
 8008770:	e038      	b.n	80087e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008772:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008774:	f04f 32ff 	mov.w	r2, #4294967295
 8008778:	69f9      	ldr	r1, [r7, #28]
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f7ff fe4d 	bl	800841a <put_fat>
 8008780:	4603      	mov	r3, r0
 8008782:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <create_chain+0xe2>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d006      	beq.n	800879e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6938      	ldr	r0, [r7, #16]
 8008796:	f7ff fe40 	bl	800841a <put_fat>
 800879a:	4603      	mov	r3, r0
 800879c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d116      	bne.n	80087d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	691a      	ldr	r2, [r3, #16]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	3b02      	subs	r3, #2
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d804      	bhi.n	80087c2 <create_chain+0x106>
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	791b      	ldrb	r3, [r3, #4]
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	711a      	strb	r2, [r3, #4]
 80087d0:	e007      	b.n	80087e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d102      	bne.n	80087de <create_chain+0x122>
 80087d8:	f04f 33ff 	mov.w	r3, #4294967295
 80087dc:	e000      	b.n	80087e0 <create_chain+0x124>
 80087de:	2301      	movs	r3, #1
 80087e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80087e2:	69fb      	ldr	r3, [r7, #28]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	3304      	adds	r3, #4
 8008802:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	0a5b      	lsrs	r3, r3, #9
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	8952      	ldrh	r2, [r2, #10]
 800880c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008810:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1d1a      	adds	r2, r3, #4
 8008816:	613a      	str	r2, [r7, #16]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <clmt_clust+0x3a>
 8008822:	2300      	movs	r3, #0
 8008824:	e010      	b.n	8008848 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	429a      	cmp	r2, r3
 800882c:	d307      	bcc.n	800883e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	3304      	adds	r3, #4
 800883a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800883c:	e7e9      	b.n	8008812 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800883e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	4413      	add	r3, r2
}
 8008848:	4618      	mov	r0, r3
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800886a:	d204      	bcs.n	8008876 <dir_sdi+0x22>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f003 031f 	and.w	r3, r3, #31
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008876:	2302      	movs	r3, #2
 8008878:	e063      	b.n	8008942 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	683a      	ldr	r2, [r7, #0]
 800887e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <dir_sdi+0x46>
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d902      	bls.n	800889a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	095b      	lsrs	r3, r3, #5
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	8912      	ldrh	r2, [r2, #8]
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d301      	bcc.n	80088b0 <dir_sdi+0x5c>
 80088ac:	2302      	movs	r3, #2
 80088ae:	e048      	b.n	8008942 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	61da      	str	r2, [r3, #28]
 80088b8:	e029      	b.n	800890e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	895b      	ldrh	r3, [r3, #10]
 80088be:	025b      	lsls	r3, r3, #9
 80088c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088c2:	e019      	b.n	80088f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6979      	ldr	r1, [r7, #20]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fcfe 	bl	80082ca <get_fat>
 80088ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d101      	bne.n	80088dc <dir_sdi+0x88>
 80088d8:	2301      	movs	r3, #1
 80088da:	e032      	b.n	8008942 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d904      	bls.n	80088ec <dir_sdi+0x98>
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d301      	bcc.n	80088f0 <dir_sdi+0x9c>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e028      	b.n	8008942 <dir_sdi+0xee>
			ofs -= csz;
 80088f0:	683a      	ldr	r2, [r7, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d2e1      	bcs.n	80088c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008900:	6979      	ldr	r1, [r7, #20]
 8008902:	6938      	ldr	r0, [r7, #16]
 8008904:	f7ff fcc2 	bl	800828c <clust2sect>
 8008908:	4602      	mov	r2, r0
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <dir_sdi+0xcc>
 800891c:	2302      	movs	r3, #2
 800891e:	e010      	b.n	8008942 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	0a5b      	lsrs	r3, r3, #9
 8008928:	441a      	add	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	441a      	add	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	3320      	adds	r3, #32
 8008960:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69db      	ldr	r3, [r3, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <dir_next+0x28>
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008970:	d301      	bcc.n	8008976 <dir_next+0x2c>
 8008972:	2304      	movs	r3, #4
 8008974:	e0aa      	b.n	8008acc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 8098 	bne.w	8008ab2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	1c5a      	adds	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	095b      	lsrs	r3, r3, #5
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	8912      	ldrh	r2, [r2, #8]
 800899c:	4293      	cmp	r3, r2
 800899e:	f0c0 8088 	bcc.w	8008ab2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	61da      	str	r2, [r3, #28]
 80089a8:	2304      	movs	r3, #4
 80089aa:	e08f      	b.n	8008acc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	0a5b      	lsrs	r3, r3, #9
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	8952      	ldrh	r2, [r2, #10]
 80089b4:	3a01      	subs	r2, #1
 80089b6:	4013      	ands	r3, r2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d17a      	bne.n	8008ab2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	4619      	mov	r1, r3
 80089c4:	4610      	mov	r0, r2
 80089c6:	f7ff fc80 	bl	80082ca <get_fat>
 80089ca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d801      	bhi.n	80089d6 <dir_next+0x8c>
 80089d2:	2302      	movs	r3, #2
 80089d4:	e07a      	b.n	8008acc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d101      	bne.n	80089e2 <dir_next+0x98>
 80089de:	2301      	movs	r3, #1
 80089e0:	e074      	b.n	8008acc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d358      	bcc.n	8008a9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	61da      	str	r2, [r3, #28]
 80089f8:	2304      	movs	r3, #4
 80089fa:	e067      	b.n	8008acc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f7ff fe59 	bl	80086bc <create_chain>
 8008a0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <dir_next+0xcc>
 8008a12:	2307      	movs	r3, #7
 8008a14:	e05a      	b.n	8008acc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <dir_next+0xd6>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e055      	b.n	8008acc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d101      	bne.n	8008a2c <dir_next+0xe2>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e04f      	b.n	8008acc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff fb4d 	bl	80080cc <sync_window>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <dir_next+0xf2>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e047      	b.n	8008acc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3330      	adds	r3, #48	; 0x30
 8008a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff f977 	bl	8007d3a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	6979      	ldr	r1, [r7, #20]
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff fc1a 	bl	800828c <clust2sect>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a5e:	e012      	b.n	8008a86 <dir_next+0x13c>
						fs->wflag = 1;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f7ff fb30 	bl	80080cc <sync_window>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <dir_next+0x12c>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e02a      	b.n	8008acc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	895b      	ldrh	r3, [r3, #10]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d3e6      	bcc.n	8008a60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	1ad2      	subs	r2, r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008aa4:	6979      	ldr	r1, [r7, #20]
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7ff fbf0 	bl	800828c <clust2sect>
 8008aac:	4602      	mov	r2, r0
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac4:	441a      	add	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff feb4 	bl	8008854 <dir_sdi>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d12b      	bne.n	8008b4e <dir_alloc+0x7a>
		n = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	4619      	mov	r1, r3
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f7ff fb27 	bl	8008154 <move_window>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d11d      	bne.n	8008b4c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2be5      	cmp	r3, #229	; 0xe5
 8008b18:	d004      	beq.n	8008b24 <dir_alloc+0x50>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d107      	bne.n	8008b34 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3301      	adds	r3, #1
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d102      	bne.n	8008b38 <dir_alloc+0x64>
 8008b32:	e00c      	b.n	8008b4e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008b34:	2300      	movs	r3, #0
 8008b36:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008b38:	2101      	movs	r1, #1
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7ff ff05 	bl	800894a <dir_next>
 8008b40:	4603      	mov	r3, r0
 8008b42:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0d7      	beq.n	8008afa <dir_alloc+0x26>
 8008b4a:	e000      	b.n	8008b4e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008b4c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	d101      	bne.n	8008b58 <dir_alloc+0x84>
 8008b54:	2307      	movs	r3, #7
 8008b56:	75fb      	strb	r3, [r7, #23]
	return res;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	331a      	adds	r3, #26
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7ff f83f 	bl	8007bf4 <ld_word>
 8008b76:	4603      	mov	r3, r0
 8008b78:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d109      	bne.n	8008b96 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7ff f834 	bl	8007bf4 <ld_word>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	041b      	lsls	r3, r3, #16
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008b96:	68fb      	ldr	r3, [r7, #12]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	331a      	adds	r3, #26
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	b292      	uxth	r2, r2
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7ff f857 	bl	8007c6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d109      	bne.n	8008bd8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f103 0214 	add.w	r2, r3, #20
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4610      	mov	r0, r2
 8008bd4:	f7ff f849 	bl	8007c6a <st_word>
	}
}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008bee:	2100      	movs	r1, #0
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff fe2f 	bl	8008854 <dir_sdi>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d001      	beq.n	8008c04 <dir_find+0x24>
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	e03e      	b.n	8008c82 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6938      	ldr	r0, [r7, #16]
 8008c0c:	f7ff faa2 	bl	8008154 <move_window>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d12f      	bne.n	8008c7a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d102      	bne.n	8008c2e <dir_find+0x4e>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	75fb      	strb	r3, [r7, #23]
 8008c2c:	e028      	b.n	8008c80 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a1b      	ldr	r3, [r3, #32]
 8008c32:	330b      	adds	r3, #11
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	330b      	adds	r3, #11
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	f003 0308 	and.w	r3, r3, #8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10a      	bne.n	8008c66 <dir_find+0x86>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a18      	ldr	r0, [r3, #32]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3324      	adds	r3, #36	; 0x24
 8008c58:	220b      	movs	r2, #11
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	f7ff f888 	bl	8007d70 <mem_cmp>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00b      	beq.n	8008c7e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008c66:	2100      	movs	r1, #0
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fe6e 	bl	800894a <dir_next>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008c72:	7dfb      	ldrb	r3, [r7, #23]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d0c5      	beq.n	8008c04 <dir_find+0x24>
 8008c78:	e002      	b.n	8008c80 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008c7e:	bf00      	nop

	return res;
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008c98:	2101      	movs	r1, #1
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff ff1a 	bl	8008ad4 <dir_alloc>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d11c      	bne.n	8008ce4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69db      	ldr	r3, [r3, #28]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f7ff fa4f 	bl	8008154 <move_window>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d111      	bne.n	8008ce4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff f836 	bl	8007d3a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a18      	ldr	r0, [r3, #32]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	3324      	adds	r3, #36	; 0x24
 8008cd6:	220b      	movs	r2, #11
 8008cd8:	4619      	mov	r1, r3
 8008cda:	f7ff f80d 	bl	8007cf8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3324      	adds	r3, #36	; 0x24
 8008d04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008d06:	220b      	movs	r2, #11
 8008d08:	2120      	movs	r1, #32
 8008d0a:	68b8      	ldr	r0, [r7, #8]
 8008d0c:	f7ff f815 	bl	8007d3a <mem_set>
	si = i = 0; ni = 8;
 8008d10:	2300      	movs	r3, #0
 8008d12:	613b      	str	r3, [r7, #16]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	2308      	movs	r3, #8
 8008d1a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	61fa      	str	r2, [r7, #28]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	4413      	add	r3, r2
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d2a:	7efb      	ldrb	r3, [r7, #27]
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d94e      	bls.n	8008dce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008d30:	7efb      	ldrb	r3, [r7, #27]
 8008d32:	2b2f      	cmp	r3, #47	; 0x2f
 8008d34:	d006      	beq.n	8008d44 <create_name+0x54>
 8008d36:	7efb      	ldrb	r3, [r7, #27]
 8008d38:	2b5c      	cmp	r3, #92	; 0x5c
 8008d3a:	d110      	bne.n	8008d5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008d3c:	e002      	b.n	8008d44 <create_name+0x54>
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3301      	adds	r3, #1
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	4413      	add	r3, r2
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8008d4e:	d0f6      	beq.n	8008d3e <create_name+0x4e>
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b5c      	cmp	r3, #92	; 0x5c
 8008d5a:	d0f0      	beq.n	8008d3e <create_name+0x4e>
			break;
 8008d5c:	e038      	b.n	8008dd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008d5e:	7efb      	ldrb	r3, [r7, #27]
 8008d60:	2b2e      	cmp	r3, #46	; 0x2e
 8008d62:	d003      	beq.n	8008d6c <create_name+0x7c>
 8008d64:	693a      	ldr	r2, [r7, #16]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d30c      	bcc.n	8008d86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	2b0b      	cmp	r3, #11
 8008d70:	d002      	beq.n	8008d78 <create_name+0x88>
 8008d72:	7efb      	ldrb	r3, [r7, #27]
 8008d74:	2b2e      	cmp	r3, #46	; 0x2e
 8008d76:	d001      	beq.n	8008d7c <create_name+0x8c>
 8008d78:	2306      	movs	r3, #6
 8008d7a:	e044      	b.n	8008e06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008d7c:	2308      	movs	r3, #8
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	230b      	movs	r3, #11
 8008d82:	617b      	str	r3, [r7, #20]
			continue;
 8008d84:	e022      	b.n	8008dcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008d86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da04      	bge.n	8008d98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008d8e:	7efb      	ldrb	r3, [r7, #27]
 8008d90:	3b80      	subs	r3, #128	; 0x80
 8008d92:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <create_name+0x120>)
 8008d94:	5cd3      	ldrb	r3, [r2, r3]
 8008d96:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008d98:	7efb      	ldrb	r3, [r7, #27]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	481d      	ldr	r0, [pc, #116]	; (8008e14 <create_name+0x124>)
 8008d9e:	f7ff f80e 	bl	8007dbe <chk_chr>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <create_name+0xbc>
 8008da8:	2306      	movs	r3, #6
 8008daa:	e02c      	b.n	8008e06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008dac:	7efb      	ldrb	r3, [r7, #27]
 8008dae:	2b60      	cmp	r3, #96	; 0x60
 8008db0:	d905      	bls.n	8008dbe <create_name+0xce>
 8008db2:	7efb      	ldrb	r3, [r7, #27]
 8008db4:	2b7a      	cmp	r3, #122	; 0x7a
 8008db6:	d802      	bhi.n	8008dbe <create_name+0xce>
 8008db8:	7efb      	ldrb	r3, [r7, #27]
 8008dba:	3b20      	subs	r3, #32
 8008dbc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	613a      	str	r2, [r7, #16]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	7efa      	ldrb	r2, [r7, #27]
 8008dca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008dcc:	e7a6      	b.n	8008d1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008dce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d101      	bne.n	8008de4 <create_name+0xf4>
 8008de0:	2306      	movs	r3, #6
 8008de2:	e010      	b.n	8008e06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	2be5      	cmp	r3, #229	; 0xe5
 8008dea:	d102      	bne.n	8008df2 <create_name+0x102>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2205      	movs	r2, #5
 8008df0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008df2:	7efb      	ldrb	r3, [r7, #27]
 8008df4:	2b20      	cmp	r3, #32
 8008df6:	d801      	bhi.n	8008dfc <create_name+0x10c>
 8008df8:	2204      	movs	r2, #4
 8008dfa:	e000      	b.n	8008dfe <create_name+0x10e>
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	330b      	adds	r3, #11
 8008e02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3720      	adds	r7, #32
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0800d338 	.word	0x0800d338
 8008e14:	0800ccd0 	.word	0x0800ccd0

08008e18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e2c:	e002      	b.n	8008e34 <follow_path+0x1c>
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	2b2f      	cmp	r3, #47	; 0x2f
 8008e3a:	d0f8      	beq.n	8008e2e <follow_path+0x16>
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b5c      	cmp	r3, #92	; 0x5c
 8008e42:	d0f4      	beq.n	8008e2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2200      	movs	r2, #0
 8008e48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b1f      	cmp	r3, #31
 8008e50:	d80a      	bhi.n	8008e68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2280      	movs	r2, #128	; 0x80
 8008e56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fcf9 	bl	8008854 <dir_sdi>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]
 8008e66:	e043      	b.n	8008ef0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e68:	463b      	mov	r3, r7
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff3f 	bl	8008cf0 <create_name>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d134      	bne.n	8008ee6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff feaf 	bl	8008be0 <dir_find>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008e8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00a      	beq.n	8008eaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d127      	bne.n	8008eea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d122      	bne.n	8008eea <follow_path+0xd2>
 8008ea4:	2305      	movs	r3, #5
 8008ea6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008ea8:	e01f      	b.n	8008eea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d11c      	bne.n	8008eee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	799b      	ldrb	r3, [r3, #6]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008ec0:	2305      	movs	r3, #5
 8008ec2:	75fb      	strb	r3, [r7, #23]
 8008ec4:	e014      	b.n	8008ef0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed4:	4413      	add	r3, r2
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fe42 	bl	8008b62 <ld_clust>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ee4:	e7c0      	b.n	8008e68 <follow_path+0x50>
			if (res != FR_OK) break;
 8008ee6:	bf00      	nop
 8008ee8:	e002      	b.n	8008ef0 <follow_path+0xd8>
				break;
 8008eea:	bf00      	nop
 8008eec:	e000      	b.n	8008ef0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008eee:	bf00      	nop
			}
		}
	}

	return res;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d031      	beq.n	8008f74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	e002      	b.n	8008f1e <get_ldnumber+0x24>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d903      	bls.n	8008f2e <get_ldnumber+0x34>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b3a      	cmp	r3, #58	; 0x3a
 8008f2c:	d1f4      	bne.n	8008f18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b3a      	cmp	r3, #58	; 0x3a
 8008f34:	d11c      	bne.n	8008f70 <get_ldnumber+0x76>
			tp = *path;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	60fa      	str	r2, [r7, #12]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	3b30      	subs	r3, #48	; 0x30
 8008f46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b09      	cmp	r3, #9
 8008f4c:	d80e      	bhi.n	8008f6c <get_ldnumber+0x72>
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d10a      	bne.n	8008f6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d107      	bne.n	8008f6c <get_ldnumber+0x72>
					vol = (int)i;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3301      	adds	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	e002      	b.n	8008f76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f70:	2300      	movs	r3, #0
 8008f72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f74:	693b      	ldr	r3, [r7, #16]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
	...

08008f84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	70da      	strb	r2, [r3, #3]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f8d8 	bl	8008154 <move_window>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <check_fs+0x2a>
 8008faa:	2304      	movs	r3, #4
 8008fac:	e038      	b.n	8009020 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3330      	adds	r3, #48	; 0x30
 8008fb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe fe1c 	bl	8007bf4 <ld_word>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d001      	beq.n	8008fcc <check_fs+0x48>
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e029      	b.n	8009020 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fd2:	2be9      	cmp	r3, #233	; 0xe9
 8008fd4:	d009      	beq.n	8008fea <check_fs+0x66>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008fdc:	2beb      	cmp	r3, #235	; 0xeb
 8008fde:	d11e      	bne.n	800901e <check_fs+0x9a>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008fe6:	2b90      	cmp	r3, #144	; 0x90
 8008fe8:	d119      	bne.n	800901e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3330      	adds	r3, #48	; 0x30
 8008fee:	3336      	adds	r3, #54	; 0x36
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe fe17 	bl	8007c24 <ld_dword>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008ffc:	4a0a      	ldr	r2, [pc, #40]	; (8009028 <check_fs+0xa4>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d101      	bne.n	8009006 <check_fs+0x82>
 8009002:	2300      	movs	r3, #0
 8009004:	e00c      	b.n	8009020 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3330      	adds	r3, #48	; 0x30
 800900a:	3352      	adds	r3, #82	; 0x52
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe fe09 	bl	8007c24 <ld_dword>
 8009012:	4603      	mov	r3, r0
 8009014:	4a05      	ldr	r2, [pc, #20]	; (800902c <check_fs+0xa8>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d101      	bne.n	800901e <check_fs+0x9a>
 800901a:	2300      	movs	r3, #0
 800901c:	e000      	b.n	8009020 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800901e:	2302      	movs	r3, #2
}
 8009020:	4618      	mov	r0, r3
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	00544146 	.word	0x00544146
 800902c:	33544146 	.word	0x33544146

08009030 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b096      	sub	sp, #88	; 0x58
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f7ff ff58 	bl	8008efa <get_ldnumber>
 800904a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800904c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904e:	2b00      	cmp	r3, #0
 8009050:	da01      	bge.n	8009056 <find_volume+0x26>
 8009052:	230b      	movs	r3, #11
 8009054:	e22e      	b.n	80094b4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009056:	4aa8      	ldr	r2, [pc, #672]	; (80092f8 <find_volume+0x2c8>)
 8009058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800905e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <find_volume+0x3a>
 8009066:	230c      	movs	r3, #12
 8009068:	e224      	b.n	80094b4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800906e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	f023 0301 	bic.w	r3, r3, #1
 8009076:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01a      	beq.n	80090b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	4618      	mov	r0, r3
 8009086:	f7fe fd17 	bl	8007ab8 <disk_status>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10c      	bne.n	80090b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <find_volume+0x82>
 80090a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80090ae:	230a      	movs	r3, #10
 80090b0:	e200      	b.n	80094b4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80090b2:	2300      	movs	r3, #0
 80090b4:	e1fe      	b.n	80094b4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80090b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b8:	2200      	movs	r2, #0
 80090ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80090bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fd0f 	bl	8007aec <disk_initialize>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090d8:	f003 0301 	and.w	r3, r3, #1
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090e0:	2303      	movs	r3, #3
 80090e2:	e1e7      	b.n	80094b4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d007      	beq.n	80090fa <find_volume+0xca>
 80090ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80090f6:	230a      	movs	r3, #10
 80090f8:	e1dc      	b.n	80094b4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009102:	f7ff ff3f 	bl	8008f84 <check_fs>
 8009106:	4603      	mov	r3, r0
 8009108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800910c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009110:	2b02      	cmp	r3, #2
 8009112:	d14b      	bne.n	80091ac <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009114:	2300      	movs	r3, #0
 8009116:	643b      	str	r3, [r7, #64]	; 0x40
 8009118:	e01f      	b.n	800915a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800911a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009128:	4413      	add	r3, r2
 800912a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	3304      	adds	r3, #4
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d006      	beq.n	8009144 <find_volume+0x114>
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	3308      	adds	r3, #8
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fd72 	bl	8007c24 <ld_dword>
 8009140:	4602      	mov	r2, r0
 8009142:	e000      	b.n	8009146 <find_volume+0x116>
 8009144:	2200      	movs	r2, #0
 8009146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800914e:	440b      	add	r3, r1
 8009150:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009156:	3301      	adds	r3, #1
 8009158:	643b      	str	r3, [r7, #64]	; 0x40
 800915a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800915c:	2b03      	cmp	r3, #3
 800915e:	d9dc      	bls.n	800911a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009160:	2300      	movs	r3, #0
 8009162:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <find_volume+0x140>
 800916a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800916c:	3b01      	subs	r3, #1
 800916e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009178:	4413      	add	r3, r2
 800917a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800917e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <find_volume+0x162>
 8009186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800918a:	f7ff fefb 	bl	8008f84 <check_fs>
 800918e:	4603      	mov	r3, r0
 8009190:	e000      	b.n	8009194 <find_volume+0x164>
 8009192:	2303      	movs	r3, #3
 8009194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800919c:	2b01      	cmp	r3, #1
 800919e:	d905      	bls.n	80091ac <find_volume+0x17c>
 80091a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a2:	3301      	adds	r3, #1
 80091a4:	643b      	str	r3, [r7, #64]	; 0x40
 80091a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d9e1      	bls.n	8009170 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80091ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d101      	bne.n	80091b8 <find_volume+0x188>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e17d      	b.n	80094b4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80091b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d901      	bls.n	80091c4 <find_volume+0x194>
 80091c0:	230d      	movs	r3, #13
 80091c2:	e177      	b.n	80094b4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	3330      	adds	r3, #48	; 0x30
 80091c8:	330b      	adds	r3, #11
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7fe fd12 	bl	8007bf4 <ld_word>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091d6:	d001      	beq.n	80091dc <find_volume+0x1ac>
 80091d8:	230d      	movs	r3, #13
 80091da:	e16b      	b.n	80094b4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	3330      	adds	r3, #48	; 0x30
 80091e0:	3316      	adds	r3, #22
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fd06 	bl	8007bf4 <ld_word>
 80091e8:	4603      	mov	r3, r0
 80091ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <find_volume+0x1d0>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	3330      	adds	r3, #48	; 0x30
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fe fd13 	bl	8007c24 <ld_dword>
 80091fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009204:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	789b      	ldrb	r3, [r3, #2]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d005      	beq.n	8009224 <find_volume+0x1f4>
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	789b      	ldrb	r3, [r3, #2]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d001      	beq.n	8009224 <find_volume+0x1f4>
 8009220:	230d      	movs	r3, #13
 8009222:	e147      	b.n	80094b4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	789b      	ldrb	r3, [r3, #2]
 8009228:	461a      	mov	r2, r3
 800922a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922c:	fb02 f303 	mul.w	r3, r2, r3
 8009230:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009238:	b29a      	uxth	r2, r3
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800923e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009240:	895b      	ldrh	r3, [r3, #10]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d008      	beq.n	8009258 <find_volume+0x228>
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	895b      	ldrh	r3, [r3, #10]
 800924a:	461a      	mov	r2, r3
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	895b      	ldrh	r3, [r3, #10]
 8009250:	3b01      	subs	r3, #1
 8009252:	4013      	ands	r3, r2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <find_volume+0x22c>
 8009258:	230d      	movs	r3, #13
 800925a:	e12b      	b.n	80094b4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	3330      	adds	r3, #48	; 0x30
 8009260:	3311      	adds	r3, #17
 8009262:	4618      	mov	r0, r3
 8009264:	f7fe fcc6 	bl	8007bf4 <ld_word>
 8009268:	4603      	mov	r3, r0
 800926a:	461a      	mov	r2, r3
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <find_volume+0x252>
 800927e:	230d      	movs	r3, #13
 8009280:	e118      	b.n	80094b4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	3330      	adds	r3, #48	; 0x30
 8009286:	3313      	adds	r3, #19
 8009288:	4618      	mov	r0, r3
 800928a:	f7fe fcb3 	bl	8007bf4 <ld_word>
 800928e:	4603      	mov	r3, r0
 8009290:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009294:	2b00      	cmp	r3, #0
 8009296:	d106      	bne.n	80092a6 <find_volume+0x276>
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	3330      	adds	r3, #48	; 0x30
 800929c:	3320      	adds	r3, #32
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fe fcc0 	bl	8007c24 <ld_dword>
 80092a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	3330      	adds	r3, #48	; 0x30
 80092aa:	330e      	adds	r3, #14
 80092ac:	4618      	mov	r0, r3
 80092ae:	f7fe fca1 	bl	8007bf4 <ld_word>
 80092b2:	4603      	mov	r3, r0
 80092b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80092b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <find_volume+0x290>
 80092bc:	230d      	movs	r3, #13
 80092be:	e0f9      	b.n	80094b4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80092c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c4:	4413      	add	r3, r2
 80092c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092c8:	8912      	ldrh	r2, [r2, #8]
 80092ca:	0912      	lsrs	r2, r2, #4
 80092cc:	b292      	uxth	r2, r2
 80092ce:	4413      	add	r3, r2
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d201      	bcs.n	80092de <find_volume+0x2ae>
 80092da:	230d      	movs	r3, #13
 80092dc:	e0ea      	b.n	80094b4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092e6:	8952      	ldrh	r2, [r2, #10]
 80092e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d103      	bne.n	80092fc <find_volume+0x2cc>
 80092f4:	230d      	movs	r3, #13
 80092f6:	e0dd      	b.n	80094b4 <find_volume+0x484>
 80092f8:	20000620 	.word	0x20000620
		fmt = FS_FAT32;
 80092fc:	2303      	movs	r3, #3
 80092fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009308:	4293      	cmp	r3, r2
 800930a:	d802      	bhi.n	8009312 <find_volume+0x2e2>
 800930c:	2302      	movs	r3, #2
 800930e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009318:	4293      	cmp	r3, r2
 800931a:	d802      	bhi.n	8009322 <find_volume+0x2f2>
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	1c9a      	adds	r2, r3, #2
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800932a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800932e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009330:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009334:	441a      	add	r2, r3
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800933a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	441a      	add	r2, r3
 8009340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009342:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009348:	2b03      	cmp	r3, #3
 800934a:	d11e      	bne.n	800938a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800934c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934e:	3330      	adds	r3, #48	; 0x30
 8009350:	332a      	adds	r3, #42	; 0x2a
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fc4e 	bl	8007bf4 <ld_word>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <find_volume+0x332>
 800935e:	230d      	movs	r3, #13
 8009360:	e0a8      	b.n	80094b4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009364:	891b      	ldrh	r3, [r3, #8]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <find_volume+0x33e>
 800936a:	230d      	movs	r3, #13
 800936c:	e0a2      	b.n	80094b4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800936e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009370:	3330      	adds	r3, #48	; 0x30
 8009372:	332c      	adds	r3, #44	; 0x2c
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe fc55 	bl	8007c24 <ld_dword>
 800937a:	4602      	mov	r2, r0
 800937c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	647b      	str	r3, [r7, #68]	; 0x44
 8009388:	e01f      	b.n	80093ca <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	891b      	ldrh	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <find_volume+0x366>
 8009392:	230d      	movs	r3, #13
 8009394:	e08e      	b.n	80094b4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009398:	6a1a      	ldr	r2, [r3, #32]
 800939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939c:	441a      	add	r2, r3
 800939e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80093a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d103      	bne.n	80093b2 <find_volume+0x382>
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	005b      	lsls	r3, r3, #1
 80093b0:	e00a      	b.n	80093c8 <find_volume+0x398>
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	695a      	ldr	r2, [r3, #20]
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	085a      	lsrs	r2, r3, #1
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80093c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80093d4:	0a5b      	lsrs	r3, r3, #9
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d201      	bcs.n	80093de <find_volume+0x3ae>
 80093da:	230d      	movs	r3, #13
 80093dc:	e06a      	b.n	80094b4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	f04f 32ff 	mov.w	r2, #4294967295
 80093e4:	611a      	str	r2, [r3, #16]
 80093e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ec:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	2280      	movs	r2, #128	; 0x80
 80093f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093f8:	2b03      	cmp	r3, #3
 80093fa:	d149      	bne.n	8009490 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	3330      	adds	r3, #48	; 0x30
 8009400:	3330      	adds	r3, #48	; 0x30
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fbf6 	bl	8007bf4 <ld_word>
 8009408:	4603      	mov	r3, r0
 800940a:	2b01      	cmp	r3, #1
 800940c:	d140      	bne.n	8009490 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800940e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009410:	3301      	adds	r3, #1
 8009412:	4619      	mov	r1, r3
 8009414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009416:	f7fe fe9d 	bl	8008154 <move_window>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d137      	bne.n	8009490 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	2200      	movs	r2, #0
 8009424:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	3330      	adds	r3, #48	; 0x30
 800942a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe fbe0 	bl	8007bf4 <ld_word>
 8009434:	4603      	mov	r3, r0
 8009436:	461a      	mov	r2, r3
 8009438:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800943c:	429a      	cmp	r2, r3
 800943e:	d127      	bne.n	8009490 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009442:	3330      	adds	r3, #48	; 0x30
 8009444:	4618      	mov	r0, r3
 8009446:	f7fe fbed 	bl	8007c24 <ld_dword>
 800944a:	4603      	mov	r3, r0
 800944c:	4a1b      	ldr	r2, [pc, #108]	; (80094bc <find_volume+0x48c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d11e      	bne.n	8009490 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009454:	3330      	adds	r3, #48	; 0x30
 8009456:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fbe2 	bl	8007c24 <ld_dword>
 8009460:	4603      	mov	r3, r0
 8009462:	4a17      	ldr	r2, [pc, #92]	; (80094c0 <find_volume+0x490>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d113      	bne.n	8009490 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	3330      	adds	r3, #48	; 0x30
 800946c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fbd7 	bl	8007c24 <ld_dword>
 8009476:	4602      	mov	r2, r0
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	3330      	adds	r3, #48	; 0x30
 8009480:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe fbcd 	bl	8007c24 <ld_dword>
 800948a:	4602      	mov	r2, r0
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009496:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <find_volume+0x494>)
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	3301      	adds	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <find_volume+0x494>)
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <find_volume+0x494>)
 80094a6:	881a      	ldrh	r2, [r3, #0]
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80094ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ae:	f7fe fde9 	bl	8008084 <clear_lock>
#endif
	return FR_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3758      	adds	r7, #88	; 0x58
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	41615252 	.word	0x41615252
 80094c0:	61417272 	.word	0x61417272
 80094c4:	20000624 	.word	0x20000624

080094c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094d2:	2309      	movs	r3, #9
 80094d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01c      	beq.n	8009516 <validate+0x4e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d018      	beq.n	8009516 <validate+0x4e>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d013      	beq.n	8009516 <validate+0x4e>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	889a      	ldrh	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	88db      	ldrh	r3, [r3, #6]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d10c      	bne.n	8009516 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe fad8 	bl	8007ab8 <disk_status>
 8009508:	4603      	mov	r3, r0
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <validate+0x4e>
			res = FR_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <validate+0x5a>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	e000      	b.n	8009524 <validate+0x5c>
 8009522:	2300      	movs	r3, #0
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	6013      	str	r3, [r2, #0]
	return res;
 8009528:	7bfb      	ldrb	r3, [r7, #15]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3710      	adds	r7, #16
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009546:	f107 0310 	add.w	r3, r7, #16
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff fcd5 	bl	8008efa <get_ldnumber>
 8009550:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	2b00      	cmp	r3, #0
 8009556:	da01      	bge.n	800955c <f_mount+0x28>
 8009558:	230b      	movs	r3, #11
 800955a:	e02b      	b.n	80095b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800955c:	4a17      	ldr	r2, [pc, #92]	; (80095bc <f_mount+0x88>)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009564:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d005      	beq.n	8009578 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800956c:	69b8      	ldr	r0, [r7, #24]
 800956e:	f7fe fd89 	bl	8008084 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	490d      	ldr	r1, [pc, #52]	; (80095bc <f_mount+0x88>)
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <f_mount+0x66>
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d001      	beq.n	800959e <f_mount+0x6a>
 800959a:	2300      	movs	r3, #0
 800959c:	e00a      	b.n	80095b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800959e:	f107 010c 	add.w	r1, r7, #12
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	2200      	movs	r2, #0
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7ff fd41 	bl	8009030 <find_volume>
 80095ae:	4603      	mov	r3, r0
 80095b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3720      	adds	r7, #32
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20000620 	.word	0x20000620

080095c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b098      	sub	sp, #96	; 0x60
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <f_open+0x18>
 80095d4:	2309      	movs	r3, #9
 80095d6:	e1ad      	b.n	8009934 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80095e0:	79fa      	ldrb	r2, [r7, #7]
 80095e2:	f107 0110 	add.w	r1, r7, #16
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fd20 	bl	8009030 <find_volume>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80095f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f040 8191 	bne.w	8009922 <f_open+0x362>
		dj.obj.fs = fs;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	f107 0314 	add.w	r3, r7, #20
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff fc03 	bl	8008e18 <follow_path>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800961c:	2b00      	cmp	r3, #0
 800961e:	d11a      	bne.n	8009656 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009620:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009624:	b25b      	sxtb	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	da03      	bge.n	8009632 <f_open+0x72>
				res = FR_INVALID_NAME;
 800962a:	2306      	movs	r3, #6
 800962c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009630:	e011      	b.n	8009656 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf14      	ite	ne
 800963c:	2301      	movne	r3, #1
 800963e:	2300      	moveq	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	4611      	mov	r1, r2
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fbd2 	bl	8007df4 <chk_lock>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009656:	79fb      	ldrb	r3, [r7, #7]
 8009658:	f003 031c 	and.w	r3, r3, #28
 800965c:	2b00      	cmp	r3, #0
 800965e:	d07f      	beq.n	8009760 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009664:	2b00      	cmp	r3, #0
 8009666:	d017      	beq.n	8009698 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800966c:	2b04      	cmp	r3, #4
 800966e:	d10e      	bne.n	800968e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009670:	f7fe fc1c 	bl	8007eac <enq_lock>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <f_open+0xc8>
 800967a:	f107 0314 	add.w	r3, r7, #20
 800967e:	4618      	mov	r0, r3
 8009680:	f7ff fb03 	bl	8008c8a <dir_register>
 8009684:	4603      	mov	r3, r0
 8009686:	e000      	b.n	800968a <f_open+0xca>
 8009688:	2312      	movs	r3, #18
 800968a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	f043 0308 	orr.w	r3, r3, #8
 8009694:	71fb      	strb	r3, [r7, #7]
 8009696:	e010      	b.n	80096ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009698:	7ebb      	ldrb	r3, [r7, #26]
 800969a:	f003 0311 	and.w	r3, r3, #17
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <f_open+0xea>
					res = FR_DENIED;
 80096a2:	2307      	movs	r3, #7
 80096a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80096a8:	e007      	b.n	80096ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <f_open+0xfa>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d168      	bne.n	8009794 <f_open+0x1d4>
 80096c2:	79fb      	ldrb	r3, [r7, #7]
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d063      	beq.n	8009794 <f_open+0x1d4>
				dw = GET_FATTIME();
 80096cc:	f7fd fcb8 	bl	8007040 <get_fattime>
 80096d0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096d4:	330e      	adds	r3, #14
 80096d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe fae1 	bl	8007ca0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e0:	3316      	adds	r3, #22
 80096e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7fe fadb 	bl	8007ca0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	330b      	adds	r3, #11
 80096ee:	2220      	movs	r2, #32
 80096f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7ff fa32 	bl	8008b62 <ld_clust>
 80096fe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009704:	2200      	movs	r2, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fa4a 	bl	8008ba0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800970c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970e:	331c      	adds	r3, #28
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f7fe fac4 	bl	8007ca0 <st_dword>
					fs->wflag = 1;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2201      	movs	r2, #1
 800971c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800971e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d037      	beq.n	8009794 <f_open+0x1d4>
						dw = fs->winsect;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009728:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800972a:	f107 0314 	add.w	r3, r7, #20
 800972e:	2200      	movs	r2, #0
 8009730:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe ff5d 	bl	80085f2 <remove_chain>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800973e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009742:	2b00      	cmp	r3, #0
 8009744:	d126      	bne.n	8009794 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fd02 	bl	8008154 <move_window>
 8009750:	4603      	mov	r3, r0
 8009752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800975a:	3a01      	subs	r2, #1
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	e019      	b.n	8009794 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009760:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009764:	2b00      	cmp	r3, #0
 8009766:	d115      	bne.n	8009794 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009768:	7ebb      	ldrb	r3, [r7, #26]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009772:	2304      	movs	r3, #4
 8009774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009778:	e00c      	b.n	8009794 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	f003 0302 	and.w	r3, r3, #2
 8009780:	2b00      	cmp	r3, #0
 8009782:	d007      	beq.n	8009794 <f_open+0x1d4>
 8009784:	7ebb      	ldrb	r3, [r7, #26]
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <f_open+0x1d4>
						res = FR_DENIED;
 800978e:	2307      	movs	r3, #7
 8009790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009794:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009798:	2b00      	cmp	r3, #0
 800979a:	d128      	bne.n	80097ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80097b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	f023 0301 	bic.w	r3, r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bf14      	ite	ne
 80097c6:	2301      	movne	r3, #1
 80097c8:	2300      	moveq	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	f107 0314 	add.w	r3, r7, #20
 80097d2:	4611      	mov	r1, r2
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe fb8b 	bl	8007ef0 <inc_lock>
 80097da:	4602      	mov	r2, r0
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d102      	bne.n	80097ee <f_open+0x22e>
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80097ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f040 8095 	bne.w	8009922 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097fc:	4611      	mov	r1, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7ff f9af 	bl	8008b62 <ld_clust>
 8009804:	4602      	mov	r2, r0
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	331c      	adds	r3, #28
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fa08 	bl	8007c24 <ld_dword>
 8009814:	4602      	mov	r2, r0
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	88da      	ldrh	r2, [r3, #6]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	79fa      	ldrb	r2, [r7, #7]
 8009832:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3330      	adds	r3, #48	; 0x30
 800984a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800984e:	2100      	movs	r1, #0
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fa72 	bl	8007d3a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f003 0320 	and.w	r3, r3, #32
 800985c:	2b00      	cmp	r3, #0
 800985e:	d060      	beq.n	8009922 <f_open+0x362>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d05c      	beq.n	8009922 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68da      	ldr	r2, [r3, #12]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	895b      	ldrh	r3, [r3, #10]
 8009874:	025b      	lsls	r3, r3, #9
 8009876:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	657b      	str	r3, [r7, #84]	; 0x54
 8009884:	e016      	b.n	80098b4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fd1d 	bl	80082ca <get_fat>
 8009890:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009894:	2b01      	cmp	r3, #1
 8009896:	d802      	bhi.n	800989e <f_open+0x2de>
 8009898:	2302      	movs	r3, #2
 800989a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800989e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d102      	bne.n	80098ac <f_open+0x2ec>
 80098a6:	2301      	movs	r3, #1
 80098a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	657b      	str	r3, [r7, #84]	; 0x54
 80098b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <f_open+0x304>
 80098bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d8e0      	bhi.n	8009886 <f_open+0x2c6>
				}
				fp->clust = clst;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098c8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80098ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d127      	bne.n	8009922 <f_open+0x362>
 80098d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fcd3 	bl	800828c <clust2sect>
 80098e6:	6478      	str	r0, [r7, #68]	; 0x44
 80098e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d103      	bne.n	80098f6 <f_open+0x336>
						res = FR_INT_ERR;
 80098ee:	2302      	movs	r3, #2
 80098f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80098f4:	e015      	b.n	8009922 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80098f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f8:	0a5a      	lsrs	r2, r3, #9
 80098fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fc:	441a      	add	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	7858      	ldrb	r0, [r3, #1]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a1a      	ldr	r2, [r3, #32]
 8009910:	2301      	movs	r3, #1
 8009912:	f7fe f911 	bl	8007b38 <disk_read>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <f_open+0x362>
 800991c:	2301      	movs	r3, #1
 800991e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <f_open+0x370>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2200      	movs	r2, #0
 800992e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009934:	4618      	mov	r0, r3
 8009936:	3760      	adds	r7, #96	; 0x60
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b08c      	sub	sp, #48	; 0x30
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f107 0210 	add.w	r2, r7, #16
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fdb3 	bl	80094c8 <validate>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800996c:	2b00      	cmp	r3, #0
 800996e:	d107      	bne.n	8009980 <f_write+0x44>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	7d5b      	ldrb	r3, [r3, #21]
 8009974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <f_write+0x4a>
 8009980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009984:	e14b      	b.n	8009c1e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	7d1b      	ldrb	r3, [r3, #20]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <f_write+0x5a>
 8009992:	2307      	movs	r3, #7
 8009994:	e143      	b.n	8009c1e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	699a      	ldr	r2, [r3, #24]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	441a      	add	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	f080 812d 	bcs.w	8009c02 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	43db      	mvns	r3, r3
 80099ae:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80099b0:	e127      	b.n	8009c02 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f040 80e3 	bne.w	8009b86 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	0a5b      	lsrs	r3, r3, #9
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	8952      	ldrh	r2, [r2, #10]
 80099ca:	3a01      	subs	r2, #1
 80099cc:	4013      	ands	r3, r2
 80099ce:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d143      	bne.n	8009a5e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10c      	bne.n	80099f8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d11a      	bne.n	8009a20 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fe64 	bl	80086bc <create_chain>
 80099f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80099f6:	e013      	b.n	8009a20 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d007      	beq.n	8009a10 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	4619      	mov	r1, r3
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7fe fef0 	bl	80087ec <clmt_clust>
 8009a0c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a0e:	e007      	b.n	8009a20 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	4619      	mov	r1, r3
 8009a18:	4610      	mov	r0, r2
 8009a1a:	f7fe fe4f 	bl	80086bc <create_chain>
 8009a1e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80f2 	beq.w	8009c0c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d104      	bne.n	8009a38 <f_write+0xfc>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2202      	movs	r2, #2
 8009a32:	755a      	strb	r2, [r3, #21]
 8009a34:	2302      	movs	r3, #2
 8009a36:	e0f2      	b.n	8009c1e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3e:	d104      	bne.n	8009a4a <f_write+0x10e>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	755a      	strb	r2, [r3, #21]
 8009a46:	2301      	movs	r3, #1
 8009a48:	e0e9      	b.n	8009c1e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <f_write+0x122>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a5c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	7d1b      	ldrb	r3, [r3, #20]
 8009a62:	b25b      	sxtb	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	da18      	bge.n	8009a9a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	7858      	ldrb	r0, [r3, #1]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a1a      	ldr	r2, [r3, #32]
 8009a76:	2301      	movs	r3, #1
 8009a78:	f7fe f87e 	bl	8007b78 <disk_write>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d004      	beq.n	8009a8c <f_write+0x150>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2201      	movs	r2, #1
 8009a86:	755a      	strb	r2, [r3, #21]
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e0c8      	b.n	8009c1e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4610      	mov	r0, r2
 8009aa4:	f7fe fbf2 	bl	800828c <clust2sect>
 8009aa8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d104      	bne.n	8009aba <f_write+0x17e>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2202      	movs	r2, #2
 8009ab4:	755a      	strb	r2, [r3, #21]
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e0b1      	b.n	8009c1e <f_write+0x2e2>
			sect += csect;
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	4413      	add	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0a5b      	lsrs	r3, r3, #9
 8009ac6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d03c      	beq.n	8009b48 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	6a3b      	ldr	r3, [r7, #32]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	8952      	ldrh	r2, [r2, #10]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d905      	bls.n	8009ae8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	895b      	ldrh	r3, [r3, #10]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	7858      	ldrb	r0, [r3, #1]
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	69f9      	ldr	r1, [r7, #28]
 8009af2:	f7fe f841 	bl	8007b78 <disk_write>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <f_write+0x1ca>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	755a      	strb	r2, [r3, #21]
 8009b02:	2301      	movs	r3, #1
 8009b04:	e08b      	b.n	8009c1e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a1a      	ldr	r2, [r3, #32]
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d915      	bls.n	8009b40 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	025b      	lsls	r3, r3, #9
 8009b24:	69fa      	ldr	r2, [r7, #28]
 8009b26:	4413      	add	r3, r2
 8009b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f7fe f8e3 	bl	8007cf8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	7d1b      	ldrb	r3, [r3, #20]
 8009b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	025b      	lsls	r3, r3, #9
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009b46:	e03f      	b.n	8009bc8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d016      	beq.n	8009b80 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d210      	bcs.n	8009b80 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	7858      	ldrb	r0, [r3, #1]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009b68:	2301      	movs	r3, #1
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	f7fd ffe4 	bl	8007b38 <disk_read>
 8009b70:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d004      	beq.n	8009b80 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	755a      	strb	r2, [r3, #21]
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e04e      	b.n	8009c1e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d901      	bls.n	8009ba0 <f_write+0x264>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bae:	4413      	add	r3, r2
 8009bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb2:	69f9      	ldr	r1, [r7, #28]
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe f89f 	bl	8007cf8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	7d1b      	ldrb	r3, [r3, #20]
 8009bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009bc8:	69fa      	ldr	r2, [r7, #28]
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bcc:	4413      	add	r3, r2
 8009bce:	61fb      	str	r3, [r7, #28]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd6:	441a      	add	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	619a      	str	r2, [r3, #24]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bf38      	it	cc
 8009be8:	461a      	movcc	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	60da      	str	r2, [r3, #12]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	441a      	add	r2, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f47f aed4 	bne.w	80099b2 <f_write+0x76>
 8009c0a:	e000      	b.n	8009c0e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c0c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	7d1b      	ldrb	r3, [r3, #20]
 8009c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3730      	adds	r7, #48	; 0x30
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b086      	sub	sp, #24
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f107 0208 	add.w	r2, r7, #8
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fc46 	bl	80094c8 <validate>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d168      	bne.n	8009d18 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	7d1b      	ldrb	r3, [r3, #20]
 8009c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d062      	beq.n	8009d18 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	7d1b      	ldrb	r3, [r3, #20]
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da15      	bge.n	8009c88 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	7858      	ldrb	r0, [r3, #1]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1a      	ldr	r2, [r3, #32]
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	f7fd ff84 	bl	8007b78 <disk_write>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <f_sync+0x54>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e04f      	b.n	8009d1a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7d1b      	ldrb	r3, [r3, #20]
 8009c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009c88:	f7fd f9da 	bl	8007040 <get_fattime>
 8009c8c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	4619      	mov	r1, r3
 8009c96:	4610      	mov	r0, r2
 8009c98:	f7fe fa5c 	bl	8008154 <move_window>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009ca0:	7dfb      	ldrb	r3, [r7, #23]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d138      	bne.n	8009d18 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	330b      	adds	r3, #11
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	330b      	adds	r3, #11
 8009cb6:	f042 0220 	orr.w	r2, r2, #32
 8009cba:	b2d2      	uxtb	r2, r2
 8009cbc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	f7fe ff69 	bl	8008ba0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f103 021c 	add.w	r2, r3, #28
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fd ffe0 	bl	8007ca0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3316      	adds	r3, #22
 8009ce4:	6939      	ldr	r1, [r7, #16]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fd ffda 	bl	8007ca0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3312      	adds	r3, #18
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fd ffb9 	bl	8007c6a <st_word>
					fs->wflag = 1;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fe fa55 	bl	80081b0 <sync_fs>
 8009d06:	4603      	mov	r3, r0
 8009d08:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	7d1b      	ldrb	r3, [r3, #20]
 8009d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d12:	b2da      	uxtb	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b084      	sub	sp, #16
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff ff7b 	bl	8009c26 <f_sync>
 8009d30:	4603      	mov	r3, r0
 8009d32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d118      	bne.n	8009d6c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f107 0208 	add.w	r2, r7, #8
 8009d40:	4611      	mov	r1, r2
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fbc0 	bl	80094c8 <validate>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10c      	bne.n	8009d6c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe f958 	bl	800800c <dec_lock>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d102      	bne.n	8009d6c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d86:	2301      	movs	r3, #1
 8009d88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d8e:	4b1f      	ldr	r3, [pc, #124]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009d90:	7a5b      	ldrb	r3, [r3, #9]
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d131      	bne.n	8009dfc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d98:	4b1c      	ldr	r3, [pc, #112]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009d9a:	7a5b      	ldrb	r3, [r3, #9]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009da2:	2100      	movs	r1, #0
 8009da4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009da6:	4b19      	ldr	r3, [pc, #100]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009da8:	7a5b      	ldrb	r3, [r3, #9]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	4a17      	ldr	r2, [pc, #92]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009db6:	4b15      	ldr	r3, [pc, #84]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009db8:	7a5b      	ldrb	r3, [r3, #9]
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	79fa      	ldrb	r2, [r7, #7]
 8009dc4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009dc6:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dc8:	7a5b      	ldrb	r3, [r3, #9]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	b2d1      	uxtb	r1, r2
 8009dd0:	4a0e      	ldr	r2, [pc, #56]	; (8009e0c <FATFS_LinkDriverEx+0x94>)
 8009dd2:	7251      	strb	r1, [r2, #9]
 8009dd4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009dd6:	7dbb      	ldrb	r3, [r7, #22]
 8009dd8:	3330      	adds	r3, #48	; 0x30
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	3301      	adds	r3, #1
 8009de4:	223a      	movs	r2, #58	; 0x3a
 8009de6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	3302      	adds	r3, #2
 8009dec:	222f      	movs	r2, #47	; 0x2f
 8009dee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	3303      	adds	r3, #3
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000648 	.word	0x20000648

08009e10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	6839      	ldr	r1, [r7, #0]
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7ff ffaa 	bl	8009d78 <FATFS_LinkDriverEx>
 8009e24:	4603      	mov	r3, r0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <__errno>:
 8009e30:	4b01      	ldr	r3, [pc, #4]	; (8009e38 <__errno+0x8>)
 8009e32:	6818      	ldr	r0, [r3, #0]
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	20000024 	.word	0x20000024

08009e3c <__libc_init_array>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	4d0d      	ldr	r5, [pc, #52]	; (8009e74 <__libc_init_array+0x38>)
 8009e40:	4c0d      	ldr	r4, [pc, #52]	; (8009e78 <__libc_init_array+0x3c>)
 8009e42:	1b64      	subs	r4, r4, r5
 8009e44:	10a4      	asrs	r4, r4, #2
 8009e46:	2600      	movs	r6, #0
 8009e48:	42a6      	cmp	r6, r4
 8009e4a:	d109      	bne.n	8009e60 <__libc_init_array+0x24>
 8009e4c:	4d0b      	ldr	r5, [pc, #44]	; (8009e7c <__libc_init_array+0x40>)
 8009e4e:	4c0c      	ldr	r4, [pc, #48]	; (8009e80 <__libc_init_array+0x44>)
 8009e50:	f002 fed6 	bl	800cc00 <_init>
 8009e54:	1b64      	subs	r4, r4, r5
 8009e56:	10a4      	asrs	r4, r4, #2
 8009e58:	2600      	movs	r6, #0
 8009e5a:	42a6      	cmp	r6, r4
 8009e5c:	d105      	bne.n	8009e6a <__libc_init_array+0x2e>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e64:	4798      	blx	r3
 8009e66:	3601      	adds	r6, #1
 8009e68:	e7ee      	b.n	8009e48 <__libc_init_array+0xc>
 8009e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e6e:	4798      	blx	r3
 8009e70:	3601      	adds	r6, #1
 8009e72:	e7f2      	b.n	8009e5a <__libc_init_array+0x1e>
 8009e74:	0800d7a4 	.word	0x0800d7a4
 8009e78:	0800d7a4 	.word	0x0800d7a4
 8009e7c:	0800d7a4 	.word	0x0800d7a4
 8009e80:	0800d7a8 	.word	0x0800d7a8

08009e84 <memcpy>:
 8009e84:	440a      	add	r2, r1
 8009e86:	4291      	cmp	r1, r2
 8009e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e8c:	d100      	bne.n	8009e90 <memcpy+0xc>
 8009e8e:	4770      	bx	lr
 8009e90:	b510      	push	{r4, lr}
 8009e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e9a:	4291      	cmp	r1, r2
 8009e9c:	d1f9      	bne.n	8009e92 <memcpy+0xe>
 8009e9e:	bd10      	pop	{r4, pc}

08009ea0 <memset>:
 8009ea0:	4402      	add	r2, r0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d100      	bne.n	8009eaa <memset+0xa>
 8009ea8:	4770      	bx	lr
 8009eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8009eae:	e7f9      	b.n	8009ea4 <memset+0x4>

08009eb0 <__cvt>:
 8009eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb4:	ec55 4b10 	vmov	r4, r5, d0
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	460e      	mov	r6, r1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	bfbb      	ittet	lt
 8009ec2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ec6:	461d      	movlt	r5, r3
 8009ec8:	2300      	movge	r3, #0
 8009eca:	232d      	movlt	r3, #45	; 0x2d
 8009ecc:	700b      	strb	r3, [r1, #0]
 8009ece:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ed0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ed4:	4691      	mov	r9, r2
 8009ed6:	f023 0820 	bic.w	r8, r3, #32
 8009eda:	bfbc      	itt	lt
 8009edc:	4622      	movlt	r2, r4
 8009ede:	4614      	movlt	r4, r2
 8009ee0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ee4:	d005      	beq.n	8009ef2 <__cvt+0x42>
 8009ee6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eea:	d100      	bne.n	8009eee <__cvt+0x3e>
 8009eec:	3601      	adds	r6, #1
 8009eee:	2102      	movs	r1, #2
 8009ef0:	e000      	b.n	8009ef4 <__cvt+0x44>
 8009ef2:	2103      	movs	r1, #3
 8009ef4:	ab03      	add	r3, sp, #12
 8009ef6:	9301      	str	r3, [sp, #4]
 8009ef8:	ab02      	add	r3, sp, #8
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	ec45 4b10 	vmov	d0, r4, r5
 8009f00:	4653      	mov	r3, sl
 8009f02:	4632      	mov	r2, r6
 8009f04:	f000 fd0c 	bl	800a920 <_dtoa_r>
 8009f08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	d102      	bne.n	8009f16 <__cvt+0x66>
 8009f10:	f019 0f01 	tst.w	r9, #1
 8009f14:	d022      	beq.n	8009f5c <__cvt+0xac>
 8009f16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f1a:	eb07 0906 	add.w	r9, r7, r6
 8009f1e:	d110      	bne.n	8009f42 <__cvt+0x92>
 8009f20:	783b      	ldrb	r3, [r7, #0]
 8009f22:	2b30      	cmp	r3, #48	; 0x30
 8009f24:	d10a      	bne.n	8009f3c <__cvt+0x8c>
 8009f26:	2200      	movs	r2, #0
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	4629      	mov	r1, r5
 8009f2e:	f7f6 fdd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f32:	b918      	cbnz	r0, 8009f3c <__cvt+0x8c>
 8009f34:	f1c6 0601 	rsb	r6, r6, #1
 8009f38:	f8ca 6000 	str.w	r6, [sl]
 8009f3c:	f8da 3000 	ldr.w	r3, [sl]
 8009f40:	4499      	add	r9, r3
 8009f42:	2200      	movs	r2, #0
 8009f44:	2300      	movs	r3, #0
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 fdc5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f4e:	b108      	cbz	r0, 8009f54 <__cvt+0xa4>
 8009f50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f54:	2230      	movs	r2, #48	; 0x30
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	454b      	cmp	r3, r9
 8009f5a:	d307      	bcc.n	8009f6c <__cvt+0xbc>
 8009f5c:	9b03      	ldr	r3, [sp, #12]
 8009f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f60:	1bdb      	subs	r3, r3, r7
 8009f62:	4638      	mov	r0, r7
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	b004      	add	sp, #16
 8009f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6c:	1c59      	adds	r1, r3, #1
 8009f6e:	9103      	str	r1, [sp, #12]
 8009f70:	701a      	strb	r2, [r3, #0]
 8009f72:	e7f0      	b.n	8009f56 <__cvt+0xa6>

08009f74 <__exponent>:
 8009f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f76:	4603      	mov	r3, r0
 8009f78:	2900      	cmp	r1, #0
 8009f7a:	bfb8      	it	lt
 8009f7c:	4249      	neglt	r1, r1
 8009f7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009f82:	bfb4      	ite	lt
 8009f84:	222d      	movlt	r2, #45	; 0x2d
 8009f86:	222b      	movge	r2, #43	; 0x2b
 8009f88:	2909      	cmp	r1, #9
 8009f8a:	7042      	strb	r2, [r0, #1]
 8009f8c:	dd2a      	ble.n	8009fe4 <__exponent+0x70>
 8009f8e:	f10d 0407 	add.w	r4, sp, #7
 8009f92:	46a4      	mov	ip, r4
 8009f94:	270a      	movs	r7, #10
 8009f96:	46a6      	mov	lr, r4
 8009f98:	460a      	mov	r2, r1
 8009f9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f9e:	fb07 1516 	mls	r5, r7, r6, r1
 8009fa2:	3530      	adds	r5, #48	; 0x30
 8009fa4:	2a63      	cmp	r2, #99	; 0x63
 8009fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fae:	4631      	mov	r1, r6
 8009fb0:	dcf1      	bgt.n	8009f96 <__exponent+0x22>
 8009fb2:	3130      	adds	r1, #48	; 0x30
 8009fb4:	f1ae 0502 	sub.w	r5, lr, #2
 8009fb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009fbc:	1c44      	adds	r4, r0, #1
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4561      	cmp	r1, ip
 8009fc2:	d30a      	bcc.n	8009fda <__exponent+0x66>
 8009fc4:	f10d 0209 	add.w	r2, sp, #9
 8009fc8:	eba2 020e 	sub.w	r2, r2, lr
 8009fcc:	4565      	cmp	r5, ip
 8009fce:	bf88      	it	hi
 8009fd0:	2200      	movhi	r2, #0
 8009fd2:	4413      	add	r3, r2
 8009fd4:	1a18      	subs	r0, r3, r0
 8009fd6:	b003      	add	sp, #12
 8009fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009fe2:	e7ed      	b.n	8009fc0 <__exponent+0x4c>
 8009fe4:	2330      	movs	r3, #48	; 0x30
 8009fe6:	3130      	adds	r1, #48	; 0x30
 8009fe8:	7083      	strb	r3, [r0, #2]
 8009fea:	70c1      	strb	r1, [r0, #3]
 8009fec:	1d03      	adds	r3, r0, #4
 8009fee:	e7f1      	b.n	8009fd4 <__exponent+0x60>

08009ff0 <_printf_float>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	ed2d 8b02 	vpush	{d8}
 8009ff8:	b08d      	sub	sp, #52	; 0x34
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a000:	4616      	mov	r6, r2
 800a002:	461f      	mov	r7, r3
 800a004:	4605      	mov	r5, r0
 800a006:	f001 fa77 	bl	800b4f8 <_localeconv_r>
 800a00a:	f8d0 a000 	ldr.w	sl, [r0]
 800a00e:	4650      	mov	r0, sl
 800a010:	f7f6 f8e6 	bl	80001e0 <strlen>
 800a014:	2300      	movs	r3, #0
 800a016:	930a      	str	r3, [sp, #40]	; 0x28
 800a018:	6823      	ldr	r3, [r4, #0]
 800a01a:	9305      	str	r3, [sp, #20]
 800a01c:	f8d8 3000 	ldr.w	r3, [r8]
 800a020:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a024:	3307      	adds	r3, #7
 800a026:	f023 0307 	bic.w	r3, r3, #7
 800a02a:	f103 0208 	add.w	r2, r3, #8
 800a02e:	f8c8 2000 	str.w	r2, [r8]
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a03a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a03e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a042:	9307      	str	r3, [sp, #28]
 800a044:	f8cd 8018 	str.w	r8, [sp, #24]
 800a048:	ee08 0a10 	vmov	s16, r0
 800a04c:	4b9f      	ldr	r3, [pc, #636]	; (800a2cc <_printf_float+0x2dc>)
 800a04e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	f7f6 fd71 	bl	8000b3c <__aeabi_dcmpun>
 800a05a:	bb88      	cbnz	r0, 800a0c0 <_printf_float+0xd0>
 800a05c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a060:	4b9a      	ldr	r3, [pc, #616]	; (800a2cc <_printf_float+0x2dc>)
 800a062:	f04f 32ff 	mov.w	r2, #4294967295
 800a066:	f7f6 fd4b 	bl	8000b00 <__aeabi_dcmple>
 800a06a:	bb48      	cbnz	r0, 800a0c0 <_printf_float+0xd0>
 800a06c:	2200      	movs	r2, #0
 800a06e:	2300      	movs	r3, #0
 800a070:	4640      	mov	r0, r8
 800a072:	4649      	mov	r1, r9
 800a074:	f7f6 fd3a 	bl	8000aec <__aeabi_dcmplt>
 800a078:	b110      	cbz	r0, 800a080 <_printf_float+0x90>
 800a07a:	232d      	movs	r3, #45	; 0x2d
 800a07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a080:	4b93      	ldr	r3, [pc, #588]	; (800a2d0 <_printf_float+0x2e0>)
 800a082:	4894      	ldr	r0, [pc, #592]	; (800a2d4 <_printf_float+0x2e4>)
 800a084:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a088:	bf94      	ite	ls
 800a08a:	4698      	movls	r8, r3
 800a08c:	4680      	movhi	r8, r0
 800a08e:	2303      	movs	r3, #3
 800a090:	6123      	str	r3, [r4, #16]
 800a092:	9b05      	ldr	r3, [sp, #20]
 800a094:	f023 0204 	bic.w	r2, r3, #4
 800a098:	6022      	str	r2, [r4, #0]
 800a09a:	f04f 0900 	mov.w	r9, #0
 800a09e:	9700      	str	r7, [sp, #0]
 800a0a0:	4633      	mov	r3, r6
 800a0a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 f9d8 	bl	800a45c <_printf_common>
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	f040 8090 	bne.w	800a1d2 <_printf_float+0x1e2>
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	b00d      	add	sp, #52	; 0x34
 800a0b8:	ecbd 8b02 	vpop	{d8}
 800a0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	4640      	mov	r0, r8
 800a0c6:	4649      	mov	r1, r9
 800a0c8:	f7f6 fd38 	bl	8000b3c <__aeabi_dcmpun>
 800a0cc:	b140      	cbz	r0, 800a0e0 <_printf_float+0xf0>
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	bfbc      	itt	lt
 800a0d4:	232d      	movlt	r3, #45	; 0x2d
 800a0d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0da:	487f      	ldr	r0, [pc, #508]	; (800a2d8 <_printf_float+0x2e8>)
 800a0dc:	4b7f      	ldr	r3, [pc, #508]	; (800a2dc <_printf_float+0x2ec>)
 800a0de:	e7d1      	b.n	800a084 <_printf_float+0x94>
 800a0e0:	6863      	ldr	r3, [r4, #4]
 800a0e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0e6:	9206      	str	r2, [sp, #24]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	d13f      	bne.n	800a16c <_printf_float+0x17c>
 800a0ec:	2306      	movs	r3, #6
 800a0ee:	6063      	str	r3, [r4, #4]
 800a0f0:	9b05      	ldr	r3, [sp, #20]
 800a0f2:	6861      	ldr	r1, [r4, #4]
 800a0f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	ab0a      	add	r3, sp, #40	; 0x28
 800a0fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a102:	ab09      	add	r3, sp, #36	; 0x24
 800a104:	ec49 8b10 	vmov	d0, r8, r9
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a110:	4628      	mov	r0, r5
 800a112:	f7ff fecd 	bl	8009eb0 <__cvt>
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a11a:	2b47      	cmp	r3, #71	; 0x47
 800a11c:	4680      	mov	r8, r0
 800a11e:	d108      	bne.n	800a132 <_printf_float+0x142>
 800a120:	1cc8      	adds	r0, r1, #3
 800a122:	db02      	blt.n	800a12a <_printf_float+0x13a>
 800a124:	6863      	ldr	r3, [r4, #4]
 800a126:	4299      	cmp	r1, r3
 800a128:	dd41      	ble.n	800a1ae <_printf_float+0x1be>
 800a12a:	f1ab 0b02 	sub.w	fp, fp, #2
 800a12e:	fa5f fb8b 	uxtb.w	fp, fp
 800a132:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a136:	d820      	bhi.n	800a17a <_printf_float+0x18a>
 800a138:	3901      	subs	r1, #1
 800a13a:	465a      	mov	r2, fp
 800a13c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a140:	9109      	str	r1, [sp, #36]	; 0x24
 800a142:	f7ff ff17 	bl	8009f74 <__exponent>
 800a146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a148:	1813      	adds	r3, r2, r0
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	4681      	mov	r9, r0
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	dc02      	bgt.n	800a158 <_printf_float+0x168>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	07d2      	lsls	r2, r2, #31
 800a156:	d501      	bpl.n	800a15c <_printf_float+0x16c>
 800a158:	3301      	adds	r3, #1
 800a15a:	6123      	str	r3, [r4, #16]
 800a15c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a160:	2b00      	cmp	r3, #0
 800a162:	d09c      	beq.n	800a09e <_printf_float+0xae>
 800a164:	232d      	movs	r3, #45	; 0x2d
 800a166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16a:	e798      	b.n	800a09e <_printf_float+0xae>
 800a16c:	9a06      	ldr	r2, [sp, #24]
 800a16e:	2a47      	cmp	r2, #71	; 0x47
 800a170:	d1be      	bne.n	800a0f0 <_printf_float+0x100>
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1bc      	bne.n	800a0f0 <_printf_float+0x100>
 800a176:	2301      	movs	r3, #1
 800a178:	e7b9      	b.n	800a0ee <_printf_float+0xfe>
 800a17a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a17e:	d118      	bne.n	800a1b2 <_printf_float+0x1c2>
 800a180:	2900      	cmp	r1, #0
 800a182:	6863      	ldr	r3, [r4, #4]
 800a184:	dd0b      	ble.n	800a19e <_printf_float+0x1ae>
 800a186:	6121      	str	r1, [r4, #16]
 800a188:	b913      	cbnz	r3, 800a190 <_printf_float+0x1a0>
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d502      	bpl.n	800a196 <_printf_float+0x1a6>
 800a190:	3301      	adds	r3, #1
 800a192:	440b      	add	r3, r1
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	65a1      	str	r1, [r4, #88]	; 0x58
 800a198:	f04f 0900 	mov.w	r9, #0
 800a19c:	e7de      	b.n	800a15c <_printf_float+0x16c>
 800a19e:	b913      	cbnz	r3, 800a1a6 <_printf_float+0x1b6>
 800a1a0:	6822      	ldr	r2, [r4, #0]
 800a1a2:	07d2      	lsls	r2, r2, #31
 800a1a4:	d501      	bpl.n	800a1aa <_printf_float+0x1ba>
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	e7f4      	b.n	800a194 <_printf_float+0x1a4>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e7f2      	b.n	800a194 <_printf_float+0x1a4>
 800a1ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	db05      	blt.n	800a1c4 <_printf_float+0x1d4>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	6121      	str	r1, [r4, #16]
 800a1bc:	07d8      	lsls	r0, r3, #31
 800a1be:	d5ea      	bpl.n	800a196 <_printf_float+0x1a6>
 800a1c0:	1c4b      	adds	r3, r1, #1
 800a1c2:	e7e7      	b.n	800a194 <_printf_float+0x1a4>
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	bfd4      	ite	le
 800a1c8:	f1c1 0202 	rsble	r2, r1, #2
 800a1cc:	2201      	movgt	r2, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	e7e0      	b.n	800a194 <_printf_float+0x1a4>
 800a1d2:	6823      	ldr	r3, [r4, #0]
 800a1d4:	055a      	lsls	r2, r3, #21
 800a1d6:	d407      	bmi.n	800a1e8 <_printf_float+0x1f8>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	4642      	mov	r2, r8
 800a1dc:	4631      	mov	r1, r6
 800a1de:	4628      	mov	r0, r5
 800a1e0:	47b8      	blx	r7
 800a1e2:	3001      	adds	r0, #1
 800a1e4:	d12c      	bne.n	800a240 <_printf_float+0x250>
 800a1e6:	e764      	b.n	800a0b2 <_printf_float+0xc2>
 800a1e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1ec:	f240 80e0 	bls.w	800a3b0 <_printf_float+0x3c0>
 800a1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f7f6 fc6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d034      	beq.n	800a26a <_printf_float+0x27a>
 800a200:	4a37      	ldr	r2, [pc, #220]	; (800a2e0 <_printf_float+0x2f0>)
 800a202:	2301      	movs	r3, #1
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af51 	beq.w	800a0b2 <_printf_float+0xc2>
 800a210:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a214:	429a      	cmp	r2, r3
 800a216:	db02      	blt.n	800a21e <_printf_float+0x22e>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	07d8      	lsls	r0, r3, #31
 800a21c:	d510      	bpl.n	800a240 <_printf_float+0x250>
 800a21e:	ee18 3a10 	vmov	r3, s16
 800a222:	4652      	mov	r2, sl
 800a224:	4631      	mov	r1, r6
 800a226:	4628      	mov	r0, r5
 800a228:	47b8      	blx	r7
 800a22a:	3001      	adds	r0, #1
 800a22c:	f43f af41 	beq.w	800a0b2 <_printf_float+0xc2>
 800a230:	f04f 0800 	mov.w	r8, #0
 800a234:	f104 091a 	add.w	r9, r4, #26
 800a238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23a:	3b01      	subs	r3, #1
 800a23c:	4543      	cmp	r3, r8
 800a23e:	dc09      	bgt.n	800a254 <_printf_float+0x264>
 800a240:	6823      	ldr	r3, [r4, #0]
 800a242:	079b      	lsls	r3, r3, #30
 800a244:	f100 8105 	bmi.w	800a452 <_printf_float+0x462>
 800a248:	68e0      	ldr	r0, [r4, #12]
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	4298      	cmp	r0, r3
 800a24e:	bfb8      	it	lt
 800a250:	4618      	movlt	r0, r3
 800a252:	e730      	b.n	800a0b6 <_printf_float+0xc6>
 800a254:	2301      	movs	r3, #1
 800a256:	464a      	mov	r2, r9
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f af27 	beq.w	800a0b2 <_printf_float+0xc2>
 800a264:	f108 0801 	add.w	r8, r8, #1
 800a268:	e7e6      	b.n	800a238 <_printf_float+0x248>
 800a26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	dc39      	bgt.n	800a2e4 <_printf_float+0x2f4>
 800a270:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <_printf_float+0x2f0>)
 800a272:	2301      	movs	r3, #1
 800a274:	4631      	mov	r1, r6
 800a276:	4628      	mov	r0, r5
 800a278:	47b8      	blx	r7
 800a27a:	3001      	adds	r0, #1
 800a27c:	f43f af19 	beq.w	800a0b2 <_printf_float+0xc2>
 800a280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a284:	4313      	orrs	r3, r2
 800a286:	d102      	bne.n	800a28e <_printf_float+0x29e>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	07d9      	lsls	r1, r3, #31
 800a28c:	d5d8      	bpl.n	800a240 <_printf_float+0x250>
 800a28e:	ee18 3a10 	vmov	r3, s16
 800a292:	4652      	mov	r2, sl
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af09 	beq.w	800a0b2 <_printf_float+0xc2>
 800a2a0:	f04f 0900 	mov.w	r9, #0
 800a2a4:	f104 0a1a 	add.w	sl, r4, #26
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	425b      	negs	r3, r3
 800a2ac:	454b      	cmp	r3, r9
 800a2ae:	dc01      	bgt.n	800a2b4 <_printf_float+0x2c4>
 800a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2b2:	e792      	b.n	800a1da <_printf_float+0x1ea>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f aef7 	beq.w	800a0b2 <_printf_float+0xc2>
 800a2c4:	f109 0901 	add.w	r9, r9, #1
 800a2c8:	e7ee      	b.n	800a2a8 <_printf_float+0x2b8>
 800a2ca:	bf00      	nop
 800a2cc:	7fefffff 	.word	0x7fefffff
 800a2d0:	0800d3bc 	.word	0x0800d3bc
 800a2d4:	0800d3c0 	.word	0x0800d3c0
 800a2d8:	0800d3c8 	.word	0x0800d3c8
 800a2dc:	0800d3c4 	.word	0x0800d3c4
 800a2e0:	0800d3cc 	.word	0x0800d3cc
 800a2e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	bfa8      	it	ge
 800a2ec:	461a      	movge	r2, r3
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	4691      	mov	r9, r2
 800a2f2:	dc37      	bgt.n	800a364 <_printf_float+0x374>
 800a2f4:	f04f 0b00 	mov.w	fp, #0
 800a2f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2fc:	f104 021a 	add.w	r2, r4, #26
 800a300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	eba3 0309 	sub.w	r3, r3, r9
 800a308:	455b      	cmp	r3, fp
 800a30a:	dc33      	bgt.n	800a374 <_printf_float+0x384>
 800a30c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a310:	429a      	cmp	r2, r3
 800a312:	db3b      	blt.n	800a38c <_printf_float+0x39c>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	07da      	lsls	r2, r3, #31
 800a318:	d438      	bmi.n	800a38c <_printf_float+0x39c>
 800a31a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a31c:	9b05      	ldr	r3, [sp, #20]
 800a31e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	eba2 0901 	sub.w	r9, r2, r1
 800a326:	4599      	cmp	r9, r3
 800a328:	bfa8      	it	ge
 800a32a:	4699      	movge	r9, r3
 800a32c:	f1b9 0f00 	cmp.w	r9, #0
 800a330:	dc35      	bgt.n	800a39e <_printf_float+0x3ae>
 800a332:	f04f 0800 	mov.w	r8, #0
 800a336:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a33a:	f104 0a1a 	add.w	sl, r4, #26
 800a33e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a342:	1a9b      	subs	r3, r3, r2
 800a344:	eba3 0309 	sub.w	r3, r3, r9
 800a348:	4543      	cmp	r3, r8
 800a34a:	f77f af79 	ble.w	800a240 <_printf_float+0x250>
 800a34e:	2301      	movs	r3, #1
 800a350:	4652      	mov	r2, sl
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f aeaa 	beq.w	800a0b2 <_printf_float+0xc2>
 800a35e:	f108 0801 	add.w	r8, r8, #1
 800a362:	e7ec      	b.n	800a33e <_printf_float+0x34e>
 800a364:	4613      	mov	r3, r2
 800a366:	4631      	mov	r1, r6
 800a368:	4642      	mov	r2, r8
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	d1c0      	bne.n	800a2f4 <_printf_float+0x304>
 800a372:	e69e      	b.n	800a0b2 <_printf_float+0xc2>
 800a374:	2301      	movs	r3, #1
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	9205      	str	r2, [sp, #20]
 800a37c:	47b8      	blx	r7
 800a37e:	3001      	adds	r0, #1
 800a380:	f43f ae97 	beq.w	800a0b2 <_printf_float+0xc2>
 800a384:	9a05      	ldr	r2, [sp, #20]
 800a386:	f10b 0b01 	add.w	fp, fp, #1
 800a38a:	e7b9      	b.n	800a300 <_printf_float+0x310>
 800a38c:	ee18 3a10 	vmov	r3, s16
 800a390:	4652      	mov	r2, sl
 800a392:	4631      	mov	r1, r6
 800a394:	4628      	mov	r0, r5
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	d1be      	bne.n	800a31a <_printf_float+0x32a>
 800a39c:	e689      	b.n	800a0b2 <_printf_float+0xc2>
 800a39e:	9a05      	ldr	r2, [sp, #20]
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	4442      	add	r2, r8
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d1c1      	bne.n	800a332 <_printf_float+0x342>
 800a3ae:	e680      	b.n	800a0b2 <_printf_float+0xc2>
 800a3b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3b2:	2a01      	cmp	r2, #1
 800a3b4:	dc01      	bgt.n	800a3ba <_printf_float+0x3ca>
 800a3b6:	07db      	lsls	r3, r3, #31
 800a3b8:	d538      	bpl.n	800a42c <_printf_float+0x43c>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4642      	mov	r2, r8
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f43f ae74 	beq.w	800a0b2 <_printf_float+0xc2>
 800a3ca:	ee18 3a10 	vmov	r3, s16
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	4631      	mov	r1, r6
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	f43f ae6b 	beq.w	800a0b2 <_printf_float+0xc2>
 800a3dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb78 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3e8:	b9d8      	cbnz	r0, 800a422 <_printf_float+0x432>
 800a3ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ec:	f108 0201 	add.w	r2, r8, #1
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d10e      	bne.n	800a41a <_printf_float+0x42a>
 800a3fc:	e659      	b.n	800a0b2 <_printf_float+0xc2>
 800a3fe:	2301      	movs	r3, #1
 800a400:	4652      	mov	r2, sl
 800a402:	4631      	mov	r1, r6
 800a404:	4628      	mov	r0, r5
 800a406:	47b8      	blx	r7
 800a408:	3001      	adds	r0, #1
 800a40a:	f43f ae52 	beq.w	800a0b2 <_printf_float+0xc2>
 800a40e:	f108 0801 	add.w	r8, r8, #1
 800a412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a414:	3b01      	subs	r3, #1
 800a416:	4543      	cmp	r3, r8
 800a418:	dcf1      	bgt.n	800a3fe <_printf_float+0x40e>
 800a41a:	464b      	mov	r3, r9
 800a41c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a420:	e6dc      	b.n	800a1dc <_printf_float+0x1ec>
 800a422:	f04f 0800 	mov.w	r8, #0
 800a426:	f104 0a1a 	add.w	sl, r4, #26
 800a42a:	e7f2      	b.n	800a412 <_printf_float+0x422>
 800a42c:	2301      	movs	r3, #1
 800a42e:	4642      	mov	r2, r8
 800a430:	e7df      	b.n	800a3f2 <_printf_float+0x402>
 800a432:	2301      	movs	r3, #1
 800a434:	464a      	mov	r2, r9
 800a436:	4631      	mov	r1, r6
 800a438:	4628      	mov	r0, r5
 800a43a:	47b8      	blx	r7
 800a43c:	3001      	adds	r0, #1
 800a43e:	f43f ae38 	beq.w	800a0b2 <_printf_float+0xc2>
 800a442:	f108 0801 	add.w	r8, r8, #1
 800a446:	68e3      	ldr	r3, [r4, #12]
 800a448:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a44a:	1a5b      	subs	r3, r3, r1
 800a44c:	4543      	cmp	r3, r8
 800a44e:	dcf0      	bgt.n	800a432 <_printf_float+0x442>
 800a450:	e6fa      	b.n	800a248 <_printf_float+0x258>
 800a452:	f04f 0800 	mov.w	r8, #0
 800a456:	f104 0919 	add.w	r9, r4, #25
 800a45a:	e7f4      	b.n	800a446 <_printf_float+0x456>

0800a45c <_printf_common>:
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a460:	4616      	mov	r6, r2
 800a462:	4699      	mov	r9, r3
 800a464:	688a      	ldr	r2, [r1, #8]
 800a466:	690b      	ldr	r3, [r1, #16]
 800a468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a46c:	4293      	cmp	r3, r2
 800a46e:	bfb8      	it	lt
 800a470:	4613      	movlt	r3, r2
 800a472:	6033      	str	r3, [r6, #0]
 800a474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a478:	4607      	mov	r7, r0
 800a47a:	460c      	mov	r4, r1
 800a47c:	b10a      	cbz	r2, 800a482 <_printf_common+0x26>
 800a47e:	3301      	adds	r3, #1
 800a480:	6033      	str	r3, [r6, #0]
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	0699      	lsls	r1, r3, #26
 800a486:	bf42      	ittt	mi
 800a488:	6833      	ldrmi	r3, [r6, #0]
 800a48a:	3302      	addmi	r3, #2
 800a48c:	6033      	strmi	r3, [r6, #0]
 800a48e:	6825      	ldr	r5, [r4, #0]
 800a490:	f015 0506 	ands.w	r5, r5, #6
 800a494:	d106      	bne.n	800a4a4 <_printf_common+0x48>
 800a496:	f104 0a19 	add.w	sl, r4, #25
 800a49a:	68e3      	ldr	r3, [r4, #12]
 800a49c:	6832      	ldr	r2, [r6, #0]
 800a49e:	1a9b      	subs	r3, r3, r2
 800a4a0:	42ab      	cmp	r3, r5
 800a4a2:	dc26      	bgt.n	800a4f2 <_printf_common+0x96>
 800a4a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4a8:	1e13      	subs	r3, r2, #0
 800a4aa:	6822      	ldr	r2, [r4, #0]
 800a4ac:	bf18      	it	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	0692      	lsls	r2, r2, #26
 800a4b2:	d42b      	bmi.n	800a50c <_printf_common+0xb0>
 800a4b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	47c0      	blx	r8
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d01e      	beq.n	800a500 <_printf_common+0xa4>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	68e5      	ldr	r5, [r4, #12]
 800a4c6:	6832      	ldr	r2, [r6, #0]
 800a4c8:	f003 0306 	and.w	r3, r3, #6
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	bf08      	it	eq
 800a4d0:	1aad      	subeq	r5, r5, r2
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	6922      	ldr	r2, [r4, #16]
 800a4d6:	bf0c      	ite	eq
 800a4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4dc:	2500      	movne	r5, #0
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	bfc4      	itt	gt
 800a4e2:	1a9b      	subgt	r3, r3, r2
 800a4e4:	18ed      	addgt	r5, r5, r3
 800a4e6:	2600      	movs	r6, #0
 800a4e8:	341a      	adds	r4, #26
 800a4ea:	42b5      	cmp	r5, r6
 800a4ec:	d11a      	bne.n	800a524 <_printf_common+0xc8>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e008      	b.n	800a504 <_printf_common+0xa8>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4652      	mov	r2, sl
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	47c0      	blx	r8
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d103      	bne.n	800a508 <_printf_common+0xac>
 800a500:	f04f 30ff 	mov.w	r0, #4294967295
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a508:	3501      	adds	r5, #1
 800a50a:	e7c6      	b.n	800a49a <_printf_common+0x3e>
 800a50c:	18e1      	adds	r1, r4, r3
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	2030      	movs	r0, #48	; 0x30
 800a512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a516:	4422      	add	r2, r4
 800a518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a51c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a520:	3302      	adds	r3, #2
 800a522:	e7c7      	b.n	800a4b4 <_printf_common+0x58>
 800a524:	2301      	movs	r3, #1
 800a526:	4622      	mov	r2, r4
 800a528:	4649      	mov	r1, r9
 800a52a:	4638      	mov	r0, r7
 800a52c:	47c0      	blx	r8
 800a52e:	3001      	adds	r0, #1
 800a530:	d0e6      	beq.n	800a500 <_printf_common+0xa4>
 800a532:	3601      	adds	r6, #1
 800a534:	e7d9      	b.n	800a4ea <_printf_common+0x8e>
	...

0800a538 <_printf_i>:
 800a538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	460c      	mov	r4, r1
 800a53e:	4691      	mov	r9, r2
 800a540:	7e27      	ldrb	r7, [r4, #24]
 800a542:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a544:	2f78      	cmp	r7, #120	; 0x78
 800a546:	4680      	mov	r8, r0
 800a548:	469a      	mov	sl, r3
 800a54a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a54e:	d807      	bhi.n	800a560 <_printf_i+0x28>
 800a550:	2f62      	cmp	r7, #98	; 0x62
 800a552:	d80a      	bhi.n	800a56a <_printf_i+0x32>
 800a554:	2f00      	cmp	r7, #0
 800a556:	f000 80d8 	beq.w	800a70a <_printf_i+0x1d2>
 800a55a:	2f58      	cmp	r7, #88	; 0x58
 800a55c:	f000 80a3 	beq.w	800a6a6 <_printf_i+0x16e>
 800a560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a568:	e03a      	b.n	800a5e0 <_printf_i+0xa8>
 800a56a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a56e:	2b15      	cmp	r3, #21
 800a570:	d8f6      	bhi.n	800a560 <_printf_i+0x28>
 800a572:	a001      	add	r0, pc, #4	; (adr r0, 800a578 <_printf_i+0x40>)
 800a574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a578:	0800a5d1 	.word	0x0800a5d1
 800a57c:	0800a5e5 	.word	0x0800a5e5
 800a580:	0800a561 	.word	0x0800a561
 800a584:	0800a561 	.word	0x0800a561
 800a588:	0800a561 	.word	0x0800a561
 800a58c:	0800a561 	.word	0x0800a561
 800a590:	0800a5e5 	.word	0x0800a5e5
 800a594:	0800a561 	.word	0x0800a561
 800a598:	0800a561 	.word	0x0800a561
 800a59c:	0800a561 	.word	0x0800a561
 800a5a0:	0800a561 	.word	0x0800a561
 800a5a4:	0800a6f1 	.word	0x0800a6f1
 800a5a8:	0800a615 	.word	0x0800a615
 800a5ac:	0800a6d3 	.word	0x0800a6d3
 800a5b0:	0800a561 	.word	0x0800a561
 800a5b4:	0800a561 	.word	0x0800a561
 800a5b8:	0800a713 	.word	0x0800a713
 800a5bc:	0800a561 	.word	0x0800a561
 800a5c0:	0800a615 	.word	0x0800a615
 800a5c4:	0800a561 	.word	0x0800a561
 800a5c8:	0800a561 	.word	0x0800a561
 800a5cc:	0800a6db 	.word	0x0800a6db
 800a5d0:	680b      	ldr	r3, [r1, #0]
 800a5d2:	1d1a      	adds	r2, r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	600a      	str	r2, [r1, #0]
 800a5d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e0a3      	b.n	800a72c <_printf_i+0x1f4>
 800a5e4:	6825      	ldr	r5, [r4, #0]
 800a5e6:	6808      	ldr	r0, [r1, #0]
 800a5e8:	062e      	lsls	r6, r5, #24
 800a5ea:	f100 0304 	add.w	r3, r0, #4
 800a5ee:	d50a      	bpl.n	800a606 <_printf_i+0xce>
 800a5f0:	6805      	ldr	r5, [r0, #0]
 800a5f2:	600b      	str	r3, [r1, #0]
 800a5f4:	2d00      	cmp	r5, #0
 800a5f6:	da03      	bge.n	800a600 <_printf_i+0xc8>
 800a5f8:	232d      	movs	r3, #45	; 0x2d
 800a5fa:	426d      	negs	r5, r5
 800a5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a600:	485e      	ldr	r0, [pc, #376]	; (800a77c <_printf_i+0x244>)
 800a602:	230a      	movs	r3, #10
 800a604:	e019      	b.n	800a63a <_printf_i+0x102>
 800a606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a60a:	6805      	ldr	r5, [r0, #0]
 800a60c:	600b      	str	r3, [r1, #0]
 800a60e:	bf18      	it	ne
 800a610:	b22d      	sxthne	r5, r5
 800a612:	e7ef      	b.n	800a5f4 <_printf_i+0xbc>
 800a614:	680b      	ldr	r3, [r1, #0]
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	1d18      	adds	r0, r3, #4
 800a61a:	6008      	str	r0, [r1, #0]
 800a61c:	0628      	lsls	r0, r5, #24
 800a61e:	d501      	bpl.n	800a624 <_printf_i+0xec>
 800a620:	681d      	ldr	r5, [r3, #0]
 800a622:	e002      	b.n	800a62a <_printf_i+0xf2>
 800a624:	0669      	lsls	r1, r5, #25
 800a626:	d5fb      	bpl.n	800a620 <_printf_i+0xe8>
 800a628:	881d      	ldrh	r5, [r3, #0]
 800a62a:	4854      	ldr	r0, [pc, #336]	; (800a77c <_printf_i+0x244>)
 800a62c:	2f6f      	cmp	r7, #111	; 0x6f
 800a62e:	bf0c      	ite	eq
 800a630:	2308      	moveq	r3, #8
 800a632:	230a      	movne	r3, #10
 800a634:	2100      	movs	r1, #0
 800a636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a63a:	6866      	ldr	r6, [r4, #4]
 800a63c:	60a6      	str	r6, [r4, #8]
 800a63e:	2e00      	cmp	r6, #0
 800a640:	bfa2      	ittt	ge
 800a642:	6821      	ldrge	r1, [r4, #0]
 800a644:	f021 0104 	bicge.w	r1, r1, #4
 800a648:	6021      	strge	r1, [r4, #0]
 800a64a:	b90d      	cbnz	r5, 800a650 <_printf_i+0x118>
 800a64c:	2e00      	cmp	r6, #0
 800a64e:	d04d      	beq.n	800a6ec <_printf_i+0x1b4>
 800a650:	4616      	mov	r6, r2
 800a652:	fbb5 f1f3 	udiv	r1, r5, r3
 800a656:	fb03 5711 	mls	r7, r3, r1, r5
 800a65a:	5dc7      	ldrb	r7, [r0, r7]
 800a65c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a660:	462f      	mov	r7, r5
 800a662:	42bb      	cmp	r3, r7
 800a664:	460d      	mov	r5, r1
 800a666:	d9f4      	bls.n	800a652 <_printf_i+0x11a>
 800a668:	2b08      	cmp	r3, #8
 800a66a:	d10b      	bne.n	800a684 <_printf_i+0x14c>
 800a66c:	6823      	ldr	r3, [r4, #0]
 800a66e:	07df      	lsls	r7, r3, #31
 800a670:	d508      	bpl.n	800a684 <_printf_i+0x14c>
 800a672:	6923      	ldr	r3, [r4, #16]
 800a674:	6861      	ldr	r1, [r4, #4]
 800a676:	4299      	cmp	r1, r3
 800a678:	bfde      	ittt	le
 800a67a:	2330      	movle	r3, #48	; 0x30
 800a67c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a680:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a684:	1b92      	subs	r2, r2, r6
 800a686:	6122      	str	r2, [r4, #16]
 800a688:	f8cd a000 	str.w	sl, [sp]
 800a68c:	464b      	mov	r3, r9
 800a68e:	aa03      	add	r2, sp, #12
 800a690:	4621      	mov	r1, r4
 800a692:	4640      	mov	r0, r8
 800a694:	f7ff fee2 	bl	800a45c <_printf_common>
 800a698:	3001      	adds	r0, #1
 800a69a:	d14c      	bne.n	800a736 <_printf_i+0x1fe>
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	b004      	add	sp, #16
 800a6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6a6:	4835      	ldr	r0, [pc, #212]	; (800a77c <_printf_i+0x244>)
 800a6a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	680e      	ldr	r6, [r1, #0]
 800a6b0:	061f      	lsls	r7, r3, #24
 800a6b2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6b6:	600e      	str	r6, [r1, #0]
 800a6b8:	d514      	bpl.n	800a6e4 <_printf_i+0x1ac>
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	bf44      	itt	mi
 800a6be:	f043 0320 	orrmi.w	r3, r3, #32
 800a6c2:	6023      	strmi	r3, [r4, #0]
 800a6c4:	b91d      	cbnz	r5, 800a6ce <_printf_i+0x196>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	f023 0320 	bic.w	r3, r3, #32
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	2310      	movs	r3, #16
 800a6d0:	e7b0      	b.n	800a634 <_printf_i+0xfc>
 800a6d2:	6823      	ldr	r3, [r4, #0]
 800a6d4:	f043 0320 	orr.w	r3, r3, #32
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	2378      	movs	r3, #120	; 0x78
 800a6dc:	4828      	ldr	r0, [pc, #160]	; (800a780 <_printf_i+0x248>)
 800a6de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6e2:	e7e3      	b.n	800a6ac <_printf_i+0x174>
 800a6e4:	065e      	lsls	r6, r3, #25
 800a6e6:	bf48      	it	mi
 800a6e8:	b2ad      	uxthmi	r5, r5
 800a6ea:	e7e6      	b.n	800a6ba <_printf_i+0x182>
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	e7bb      	b.n	800a668 <_printf_i+0x130>
 800a6f0:	680b      	ldr	r3, [r1, #0]
 800a6f2:	6826      	ldr	r6, [r4, #0]
 800a6f4:	6960      	ldr	r0, [r4, #20]
 800a6f6:	1d1d      	adds	r5, r3, #4
 800a6f8:	600d      	str	r5, [r1, #0]
 800a6fa:	0635      	lsls	r5, r6, #24
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	d501      	bpl.n	800a704 <_printf_i+0x1cc>
 800a700:	6018      	str	r0, [r3, #0]
 800a702:	e002      	b.n	800a70a <_printf_i+0x1d2>
 800a704:	0671      	lsls	r1, r6, #25
 800a706:	d5fb      	bpl.n	800a700 <_printf_i+0x1c8>
 800a708:	8018      	strh	r0, [r3, #0]
 800a70a:	2300      	movs	r3, #0
 800a70c:	6123      	str	r3, [r4, #16]
 800a70e:	4616      	mov	r6, r2
 800a710:	e7ba      	b.n	800a688 <_printf_i+0x150>
 800a712:	680b      	ldr	r3, [r1, #0]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	600a      	str	r2, [r1, #0]
 800a718:	681e      	ldr	r6, [r3, #0]
 800a71a:	6862      	ldr	r2, [r4, #4]
 800a71c:	2100      	movs	r1, #0
 800a71e:	4630      	mov	r0, r6
 800a720:	f7f5 fd66 	bl	80001f0 <memchr>
 800a724:	b108      	cbz	r0, 800a72a <_printf_i+0x1f2>
 800a726:	1b80      	subs	r0, r0, r6
 800a728:	6060      	str	r0, [r4, #4]
 800a72a:	6863      	ldr	r3, [r4, #4]
 800a72c:	6123      	str	r3, [r4, #16]
 800a72e:	2300      	movs	r3, #0
 800a730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a734:	e7a8      	b.n	800a688 <_printf_i+0x150>
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	4632      	mov	r2, r6
 800a73a:	4649      	mov	r1, r9
 800a73c:	4640      	mov	r0, r8
 800a73e:	47d0      	blx	sl
 800a740:	3001      	adds	r0, #1
 800a742:	d0ab      	beq.n	800a69c <_printf_i+0x164>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	079b      	lsls	r3, r3, #30
 800a748:	d413      	bmi.n	800a772 <_printf_i+0x23a>
 800a74a:	68e0      	ldr	r0, [r4, #12]
 800a74c:	9b03      	ldr	r3, [sp, #12]
 800a74e:	4298      	cmp	r0, r3
 800a750:	bfb8      	it	lt
 800a752:	4618      	movlt	r0, r3
 800a754:	e7a4      	b.n	800a6a0 <_printf_i+0x168>
 800a756:	2301      	movs	r3, #1
 800a758:	4632      	mov	r2, r6
 800a75a:	4649      	mov	r1, r9
 800a75c:	4640      	mov	r0, r8
 800a75e:	47d0      	blx	sl
 800a760:	3001      	adds	r0, #1
 800a762:	d09b      	beq.n	800a69c <_printf_i+0x164>
 800a764:	3501      	adds	r5, #1
 800a766:	68e3      	ldr	r3, [r4, #12]
 800a768:	9903      	ldr	r1, [sp, #12]
 800a76a:	1a5b      	subs	r3, r3, r1
 800a76c:	42ab      	cmp	r3, r5
 800a76e:	dcf2      	bgt.n	800a756 <_printf_i+0x21e>
 800a770:	e7eb      	b.n	800a74a <_printf_i+0x212>
 800a772:	2500      	movs	r5, #0
 800a774:	f104 0619 	add.w	r6, r4, #25
 800a778:	e7f5      	b.n	800a766 <_printf_i+0x22e>
 800a77a:	bf00      	nop
 800a77c:	0800d3ce 	.word	0x0800d3ce
 800a780:	0800d3df 	.word	0x0800d3df

0800a784 <siprintf>:
 800a784:	b40e      	push	{r1, r2, r3}
 800a786:	b500      	push	{lr}
 800a788:	b09c      	sub	sp, #112	; 0x70
 800a78a:	ab1d      	add	r3, sp, #116	; 0x74
 800a78c:	9002      	str	r0, [sp, #8]
 800a78e:	9006      	str	r0, [sp, #24]
 800a790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a794:	4809      	ldr	r0, [pc, #36]	; (800a7bc <siprintf+0x38>)
 800a796:	9107      	str	r1, [sp, #28]
 800a798:	9104      	str	r1, [sp, #16]
 800a79a:	4909      	ldr	r1, [pc, #36]	; (800a7c0 <siprintf+0x3c>)
 800a79c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7a0:	9105      	str	r1, [sp, #20]
 800a7a2:	6800      	ldr	r0, [r0, #0]
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	a902      	add	r1, sp, #8
 800a7a8:	f001 fb46 	bl	800be38 <_svfiprintf_r>
 800a7ac:	9b02      	ldr	r3, [sp, #8]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	b01c      	add	sp, #112	; 0x70
 800a7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7b8:	b003      	add	sp, #12
 800a7ba:	4770      	bx	lr
 800a7bc:	20000024 	.word	0x20000024
 800a7c0:	ffff0208 	.word	0xffff0208

0800a7c4 <strcat>:
 800a7c4:	b510      	push	{r4, lr}
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	7814      	ldrb	r4, [r2, #0]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	3201      	adds	r2, #1
 800a7ce:	2c00      	cmp	r4, #0
 800a7d0:	d1fa      	bne.n	800a7c8 <strcat+0x4>
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7dc:	2a00      	cmp	r2, #0
 800a7de:	d1f9      	bne.n	800a7d4 <strcat+0x10>
 800a7e0:	bd10      	pop	{r4, pc}

0800a7e2 <strncpy>:
 800a7e2:	b510      	push	{r4, lr}
 800a7e4:	3901      	subs	r1, #1
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	b132      	cbz	r2, 800a7f8 <strncpy+0x16>
 800a7ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a7ee:	f803 4b01 	strb.w	r4, [r3], #1
 800a7f2:	3a01      	subs	r2, #1
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d1f7      	bne.n	800a7e8 <strncpy+0x6>
 800a7f8:	441a      	add	r2, r3
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d100      	bne.n	800a802 <strncpy+0x20>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	f803 1b01 	strb.w	r1, [r3], #1
 800a806:	e7f9      	b.n	800a7fc <strncpy+0x1a>

0800a808 <quorem>:
 800a808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	6903      	ldr	r3, [r0, #16]
 800a80e:	690c      	ldr	r4, [r1, #16]
 800a810:	42a3      	cmp	r3, r4
 800a812:	4607      	mov	r7, r0
 800a814:	f2c0 8081 	blt.w	800a91a <quorem+0x112>
 800a818:	3c01      	subs	r4, #1
 800a81a:	f101 0814 	add.w	r8, r1, #20
 800a81e:	f100 0514 	add.w	r5, r0, #20
 800a822:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a826:	9301      	str	r3, [sp, #4]
 800a828:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a82c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a830:	3301      	adds	r3, #1
 800a832:	429a      	cmp	r2, r3
 800a834:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a838:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a83c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a840:	d331      	bcc.n	800a8a6 <quorem+0x9e>
 800a842:	f04f 0e00 	mov.w	lr, #0
 800a846:	4640      	mov	r0, r8
 800a848:	46ac      	mov	ip, r5
 800a84a:	46f2      	mov	sl, lr
 800a84c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a850:	b293      	uxth	r3, r2
 800a852:	fb06 e303 	mla	r3, r6, r3, lr
 800a856:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ebaa 0303 	sub.w	r3, sl, r3
 800a860:	0c12      	lsrs	r2, r2, #16
 800a862:	f8dc a000 	ldr.w	sl, [ip]
 800a866:	fb06 e202 	mla	r2, r6, r2, lr
 800a86a:	fa13 f38a 	uxtah	r3, r3, sl
 800a86e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a872:	fa1f fa82 	uxth.w	sl, r2
 800a876:	f8dc 2000 	ldr.w	r2, [ip]
 800a87a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a87e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a882:	b29b      	uxth	r3, r3
 800a884:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a888:	4581      	cmp	r9, r0
 800a88a:	f84c 3b04 	str.w	r3, [ip], #4
 800a88e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a892:	d2db      	bcs.n	800a84c <quorem+0x44>
 800a894:	f855 300b 	ldr.w	r3, [r5, fp]
 800a898:	b92b      	cbnz	r3, 800a8a6 <quorem+0x9e>
 800a89a:	9b01      	ldr	r3, [sp, #4]
 800a89c:	3b04      	subs	r3, #4
 800a89e:	429d      	cmp	r5, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	d32e      	bcc.n	800a902 <quorem+0xfa>
 800a8a4:	613c      	str	r4, [r7, #16]
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	f001 f8b0 	bl	800ba0c <__mcmp>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	db24      	blt.n	800a8fa <quorem+0xf2>
 800a8b0:	3601      	adds	r6, #1
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f04f 0c00 	mov.w	ip, #0
 800a8b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a8c0:	b293      	uxth	r3, r2
 800a8c2:	ebac 0303 	sub.w	r3, ip, r3
 800a8c6:	0c12      	lsrs	r2, r2, #16
 800a8c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a8cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8da:	45c1      	cmp	r9, r8
 800a8dc:	f840 3b04 	str.w	r3, [r0], #4
 800a8e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a8e4:	d2e8      	bcs.n	800a8b8 <quorem+0xb0>
 800a8e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8ee:	b922      	cbnz	r2, 800a8fa <quorem+0xf2>
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	d30a      	bcc.n	800a90e <quorem+0x106>
 800a8f8:	613c      	str	r4, [r7, #16]
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	b003      	add	sp, #12
 800a8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	3b04      	subs	r3, #4
 800a906:	2a00      	cmp	r2, #0
 800a908:	d1cc      	bne.n	800a8a4 <quorem+0x9c>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	e7c7      	b.n	800a89e <quorem+0x96>
 800a90e:	6812      	ldr	r2, [r2, #0]
 800a910:	3b04      	subs	r3, #4
 800a912:	2a00      	cmp	r2, #0
 800a914:	d1f0      	bne.n	800a8f8 <quorem+0xf0>
 800a916:	3c01      	subs	r4, #1
 800a918:	e7eb      	b.n	800a8f2 <quorem+0xea>
 800a91a:	2000      	movs	r0, #0
 800a91c:	e7ee      	b.n	800a8fc <quorem+0xf4>
	...

0800a920 <_dtoa_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	ed2d 8b02 	vpush	{d8}
 800a928:	ec57 6b10 	vmov	r6, r7, d0
 800a92c:	b095      	sub	sp, #84	; 0x54
 800a92e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a934:	9105      	str	r1, [sp, #20]
 800a936:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a93a:	4604      	mov	r4, r0
 800a93c:	9209      	str	r2, [sp, #36]	; 0x24
 800a93e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a940:	b975      	cbnz	r5, 800a960 <_dtoa_r+0x40>
 800a942:	2010      	movs	r0, #16
 800a944:	f000 fddc 	bl	800b500 <malloc>
 800a948:	4602      	mov	r2, r0
 800a94a:	6260      	str	r0, [r4, #36]	; 0x24
 800a94c:	b920      	cbnz	r0, 800a958 <_dtoa_r+0x38>
 800a94e:	4bb2      	ldr	r3, [pc, #712]	; (800ac18 <_dtoa_r+0x2f8>)
 800a950:	21ea      	movs	r1, #234	; 0xea
 800a952:	48b2      	ldr	r0, [pc, #712]	; (800ac1c <_dtoa_r+0x2fc>)
 800a954:	f001 fb80 	bl	800c058 <__assert_func>
 800a958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a95c:	6005      	str	r5, [r0, #0]
 800a95e:	60c5      	str	r5, [r0, #12]
 800a960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a962:	6819      	ldr	r1, [r3, #0]
 800a964:	b151      	cbz	r1, 800a97c <_dtoa_r+0x5c>
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	604a      	str	r2, [r1, #4]
 800a96a:	2301      	movs	r3, #1
 800a96c:	4093      	lsls	r3, r2
 800a96e:	608b      	str	r3, [r1, #8]
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fe0d 	bl	800b590 <_Bfree>
 800a976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a978:	2200      	movs	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	1e3b      	subs	r3, r7, #0
 800a97e:	bfb9      	ittee	lt
 800a980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a984:	9303      	strlt	r3, [sp, #12]
 800a986:	2300      	movge	r3, #0
 800a988:	f8c8 3000 	strge.w	r3, [r8]
 800a98c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a990:	4ba3      	ldr	r3, [pc, #652]	; (800ac20 <_dtoa_r+0x300>)
 800a992:	bfbc      	itt	lt
 800a994:	2201      	movlt	r2, #1
 800a996:	f8c8 2000 	strlt.w	r2, [r8]
 800a99a:	ea33 0309 	bics.w	r3, r3, r9
 800a99e:	d11b      	bne.n	800a9d8 <_dtoa_r+0xb8>
 800a9a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9a2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9ac:	4333      	orrs	r3, r6
 800a9ae:	f000 857a 	beq.w	800b4a6 <_dtoa_r+0xb86>
 800a9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b4:	b963      	cbnz	r3, 800a9d0 <_dtoa_r+0xb0>
 800a9b6:	4b9b      	ldr	r3, [pc, #620]	; (800ac24 <_dtoa_r+0x304>)
 800a9b8:	e024      	b.n	800aa04 <_dtoa_r+0xe4>
 800a9ba:	4b9b      	ldr	r3, [pc, #620]	; (800ac28 <_dtoa_r+0x308>)
 800a9bc:	9300      	str	r3, [sp, #0]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	9800      	ldr	r0, [sp, #0]
 800a9c6:	b015      	add	sp, #84	; 0x54
 800a9c8:	ecbd 8b02 	vpop	{d8}
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d0:	4b94      	ldr	r3, [pc, #592]	; (800ac24 <_dtoa_r+0x304>)
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	3303      	adds	r3, #3
 800a9d6:	e7f3      	b.n	800a9c0 <_dtoa_r+0xa0>
 800a9d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	ec51 0b17 	vmov	r0, r1, d7
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a9e8:	f7f6 f876 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	b158      	cbz	r0, 800aa08 <_dtoa_r+0xe8>
 800a9f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 8551 	beq.w	800b4a0 <_dtoa_r+0xb80>
 800a9fe:	488b      	ldr	r0, [pc, #556]	; (800ac2c <_dtoa_r+0x30c>)
 800aa00:	6018      	str	r0, [r3, #0]
 800aa02:	1e43      	subs	r3, r0, #1
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	e7dd      	b.n	800a9c4 <_dtoa_r+0xa4>
 800aa08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800aa0c:	aa12      	add	r2, sp, #72	; 0x48
 800aa0e:	a913      	add	r1, sp, #76	; 0x4c
 800aa10:	4620      	mov	r0, r4
 800aa12:	f001 f89f 	bl	800bb54 <__d2b>
 800aa16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa1a:	4683      	mov	fp, r0
 800aa1c:	2d00      	cmp	r5, #0
 800aa1e:	d07c      	beq.n	800ab1a <_dtoa_r+0x1fa>
 800aa20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800aa26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800aa2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa3a:	4b7d      	ldr	r3, [pc, #500]	; (800ac30 <_dtoa_r+0x310>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4630      	mov	r0, r6
 800aa40:	4639      	mov	r1, r7
 800aa42:	f7f5 fc29 	bl	8000298 <__aeabi_dsub>
 800aa46:	a36e      	add	r3, pc, #440	; (adr r3, 800ac00 <_dtoa_r+0x2e0>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fddc 	bl	8000608 <__aeabi_dmul>
 800aa50:	a36d      	add	r3, pc, #436	; (adr r3, 800ac08 <_dtoa_r+0x2e8>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	f7f5 fc21 	bl	800029c <__adddf3>
 800aa5a:	4606      	mov	r6, r0
 800aa5c:	4628      	mov	r0, r5
 800aa5e:	460f      	mov	r7, r1
 800aa60:	f7f5 fd68 	bl	8000534 <__aeabi_i2d>
 800aa64:	a36a      	add	r3, pc, #424	; (adr r3, 800ac10 <_dtoa_r+0x2f0>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	f7f5 fdcd 	bl	8000608 <__aeabi_dmul>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4630      	mov	r0, r6
 800aa74:	4639      	mov	r1, r7
 800aa76:	f7f5 fc11 	bl	800029c <__adddf3>
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	460f      	mov	r7, r1
 800aa7e:	f7f6 f873 	bl	8000b68 <__aeabi_d2iz>
 800aa82:	2200      	movs	r2, #0
 800aa84:	4682      	mov	sl, r0
 800aa86:	2300      	movs	r3, #0
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f6 f82e 	bl	8000aec <__aeabi_dcmplt>
 800aa90:	b148      	cbz	r0, 800aaa6 <_dtoa_r+0x186>
 800aa92:	4650      	mov	r0, sl
 800aa94:	f7f5 fd4e 	bl	8000534 <__aeabi_i2d>
 800aa98:	4632      	mov	r2, r6
 800aa9a:	463b      	mov	r3, r7
 800aa9c:	f7f6 f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaa0:	b908      	cbnz	r0, 800aaa6 <_dtoa_r+0x186>
 800aaa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa6:	f1ba 0f16 	cmp.w	sl, #22
 800aaaa:	d854      	bhi.n	800ab56 <_dtoa_r+0x236>
 800aaac:	4b61      	ldr	r3, [pc, #388]	; (800ac34 <_dtoa_r+0x314>)
 800aaae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaba:	f7f6 f817 	bl	8000aec <__aeabi_dcmplt>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d04b      	beq.n	800ab5a <_dtoa_r+0x23a>
 800aac2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aac6:	2300      	movs	r3, #0
 800aac8:	930e      	str	r3, [sp, #56]	; 0x38
 800aaca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aacc:	1b5d      	subs	r5, r3, r5
 800aace:	1e6b      	subs	r3, r5, #1
 800aad0:	9304      	str	r3, [sp, #16]
 800aad2:	bf43      	ittte	mi
 800aad4:	2300      	movmi	r3, #0
 800aad6:	f1c5 0801 	rsbmi	r8, r5, #1
 800aada:	9304      	strmi	r3, [sp, #16]
 800aadc:	f04f 0800 	movpl.w	r8, #0
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	db3b      	blt.n	800ab5e <_dtoa_r+0x23e>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800aaec:	4453      	add	r3, sl
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9306      	str	r3, [sp, #24]
 800aaf4:	9b05      	ldr	r3, [sp, #20]
 800aaf6:	2b09      	cmp	r3, #9
 800aaf8:	d869      	bhi.n	800abce <_dtoa_r+0x2ae>
 800aafa:	2b05      	cmp	r3, #5
 800aafc:	bfc4      	itt	gt
 800aafe:	3b04      	subgt	r3, #4
 800ab00:	9305      	strgt	r3, [sp, #20]
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	f1a3 0302 	sub.w	r3, r3, #2
 800ab08:	bfcc      	ite	gt
 800ab0a:	2500      	movgt	r5, #0
 800ab0c:	2501      	movle	r5, #1
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d869      	bhi.n	800abe6 <_dtoa_r+0x2c6>
 800ab12:	e8df f003 	tbb	[pc, r3]
 800ab16:	4e2c      	.short	0x4e2c
 800ab18:	5a4c      	.short	0x5a4c
 800ab1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ab1e:	441d      	add	r5, r3
 800ab20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	bfc1      	itttt	gt
 800ab28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab30:	fa09 f303 	lslgt.w	r3, r9, r3
 800ab34:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab38:	bfda      	itte	le
 800ab3a:	f1c3 0320 	rsble	r3, r3, #32
 800ab3e:	fa06 f003 	lslle.w	r0, r6, r3
 800ab42:	4318      	orrgt	r0, r3
 800ab44:	f7f5 fce6 	bl	8000514 <__aeabi_ui2d>
 800ab48:	2301      	movs	r3, #1
 800ab4a:	4606      	mov	r6, r0
 800ab4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ab50:	3d01      	subs	r5, #1
 800ab52:	9310      	str	r3, [sp, #64]	; 0x40
 800ab54:	e771      	b.n	800aa3a <_dtoa_r+0x11a>
 800ab56:	2301      	movs	r3, #1
 800ab58:	e7b6      	b.n	800aac8 <_dtoa_r+0x1a8>
 800ab5a:	900e      	str	r0, [sp, #56]	; 0x38
 800ab5c:	e7b5      	b.n	800aaca <_dtoa_r+0x1aa>
 800ab5e:	f1ca 0300 	rsb	r3, sl, #0
 800ab62:	9306      	str	r3, [sp, #24]
 800ab64:	2300      	movs	r3, #0
 800ab66:	eba8 080a 	sub.w	r8, r8, sl
 800ab6a:	930d      	str	r3, [sp, #52]	; 0x34
 800ab6c:	e7c2      	b.n	800aaf4 <_dtoa_r+0x1d4>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9308      	str	r3, [sp, #32]
 800ab72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dc39      	bgt.n	800abec <_dtoa_r+0x2cc>
 800ab78:	f04f 0901 	mov.w	r9, #1
 800ab7c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab80:	464b      	mov	r3, r9
 800ab82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ab86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ab88:	2200      	movs	r2, #0
 800ab8a:	6042      	str	r2, [r0, #4]
 800ab8c:	2204      	movs	r2, #4
 800ab8e:	f102 0614 	add.w	r6, r2, #20
 800ab92:	429e      	cmp	r6, r3
 800ab94:	6841      	ldr	r1, [r0, #4]
 800ab96:	d92f      	bls.n	800abf8 <_dtoa_r+0x2d8>
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 fcb9 	bl	800b510 <_Balloc>
 800ab9e:	9000      	str	r0, [sp, #0]
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d14b      	bne.n	800ac3c <_dtoa_r+0x31c>
 800aba4:	4b24      	ldr	r3, [pc, #144]	; (800ac38 <_dtoa_r+0x318>)
 800aba6:	4602      	mov	r2, r0
 800aba8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800abac:	e6d1      	b.n	800a952 <_dtoa_r+0x32>
 800abae:	2301      	movs	r3, #1
 800abb0:	e7de      	b.n	800ab70 <_dtoa_r+0x250>
 800abb2:	2300      	movs	r3, #0
 800abb4:	9308      	str	r3, [sp, #32]
 800abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb8:	eb0a 0903 	add.w	r9, sl, r3
 800abbc:	f109 0301 	add.w	r3, r9, #1
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	bfb8      	it	lt
 800abc6:	2301      	movlt	r3, #1
 800abc8:	e7dd      	b.n	800ab86 <_dtoa_r+0x266>
 800abca:	2301      	movs	r3, #1
 800abcc:	e7f2      	b.n	800abb4 <_dtoa_r+0x294>
 800abce:	2501      	movs	r5, #1
 800abd0:	2300      	movs	r3, #0
 800abd2:	9305      	str	r3, [sp, #20]
 800abd4:	9508      	str	r5, [sp, #32]
 800abd6:	f04f 39ff 	mov.w	r9, #4294967295
 800abda:	2200      	movs	r2, #0
 800abdc:	f8cd 9004 	str.w	r9, [sp, #4]
 800abe0:	2312      	movs	r3, #18
 800abe2:	9209      	str	r2, [sp, #36]	; 0x24
 800abe4:	e7cf      	b.n	800ab86 <_dtoa_r+0x266>
 800abe6:	2301      	movs	r3, #1
 800abe8:	9308      	str	r3, [sp, #32]
 800abea:	e7f4      	b.n	800abd6 <_dtoa_r+0x2b6>
 800abec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800abf0:	f8cd 9004 	str.w	r9, [sp, #4]
 800abf4:	464b      	mov	r3, r9
 800abf6:	e7c6      	b.n	800ab86 <_dtoa_r+0x266>
 800abf8:	3101      	adds	r1, #1
 800abfa:	6041      	str	r1, [r0, #4]
 800abfc:	0052      	lsls	r2, r2, #1
 800abfe:	e7c6      	b.n	800ab8e <_dtoa_r+0x26e>
 800ac00:	636f4361 	.word	0x636f4361
 800ac04:	3fd287a7 	.word	0x3fd287a7
 800ac08:	8b60c8b3 	.word	0x8b60c8b3
 800ac0c:	3fc68a28 	.word	0x3fc68a28
 800ac10:	509f79fb 	.word	0x509f79fb
 800ac14:	3fd34413 	.word	0x3fd34413
 800ac18:	0800d3fd 	.word	0x0800d3fd
 800ac1c:	0800d414 	.word	0x0800d414
 800ac20:	7ff00000 	.word	0x7ff00000
 800ac24:	0800d3f9 	.word	0x0800d3f9
 800ac28:	0800d3f0 	.word	0x0800d3f0
 800ac2c:	0800d3cd 	.word	0x0800d3cd
 800ac30:	3ff80000 	.word	0x3ff80000
 800ac34:	0800d510 	.word	0x0800d510
 800ac38:	0800d473 	.word	0x0800d473
 800ac3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac3e:	9a00      	ldr	r2, [sp, #0]
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	2b0e      	cmp	r3, #14
 800ac46:	f200 80ad 	bhi.w	800ada4 <_dtoa_r+0x484>
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	f000 80aa 	beq.w	800ada4 <_dtoa_r+0x484>
 800ac50:	f1ba 0f00 	cmp.w	sl, #0
 800ac54:	dd36      	ble.n	800acc4 <_dtoa_r+0x3a4>
 800ac56:	4ac3      	ldr	r2, [pc, #780]	; (800af64 <_dtoa_r+0x644>)
 800ac58:	f00a 030f 	and.w	r3, sl, #15
 800ac5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac60:	ed93 7b00 	vldr	d7, [r3]
 800ac64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ac68:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ac6c:	eeb0 8a47 	vmov.f32	s16, s14
 800ac70:	eef0 8a67 	vmov.f32	s17, s15
 800ac74:	d016      	beq.n	800aca4 <_dtoa_r+0x384>
 800ac76:	4bbc      	ldr	r3, [pc, #752]	; (800af68 <_dtoa_r+0x648>)
 800ac78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac80:	f7f5 fdec 	bl	800085c <__aeabi_ddiv>
 800ac84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac88:	f007 070f 	and.w	r7, r7, #15
 800ac8c:	2503      	movs	r5, #3
 800ac8e:	4eb6      	ldr	r6, [pc, #728]	; (800af68 <_dtoa_r+0x648>)
 800ac90:	b957      	cbnz	r7, 800aca8 <_dtoa_r+0x388>
 800ac92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac96:	ec53 2b18 	vmov	r2, r3, d8
 800ac9a:	f7f5 fddf 	bl	800085c <__aeabi_ddiv>
 800ac9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aca2:	e029      	b.n	800acf8 <_dtoa_r+0x3d8>
 800aca4:	2502      	movs	r5, #2
 800aca6:	e7f2      	b.n	800ac8e <_dtoa_r+0x36e>
 800aca8:	07f9      	lsls	r1, r7, #31
 800acaa:	d508      	bpl.n	800acbe <_dtoa_r+0x39e>
 800acac:	ec51 0b18 	vmov	r0, r1, d8
 800acb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800acb4:	f7f5 fca8 	bl	8000608 <__aeabi_dmul>
 800acb8:	ec41 0b18 	vmov	d8, r0, r1
 800acbc:	3501      	adds	r5, #1
 800acbe:	107f      	asrs	r7, r7, #1
 800acc0:	3608      	adds	r6, #8
 800acc2:	e7e5      	b.n	800ac90 <_dtoa_r+0x370>
 800acc4:	f000 80a6 	beq.w	800ae14 <_dtoa_r+0x4f4>
 800acc8:	f1ca 0600 	rsb	r6, sl, #0
 800accc:	4ba5      	ldr	r3, [pc, #660]	; (800af64 <_dtoa_r+0x644>)
 800acce:	4fa6      	ldr	r7, [pc, #664]	; (800af68 <_dtoa_r+0x648>)
 800acd0:	f006 020f 	and.w	r2, r6, #15
 800acd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ace0:	f7f5 fc92 	bl	8000608 <__aeabi_dmul>
 800ace4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ace8:	1136      	asrs	r6, r6, #4
 800acea:	2300      	movs	r3, #0
 800acec:	2502      	movs	r5, #2
 800acee:	2e00      	cmp	r6, #0
 800acf0:	f040 8085 	bne.w	800adfe <_dtoa_r+0x4de>
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1d2      	bne.n	800ac9e <_dtoa_r+0x37e>
 800acf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 808c 	beq.w	800ae18 <_dtoa_r+0x4f8>
 800ad00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad04:	4b99      	ldr	r3, [pc, #612]	; (800af6c <_dtoa_r+0x64c>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	4630      	mov	r0, r6
 800ad0a:	4639      	mov	r1, r7
 800ad0c:	f7f5 feee 	bl	8000aec <__aeabi_dcmplt>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	f000 8081 	beq.w	800ae18 <_dtoa_r+0x4f8>
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d07d      	beq.n	800ae18 <_dtoa_r+0x4f8>
 800ad1c:	f1b9 0f00 	cmp.w	r9, #0
 800ad20:	dd3c      	ble.n	800ad9c <_dtoa_r+0x47c>
 800ad22:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ad26:	9307      	str	r3, [sp, #28]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4b91      	ldr	r3, [pc, #580]	; (800af70 <_dtoa_r+0x650>)
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 fc6a 	bl	8000608 <__aeabi_dmul>
 800ad34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad38:	3501      	adds	r5, #1
 800ad3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ad3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad42:	4628      	mov	r0, r5
 800ad44:	f7f5 fbf6 	bl	8000534 <__aeabi_i2d>
 800ad48:	4632      	mov	r2, r6
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	f7f5 fc5c 	bl	8000608 <__aeabi_dmul>
 800ad50:	4b88      	ldr	r3, [pc, #544]	; (800af74 <_dtoa_r+0x654>)
 800ad52:	2200      	movs	r2, #0
 800ad54:	f7f5 faa2 	bl	800029c <__adddf3>
 800ad58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ad5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d15c      	bne.n	800ae22 <_dtoa_r+0x502>
 800ad68:	4b83      	ldr	r3, [pc, #524]	; (800af78 <_dtoa_r+0x658>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 fa92 	bl	8000298 <__aeabi_dsub>
 800ad74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	f7f5 fed4 	bl	8000b28 <__aeabi_dcmpgt>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	f040 8296 	bne.w	800b2b2 <_dtoa_r+0x992>
 800ad86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad90:	4639      	mov	r1, r7
 800ad92:	f7f5 feab 	bl	8000aec <__aeabi_dcmplt>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	f040 8288 	bne.w	800b2ac <_dtoa_r+0x98c>
 800ad9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ada0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ada4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f2c0 8158 	blt.w	800b05c <_dtoa_r+0x73c>
 800adac:	f1ba 0f0e 	cmp.w	sl, #14
 800adb0:	f300 8154 	bgt.w	800b05c <_dtoa_r+0x73c>
 800adb4:	4b6b      	ldr	r3, [pc, #428]	; (800af64 <_dtoa_r+0x644>)
 800adb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800adba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f280 80e3 	bge.w	800af8c <_dtoa_r+0x66c>
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f300 80df 	bgt.w	800af8c <_dtoa_r+0x66c>
 800adce:	f040 826d 	bne.w	800b2ac <_dtoa_r+0x98c>
 800add2:	4b69      	ldr	r3, [pc, #420]	; (800af78 <_dtoa_r+0x658>)
 800add4:	2200      	movs	r2, #0
 800add6:	4640      	mov	r0, r8
 800add8:	4649      	mov	r1, r9
 800adda:	f7f5 fc15 	bl	8000608 <__aeabi_dmul>
 800adde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ade2:	f7f5 fe97 	bl	8000b14 <__aeabi_dcmpge>
 800ade6:	9e01      	ldr	r6, [sp, #4]
 800ade8:	4637      	mov	r7, r6
 800adea:	2800      	cmp	r0, #0
 800adec:	f040 8243 	bne.w	800b276 <_dtoa_r+0x956>
 800adf0:	9d00      	ldr	r5, [sp, #0]
 800adf2:	2331      	movs	r3, #49	; 0x31
 800adf4:	f805 3b01 	strb.w	r3, [r5], #1
 800adf8:	f10a 0a01 	add.w	sl, sl, #1
 800adfc:	e23f      	b.n	800b27e <_dtoa_r+0x95e>
 800adfe:	07f2      	lsls	r2, r6, #31
 800ae00:	d505      	bpl.n	800ae0e <_dtoa_r+0x4ee>
 800ae02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae06:	f7f5 fbff 	bl	8000608 <__aeabi_dmul>
 800ae0a:	3501      	adds	r5, #1
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	1076      	asrs	r6, r6, #1
 800ae10:	3708      	adds	r7, #8
 800ae12:	e76c      	b.n	800acee <_dtoa_r+0x3ce>
 800ae14:	2502      	movs	r5, #2
 800ae16:	e76f      	b.n	800acf8 <_dtoa_r+0x3d8>
 800ae18:	9b01      	ldr	r3, [sp, #4]
 800ae1a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae20:	e78d      	b.n	800ad3e <_dtoa_r+0x41e>
 800ae22:	9900      	ldr	r1, [sp, #0]
 800ae24:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ae26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae28:	4b4e      	ldr	r3, [pc, #312]	; (800af64 <_dtoa_r+0x644>)
 800ae2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae2e:	4401      	add	r1, r0
 800ae30:	9102      	str	r1, [sp, #8]
 800ae32:	9908      	ldr	r1, [sp, #32]
 800ae34:	eeb0 8a47 	vmov.f32	s16, s14
 800ae38:	eef0 8a67 	vmov.f32	s17, s15
 800ae3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae44:	2900      	cmp	r1, #0
 800ae46:	d045      	beq.n	800aed4 <_dtoa_r+0x5b4>
 800ae48:	494c      	ldr	r1, [pc, #304]	; (800af7c <_dtoa_r+0x65c>)
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f7f5 fd06 	bl	800085c <__aeabi_ddiv>
 800ae50:	ec53 2b18 	vmov	r2, r3, d8
 800ae54:	f7f5 fa20 	bl	8000298 <__aeabi_dsub>
 800ae58:	9d00      	ldr	r5, [sp, #0]
 800ae5a:	ec41 0b18 	vmov	d8, r0, r1
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7f5 fe81 	bl	8000b68 <__aeabi_d2iz>
 800ae66:	900c      	str	r0, [sp, #48]	; 0x30
 800ae68:	f7f5 fb64 	bl	8000534 <__aeabi_i2d>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4630      	mov	r0, r6
 800ae72:	4639      	mov	r1, r7
 800ae74:	f7f5 fa10 	bl	8000298 <__aeabi_dsub>
 800ae78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae7a:	3330      	adds	r3, #48	; 0x30
 800ae7c:	f805 3b01 	strb.w	r3, [r5], #1
 800ae80:	ec53 2b18 	vmov	r2, r3, d8
 800ae84:	4606      	mov	r6, r0
 800ae86:	460f      	mov	r7, r1
 800ae88:	f7f5 fe30 	bl	8000aec <__aeabi_dcmplt>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d165      	bne.n	800af5c <_dtoa_r+0x63c>
 800ae90:	4632      	mov	r2, r6
 800ae92:	463b      	mov	r3, r7
 800ae94:	4935      	ldr	r1, [pc, #212]	; (800af6c <_dtoa_r+0x64c>)
 800ae96:	2000      	movs	r0, #0
 800ae98:	f7f5 f9fe 	bl	8000298 <__aeabi_dsub>
 800ae9c:	ec53 2b18 	vmov	r2, r3, d8
 800aea0:	f7f5 fe24 	bl	8000aec <__aeabi_dcmplt>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f040 80b9 	bne.w	800b01c <_dtoa_r+0x6fc>
 800aeaa:	9b02      	ldr	r3, [sp, #8]
 800aeac:	429d      	cmp	r5, r3
 800aeae:	f43f af75 	beq.w	800ad9c <_dtoa_r+0x47c>
 800aeb2:	4b2f      	ldr	r3, [pc, #188]	; (800af70 <_dtoa_r+0x650>)
 800aeb4:	ec51 0b18 	vmov	r0, r1, d8
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f7f5 fba5 	bl	8000608 <__aeabi_dmul>
 800aebe:	4b2c      	ldr	r3, [pc, #176]	; (800af70 <_dtoa_r+0x650>)
 800aec0:	ec41 0b18 	vmov	d8, r0, r1
 800aec4:	2200      	movs	r2, #0
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fb9d 	bl	8000608 <__aeabi_dmul>
 800aece:	4606      	mov	r6, r0
 800aed0:	460f      	mov	r7, r1
 800aed2:	e7c4      	b.n	800ae5e <_dtoa_r+0x53e>
 800aed4:	ec51 0b17 	vmov	r0, r1, d7
 800aed8:	f7f5 fb96 	bl	8000608 <__aeabi_dmul>
 800aedc:	9b02      	ldr	r3, [sp, #8]
 800aede:	9d00      	ldr	r5, [sp, #0]
 800aee0:	930c      	str	r3, [sp, #48]	; 0x30
 800aee2:	ec41 0b18 	vmov	d8, r0, r1
 800aee6:	4639      	mov	r1, r7
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7f5 fe3d 	bl	8000b68 <__aeabi_d2iz>
 800aeee:	9011      	str	r0, [sp, #68]	; 0x44
 800aef0:	f7f5 fb20 	bl	8000534 <__aeabi_i2d>
 800aef4:	4602      	mov	r2, r0
 800aef6:	460b      	mov	r3, r1
 800aef8:	4630      	mov	r0, r6
 800aefa:	4639      	mov	r1, r7
 800aefc:	f7f5 f9cc 	bl	8000298 <__aeabi_dsub>
 800af00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af02:	3330      	adds	r3, #48	; 0x30
 800af04:	f805 3b01 	strb.w	r3, [r5], #1
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	429d      	cmp	r5, r3
 800af0c:	4606      	mov	r6, r0
 800af0e:	460f      	mov	r7, r1
 800af10:	f04f 0200 	mov.w	r2, #0
 800af14:	d134      	bne.n	800af80 <_dtoa_r+0x660>
 800af16:	4b19      	ldr	r3, [pc, #100]	; (800af7c <_dtoa_r+0x65c>)
 800af18:	ec51 0b18 	vmov	r0, r1, d8
 800af1c:	f7f5 f9be 	bl	800029c <__adddf3>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4630      	mov	r0, r6
 800af26:	4639      	mov	r1, r7
 800af28:	f7f5 fdfe 	bl	8000b28 <__aeabi_dcmpgt>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d175      	bne.n	800b01c <_dtoa_r+0x6fc>
 800af30:	ec53 2b18 	vmov	r2, r3, d8
 800af34:	4911      	ldr	r1, [pc, #68]	; (800af7c <_dtoa_r+0x65c>)
 800af36:	2000      	movs	r0, #0
 800af38:	f7f5 f9ae 	bl	8000298 <__aeabi_dsub>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fdd2 	bl	8000aec <__aeabi_dcmplt>
 800af48:	2800      	cmp	r0, #0
 800af4a:	f43f af27 	beq.w	800ad9c <_dtoa_r+0x47c>
 800af4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af50:	1e6b      	subs	r3, r5, #1
 800af52:	930c      	str	r3, [sp, #48]	; 0x30
 800af54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af58:	2b30      	cmp	r3, #48	; 0x30
 800af5a:	d0f8      	beq.n	800af4e <_dtoa_r+0x62e>
 800af5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800af60:	e04a      	b.n	800aff8 <_dtoa_r+0x6d8>
 800af62:	bf00      	nop
 800af64:	0800d510 	.word	0x0800d510
 800af68:	0800d4e8 	.word	0x0800d4e8
 800af6c:	3ff00000 	.word	0x3ff00000
 800af70:	40240000 	.word	0x40240000
 800af74:	401c0000 	.word	0x401c0000
 800af78:	40140000 	.word	0x40140000
 800af7c:	3fe00000 	.word	0x3fe00000
 800af80:	4baf      	ldr	r3, [pc, #700]	; (800b240 <_dtoa_r+0x920>)
 800af82:	f7f5 fb41 	bl	8000608 <__aeabi_dmul>
 800af86:	4606      	mov	r6, r0
 800af88:	460f      	mov	r7, r1
 800af8a:	e7ac      	b.n	800aee6 <_dtoa_r+0x5c6>
 800af8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af90:	9d00      	ldr	r5, [sp, #0]
 800af92:	4642      	mov	r2, r8
 800af94:	464b      	mov	r3, r9
 800af96:	4630      	mov	r0, r6
 800af98:	4639      	mov	r1, r7
 800af9a:	f7f5 fc5f 	bl	800085c <__aeabi_ddiv>
 800af9e:	f7f5 fde3 	bl	8000b68 <__aeabi_d2iz>
 800afa2:	9002      	str	r0, [sp, #8]
 800afa4:	f7f5 fac6 	bl	8000534 <__aeabi_i2d>
 800afa8:	4642      	mov	r2, r8
 800afaa:	464b      	mov	r3, r9
 800afac:	f7f5 fb2c 	bl	8000608 <__aeabi_dmul>
 800afb0:	4602      	mov	r2, r0
 800afb2:	460b      	mov	r3, r1
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 f96e 	bl	8000298 <__aeabi_dsub>
 800afbc:	9e02      	ldr	r6, [sp, #8]
 800afbe:	9f01      	ldr	r7, [sp, #4]
 800afc0:	3630      	adds	r6, #48	; 0x30
 800afc2:	f805 6b01 	strb.w	r6, [r5], #1
 800afc6:	9e00      	ldr	r6, [sp, #0]
 800afc8:	1bae      	subs	r6, r5, r6
 800afca:	42b7      	cmp	r7, r6
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	d137      	bne.n	800b042 <_dtoa_r+0x722>
 800afd2:	f7f5 f963 	bl	800029c <__adddf3>
 800afd6:	4642      	mov	r2, r8
 800afd8:	464b      	mov	r3, r9
 800afda:	4606      	mov	r6, r0
 800afdc:	460f      	mov	r7, r1
 800afde:	f7f5 fda3 	bl	8000b28 <__aeabi_dcmpgt>
 800afe2:	b9c8      	cbnz	r0, 800b018 <_dtoa_r+0x6f8>
 800afe4:	4642      	mov	r2, r8
 800afe6:	464b      	mov	r3, r9
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	f7f5 fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 800aff0:	b110      	cbz	r0, 800aff8 <_dtoa_r+0x6d8>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	07d9      	lsls	r1, r3, #31
 800aff6:	d40f      	bmi.n	800b018 <_dtoa_r+0x6f8>
 800aff8:	4620      	mov	r0, r4
 800affa:	4659      	mov	r1, fp
 800affc:	f000 fac8 	bl	800b590 <_Bfree>
 800b000:	2300      	movs	r3, #0
 800b002:	702b      	strb	r3, [r5, #0]
 800b004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b006:	f10a 0001 	add.w	r0, sl, #1
 800b00a:	6018      	str	r0, [r3, #0]
 800b00c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f43f acd8 	beq.w	800a9c4 <_dtoa_r+0xa4>
 800b014:	601d      	str	r5, [r3, #0]
 800b016:	e4d5      	b.n	800a9c4 <_dtoa_r+0xa4>
 800b018:	f8cd a01c 	str.w	sl, [sp, #28]
 800b01c:	462b      	mov	r3, r5
 800b01e:	461d      	mov	r5, r3
 800b020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b024:	2a39      	cmp	r2, #57	; 0x39
 800b026:	d108      	bne.n	800b03a <_dtoa_r+0x71a>
 800b028:	9a00      	ldr	r2, [sp, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d1f7      	bne.n	800b01e <_dtoa_r+0x6fe>
 800b02e:	9a07      	ldr	r2, [sp, #28]
 800b030:	9900      	ldr	r1, [sp, #0]
 800b032:	3201      	adds	r2, #1
 800b034:	9207      	str	r2, [sp, #28]
 800b036:	2230      	movs	r2, #48	; 0x30
 800b038:	700a      	strb	r2, [r1, #0]
 800b03a:	781a      	ldrb	r2, [r3, #0]
 800b03c:	3201      	adds	r2, #1
 800b03e:	701a      	strb	r2, [r3, #0]
 800b040:	e78c      	b.n	800af5c <_dtoa_r+0x63c>
 800b042:	4b7f      	ldr	r3, [pc, #508]	; (800b240 <_dtoa_r+0x920>)
 800b044:	2200      	movs	r2, #0
 800b046:	f7f5 fadf 	bl	8000608 <__aeabi_dmul>
 800b04a:	2200      	movs	r2, #0
 800b04c:	2300      	movs	r3, #0
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	f7f5 fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 800b056:	2800      	cmp	r0, #0
 800b058:	d09b      	beq.n	800af92 <_dtoa_r+0x672>
 800b05a:	e7cd      	b.n	800aff8 <_dtoa_r+0x6d8>
 800b05c:	9a08      	ldr	r2, [sp, #32]
 800b05e:	2a00      	cmp	r2, #0
 800b060:	f000 80c4 	beq.w	800b1ec <_dtoa_r+0x8cc>
 800b064:	9a05      	ldr	r2, [sp, #20]
 800b066:	2a01      	cmp	r2, #1
 800b068:	f300 80a8 	bgt.w	800b1bc <_dtoa_r+0x89c>
 800b06c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b06e:	2a00      	cmp	r2, #0
 800b070:	f000 80a0 	beq.w	800b1b4 <_dtoa_r+0x894>
 800b074:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b078:	9e06      	ldr	r6, [sp, #24]
 800b07a:	4645      	mov	r5, r8
 800b07c:	9a04      	ldr	r2, [sp, #16]
 800b07e:	2101      	movs	r1, #1
 800b080:	441a      	add	r2, r3
 800b082:	4620      	mov	r0, r4
 800b084:	4498      	add	r8, r3
 800b086:	9204      	str	r2, [sp, #16]
 800b088:	f000 fb3e 	bl	800b708 <__i2b>
 800b08c:	4607      	mov	r7, r0
 800b08e:	2d00      	cmp	r5, #0
 800b090:	dd0b      	ble.n	800b0aa <_dtoa_r+0x78a>
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	dd08      	ble.n	800b0aa <_dtoa_r+0x78a>
 800b098:	42ab      	cmp	r3, r5
 800b09a:	9a04      	ldr	r2, [sp, #16]
 800b09c:	bfa8      	it	ge
 800b09e:	462b      	movge	r3, r5
 800b0a0:	eba8 0803 	sub.w	r8, r8, r3
 800b0a4:	1aed      	subs	r5, r5, r3
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	9b06      	ldr	r3, [sp, #24]
 800b0ac:	b1fb      	cbz	r3, 800b0ee <_dtoa_r+0x7ce>
 800b0ae:	9b08      	ldr	r3, [sp, #32]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f000 809f 	beq.w	800b1f4 <_dtoa_r+0x8d4>
 800b0b6:	2e00      	cmp	r6, #0
 800b0b8:	dd11      	ble.n	800b0de <_dtoa_r+0x7be>
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4632      	mov	r2, r6
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f000 fbde 	bl	800b880 <__pow5mult>
 800b0c4:	465a      	mov	r2, fp
 800b0c6:	4601      	mov	r1, r0
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fb32 	bl	800b734 <__multiply>
 800b0d0:	4659      	mov	r1, fp
 800b0d2:	9007      	str	r0, [sp, #28]
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f000 fa5b 	bl	800b590 <_Bfree>
 800b0da:	9b07      	ldr	r3, [sp, #28]
 800b0dc:	469b      	mov	fp, r3
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	1b9a      	subs	r2, r3, r6
 800b0e2:	d004      	beq.n	800b0ee <_dtoa_r+0x7ce>
 800b0e4:	4659      	mov	r1, fp
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	f000 fbca 	bl	800b880 <__pow5mult>
 800b0ec:	4683      	mov	fp, r0
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fb09 	bl	800b708 <__i2b>
 800b0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	dd7c      	ble.n	800b1f8 <_dtoa_r+0x8d8>
 800b0fe:	461a      	mov	r2, r3
 800b100:	4601      	mov	r1, r0
 800b102:	4620      	mov	r0, r4
 800b104:	f000 fbbc 	bl	800b880 <__pow5mult>
 800b108:	9b05      	ldr	r3, [sp, #20]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	4606      	mov	r6, r0
 800b10e:	dd76      	ble.n	800b1fe <_dtoa_r+0x8de>
 800b110:	2300      	movs	r3, #0
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	6933      	ldr	r3, [r6, #16]
 800b116:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b11a:	6918      	ldr	r0, [r3, #16]
 800b11c:	f000 faa4 	bl	800b668 <__hi0bits>
 800b120:	f1c0 0020 	rsb	r0, r0, #32
 800b124:	9b04      	ldr	r3, [sp, #16]
 800b126:	4418      	add	r0, r3
 800b128:	f010 001f 	ands.w	r0, r0, #31
 800b12c:	f000 8086 	beq.w	800b23c <_dtoa_r+0x91c>
 800b130:	f1c0 0320 	rsb	r3, r0, #32
 800b134:	2b04      	cmp	r3, #4
 800b136:	dd7f      	ble.n	800b238 <_dtoa_r+0x918>
 800b138:	f1c0 001c 	rsb	r0, r0, #28
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	4403      	add	r3, r0
 800b140:	4480      	add	r8, r0
 800b142:	4405      	add	r5, r0
 800b144:	9304      	str	r3, [sp, #16]
 800b146:	f1b8 0f00 	cmp.w	r8, #0
 800b14a:	dd05      	ble.n	800b158 <_dtoa_r+0x838>
 800b14c:	4659      	mov	r1, fp
 800b14e:	4642      	mov	r2, r8
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fbef 	bl	800b934 <__lshift>
 800b156:	4683      	mov	fp, r0
 800b158:	9b04      	ldr	r3, [sp, #16]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	dd05      	ble.n	800b16a <_dtoa_r+0x84a>
 800b15e:	4631      	mov	r1, r6
 800b160:	461a      	mov	r2, r3
 800b162:	4620      	mov	r0, r4
 800b164:	f000 fbe6 	bl	800b934 <__lshift>
 800b168:	4606      	mov	r6, r0
 800b16a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d069      	beq.n	800b244 <_dtoa_r+0x924>
 800b170:	4631      	mov	r1, r6
 800b172:	4658      	mov	r0, fp
 800b174:	f000 fc4a 	bl	800ba0c <__mcmp>
 800b178:	2800      	cmp	r0, #0
 800b17a:	da63      	bge.n	800b244 <_dtoa_r+0x924>
 800b17c:	2300      	movs	r3, #0
 800b17e:	4659      	mov	r1, fp
 800b180:	220a      	movs	r2, #10
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fa26 	bl	800b5d4 <__multadd>
 800b188:	9b08      	ldr	r3, [sp, #32]
 800b18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b18e:	4683      	mov	fp, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 818f 	beq.w	800b4b4 <_dtoa_r+0xb94>
 800b196:	4639      	mov	r1, r7
 800b198:	2300      	movs	r3, #0
 800b19a:	220a      	movs	r2, #10
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fa19 	bl	800b5d4 <__multadd>
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	f300 808e 	bgt.w	800b2c8 <_dtoa_r+0x9a8>
 800b1ac:	9b05      	ldr	r3, [sp, #20]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	dc50      	bgt.n	800b254 <_dtoa_r+0x934>
 800b1b2:	e089      	b.n	800b2c8 <_dtoa_r+0x9a8>
 800b1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1ba:	e75d      	b.n	800b078 <_dtoa_r+0x758>
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	1e5e      	subs	r6, r3, #1
 800b1c0:	9b06      	ldr	r3, [sp, #24]
 800b1c2:	42b3      	cmp	r3, r6
 800b1c4:	bfbf      	itttt	lt
 800b1c6:	9b06      	ldrlt	r3, [sp, #24]
 800b1c8:	9606      	strlt	r6, [sp, #24]
 800b1ca:	1af2      	sublt	r2, r6, r3
 800b1cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b1ce:	bfb6      	itet	lt
 800b1d0:	189b      	addlt	r3, r3, r2
 800b1d2:	1b9e      	subge	r6, r3, r6
 800b1d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	bfb8      	it	lt
 800b1da:	2600      	movlt	r6, #0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	bfb5      	itete	lt
 800b1e0:	eba8 0503 	sublt.w	r5, r8, r3
 800b1e4:	9b01      	ldrge	r3, [sp, #4]
 800b1e6:	2300      	movlt	r3, #0
 800b1e8:	4645      	movge	r5, r8
 800b1ea:	e747      	b.n	800b07c <_dtoa_r+0x75c>
 800b1ec:	9e06      	ldr	r6, [sp, #24]
 800b1ee:	9f08      	ldr	r7, [sp, #32]
 800b1f0:	4645      	mov	r5, r8
 800b1f2:	e74c      	b.n	800b08e <_dtoa_r+0x76e>
 800b1f4:	9a06      	ldr	r2, [sp, #24]
 800b1f6:	e775      	b.n	800b0e4 <_dtoa_r+0x7c4>
 800b1f8:	9b05      	ldr	r3, [sp, #20]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	dc18      	bgt.n	800b230 <_dtoa_r+0x910>
 800b1fe:	9b02      	ldr	r3, [sp, #8]
 800b200:	b9b3      	cbnz	r3, 800b230 <_dtoa_r+0x910>
 800b202:	9b03      	ldr	r3, [sp, #12]
 800b204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b208:	b9a3      	cbnz	r3, 800b234 <_dtoa_r+0x914>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b210:	0d1b      	lsrs	r3, r3, #20
 800b212:	051b      	lsls	r3, r3, #20
 800b214:	b12b      	cbz	r3, 800b222 <_dtoa_r+0x902>
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	3301      	adds	r3, #1
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	f108 0801 	add.w	r8, r8, #1
 800b220:	2301      	movs	r3, #1
 800b222:	9306      	str	r3, [sp, #24]
 800b224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b226:	2b00      	cmp	r3, #0
 800b228:	f47f af74 	bne.w	800b114 <_dtoa_r+0x7f4>
 800b22c:	2001      	movs	r0, #1
 800b22e:	e779      	b.n	800b124 <_dtoa_r+0x804>
 800b230:	2300      	movs	r3, #0
 800b232:	e7f6      	b.n	800b222 <_dtoa_r+0x902>
 800b234:	9b02      	ldr	r3, [sp, #8]
 800b236:	e7f4      	b.n	800b222 <_dtoa_r+0x902>
 800b238:	d085      	beq.n	800b146 <_dtoa_r+0x826>
 800b23a:	4618      	mov	r0, r3
 800b23c:	301c      	adds	r0, #28
 800b23e:	e77d      	b.n	800b13c <_dtoa_r+0x81c>
 800b240:	40240000 	.word	0x40240000
 800b244:	9b01      	ldr	r3, [sp, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc38      	bgt.n	800b2bc <_dtoa_r+0x99c>
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	dd35      	ble.n	800b2bc <_dtoa_r+0x99c>
 800b250:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b254:	f1b9 0f00 	cmp.w	r9, #0
 800b258:	d10d      	bne.n	800b276 <_dtoa_r+0x956>
 800b25a:	4631      	mov	r1, r6
 800b25c:	464b      	mov	r3, r9
 800b25e:	2205      	movs	r2, #5
 800b260:	4620      	mov	r0, r4
 800b262:	f000 f9b7 	bl	800b5d4 <__multadd>
 800b266:	4601      	mov	r1, r0
 800b268:	4606      	mov	r6, r0
 800b26a:	4658      	mov	r0, fp
 800b26c:	f000 fbce 	bl	800ba0c <__mcmp>
 800b270:	2800      	cmp	r0, #0
 800b272:	f73f adbd 	bgt.w	800adf0 <_dtoa_r+0x4d0>
 800b276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b278:	9d00      	ldr	r5, [sp, #0]
 800b27a:	ea6f 0a03 	mvn.w	sl, r3
 800b27e:	f04f 0800 	mov.w	r8, #0
 800b282:	4631      	mov	r1, r6
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f983 	bl	800b590 <_Bfree>
 800b28a:	2f00      	cmp	r7, #0
 800b28c:	f43f aeb4 	beq.w	800aff8 <_dtoa_r+0x6d8>
 800b290:	f1b8 0f00 	cmp.w	r8, #0
 800b294:	d005      	beq.n	800b2a2 <_dtoa_r+0x982>
 800b296:	45b8      	cmp	r8, r7
 800b298:	d003      	beq.n	800b2a2 <_dtoa_r+0x982>
 800b29a:	4641      	mov	r1, r8
 800b29c:	4620      	mov	r0, r4
 800b29e:	f000 f977 	bl	800b590 <_Bfree>
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f000 f973 	bl	800b590 <_Bfree>
 800b2aa:	e6a5      	b.n	800aff8 <_dtoa_r+0x6d8>
 800b2ac:	2600      	movs	r6, #0
 800b2ae:	4637      	mov	r7, r6
 800b2b0:	e7e1      	b.n	800b276 <_dtoa_r+0x956>
 800b2b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b2b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b2b8:	4637      	mov	r7, r6
 800b2ba:	e599      	b.n	800adf0 <_dtoa_r+0x4d0>
 800b2bc:	9b08      	ldr	r3, [sp, #32]
 800b2be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f000 80fd 	beq.w	800b4c2 <_dtoa_r+0xba2>
 800b2c8:	2d00      	cmp	r5, #0
 800b2ca:	dd05      	ble.n	800b2d8 <_dtoa_r+0x9b8>
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb2f 	bl	800b934 <__lshift>
 800b2d6:	4607      	mov	r7, r0
 800b2d8:	9b06      	ldr	r3, [sp, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d05c      	beq.n	800b398 <_dtoa_r+0xa78>
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f915 	bl	800b510 <_Balloc>
 800b2e6:	4605      	mov	r5, r0
 800b2e8:	b928      	cbnz	r0, 800b2f6 <_dtoa_r+0x9d6>
 800b2ea:	4b80      	ldr	r3, [pc, #512]	; (800b4ec <_dtoa_r+0xbcc>)
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b2f2:	f7ff bb2e 	b.w	800a952 <_dtoa_r+0x32>
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	3202      	adds	r2, #2
 800b2fa:	0092      	lsls	r2, r2, #2
 800b2fc:	f107 010c 	add.w	r1, r7, #12
 800b300:	300c      	adds	r0, #12
 800b302:	f7fe fdbf 	bl	8009e84 <memcpy>
 800b306:	2201      	movs	r2, #1
 800b308:	4629      	mov	r1, r5
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fb12 	bl	800b934 <__lshift>
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	3301      	adds	r3, #1
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	9b00      	ldr	r3, [sp, #0]
 800b318:	444b      	add	r3, r9
 800b31a:	9307      	str	r3, [sp, #28]
 800b31c:	9b02      	ldr	r3, [sp, #8]
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	46b8      	mov	r8, r7
 800b324:	9306      	str	r3, [sp, #24]
 800b326:	4607      	mov	r7, r0
 800b328:	9b01      	ldr	r3, [sp, #4]
 800b32a:	4631      	mov	r1, r6
 800b32c:	3b01      	subs	r3, #1
 800b32e:	4658      	mov	r0, fp
 800b330:	9302      	str	r3, [sp, #8]
 800b332:	f7ff fa69 	bl	800a808 <quorem>
 800b336:	4603      	mov	r3, r0
 800b338:	3330      	adds	r3, #48	; 0x30
 800b33a:	9004      	str	r0, [sp, #16]
 800b33c:	4641      	mov	r1, r8
 800b33e:	4658      	mov	r0, fp
 800b340:	9308      	str	r3, [sp, #32]
 800b342:	f000 fb63 	bl	800ba0c <__mcmp>
 800b346:	463a      	mov	r2, r7
 800b348:	4681      	mov	r9, r0
 800b34a:	4631      	mov	r1, r6
 800b34c:	4620      	mov	r0, r4
 800b34e:	f000 fb79 	bl	800ba44 <__mdiff>
 800b352:	68c2      	ldr	r2, [r0, #12]
 800b354:	9b08      	ldr	r3, [sp, #32]
 800b356:	4605      	mov	r5, r0
 800b358:	bb02      	cbnz	r2, 800b39c <_dtoa_r+0xa7c>
 800b35a:	4601      	mov	r1, r0
 800b35c:	4658      	mov	r0, fp
 800b35e:	f000 fb55 	bl	800ba0c <__mcmp>
 800b362:	9b08      	ldr	r3, [sp, #32]
 800b364:	4602      	mov	r2, r0
 800b366:	4629      	mov	r1, r5
 800b368:	4620      	mov	r0, r4
 800b36a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b36e:	f000 f90f 	bl	800b590 <_Bfree>
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b376:	9d01      	ldr	r5, [sp, #4]
 800b378:	ea43 0102 	orr.w	r1, r3, r2
 800b37c:	9b06      	ldr	r3, [sp, #24]
 800b37e:	430b      	orrs	r3, r1
 800b380:	9b08      	ldr	r3, [sp, #32]
 800b382:	d10d      	bne.n	800b3a0 <_dtoa_r+0xa80>
 800b384:	2b39      	cmp	r3, #57	; 0x39
 800b386:	d029      	beq.n	800b3dc <_dtoa_r+0xabc>
 800b388:	f1b9 0f00 	cmp.w	r9, #0
 800b38c:	dd01      	ble.n	800b392 <_dtoa_r+0xa72>
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	3331      	adds	r3, #49	; 0x31
 800b392:	9a02      	ldr	r2, [sp, #8]
 800b394:	7013      	strb	r3, [r2, #0]
 800b396:	e774      	b.n	800b282 <_dtoa_r+0x962>
 800b398:	4638      	mov	r0, r7
 800b39a:	e7b9      	b.n	800b310 <_dtoa_r+0x9f0>
 800b39c:	2201      	movs	r2, #1
 800b39e:	e7e2      	b.n	800b366 <_dtoa_r+0xa46>
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	db06      	blt.n	800b3b4 <_dtoa_r+0xa94>
 800b3a6:	9905      	ldr	r1, [sp, #20]
 800b3a8:	ea41 0909 	orr.w	r9, r1, r9
 800b3ac:	9906      	ldr	r1, [sp, #24]
 800b3ae:	ea59 0101 	orrs.w	r1, r9, r1
 800b3b2:	d120      	bne.n	800b3f6 <_dtoa_r+0xad6>
 800b3b4:	2a00      	cmp	r2, #0
 800b3b6:	ddec      	ble.n	800b392 <_dtoa_r+0xa72>
 800b3b8:	4659      	mov	r1, fp
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	4620      	mov	r0, r4
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	f000 fab8 	bl	800b934 <__lshift>
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4683      	mov	fp, r0
 800b3c8:	f000 fb20 	bl	800ba0c <__mcmp>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	9b01      	ldr	r3, [sp, #4]
 800b3d0:	dc02      	bgt.n	800b3d8 <_dtoa_r+0xab8>
 800b3d2:	d1de      	bne.n	800b392 <_dtoa_r+0xa72>
 800b3d4:	07da      	lsls	r2, r3, #31
 800b3d6:	d5dc      	bpl.n	800b392 <_dtoa_r+0xa72>
 800b3d8:	2b39      	cmp	r3, #57	; 0x39
 800b3da:	d1d8      	bne.n	800b38e <_dtoa_r+0xa6e>
 800b3dc:	9a02      	ldr	r2, [sp, #8]
 800b3de:	2339      	movs	r3, #57	; 0x39
 800b3e0:	7013      	strb	r3, [r2, #0]
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	461d      	mov	r5, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b3ec:	2a39      	cmp	r2, #57	; 0x39
 800b3ee:	d050      	beq.n	800b492 <_dtoa_r+0xb72>
 800b3f0:	3201      	adds	r2, #1
 800b3f2:	701a      	strb	r2, [r3, #0]
 800b3f4:	e745      	b.n	800b282 <_dtoa_r+0x962>
 800b3f6:	2a00      	cmp	r2, #0
 800b3f8:	dd03      	ble.n	800b402 <_dtoa_r+0xae2>
 800b3fa:	2b39      	cmp	r3, #57	; 0x39
 800b3fc:	d0ee      	beq.n	800b3dc <_dtoa_r+0xabc>
 800b3fe:	3301      	adds	r3, #1
 800b400:	e7c7      	b.n	800b392 <_dtoa_r+0xa72>
 800b402:	9a01      	ldr	r2, [sp, #4]
 800b404:	9907      	ldr	r1, [sp, #28]
 800b406:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b40a:	428a      	cmp	r2, r1
 800b40c:	d02a      	beq.n	800b464 <_dtoa_r+0xb44>
 800b40e:	4659      	mov	r1, fp
 800b410:	2300      	movs	r3, #0
 800b412:	220a      	movs	r2, #10
 800b414:	4620      	mov	r0, r4
 800b416:	f000 f8dd 	bl	800b5d4 <__multadd>
 800b41a:	45b8      	cmp	r8, r7
 800b41c:	4683      	mov	fp, r0
 800b41e:	f04f 0300 	mov.w	r3, #0
 800b422:	f04f 020a 	mov.w	r2, #10
 800b426:	4641      	mov	r1, r8
 800b428:	4620      	mov	r0, r4
 800b42a:	d107      	bne.n	800b43c <_dtoa_r+0xb1c>
 800b42c:	f000 f8d2 	bl	800b5d4 <__multadd>
 800b430:	4680      	mov	r8, r0
 800b432:	4607      	mov	r7, r0
 800b434:	9b01      	ldr	r3, [sp, #4]
 800b436:	3301      	adds	r3, #1
 800b438:	9301      	str	r3, [sp, #4]
 800b43a:	e775      	b.n	800b328 <_dtoa_r+0xa08>
 800b43c:	f000 f8ca 	bl	800b5d4 <__multadd>
 800b440:	4639      	mov	r1, r7
 800b442:	4680      	mov	r8, r0
 800b444:	2300      	movs	r3, #0
 800b446:	220a      	movs	r2, #10
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 f8c3 	bl	800b5d4 <__multadd>
 800b44e:	4607      	mov	r7, r0
 800b450:	e7f0      	b.n	800b434 <_dtoa_r+0xb14>
 800b452:	f1b9 0f00 	cmp.w	r9, #0
 800b456:	9a00      	ldr	r2, [sp, #0]
 800b458:	bfcc      	ite	gt
 800b45a:	464d      	movgt	r5, r9
 800b45c:	2501      	movle	r5, #1
 800b45e:	4415      	add	r5, r2
 800b460:	f04f 0800 	mov.w	r8, #0
 800b464:	4659      	mov	r1, fp
 800b466:	2201      	movs	r2, #1
 800b468:	4620      	mov	r0, r4
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	f000 fa62 	bl	800b934 <__lshift>
 800b470:	4631      	mov	r1, r6
 800b472:	4683      	mov	fp, r0
 800b474:	f000 faca 	bl	800ba0c <__mcmp>
 800b478:	2800      	cmp	r0, #0
 800b47a:	dcb2      	bgt.n	800b3e2 <_dtoa_r+0xac2>
 800b47c:	d102      	bne.n	800b484 <_dtoa_r+0xb64>
 800b47e:	9b01      	ldr	r3, [sp, #4]
 800b480:	07db      	lsls	r3, r3, #31
 800b482:	d4ae      	bmi.n	800b3e2 <_dtoa_r+0xac2>
 800b484:	462b      	mov	r3, r5
 800b486:	461d      	mov	r5, r3
 800b488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b48c:	2a30      	cmp	r2, #48	; 0x30
 800b48e:	d0fa      	beq.n	800b486 <_dtoa_r+0xb66>
 800b490:	e6f7      	b.n	800b282 <_dtoa_r+0x962>
 800b492:	9a00      	ldr	r2, [sp, #0]
 800b494:	429a      	cmp	r2, r3
 800b496:	d1a5      	bne.n	800b3e4 <_dtoa_r+0xac4>
 800b498:	f10a 0a01 	add.w	sl, sl, #1
 800b49c:	2331      	movs	r3, #49	; 0x31
 800b49e:	e779      	b.n	800b394 <_dtoa_r+0xa74>
 800b4a0:	4b13      	ldr	r3, [pc, #76]	; (800b4f0 <_dtoa_r+0xbd0>)
 800b4a2:	f7ff baaf 	b.w	800aa04 <_dtoa_r+0xe4>
 800b4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f aa86 	bne.w	800a9ba <_dtoa_r+0x9a>
 800b4ae:	4b11      	ldr	r3, [pc, #68]	; (800b4f4 <_dtoa_r+0xbd4>)
 800b4b0:	f7ff baa8 	b.w	800aa04 <_dtoa_r+0xe4>
 800b4b4:	f1b9 0f00 	cmp.w	r9, #0
 800b4b8:	dc03      	bgt.n	800b4c2 <_dtoa_r+0xba2>
 800b4ba:	9b05      	ldr	r3, [sp, #20]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	f73f aec9 	bgt.w	800b254 <_dtoa_r+0x934>
 800b4c2:	9d00      	ldr	r5, [sp, #0]
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4658      	mov	r0, fp
 800b4c8:	f7ff f99e 	bl	800a808 <quorem>
 800b4cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b4d0:	f805 3b01 	strb.w	r3, [r5], #1
 800b4d4:	9a00      	ldr	r2, [sp, #0]
 800b4d6:	1aaa      	subs	r2, r5, r2
 800b4d8:	4591      	cmp	r9, r2
 800b4da:	ddba      	ble.n	800b452 <_dtoa_r+0xb32>
 800b4dc:	4659      	mov	r1, fp
 800b4de:	2300      	movs	r3, #0
 800b4e0:	220a      	movs	r2, #10
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f876 	bl	800b5d4 <__multadd>
 800b4e8:	4683      	mov	fp, r0
 800b4ea:	e7eb      	b.n	800b4c4 <_dtoa_r+0xba4>
 800b4ec:	0800d473 	.word	0x0800d473
 800b4f0:	0800d3cc 	.word	0x0800d3cc
 800b4f4:	0800d3f0 	.word	0x0800d3f0

0800b4f8 <_localeconv_r>:
 800b4f8:	4800      	ldr	r0, [pc, #0]	; (800b4fc <_localeconv_r+0x4>)
 800b4fa:	4770      	bx	lr
 800b4fc:	20000178 	.word	0x20000178

0800b500 <malloc>:
 800b500:	4b02      	ldr	r3, [pc, #8]	; (800b50c <malloc+0xc>)
 800b502:	4601      	mov	r1, r0
 800b504:	6818      	ldr	r0, [r3, #0]
 800b506:	f000 bbe1 	b.w	800bccc <_malloc_r>
 800b50a:	bf00      	nop
 800b50c:	20000024 	.word	0x20000024

0800b510 <_Balloc>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b514:	4604      	mov	r4, r0
 800b516:	460d      	mov	r5, r1
 800b518:	b976      	cbnz	r6, 800b538 <_Balloc+0x28>
 800b51a:	2010      	movs	r0, #16
 800b51c:	f7ff fff0 	bl	800b500 <malloc>
 800b520:	4602      	mov	r2, r0
 800b522:	6260      	str	r0, [r4, #36]	; 0x24
 800b524:	b920      	cbnz	r0, 800b530 <_Balloc+0x20>
 800b526:	4b18      	ldr	r3, [pc, #96]	; (800b588 <_Balloc+0x78>)
 800b528:	4818      	ldr	r0, [pc, #96]	; (800b58c <_Balloc+0x7c>)
 800b52a:	2166      	movs	r1, #102	; 0x66
 800b52c:	f000 fd94 	bl	800c058 <__assert_func>
 800b530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b534:	6006      	str	r6, [r0, #0]
 800b536:	60c6      	str	r6, [r0, #12]
 800b538:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b53a:	68f3      	ldr	r3, [r6, #12]
 800b53c:	b183      	cbz	r3, 800b560 <_Balloc+0x50>
 800b53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b546:	b9b8      	cbnz	r0, 800b578 <_Balloc+0x68>
 800b548:	2101      	movs	r1, #1
 800b54a:	fa01 f605 	lsl.w	r6, r1, r5
 800b54e:	1d72      	adds	r2, r6, #5
 800b550:	0092      	lsls	r2, r2, #2
 800b552:	4620      	mov	r0, r4
 800b554:	f000 fb5a 	bl	800bc0c <_calloc_r>
 800b558:	b160      	cbz	r0, 800b574 <_Balloc+0x64>
 800b55a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b55e:	e00e      	b.n	800b57e <_Balloc+0x6e>
 800b560:	2221      	movs	r2, #33	; 0x21
 800b562:	2104      	movs	r1, #4
 800b564:	4620      	mov	r0, r4
 800b566:	f000 fb51 	bl	800bc0c <_calloc_r>
 800b56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b56c:	60f0      	str	r0, [r6, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e4      	bne.n	800b53e <_Balloc+0x2e>
 800b574:	2000      	movs	r0, #0
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	6802      	ldr	r2, [r0, #0]
 800b57a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b57e:	2300      	movs	r3, #0
 800b580:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b584:	e7f7      	b.n	800b576 <_Balloc+0x66>
 800b586:	bf00      	nop
 800b588:	0800d3fd 	.word	0x0800d3fd
 800b58c:	0800d484 	.word	0x0800d484

0800b590 <_Bfree>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b594:	4605      	mov	r5, r0
 800b596:	460c      	mov	r4, r1
 800b598:	b976      	cbnz	r6, 800b5b8 <_Bfree+0x28>
 800b59a:	2010      	movs	r0, #16
 800b59c:	f7ff ffb0 	bl	800b500 <malloc>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b5a4:	b920      	cbnz	r0, 800b5b0 <_Bfree+0x20>
 800b5a6:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <_Bfree+0x3c>)
 800b5a8:	4809      	ldr	r0, [pc, #36]	; (800b5d0 <_Bfree+0x40>)
 800b5aa:	218a      	movs	r1, #138	; 0x8a
 800b5ac:	f000 fd54 	bl	800c058 <__assert_func>
 800b5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5b4:	6006      	str	r6, [r0, #0]
 800b5b6:	60c6      	str	r6, [r0, #12]
 800b5b8:	b13c      	cbz	r4, 800b5ca <_Bfree+0x3a>
 800b5ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b5bc:	6862      	ldr	r2, [r4, #4]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5c4:	6021      	str	r1, [r4, #0]
 800b5c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	0800d3fd 	.word	0x0800d3fd
 800b5d0:	0800d484 	.word	0x0800d484

0800b5d4 <__multadd>:
 800b5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d8:	690e      	ldr	r6, [r1, #16]
 800b5da:	4607      	mov	r7, r0
 800b5dc:	4698      	mov	r8, r3
 800b5de:	460c      	mov	r4, r1
 800b5e0:	f101 0014 	add.w	r0, r1, #20
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	6805      	ldr	r5, [r0, #0]
 800b5e8:	b2a9      	uxth	r1, r5
 800b5ea:	fb02 8101 	mla	r1, r2, r1, r8
 800b5ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b5f2:	0c2d      	lsrs	r5, r5, #16
 800b5f4:	fb02 c505 	mla	r5, r2, r5, ip
 800b5f8:	b289      	uxth	r1, r1
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b600:	429e      	cmp	r6, r3
 800b602:	f840 1b04 	str.w	r1, [r0], #4
 800b606:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b60a:	dcec      	bgt.n	800b5e6 <__multadd+0x12>
 800b60c:	f1b8 0f00 	cmp.w	r8, #0
 800b610:	d022      	beq.n	800b658 <__multadd+0x84>
 800b612:	68a3      	ldr	r3, [r4, #8]
 800b614:	42b3      	cmp	r3, r6
 800b616:	dc19      	bgt.n	800b64c <__multadd+0x78>
 800b618:	6861      	ldr	r1, [r4, #4]
 800b61a:	4638      	mov	r0, r7
 800b61c:	3101      	adds	r1, #1
 800b61e:	f7ff ff77 	bl	800b510 <_Balloc>
 800b622:	4605      	mov	r5, r0
 800b624:	b928      	cbnz	r0, 800b632 <__multadd+0x5e>
 800b626:	4602      	mov	r2, r0
 800b628:	4b0d      	ldr	r3, [pc, #52]	; (800b660 <__multadd+0x8c>)
 800b62a:	480e      	ldr	r0, [pc, #56]	; (800b664 <__multadd+0x90>)
 800b62c:	21b5      	movs	r1, #181	; 0xb5
 800b62e:	f000 fd13 	bl	800c058 <__assert_func>
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	3202      	adds	r2, #2
 800b636:	f104 010c 	add.w	r1, r4, #12
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	300c      	adds	r0, #12
 800b63e:	f7fe fc21 	bl	8009e84 <memcpy>
 800b642:	4621      	mov	r1, r4
 800b644:	4638      	mov	r0, r7
 800b646:	f7ff ffa3 	bl	800b590 <_Bfree>
 800b64a:	462c      	mov	r4, r5
 800b64c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b650:	3601      	adds	r6, #1
 800b652:	f8c3 8014 	str.w	r8, [r3, #20]
 800b656:	6126      	str	r6, [r4, #16]
 800b658:	4620      	mov	r0, r4
 800b65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65e:	bf00      	nop
 800b660:	0800d473 	.word	0x0800d473
 800b664:	0800d484 	.word	0x0800d484

0800b668 <__hi0bits>:
 800b668:	0c03      	lsrs	r3, r0, #16
 800b66a:	041b      	lsls	r3, r3, #16
 800b66c:	b9d3      	cbnz	r3, 800b6a4 <__hi0bits+0x3c>
 800b66e:	0400      	lsls	r0, r0, #16
 800b670:	2310      	movs	r3, #16
 800b672:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b676:	bf04      	itt	eq
 800b678:	0200      	lsleq	r0, r0, #8
 800b67a:	3308      	addeq	r3, #8
 800b67c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b680:	bf04      	itt	eq
 800b682:	0100      	lsleq	r0, r0, #4
 800b684:	3304      	addeq	r3, #4
 800b686:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b68a:	bf04      	itt	eq
 800b68c:	0080      	lsleq	r0, r0, #2
 800b68e:	3302      	addeq	r3, #2
 800b690:	2800      	cmp	r0, #0
 800b692:	db05      	blt.n	800b6a0 <__hi0bits+0x38>
 800b694:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b698:	f103 0301 	add.w	r3, r3, #1
 800b69c:	bf08      	it	eq
 800b69e:	2320      	moveq	r3, #32
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	4770      	bx	lr
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e7e4      	b.n	800b672 <__hi0bits+0xa>

0800b6a8 <__lo0bits>:
 800b6a8:	6803      	ldr	r3, [r0, #0]
 800b6aa:	f013 0207 	ands.w	r2, r3, #7
 800b6ae:	4601      	mov	r1, r0
 800b6b0:	d00b      	beq.n	800b6ca <__lo0bits+0x22>
 800b6b2:	07da      	lsls	r2, r3, #31
 800b6b4:	d424      	bmi.n	800b700 <__lo0bits+0x58>
 800b6b6:	0798      	lsls	r0, r3, #30
 800b6b8:	bf49      	itett	mi
 800b6ba:	085b      	lsrmi	r3, r3, #1
 800b6bc:	089b      	lsrpl	r3, r3, #2
 800b6be:	2001      	movmi	r0, #1
 800b6c0:	600b      	strmi	r3, [r1, #0]
 800b6c2:	bf5c      	itt	pl
 800b6c4:	600b      	strpl	r3, [r1, #0]
 800b6c6:	2002      	movpl	r0, #2
 800b6c8:	4770      	bx	lr
 800b6ca:	b298      	uxth	r0, r3
 800b6cc:	b9b0      	cbnz	r0, 800b6fc <__lo0bits+0x54>
 800b6ce:	0c1b      	lsrs	r3, r3, #16
 800b6d0:	2010      	movs	r0, #16
 800b6d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b6d6:	bf04      	itt	eq
 800b6d8:	0a1b      	lsreq	r3, r3, #8
 800b6da:	3008      	addeq	r0, #8
 800b6dc:	071a      	lsls	r2, r3, #28
 800b6de:	bf04      	itt	eq
 800b6e0:	091b      	lsreq	r3, r3, #4
 800b6e2:	3004      	addeq	r0, #4
 800b6e4:	079a      	lsls	r2, r3, #30
 800b6e6:	bf04      	itt	eq
 800b6e8:	089b      	lsreq	r3, r3, #2
 800b6ea:	3002      	addeq	r0, #2
 800b6ec:	07da      	lsls	r2, r3, #31
 800b6ee:	d403      	bmi.n	800b6f8 <__lo0bits+0x50>
 800b6f0:	085b      	lsrs	r3, r3, #1
 800b6f2:	f100 0001 	add.w	r0, r0, #1
 800b6f6:	d005      	beq.n	800b704 <__lo0bits+0x5c>
 800b6f8:	600b      	str	r3, [r1, #0]
 800b6fa:	4770      	bx	lr
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	e7e8      	b.n	800b6d2 <__lo0bits+0x2a>
 800b700:	2000      	movs	r0, #0
 800b702:	4770      	bx	lr
 800b704:	2020      	movs	r0, #32
 800b706:	4770      	bx	lr

0800b708 <__i2b>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	460c      	mov	r4, r1
 800b70c:	2101      	movs	r1, #1
 800b70e:	f7ff feff 	bl	800b510 <_Balloc>
 800b712:	4602      	mov	r2, r0
 800b714:	b928      	cbnz	r0, 800b722 <__i2b+0x1a>
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <__i2b+0x24>)
 800b718:	4805      	ldr	r0, [pc, #20]	; (800b730 <__i2b+0x28>)
 800b71a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b71e:	f000 fc9b 	bl	800c058 <__assert_func>
 800b722:	2301      	movs	r3, #1
 800b724:	6144      	str	r4, [r0, #20]
 800b726:	6103      	str	r3, [r0, #16]
 800b728:	bd10      	pop	{r4, pc}
 800b72a:	bf00      	nop
 800b72c:	0800d473 	.word	0x0800d473
 800b730:	0800d484 	.word	0x0800d484

0800b734 <__multiply>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	4614      	mov	r4, r2
 800b73a:	690a      	ldr	r2, [r1, #16]
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	429a      	cmp	r2, r3
 800b740:	bfb8      	it	lt
 800b742:	460b      	movlt	r3, r1
 800b744:	460d      	mov	r5, r1
 800b746:	bfbc      	itt	lt
 800b748:	4625      	movlt	r5, r4
 800b74a:	461c      	movlt	r4, r3
 800b74c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b750:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b754:	68ab      	ldr	r3, [r5, #8]
 800b756:	6869      	ldr	r1, [r5, #4]
 800b758:	eb0a 0709 	add.w	r7, sl, r9
 800b75c:	42bb      	cmp	r3, r7
 800b75e:	b085      	sub	sp, #20
 800b760:	bfb8      	it	lt
 800b762:	3101      	addlt	r1, #1
 800b764:	f7ff fed4 	bl	800b510 <_Balloc>
 800b768:	b930      	cbnz	r0, 800b778 <__multiply+0x44>
 800b76a:	4602      	mov	r2, r0
 800b76c:	4b42      	ldr	r3, [pc, #264]	; (800b878 <__multiply+0x144>)
 800b76e:	4843      	ldr	r0, [pc, #268]	; (800b87c <__multiply+0x148>)
 800b770:	f240 115d 	movw	r1, #349	; 0x15d
 800b774:	f000 fc70 	bl	800c058 <__assert_func>
 800b778:	f100 0614 	add.w	r6, r0, #20
 800b77c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b780:	4633      	mov	r3, r6
 800b782:	2200      	movs	r2, #0
 800b784:	4543      	cmp	r3, r8
 800b786:	d31e      	bcc.n	800b7c6 <__multiply+0x92>
 800b788:	f105 0c14 	add.w	ip, r5, #20
 800b78c:	f104 0314 	add.w	r3, r4, #20
 800b790:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b794:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b798:	9202      	str	r2, [sp, #8]
 800b79a:	ebac 0205 	sub.w	r2, ip, r5
 800b79e:	3a15      	subs	r2, #21
 800b7a0:	f022 0203 	bic.w	r2, r2, #3
 800b7a4:	3204      	adds	r2, #4
 800b7a6:	f105 0115 	add.w	r1, r5, #21
 800b7aa:	458c      	cmp	ip, r1
 800b7ac:	bf38      	it	cc
 800b7ae:	2204      	movcc	r2, #4
 800b7b0:	9201      	str	r2, [sp, #4]
 800b7b2:	9a02      	ldr	r2, [sp, #8]
 800b7b4:	9303      	str	r3, [sp, #12]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d808      	bhi.n	800b7cc <__multiply+0x98>
 800b7ba:	2f00      	cmp	r7, #0
 800b7bc:	dc55      	bgt.n	800b86a <__multiply+0x136>
 800b7be:	6107      	str	r7, [r0, #16]
 800b7c0:	b005      	add	sp, #20
 800b7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	f843 2b04 	str.w	r2, [r3], #4
 800b7ca:	e7db      	b.n	800b784 <__multiply+0x50>
 800b7cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7d0:	f1ba 0f00 	cmp.w	sl, #0
 800b7d4:	d020      	beq.n	800b818 <__multiply+0xe4>
 800b7d6:	f105 0e14 	add.w	lr, r5, #20
 800b7da:	46b1      	mov	r9, r6
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b7e2:	f8d9 b000 	ldr.w	fp, [r9]
 800b7e6:	b2a1      	uxth	r1, r4
 800b7e8:	fa1f fb8b 	uxth.w	fp, fp
 800b7ec:	fb0a b101 	mla	r1, sl, r1, fp
 800b7f0:	4411      	add	r1, r2
 800b7f2:	f8d9 2000 	ldr.w	r2, [r9]
 800b7f6:	0c24      	lsrs	r4, r4, #16
 800b7f8:	0c12      	lsrs	r2, r2, #16
 800b7fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b7fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b802:	b289      	uxth	r1, r1
 800b804:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b808:	45f4      	cmp	ip, lr
 800b80a:	f849 1b04 	str.w	r1, [r9], #4
 800b80e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b812:	d8e4      	bhi.n	800b7de <__multiply+0xaa>
 800b814:	9901      	ldr	r1, [sp, #4]
 800b816:	5072      	str	r2, [r6, r1]
 800b818:	9a03      	ldr	r2, [sp, #12]
 800b81a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b81e:	3304      	adds	r3, #4
 800b820:	f1b9 0f00 	cmp.w	r9, #0
 800b824:	d01f      	beq.n	800b866 <__multiply+0x132>
 800b826:	6834      	ldr	r4, [r6, #0]
 800b828:	f105 0114 	add.w	r1, r5, #20
 800b82c:	46b6      	mov	lr, r6
 800b82e:	f04f 0a00 	mov.w	sl, #0
 800b832:	880a      	ldrh	r2, [r1, #0]
 800b834:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b838:	fb09 b202 	mla	r2, r9, r2, fp
 800b83c:	4492      	add	sl, r2
 800b83e:	b2a4      	uxth	r4, r4
 800b840:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b844:	f84e 4b04 	str.w	r4, [lr], #4
 800b848:	f851 4b04 	ldr.w	r4, [r1], #4
 800b84c:	f8be 2000 	ldrh.w	r2, [lr]
 800b850:	0c24      	lsrs	r4, r4, #16
 800b852:	fb09 2404 	mla	r4, r9, r4, r2
 800b856:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b85a:	458c      	cmp	ip, r1
 800b85c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b860:	d8e7      	bhi.n	800b832 <__multiply+0xfe>
 800b862:	9a01      	ldr	r2, [sp, #4]
 800b864:	50b4      	str	r4, [r6, r2]
 800b866:	3604      	adds	r6, #4
 800b868:	e7a3      	b.n	800b7b2 <__multiply+0x7e>
 800b86a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1a5      	bne.n	800b7be <__multiply+0x8a>
 800b872:	3f01      	subs	r7, #1
 800b874:	e7a1      	b.n	800b7ba <__multiply+0x86>
 800b876:	bf00      	nop
 800b878:	0800d473 	.word	0x0800d473
 800b87c:	0800d484 	.word	0x0800d484

0800b880 <__pow5mult>:
 800b880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b884:	4615      	mov	r5, r2
 800b886:	f012 0203 	ands.w	r2, r2, #3
 800b88a:	4606      	mov	r6, r0
 800b88c:	460f      	mov	r7, r1
 800b88e:	d007      	beq.n	800b8a0 <__pow5mult+0x20>
 800b890:	4c25      	ldr	r4, [pc, #148]	; (800b928 <__pow5mult+0xa8>)
 800b892:	3a01      	subs	r2, #1
 800b894:	2300      	movs	r3, #0
 800b896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b89a:	f7ff fe9b 	bl	800b5d4 <__multadd>
 800b89e:	4607      	mov	r7, r0
 800b8a0:	10ad      	asrs	r5, r5, #2
 800b8a2:	d03d      	beq.n	800b920 <__pow5mult+0xa0>
 800b8a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b8a6:	b97c      	cbnz	r4, 800b8c8 <__pow5mult+0x48>
 800b8a8:	2010      	movs	r0, #16
 800b8aa:	f7ff fe29 	bl	800b500 <malloc>
 800b8ae:	4602      	mov	r2, r0
 800b8b0:	6270      	str	r0, [r6, #36]	; 0x24
 800b8b2:	b928      	cbnz	r0, 800b8c0 <__pow5mult+0x40>
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <__pow5mult+0xac>)
 800b8b6:	481e      	ldr	r0, [pc, #120]	; (800b930 <__pow5mult+0xb0>)
 800b8b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b8bc:	f000 fbcc 	bl	800c058 <__assert_func>
 800b8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8c4:	6004      	str	r4, [r0, #0]
 800b8c6:	60c4      	str	r4, [r0, #12]
 800b8c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8d0:	b94c      	cbnz	r4, 800b8e6 <__pow5mult+0x66>
 800b8d2:	f240 2171 	movw	r1, #625	; 0x271
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	f7ff ff16 	bl	800b708 <__i2b>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	6003      	str	r3, [r0, #0]
 800b8e6:	f04f 0900 	mov.w	r9, #0
 800b8ea:	07eb      	lsls	r3, r5, #31
 800b8ec:	d50a      	bpl.n	800b904 <__pow5mult+0x84>
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	4622      	mov	r2, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f7ff ff1e 	bl	800b734 <__multiply>
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	4680      	mov	r8, r0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fe47 	bl	800b590 <_Bfree>
 800b902:	4647      	mov	r7, r8
 800b904:	106d      	asrs	r5, r5, #1
 800b906:	d00b      	beq.n	800b920 <__pow5mult+0xa0>
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	b938      	cbnz	r0, 800b91c <__pow5mult+0x9c>
 800b90c:	4622      	mov	r2, r4
 800b90e:	4621      	mov	r1, r4
 800b910:	4630      	mov	r0, r6
 800b912:	f7ff ff0f 	bl	800b734 <__multiply>
 800b916:	6020      	str	r0, [r4, #0]
 800b918:	f8c0 9000 	str.w	r9, [r0]
 800b91c:	4604      	mov	r4, r0
 800b91e:	e7e4      	b.n	800b8ea <__pow5mult+0x6a>
 800b920:	4638      	mov	r0, r7
 800b922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b926:	bf00      	nop
 800b928:	0800d5d8 	.word	0x0800d5d8
 800b92c:	0800d3fd 	.word	0x0800d3fd
 800b930:	0800d484 	.word	0x0800d484

0800b934 <__lshift>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	460c      	mov	r4, r1
 800b93a:	6849      	ldr	r1, [r1, #4]
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b942:	68a3      	ldr	r3, [r4, #8]
 800b944:	4607      	mov	r7, r0
 800b946:	4691      	mov	r9, r2
 800b948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b94c:	f108 0601 	add.w	r6, r8, #1
 800b950:	42b3      	cmp	r3, r6
 800b952:	db0b      	blt.n	800b96c <__lshift+0x38>
 800b954:	4638      	mov	r0, r7
 800b956:	f7ff fddb 	bl	800b510 <_Balloc>
 800b95a:	4605      	mov	r5, r0
 800b95c:	b948      	cbnz	r0, 800b972 <__lshift+0x3e>
 800b95e:	4602      	mov	r2, r0
 800b960:	4b28      	ldr	r3, [pc, #160]	; (800ba04 <__lshift+0xd0>)
 800b962:	4829      	ldr	r0, [pc, #164]	; (800ba08 <__lshift+0xd4>)
 800b964:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b968:	f000 fb76 	bl	800c058 <__assert_func>
 800b96c:	3101      	adds	r1, #1
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	e7ee      	b.n	800b950 <__lshift+0x1c>
 800b972:	2300      	movs	r3, #0
 800b974:	f100 0114 	add.w	r1, r0, #20
 800b978:	f100 0210 	add.w	r2, r0, #16
 800b97c:	4618      	mov	r0, r3
 800b97e:	4553      	cmp	r3, sl
 800b980:	db33      	blt.n	800b9ea <__lshift+0xb6>
 800b982:	6920      	ldr	r0, [r4, #16]
 800b984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b988:	f104 0314 	add.w	r3, r4, #20
 800b98c:	f019 091f 	ands.w	r9, r9, #31
 800b990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b994:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b998:	d02b      	beq.n	800b9f2 <__lshift+0xbe>
 800b99a:	f1c9 0e20 	rsb	lr, r9, #32
 800b99e:	468a      	mov	sl, r1
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	6818      	ldr	r0, [r3, #0]
 800b9a4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9a8:	4302      	orrs	r2, r0
 800b9aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b9ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9b2:	459c      	cmp	ip, r3
 800b9b4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9b8:	d8f3      	bhi.n	800b9a2 <__lshift+0x6e>
 800b9ba:	ebac 0304 	sub.w	r3, ip, r4
 800b9be:	3b15      	subs	r3, #21
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	3304      	adds	r3, #4
 800b9c6:	f104 0015 	add.w	r0, r4, #21
 800b9ca:	4584      	cmp	ip, r0
 800b9cc:	bf38      	it	cc
 800b9ce:	2304      	movcc	r3, #4
 800b9d0:	50ca      	str	r2, [r1, r3]
 800b9d2:	b10a      	cbz	r2, 800b9d8 <__lshift+0xa4>
 800b9d4:	f108 0602 	add.w	r6, r8, #2
 800b9d8:	3e01      	subs	r6, #1
 800b9da:	4638      	mov	r0, r7
 800b9dc:	612e      	str	r6, [r5, #16]
 800b9de:	4621      	mov	r1, r4
 800b9e0:	f7ff fdd6 	bl	800b590 <_Bfree>
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	e7c5      	b.n	800b97e <__lshift+0x4a>
 800b9f2:	3904      	subs	r1, #4
 800b9f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9fc:	459c      	cmp	ip, r3
 800b9fe:	d8f9      	bhi.n	800b9f4 <__lshift+0xc0>
 800ba00:	e7ea      	b.n	800b9d8 <__lshift+0xa4>
 800ba02:	bf00      	nop
 800ba04:	0800d473 	.word	0x0800d473
 800ba08:	0800d484 	.word	0x0800d484

0800ba0c <__mcmp>:
 800ba0c:	b530      	push	{r4, r5, lr}
 800ba0e:	6902      	ldr	r2, [r0, #16]
 800ba10:	690c      	ldr	r4, [r1, #16]
 800ba12:	1b12      	subs	r2, r2, r4
 800ba14:	d10e      	bne.n	800ba34 <__mcmp+0x28>
 800ba16:	f100 0314 	add.w	r3, r0, #20
 800ba1a:	3114      	adds	r1, #20
 800ba1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba2c:	42a5      	cmp	r5, r4
 800ba2e:	d003      	beq.n	800ba38 <__mcmp+0x2c>
 800ba30:	d305      	bcc.n	800ba3e <__mcmp+0x32>
 800ba32:	2201      	movs	r2, #1
 800ba34:	4610      	mov	r0, r2
 800ba36:	bd30      	pop	{r4, r5, pc}
 800ba38:	4283      	cmp	r3, r0
 800ba3a:	d3f3      	bcc.n	800ba24 <__mcmp+0x18>
 800ba3c:	e7fa      	b.n	800ba34 <__mcmp+0x28>
 800ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba42:	e7f7      	b.n	800ba34 <__mcmp+0x28>

0800ba44 <__mdiff>:
 800ba44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	460c      	mov	r4, r1
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4617      	mov	r7, r2
 800ba52:	f7ff ffdb 	bl	800ba0c <__mcmp>
 800ba56:	1e05      	subs	r5, r0, #0
 800ba58:	d110      	bne.n	800ba7c <__mdiff+0x38>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff fd57 	bl	800b510 <_Balloc>
 800ba62:	b930      	cbnz	r0, 800ba72 <__mdiff+0x2e>
 800ba64:	4b39      	ldr	r3, [pc, #228]	; (800bb4c <__mdiff+0x108>)
 800ba66:	4602      	mov	r2, r0
 800ba68:	f240 2132 	movw	r1, #562	; 0x232
 800ba6c:	4838      	ldr	r0, [pc, #224]	; (800bb50 <__mdiff+0x10c>)
 800ba6e:	f000 faf3 	bl	800c058 <__assert_func>
 800ba72:	2301      	movs	r3, #1
 800ba74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	bfa4      	itt	ge
 800ba7e:	463b      	movge	r3, r7
 800ba80:	4627      	movge	r7, r4
 800ba82:	4630      	mov	r0, r6
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	bfa6      	itte	ge
 800ba88:	461c      	movge	r4, r3
 800ba8a:	2500      	movge	r5, #0
 800ba8c:	2501      	movlt	r5, #1
 800ba8e:	f7ff fd3f 	bl	800b510 <_Balloc>
 800ba92:	b920      	cbnz	r0, 800ba9e <__mdiff+0x5a>
 800ba94:	4b2d      	ldr	r3, [pc, #180]	; (800bb4c <__mdiff+0x108>)
 800ba96:	4602      	mov	r2, r0
 800ba98:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ba9c:	e7e6      	b.n	800ba6c <__mdiff+0x28>
 800ba9e:	693e      	ldr	r6, [r7, #16]
 800baa0:	60c5      	str	r5, [r0, #12]
 800baa2:	6925      	ldr	r5, [r4, #16]
 800baa4:	f107 0114 	add.w	r1, r7, #20
 800baa8:	f104 0914 	add.w	r9, r4, #20
 800baac:	f100 0e14 	add.w	lr, r0, #20
 800bab0:	f107 0210 	add.w	r2, r7, #16
 800bab4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bab8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800babc:	46f2      	mov	sl, lr
 800babe:	2700      	movs	r7, #0
 800bac0:	f859 3b04 	ldr.w	r3, [r9], #4
 800bac4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bac8:	fa1f f883 	uxth.w	r8, r3
 800bacc:	fa17 f78b 	uxtah	r7, r7, fp
 800bad0:	0c1b      	lsrs	r3, r3, #16
 800bad2:	eba7 0808 	sub.w	r8, r7, r8
 800bad6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bada:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bade:	fa1f f888 	uxth.w	r8, r8
 800bae2:	141f      	asrs	r7, r3, #16
 800bae4:	454d      	cmp	r5, r9
 800bae6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800baea:	f84a 3b04 	str.w	r3, [sl], #4
 800baee:	d8e7      	bhi.n	800bac0 <__mdiff+0x7c>
 800baf0:	1b2b      	subs	r3, r5, r4
 800baf2:	3b15      	subs	r3, #21
 800baf4:	f023 0303 	bic.w	r3, r3, #3
 800baf8:	3304      	adds	r3, #4
 800bafa:	3415      	adds	r4, #21
 800bafc:	42a5      	cmp	r5, r4
 800bafe:	bf38      	it	cc
 800bb00:	2304      	movcc	r3, #4
 800bb02:	4419      	add	r1, r3
 800bb04:	4473      	add	r3, lr
 800bb06:	469e      	mov	lr, r3
 800bb08:	460d      	mov	r5, r1
 800bb0a:	4565      	cmp	r5, ip
 800bb0c:	d30e      	bcc.n	800bb2c <__mdiff+0xe8>
 800bb0e:	f10c 0203 	add.w	r2, ip, #3
 800bb12:	1a52      	subs	r2, r2, r1
 800bb14:	f022 0203 	bic.w	r2, r2, #3
 800bb18:	3903      	subs	r1, #3
 800bb1a:	458c      	cmp	ip, r1
 800bb1c:	bf38      	it	cc
 800bb1e:	2200      	movcc	r2, #0
 800bb20:	441a      	add	r2, r3
 800bb22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bb26:	b17b      	cbz	r3, 800bb48 <__mdiff+0x104>
 800bb28:	6106      	str	r6, [r0, #16]
 800bb2a:	e7a5      	b.n	800ba78 <__mdiff+0x34>
 800bb2c:	f855 8b04 	ldr.w	r8, [r5], #4
 800bb30:	fa17 f488 	uxtah	r4, r7, r8
 800bb34:	1422      	asrs	r2, r4, #16
 800bb36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bb3a:	b2a4      	uxth	r4, r4
 800bb3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bb40:	f84e 4b04 	str.w	r4, [lr], #4
 800bb44:	1417      	asrs	r7, r2, #16
 800bb46:	e7e0      	b.n	800bb0a <__mdiff+0xc6>
 800bb48:	3e01      	subs	r6, #1
 800bb4a:	e7ea      	b.n	800bb22 <__mdiff+0xde>
 800bb4c:	0800d473 	.word	0x0800d473
 800bb50:	0800d484 	.word	0x0800d484

0800bb54 <__d2b>:
 800bb54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	4689      	mov	r9, r1
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	ec57 6b10 	vmov	r6, r7, d0
 800bb60:	4690      	mov	r8, r2
 800bb62:	f7ff fcd5 	bl	800b510 <_Balloc>
 800bb66:	4604      	mov	r4, r0
 800bb68:	b930      	cbnz	r0, 800bb78 <__d2b+0x24>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b25      	ldr	r3, [pc, #148]	; (800bc04 <__d2b+0xb0>)
 800bb6e:	4826      	ldr	r0, [pc, #152]	; (800bc08 <__d2b+0xb4>)
 800bb70:	f240 310a 	movw	r1, #778	; 0x30a
 800bb74:	f000 fa70 	bl	800c058 <__assert_func>
 800bb78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb80:	bb35      	cbnz	r5, 800bbd0 <__d2b+0x7c>
 800bb82:	2e00      	cmp	r6, #0
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	d028      	beq.n	800bbda <__d2b+0x86>
 800bb88:	4668      	mov	r0, sp
 800bb8a:	9600      	str	r6, [sp, #0]
 800bb8c:	f7ff fd8c 	bl	800b6a8 <__lo0bits>
 800bb90:	9900      	ldr	r1, [sp, #0]
 800bb92:	b300      	cbz	r0, 800bbd6 <__d2b+0x82>
 800bb94:	9a01      	ldr	r2, [sp, #4]
 800bb96:	f1c0 0320 	rsb	r3, r0, #32
 800bb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9e:	430b      	orrs	r3, r1
 800bba0:	40c2      	lsrs	r2, r0
 800bba2:	6163      	str	r3, [r4, #20]
 800bba4:	9201      	str	r2, [sp, #4]
 800bba6:	9b01      	ldr	r3, [sp, #4]
 800bba8:	61a3      	str	r3, [r4, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	bf14      	ite	ne
 800bbae:	2202      	movne	r2, #2
 800bbb0:	2201      	moveq	r2, #1
 800bbb2:	6122      	str	r2, [r4, #16]
 800bbb4:	b1d5      	cbz	r5, 800bbec <__d2b+0x98>
 800bbb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbba:	4405      	add	r5, r0
 800bbbc:	f8c9 5000 	str.w	r5, [r9]
 800bbc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbc4:	f8c8 0000 	str.w	r0, [r8]
 800bbc8:	4620      	mov	r0, r4
 800bbca:	b003      	add	sp, #12
 800bbcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbd4:	e7d5      	b.n	800bb82 <__d2b+0x2e>
 800bbd6:	6161      	str	r1, [r4, #20]
 800bbd8:	e7e5      	b.n	800bba6 <__d2b+0x52>
 800bbda:	a801      	add	r0, sp, #4
 800bbdc:	f7ff fd64 	bl	800b6a8 <__lo0bits>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	6163      	str	r3, [r4, #20]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	6122      	str	r2, [r4, #16]
 800bbe8:	3020      	adds	r0, #32
 800bbea:	e7e3      	b.n	800bbb4 <__d2b+0x60>
 800bbec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbf4:	f8c9 0000 	str.w	r0, [r9]
 800bbf8:	6918      	ldr	r0, [r3, #16]
 800bbfa:	f7ff fd35 	bl	800b668 <__hi0bits>
 800bbfe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc02:	e7df      	b.n	800bbc4 <__d2b+0x70>
 800bc04:	0800d473 	.word	0x0800d473
 800bc08:	0800d484 	.word	0x0800d484

0800bc0c <_calloc_r>:
 800bc0c:	b513      	push	{r0, r1, r4, lr}
 800bc0e:	434a      	muls	r2, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	9201      	str	r2, [sp, #4]
 800bc14:	f000 f85a 	bl	800bccc <_malloc_r>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	b118      	cbz	r0, 800bc24 <_calloc_r+0x18>
 800bc1c:	9a01      	ldr	r2, [sp, #4]
 800bc1e:	2100      	movs	r1, #0
 800bc20:	f7fe f93e 	bl	8009ea0 <memset>
 800bc24:	4620      	mov	r0, r4
 800bc26:	b002      	add	sp, #8
 800bc28:	bd10      	pop	{r4, pc}
	...

0800bc2c <_free_r>:
 800bc2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc2e:	2900      	cmp	r1, #0
 800bc30:	d048      	beq.n	800bcc4 <_free_r+0x98>
 800bc32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc36:	9001      	str	r0, [sp, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc3e:	bfb8      	it	lt
 800bc40:	18e4      	addlt	r4, r4, r3
 800bc42:	f000 fa65 	bl	800c110 <__malloc_lock>
 800bc46:	4a20      	ldr	r2, [pc, #128]	; (800bcc8 <_free_r+0x9c>)
 800bc48:	9801      	ldr	r0, [sp, #4]
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	4615      	mov	r5, r2
 800bc4e:	b933      	cbnz	r3, 800bc5e <_free_r+0x32>
 800bc50:	6063      	str	r3, [r4, #4]
 800bc52:	6014      	str	r4, [r2, #0]
 800bc54:	b003      	add	sp, #12
 800bc56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc5a:	f000 ba5f 	b.w	800c11c <__malloc_unlock>
 800bc5e:	42a3      	cmp	r3, r4
 800bc60:	d90b      	bls.n	800bc7a <_free_r+0x4e>
 800bc62:	6821      	ldr	r1, [r4, #0]
 800bc64:	1862      	adds	r2, r4, r1
 800bc66:	4293      	cmp	r3, r2
 800bc68:	bf04      	itt	eq
 800bc6a:	681a      	ldreq	r2, [r3, #0]
 800bc6c:	685b      	ldreq	r3, [r3, #4]
 800bc6e:	6063      	str	r3, [r4, #4]
 800bc70:	bf04      	itt	eq
 800bc72:	1852      	addeq	r2, r2, r1
 800bc74:	6022      	streq	r2, [r4, #0]
 800bc76:	602c      	str	r4, [r5, #0]
 800bc78:	e7ec      	b.n	800bc54 <_free_r+0x28>
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	b10b      	cbz	r3, 800bc84 <_free_r+0x58>
 800bc80:	42a3      	cmp	r3, r4
 800bc82:	d9fa      	bls.n	800bc7a <_free_r+0x4e>
 800bc84:	6811      	ldr	r1, [r2, #0]
 800bc86:	1855      	adds	r5, r2, r1
 800bc88:	42a5      	cmp	r5, r4
 800bc8a:	d10b      	bne.n	800bca4 <_free_r+0x78>
 800bc8c:	6824      	ldr	r4, [r4, #0]
 800bc8e:	4421      	add	r1, r4
 800bc90:	1854      	adds	r4, r2, r1
 800bc92:	42a3      	cmp	r3, r4
 800bc94:	6011      	str	r1, [r2, #0]
 800bc96:	d1dd      	bne.n	800bc54 <_free_r+0x28>
 800bc98:	681c      	ldr	r4, [r3, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	6053      	str	r3, [r2, #4]
 800bc9e:	4421      	add	r1, r4
 800bca0:	6011      	str	r1, [r2, #0]
 800bca2:	e7d7      	b.n	800bc54 <_free_r+0x28>
 800bca4:	d902      	bls.n	800bcac <_free_r+0x80>
 800bca6:	230c      	movs	r3, #12
 800bca8:	6003      	str	r3, [r0, #0]
 800bcaa:	e7d3      	b.n	800bc54 <_free_r+0x28>
 800bcac:	6825      	ldr	r5, [r4, #0]
 800bcae:	1961      	adds	r1, r4, r5
 800bcb0:	428b      	cmp	r3, r1
 800bcb2:	bf04      	itt	eq
 800bcb4:	6819      	ldreq	r1, [r3, #0]
 800bcb6:	685b      	ldreq	r3, [r3, #4]
 800bcb8:	6063      	str	r3, [r4, #4]
 800bcba:	bf04      	itt	eq
 800bcbc:	1949      	addeq	r1, r1, r5
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	6054      	str	r4, [r2, #4]
 800bcc2:	e7c7      	b.n	800bc54 <_free_r+0x28>
 800bcc4:	b003      	add	sp, #12
 800bcc6:	bd30      	pop	{r4, r5, pc}
 800bcc8:	20000654 	.word	0x20000654

0800bccc <_malloc_r>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	1ccd      	adds	r5, r1, #3
 800bcd0:	f025 0503 	bic.w	r5, r5, #3
 800bcd4:	3508      	adds	r5, #8
 800bcd6:	2d0c      	cmp	r5, #12
 800bcd8:	bf38      	it	cc
 800bcda:	250c      	movcc	r5, #12
 800bcdc:	2d00      	cmp	r5, #0
 800bcde:	4606      	mov	r6, r0
 800bce0:	db01      	blt.n	800bce6 <_malloc_r+0x1a>
 800bce2:	42a9      	cmp	r1, r5
 800bce4:	d903      	bls.n	800bcee <_malloc_r+0x22>
 800bce6:	230c      	movs	r3, #12
 800bce8:	6033      	str	r3, [r6, #0]
 800bcea:	2000      	movs	r0, #0
 800bcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcee:	f000 fa0f 	bl	800c110 <__malloc_lock>
 800bcf2:	4921      	ldr	r1, [pc, #132]	; (800bd78 <_malloc_r+0xac>)
 800bcf4:	680a      	ldr	r2, [r1, #0]
 800bcf6:	4614      	mov	r4, r2
 800bcf8:	b99c      	cbnz	r4, 800bd22 <_malloc_r+0x56>
 800bcfa:	4f20      	ldr	r7, [pc, #128]	; (800bd7c <_malloc_r+0xb0>)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	b923      	cbnz	r3, 800bd0a <_malloc_r+0x3e>
 800bd00:	4621      	mov	r1, r4
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f998 	bl	800c038 <_sbrk_r>
 800bd08:	6038      	str	r0, [r7, #0]
 800bd0a:	4629      	mov	r1, r5
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f000 f993 	bl	800c038 <_sbrk_r>
 800bd12:	1c43      	adds	r3, r0, #1
 800bd14:	d123      	bne.n	800bd5e <_malloc_r+0x92>
 800bd16:	230c      	movs	r3, #12
 800bd18:	6033      	str	r3, [r6, #0]
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	f000 f9fe 	bl	800c11c <__malloc_unlock>
 800bd20:	e7e3      	b.n	800bcea <_malloc_r+0x1e>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	1b5b      	subs	r3, r3, r5
 800bd26:	d417      	bmi.n	800bd58 <_malloc_r+0x8c>
 800bd28:	2b0b      	cmp	r3, #11
 800bd2a:	d903      	bls.n	800bd34 <_malloc_r+0x68>
 800bd2c:	6023      	str	r3, [r4, #0]
 800bd2e:	441c      	add	r4, r3
 800bd30:	6025      	str	r5, [r4, #0]
 800bd32:	e004      	b.n	800bd3e <_malloc_r+0x72>
 800bd34:	6863      	ldr	r3, [r4, #4]
 800bd36:	42a2      	cmp	r2, r4
 800bd38:	bf0c      	ite	eq
 800bd3a:	600b      	streq	r3, [r1, #0]
 800bd3c:	6053      	strne	r3, [r2, #4]
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 f9ec 	bl	800c11c <__malloc_unlock>
 800bd44:	f104 000b 	add.w	r0, r4, #11
 800bd48:	1d23      	adds	r3, r4, #4
 800bd4a:	f020 0007 	bic.w	r0, r0, #7
 800bd4e:	1ac2      	subs	r2, r0, r3
 800bd50:	d0cc      	beq.n	800bcec <_malloc_r+0x20>
 800bd52:	1a1b      	subs	r3, r3, r0
 800bd54:	50a3      	str	r3, [r4, r2]
 800bd56:	e7c9      	b.n	800bcec <_malloc_r+0x20>
 800bd58:	4622      	mov	r2, r4
 800bd5a:	6864      	ldr	r4, [r4, #4]
 800bd5c:	e7cc      	b.n	800bcf8 <_malloc_r+0x2c>
 800bd5e:	1cc4      	adds	r4, r0, #3
 800bd60:	f024 0403 	bic.w	r4, r4, #3
 800bd64:	42a0      	cmp	r0, r4
 800bd66:	d0e3      	beq.n	800bd30 <_malloc_r+0x64>
 800bd68:	1a21      	subs	r1, r4, r0
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f000 f964 	bl	800c038 <_sbrk_r>
 800bd70:	3001      	adds	r0, #1
 800bd72:	d1dd      	bne.n	800bd30 <_malloc_r+0x64>
 800bd74:	e7cf      	b.n	800bd16 <_malloc_r+0x4a>
 800bd76:	bf00      	nop
 800bd78:	20000654 	.word	0x20000654
 800bd7c:	20000658 	.word	0x20000658

0800bd80 <__ssputs_r>:
 800bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	688e      	ldr	r6, [r1, #8]
 800bd86:	429e      	cmp	r6, r3
 800bd88:	4682      	mov	sl, r0
 800bd8a:	460c      	mov	r4, r1
 800bd8c:	4690      	mov	r8, r2
 800bd8e:	461f      	mov	r7, r3
 800bd90:	d838      	bhi.n	800be04 <__ssputs_r+0x84>
 800bd92:	898a      	ldrh	r2, [r1, #12]
 800bd94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd98:	d032      	beq.n	800be00 <__ssputs_r+0x80>
 800bd9a:	6825      	ldr	r5, [r4, #0]
 800bd9c:	6909      	ldr	r1, [r1, #16]
 800bd9e:	eba5 0901 	sub.w	r9, r5, r1
 800bda2:	6965      	ldr	r5, [r4, #20]
 800bda4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bda8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdac:	3301      	adds	r3, #1
 800bdae:	444b      	add	r3, r9
 800bdb0:	106d      	asrs	r5, r5, #1
 800bdb2:	429d      	cmp	r5, r3
 800bdb4:	bf38      	it	cc
 800bdb6:	461d      	movcc	r5, r3
 800bdb8:	0553      	lsls	r3, r2, #21
 800bdba:	d531      	bpl.n	800be20 <__ssputs_r+0xa0>
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7ff ff85 	bl	800bccc <_malloc_r>
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	b950      	cbnz	r0, 800bddc <__ssputs_r+0x5c>
 800bdc6:	230c      	movs	r3, #12
 800bdc8:	f8ca 3000 	str.w	r3, [sl]
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdd2:	81a3      	strh	r3, [r4, #12]
 800bdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bddc:	6921      	ldr	r1, [r4, #16]
 800bdde:	464a      	mov	r2, r9
 800bde0:	f7fe f850 	bl	8009e84 <memcpy>
 800bde4:	89a3      	ldrh	r3, [r4, #12]
 800bde6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	6126      	str	r6, [r4, #16]
 800bdf2:	6165      	str	r5, [r4, #20]
 800bdf4:	444e      	add	r6, r9
 800bdf6:	eba5 0509 	sub.w	r5, r5, r9
 800bdfa:	6026      	str	r6, [r4, #0]
 800bdfc:	60a5      	str	r5, [r4, #8]
 800bdfe:	463e      	mov	r6, r7
 800be00:	42be      	cmp	r6, r7
 800be02:	d900      	bls.n	800be06 <__ssputs_r+0x86>
 800be04:	463e      	mov	r6, r7
 800be06:	4632      	mov	r2, r6
 800be08:	6820      	ldr	r0, [r4, #0]
 800be0a:	4641      	mov	r1, r8
 800be0c:	f000 f966 	bl	800c0dc <memmove>
 800be10:	68a3      	ldr	r3, [r4, #8]
 800be12:	6822      	ldr	r2, [r4, #0]
 800be14:	1b9b      	subs	r3, r3, r6
 800be16:	4432      	add	r2, r6
 800be18:	60a3      	str	r3, [r4, #8]
 800be1a:	6022      	str	r2, [r4, #0]
 800be1c:	2000      	movs	r0, #0
 800be1e:	e7db      	b.n	800bdd8 <__ssputs_r+0x58>
 800be20:	462a      	mov	r2, r5
 800be22:	f000 f981 	bl	800c128 <_realloc_r>
 800be26:	4606      	mov	r6, r0
 800be28:	2800      	cmp	r0, #0
 800be2a:	d1e1      	bne.n	800bdf0 <__ssputs_r+0x70>
 800be2c:	6921      	ldr	r1, [r4, #16]
 800be2e:	4650      	mov	r0, sl
 800be30:	f7ff fefc 	bl	800bc2c <_free_r>
 800be34:	e7c7      	b.n	800bdc6 <__ssputs_r+0x46>
	...

0800be38 <_svfiprintf_r>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	4698      	mov	r8, r3
 800be3e:	898b      	ldrh	r3, [r1, #12]
 800be40:	061b      	lsls	r3, r3, #24
 800be42:	b09d      	sub	sp, #116	; 0x74
 800be44:	4607      	mov	r7, r0
 800be46:	460d      	mov	r5, r1
 800be48:	4614      	mov	r4, r2
 800be4a:	d50e      	bpl.n	800be6a <_svfiprintf_r+0x32>
 800be4c:	690b      	ldr	r3, [r1, #16]
 800be4e:	b963      	cbnz	r3, 800be6a <_svfiprintf_r+0x32>
 800be50:	2140      	movs	r1, #64	; 0x40
 800be52:	f7ff ff3b 	bl	800bccc <_malloc_r>
 800be56:	6028      	str	r0, [r5, #0]
 800be58:	6128      	str	r0, [r5, #16]
 800be5a:	b920      	cbnz	r0, 800be66 <_svfiprintf_r+0x2e>
 800be5c:	230c      	movs	r3, #12
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	e0d1      	b.n	800c00a <_svfiprintf_r+0x1d2>
 800be66:	2340      	movs	r3, #64	; 0x40
 800be68:	616b      	str	r3, [r5, #20]
 800be6a:	2300      	movs	r3, #0
 800be6c:	9309      	str	r3, [sp, #36]	; 0x24
 800be6e:	2320      	movs	r3, #32
 800be70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be74:	f8cd 800c 	str.w	r8, [sp, #12]
 800be78:	2330      	movs	r3, #48	; 0x30
 800be7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c024 <_svfiprintf_r+0x1ec>
 800be7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be82:	f04f 0901 	mov.w	r9, #1
 800be86:	4623      	mov	r3, r4
 800be88:	469a      	mov	sl, r3
 800be8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be8e:	b10a      	cbz	r2, 800be94 <_svfiprintf_r+0x5c>
 800be90:	2a25      	cmp	r2, #37	; 0x25
 800be92:	d1f9      	bne.n	800be88 <_svfiprintf_r+0x50>
 800be94:	ebba 0b04 	subs.w	fp, sl, r4
 800be98:	d00b      	beq.n	800beb2 <_svfiprintf_r+0x7a>
 800be9a:	465b      	mov	r3, fp
 800be9c:	4622      	mov	r2, r4
 800be9e:	4629      	mov	r1, r5
 800bea0:	4638      	mov	r0, r7
 800bea2:	f7ff ff6d 	bl	800bd80 <__ssputs_r>
 800bea6:	3001      	adds	r0, #1
 800bea8:	f000 80aa 	beq.w	800c000 <_svfiprintf_r+0x1c8>
 800beac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beae:	445a      	add	r2, fp
 800beb0:	9209      	str	r2, [sp, #36]	; 0x24
 800beb2:	f89a 3000 	ldrb.w	r3, [sl]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 80a2 	beq.w	800c000 <_svfiprintf_r+0x1c8>
 800bebc:	2300      	movs	r3, #0
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bec6:	f10a 0a01 	add.w	sl, sl, #1
 800beca:	9304      	str	r3, [sp, #16]
 800becc:	9307      	str	r3, [sp, #28]
 800bece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bed2:	931a      	str	r3, [sp, #104]	; 0x68
 800bed4:	4654      	mov	r4, sl
 800bed6:	2205      	movs	r2, #5
 800bed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bedc:	4851      	ldr	r0, [pc, #324]	; (800c024 <_svfiprintf_r+0x1ec>)
 800bede:	f7f4 f987 	bl	80001f0 <memchr>
 800bee2:	9a04      	ldr	r2, [sp, #16]
 800bee4:	b9d8      	cbnz	r0, 800bf1e <_svfiprintf_r+0xe6>
 800bee6:	06d0      	lsls	r0, r2, #27
 800bee8:	bf44      	itt	mi
 800beea:	2320      	movmi	r3, #32
 800beec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef0:	0711      	lsls	r1, r2, #28
 800bef2:	bf44      	itt	mi
 800bef4:	232b      	movmi	r3, #43	; 0x2b
 800bef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800befa:	f89a 3000 	ldrb.w	r3, [sl]
 800befe:	2b2a      	cmp	r3, #42	; 0x2a
 800bf00:	d015      	beq.n	800bf2e <_svfiprintf_r+0xf6>
 800bf02:	9a07      	ldr	r2, [sp, #28]
 800bf04:	4654      	mov	r4, sl
 800bf06:	2000      	movs	r0, #0
 800bf08:	f04f 0c0a 	mov.w	ip, #10
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf12:	3b30      	subs	r3, #48	; 0x30
 800bf14:	2b09      	cmp	r3, #9
 800bf16:	d94e      	bls.n	800bfb6 <_svfiprintf_r+0x17e>
 800bf18:	b1b0      	cbz	r0, 800bf48 <_svfiprintf_r+0x110>
 800bf1a:	9207      	str	r2, [sp, #28]
 800bf1c:	e014      	b.n	800bf48 <_svfiprintf_r+0x110>
 800bf1e:	eba0 0308 	sub.w	r3, r0, r8
 800bf22:	fa09 f303 	lsl.w	r3, r9, r3
 800bf26:	4313      	orrs	r3, r2
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	46a2      	mov	sl, r4
 800bf2c:	e7d2      	b.n	800bed4 <_svfiprintf_r+0x9c>
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	1d19      	adds	r1, r3, #4
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	9103      	str	r1, [sp, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	bfbb      	ittet	lt
 800bf3a:	425b      	neglt	r3, r3
 800bf3c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf40:	9307      	strge	r3, [sp, #28]
 800bf42:	9307      	strlt	r3, [sp, #28]
 800bf44:	bfb8      	it	lt
 800bf46:	9204      	strlt	r2, [sp, #16]
 800bf48:	7823      	ldrb	r3, [r4, #0]
 800bf4a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf4c:	d10c      	bne.n	800bf68 <_svfiprintf_r+0x130>
 800bf4e:	7863      	ldrb	r3, [r4, #1]
 800bf50:	2b2a      	cmp	r3, #42	; 0x2a
 800bf52:	d135      	bne.n	800bfc0 <_svfiprintf_r+0x188>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	1d1a      	adds	r2, r3, #4
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	9203      	str	r2, [sp, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bfb8      	it	lt
 800bf60:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf64:	3402      	adds	r4, #2
 800bf66:	9305      	str	r3, [sp, #20]
 800bf68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c034 <_svfiprintf_r+0x1fc>
 800bf6c:	7821      	ldrb	r1, [r4, #0]
 800bf6e:	2203      	movs	r2, #3
 800bf70:	4650      	mov	r0, sl
 800bf72:	f7f4 f93d 	bl	80001f0 <memchr>
 800bf76:	b140      	cbz	r0, 800bf8a <_svfiprintf_r+0x152>
 800bf78:	2340      	movs	r3, #64	; 0x40
 800bf7a:	eba0 000a 	sub.w	r0, r0, sl
 800bf7e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf82:	9b04      	ldr	r3, [sp, #16]
 800bf84:	4303      	orrs	r3, r0
 800bf86:	3401      	adds	r4, #1
 800bf88:	9304      	str	r3, [sp, #16]
 800bf8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8e:	4826      	ldr	r0, [pc, #152]	; (800c028 <_svfiprintf_r+0x1f0>)
 800bf90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf94:	2206      	movs	r2, #6
 800bf96:	f7f4 f92b 	bl	80001f0 <memchr>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d038      	beq.n	800c010 <_svfiprintf_r+0x1d8>
 800bf9e:	4b23      	ldr	r3, [pc, #140]	; (800c02c <_svfiprintf_r+0x1f4>)
 800bfa0:	bb1b      	cbnz	r3, 800bfea <_svfiprintf_r+0x1b2>
 800bfa2:	9b03      	ldr	r3, [sp, #12]
 800bfa4:	3307      	adds	r3, #7
 800bfa6:	f023 0307 	bic.w	r3, r3, #7
 800bfaa:	3308      	adds	r3, #8
 800bfac:	9303      	str	r3, [sp, #12]
 800bfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb0:	4433      	add	r3, r6
 800bfb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb4:	e767      	b.n	800be86 <_svfiprintf_r+0x4e>
 800bfb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfba:	460c      	mov	r4, r1
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	e7a5      	b.n	800bf0c <_svfiprintf_r+0xd4>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	3401      	adds	r4, #1
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f04f 0c0a 	mov.w	ip, #10
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd2:	3a30      	subs	r2, #48	; 0x30
 800bfd4:	2a09      	cmp	r2, #9
 800bfd6:	d903      	bls.n	800bfe0 <_svfiprintf_r+0x1a8>
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d0c5      	beq.n	800bf68 <_svfiprintf_r+0x130>
 800bfdc:	9105      	str	r1, [sp, #20]
 800bfde:	e7c3      	b.n	800bf68 <_svfiprintf_r+0x130>
 800bfe0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e7f0      	b.n	800bfcc <_svfiprintf_r+0x194>
 800bfea:	ab03      	add	r3, sp, #12
 800bfec:	9300      	str	r3, [sp, #0]
 800bfee:	462a      	mov	r2, r5
 800bff0:	4b0f      	ldr	r3, [pc, #60]	; (800c030 <_svfiprintf_r+0x1f8>)
 800bff2:	a904      	add	r1, sp, #16
 800bff4:	4638      	mov	r0, r7
 800bff6:	f7fd fffb 	bl	8009ff0 <_printf_float>
 800bffa:	1c42      	adds	r2, r0, #1
 800bffc:	4606      	mov	r6, r0
 800bffe:	d1d6      	bne.n	800bfae <_svfiprintf_r+0x176>
 800c000:	89ab      	ldrh	r3, [r5, #12]
 800c002:	065b      	lsls	r3, r3, #25
 800c004:	f53f af2c 	bmi.w	800be60 <_svfiprintf_r+0x28>
 800c008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00a:	b01d      	add	sp, #116	; 0x74
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4b06      	ldr	r3, [pc, #24]	; (800c030 <_svfiprintf_r+0x1f8>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4638      	mov	r0, r7
 800c01c:	f7fe fa8c 	bl	800a538 <_printf_i>
 800c020:	e7eb      	b.n	800bffa <_svfiprintf_r+0x1c2>
 800c022:	bf00      	nop
 800c024:	0800d5e4 	.word	0x0800d5e4
 800c028:	0800d5ee 	.word	0x0800d5ee
 800c02c:	08009ff1 	.word	0x08009ff1
 800c030:	0800bd81 	.word	0x0800bd81
 800c034:	0800d5ea 	.word	0x0800d5ea

0800c038 <_sbrk_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d06      	ldr	r5, [pc, #24]	; (800c054 <_sbrk_r+0x1c>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f6 fede 	bl	8002e04 <_sbrk>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_sbrk_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_sbrk_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	20001184 	.word	0x20001184

0800c058 <__assert_func>:
 800c058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c05a:	4614      	mov	r4, r2
 800c05c:	461a      	mov	r2, r3
 800c05e:	4b09      	ldr	r3, [pc, #36]	; (800c084 <__assert_func+0x2c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4605      	mov	r5, r0
 800c064:	68d8      	ldr	r0, [r3, #12]
 800c066:	b14c      	cbz	r4, 800c07c <__assert_func+0x24>
 800c068:	4b07      	ldr	r3, [pc, #28]	; (800c088 <__assert_func+0x30>)
 800c06a:	9100      	str	r1, [sp, #0]
 800c06c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c070:	4906      	ldr	r1, [pc, #24]	; (800c08c <__assert_func+0x34>)
 800c072:	462b      	mov	r3, r5
 800c074:	f000 f80e 	bl	800c094 <fiprintf>
 800c078:	f000 faa4 	bl	800c5c4 <abort>
 800c07c:	4b04      	ldr	r3, [pc, #16]	; (800c090 <__assert_func+0x38>)
 800c07e:	461c      	mov	r4, r3
 800c080:	e7f3      	b.n	800c06a <__assert_func+0x12>
 800c082:	bf00      	nop
 800c084:	20000024 	.word	0x20000024
 800c088:	0800d5f5 	.word	0x0800d5f5
 800c08c:	0800d602 	.word	0x0800d602
 800c090:	0800d630 	.word	0x0800d630

0800c094 <fiprintf>:
 800c094:	b40e      	push	{r1, r2, r3}
 800c096:	b503      	push	{r0, r1, lr}
 800c098:	4601      	mov	r1, r0
 800c09a:	ab03      	add	r3, sp, #12
 800c09c:	4805      	ldr	r0, [pc, #20]	; (800c0b4 <fiprintf+0x20>)
 800c09e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0a2:	6800      	ldr	r0, [r0, #0]
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	f000 f88f 	bl	800c1c8 <_vfiprintf_r>
 800c0aa:	b002      	add	sp, #8
 800c0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b0:	b003      	add	sp, #12
 800c0b2:	4770      	bx	lr
 800c0b4:	20000024 	.word	0x20000024

0800c0b8 <__ascii_mbtowc>:
 800c0b8:	b082      	sub	sp, #8
 800c0ba:	b901      	cbnz	r1, 800c0be <__ascii_mbtowc+0x6>
 800c0bc:	a901      	add	r1, sp, #4
 800c0be:	b142      	cbz	r2, 800c0d2 <__ascii_mbtowc+0x1a>
 800c0c0:	b14b      	cbz	r3, 800c0d6 <__ascii_mbtowc+0x1e>
 800c0c2:	7813      	ldrb	r3, [r2, #0]
 800c0c4:	600b      	str	r3, [r1, #0]
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	1e10      	subs	r0, r2, #0
 800c0ca:	bf18      	it	ne
 800c0cc:	2001      	movne	r0, #1
 800c0ce:	b002      	add	sp, #8
 800c0d0:	4770      	bx	lr
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	e7fb      	b.n	800c0ce <__ascii_mbtowc+0x16>
 800c0d6:	f06f 0001 	mvn.w	r0, #1
 800c0da:	e7f8      	b.n	800c0ce <__ascii_mbtowc+0x16>

0800c0dc <memmove>:
 800c0dc:	4288      	cmp	r0, r1
 800c0de:	b510      	push	{r4, lr}
 800c0e0:	eb01 0402 	add.w	r4, r1, r2
 800c0e4:	d902      	bls.n	800c0ec <memmove+0x10>
 800c0e6:	4284      	cmp	r4, r0
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	d807      	bhi.n	800c0fc <memmove+0x20>
 800c0ec:	1e43      	subs	r3, r0, #1
 800c0ee:	42a1      	cmp	r1, r4
 800c0f0:	d008      	beq.n	800c104 <memmove+0x28>
 800c0f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0fa:	e7f8      	b.n	800c0ee <memmove+0x12>
 800c0fc:	4402      	add	r2, r0
 800c0fe:	4601      	mov	r1, r0
 800c100:	428a      	cmp	r2, r1
 800c102:	d100      	bne.n	800c106 <memmove+0x2a>
 800c104:	bd10      	pop	{r4, pc}
 800c106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c10a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c10e:	e7f7      	b.n	800c100 <memmove+0x24>

0800c110 <__malloc_lock>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__malloc_lock+0x8>)
 800c112:	f000 bc17 	b.w	800c944 <__retarget_lock_acquire_recursive>
 800c116:	bf00      	nop
 800c118:	2000118c 	.word	0x2000118c

0800c11c <__malloc_unlock>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__malloc_unlock+0x8>)
 800c11e:	f000 bc12 	b.w	800c946 <__retarget_lock_release_recursive>
 800c122:	bf00      	nop
 800c124:	2000118c 	.word	0x2000118c

0800c128 <_realloc_r>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	4607      	mov	r7, r0
 800c12c:	4614      	mov	r4, r2
 800c12e:	460e      	mov	r6, r1
 800c130:	b921      	cbnz	r1, 800c13c <_realloc_r+0x14>
 800c132:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c136:	4611      	mov	r1, r2
 800c138:	f7ff bdc8 	b.w	800bccc <_malloc_r>
 800c13c:	b922      	cbnz	r2, 800c148 <_realloc_r+0x20>
 800c13e:	f7ff fd75 	bl	800bc2c <_free_r>
 800c142:	4625      	mov	r5, r4
 800c144:	4628      	mov	r0, r5
 800c146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c148:	f000 fc62 	bl	800ca10 <_malloc_usable_size_r>
 800c14c:	42a0      	cmp	r0, r4
 800c14e:	d20f      	bcs.n	800c170 <_realloc_r+0x48>
 800c150:	4621      	mov	r1, r4
 800c152:	4638      	mov	r0, r7
 800c154:	f7ff fdba 	bl	800bccc <_malloc_r>
 800c158:	4605      	mov	r5, r0
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d0f2      	beq.n	800c144 <_realloc_r+0x1c>
 800c15e:	4631      	mov	r1, r6
 800c160:	4622      	mov	r2, r4
 800c162:	f7fd fe8f 	bl	8009e84 <memcpy>
 800c166:	4631      	mov	r1, r6
 800c168:	4638      	mov	r0, r7
 800c16a:	f7ff fd5f 	bl	800bc2c <_free_r>
 800c16e:	e7e9      	b.n	800c144 <_realloc_r+0x1c>
 800c170:	4635      	mov	r5, r6
 800c172:	e7e7      	b.n	800c144 <_realloc_r+0x1c>

0800c174 <__sfputc_r>:
 800c174:	6893      	ldr	r3, [r2, #8]
 800c176:	3b01      	subs	r3, #1
 800c178:	2b00      	cmp	r3, #0
 800c17a:	b410      	push	{r4}
 800c17c:	6093      	str	r3, [r2, #8]
 800c17e:	da08      	bge.n	800c192 <__sfputc_r+0x1e>
 800c180:	6994      	ldr	r4, [r2, #24]
 800c182:	42a3      	cmp	r3, r4
 800c184:	db01      	blt.n	800c18a <__sfputc_r+0x16>
 800c186:	290a      	cmp	r1, #10
 800c188:	d103      	bne.n	800c192 <__sfputc_r+0x1e>
 800c18a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c18e:	f000 b94b 	b.w	800c428 <__swbuf_r>
 800c192:	6813      	ldr	r3, [r2, #0]
 800c194:	1c58      	adds	r0, r3, #1
 800c196:	6010      	str	r0, [r2, #0]
 800c198:	7019      	strb	r1, [r3, #0]
 800c19a:	4608      	mov	r0, r1
 800c19c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <__sfputs_r>:
 800c1a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	460f      	mov	r7, r1
 800c1a8:	4614      	mov	r4, r2
 800c1aa:	18d5      	adds	r5, r2, r3
 800c1ac:	42ac      	cmp	r4, r5
 800c1ae:	d101      	bne.n	800c1b4 <__sfputs_r+0x12>
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e007      	b.n	800c1c4 <__sfputs_r+0x22>
 800c1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b8:	463a      	mov	r2, r7
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f7ff ffda 	bl	800c174 <__sfputc_r>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d1f3      	bne.n	800c1ac <__sfputs_r+0xa>
 800c1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1c8 <_vfiprintf_r>:
 800c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1cc:	460d      	mov	r5, r1
 800c1ce:	b09d      	sub	sp, #116	; 0x74
 800c1d0:	4614      	mov	r4, r2
 800c1d2:	4698      	mov	r8, r3
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	b118      	cbz	r0, 800c1e0 <_vfiprintf_r+0x18>
 800c1d8:	6983      	ldr	r3, [r0, #24]
 800c1da:	b90b      	cbnz	r3, 800c1e0 <_vfiprintf_r+0x18>
 800c1dc:	f000 fb14 	bl	800c808 <__sinit>
 800c1e0:	4b89      	ldr	r3, [pc, #548]	; (800c408 <_vfiprintf_r+0x240>)
 800c1e2:	429d      	cmp	r5, r3
 800c1e4:	d11b      	bne.n	800c21e <_vfiprintf_r+0x56>
 800c1e6:	6875      	ldr	r5, [r6, #4]
 800c1e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ea:	07d9      	lsls	r1, r3, #31
 800c1ec:	d405      	bmi.n	800c1fa <_vfiprintf_r+0x32>
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	059a      	lsls	r2, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_vfiprintf_r+0x32>
 800c1f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1f6:	f000 fba5 	bl	800c944 <__retarget_lock_acquire_recursive>
 800c1fa:	89ab      	ldrh	r3, [r5, #12]
 800c1fc:	071b      	lsls	r3, r3, #28
 800c1fe:	d501      	bpl.n	800c204 <_vfiprintf_r+0x3c>
 800c200:	692b      	ldr	r3, [r5, #16]
 800c202:	b9eb      	cbnz	r3, 800c240 <_vfiprintf_r+0x78>
 800c204:	4629      	mov	r1, r5
 800c206:	4630      	mov	r0, r6
 800c208:	f000 f96e 	bl	800c4e8 <__swsetup_r>
 800c20c:	b1c0      	cbz	r0, 800c240 <_vfiprintf_r+0x78>
 800c20e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c210:	07dc      	lsls	r4, r3, #31
 800c212:	d50e      	bpl.n	800c232 <_vfiprintf_r+0x6a>
 800c214:	f04f 30ff 	mov.w	r0, #4294967295
 800c218:	b01d      	add	sp, #116	; 0x74
 800c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21e:	4b7b      	ldr	r3, [pc, #492]	; (800c40c <_vfiprintf_r+0x244>)
 800c220:	429d      	cmp	r5, r3
 800c222:	d101      	bne.n	800c228 <_vfiprintf_r+0x60>
 800c224:	68b5      	ldr	r5, [r6, #8]
 800c226:	e7df      	b.n	800c1e8 <_vfiprintf_r+0x20>
 800c228:	4b79      	ldr	r3, [pc, #484]	; (800c410 <_vfiprintf_r+0x248>)
 800c22a:	429d      	cmp	r5, r3
 800c22c:	bf08      	it	eq
 800c22e:	68f5      	ldreq	r5, [r6, #12]
 800c230:	e7da      	b.n	800c1e8 <_vfiprintf_r+0x20>
 800c232:	89ab      	ldrh	r3, [r5, #12]
 800c234:	0598      	lsls	r0, r3, #22
 800c236:	d4ed      	bmi.n	800c214 <_vfiprintf_r+0x4c>
 800c238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23a:	f000 fb84 	bl	800c946 <__retarget_lock_release_recursive>
 800c23e:	e7e9      	b.n	800c214 <_vfiprintf_r+0x4c>
 800c240:	2300      	movs	r3, #0
 800c242:	9309      	str	r3, [sp, #36]	; 0x24
 800c244:	2320      	movs	r3, #32
 800c246:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c24a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c24e:	2330      	movs	r3, #48	; 0x30
 800c250:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c414 <_vfiprintf_r+0x24c>
 800c254:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c258:	f04f 0901 	mov.w	r9, #1
 800c25c:	4623      	mov	r3, r4
 800c25e:	469a      	mov	sl, r3
 800c260:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c264:	b10a      	cbz	r2, 800c26a <_vfiprintf_r+0xa2>
 800c266:	2a25      	cmp	r2, #37	; 0x25
 800c268:	d1f9      	bne.n	800c25e <_vfiprintf_r+0x96>
 800c26a:	ebba 0b04 	subs.w	fp, sl, r4
 800c26e:	d00b      	beq.n	800c288 <_vfiprintf_r+0xc0>
 800c270:	465b      	mov	r3, fp
 800c272:	4622      	mov	r2, r4
 800c274:	4629      	mov	r1, r5
 800c276:	4630      	mov	r0, r6
 800c278:	f7ff ff93 	bl	800c1a2 <__sfputs_r>
 800c27c:	3001      	adds	r0, #1
 800c27e:	f000 80aa 	beq.w	800c3d6 <_vfiprintf_r+0x20e>
 800c282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c284:	445a      	add	r2, fp
 800c286:	9209      	str	r2, [sp, #36]	; 0x24
 800c288:	f89a 3000 	ldrb.w	r3, [sl]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 80a2 	beq.w	800c3d6 <_vfiprintf_r+0x20e>
 800c292:	2300      	movs	r3, #0
 800c294:	f04f 32ff 	mov.w	r2, #4294967295
 800c298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c29c:	f10a 0a01 	add.w	sl, sl, #1
 800c2a0:	9304      	str	r3, [sp, #16]
 800c2a2:	9307      	str	r3, [sp, #28]
 800c2a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c2aa:	4654      	mov	r4, sl
 800c2ac:	2205      	movs	r2, #5
 800c2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b2:	4858      	ldr	r0, [pc, #352]	; (800c414 <_vfiprintf_r+0x24c>)
 800c2b4:	f7f3 ff9c 	bl	80001f0 <memchr>
 800c2b8:	9a04      	ldr	r2, [sp, #16]
 800c2ba:	b9d8      	cbnz	r0, 800c2f4 <_vfiprintf_r+0x12c>
 800c2bc:	06d1      	lsls	r1, r2, #27
 800c2be:	bf44      	itt	mi
 800c2c0:	2320      	movmi	r3, #32
 800c2c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c6:	0713      	lsls	r3, r2, #28
 800c2c8:	bf44      	itt	mi
 800c2ca:	232b      	movmi	r3, #43	; 0x2b
 800c2cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c2d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d6:	d015      	beq.n	800c304 <_vfiprintf_r+0x13c>
 800c2d8:	9a07      	ldr	r2, [sp, #28]
 800c2da:	4654      	mov	r4, sl
 800c2dc:	2000      	movs	r0, #0
 800c2de:	f04f 0c0a 	mov.w	ip, #10
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e8:	3b30      	subs	r3, #48	; 0x30
 800c2ea:	2b09      	cmp	r3, #9
 800c2ec:	d94e      	bls.n	800c38c <_vfiprintf_r+0x1c4>
 800c2ee:	b1b0      	cbz	r0, 800c31e <_vfiprintf_r+0x156>
 800c2f0:	9207      	str	r2, [sp, #28]
 800c2f2:	e014      	b.n	800c31e <_vfiprintf_r+0x156>
 800c2f4:	eba0 0308 	sub.w	r3, r0, r8
 800c2f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	9304      	str	r3, [sp, #16]
 800c300:	46a2      	mov	sl, r4
 800c302:	e7d2      	b.n	800c2aa <_vfiprintf_r+0xe2>
 800c304:	9b03      	ldr	r3, [sp, #12]
 800c306:	1d19      	adds	r1, r3, #4
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	9103      	str	r1, [sp, #12]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	bfbb      	ittet	lt
 800c310:	425b      	neglt	r3, r3
 800c312:	f042 0202 	orrlt.w	r2, r2, #2
 800c316:	9307      	strge	r3, [sp, #28]
 800c318:	9307      	strlt	r3, [sp, #28]
 800c31a:	bfb8      	it	lt
 800c31c:	9204      	strlt	r2, [sp, #16]
 800c31e:	7823      	ldrb	r3, [r4, #0]
 800c320:	2b2e      	cmp	r3, #46	; 0x2e
 800c322:	d10c      	bne.n	800c33e <_vfiprintf_r+0x176>
 800c324:	7863      	ldrb	r3, [r4, #1]
 800c326:	2b2a      	cmp	r3, #42	; 0x2a
 800c328:	d135      	bne.n	800c396 <_vfiprintf_r+0x1ce>
 800c32a:	9b03      	ldr	r3, [sp, #12]
 800c32c:	1d1a      	adds	r2, r3, #4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	9203      	str	r2, [sp, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	bfb8      	it	lt
 800c336:	f04f 33ff 	movlt.w	r3, #4294967295
 800c33a:	3402      	adds	r4, #2
 800c33c:	9305      	str	r3, [sp, #20]
 800c33e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c424 <_vfiprintf_r+0x25c>
 800c342:	7821      	ldrb	r1, [r4, #0]
 800c344:	2203      	movs	r2, #3
 800c346:	4650      	mov	r0, sl
 800c348:	f7f3 ff52 	bl	80001f0 <memchr>
 800c34c:	b140      	cbz	r0, 800c360 <_vfiprintf_r+0x198>
 800c34e:	2340      	movs	r3, #64	; 0x40
 800c350:	eba0 000a 	sub.w	r0, r0, sl
 800c354:	fa03 f000 	lsl.w	r0, r3, r0
 800c358:	9b04      	ldr	r3, [sp, #16]
 800c35a:	4303      	orrs	r3, r0
 800c35c:	3401      	adds	r4, #1
 800c35e:	9304      	str	r3, [sp, #16]
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	482c      	ldr	r0, [pc, #176]	; (800c418 <_vfiprintf_r+0x250>)
 800c366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c36a:	2206      	movs	r2, #6
 800c36c:	f7f3 ff40 	bl	80001f0 <memchr>
 800c370:	2800      	cmp	r0, #0
 800c372:	d03f      	beq.n	800c3f4 <_vfiprintf_r+0x22c>
 800c374:	4b29      	ldr	r3, [pc, #164]	; (800c41c <_vfiprintf_r+0x254>)
 800c376:	bb1b      	cbnz	r3, 800c3c0 <_vfiprintf_r+0x1f8>
 800c378:	9b03      	ldr	r3, [sp, #12]
 800c37a:	3307      	adds	r3, #7
 800c37c:	f023 0307 	bic.w	r3, r3, #7
 800c380:	3308      	adds	r3, #8
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c386:	443b      	add	r3, r7
 800c388:	9309      	str	r3, [sp, #36]	; 0x24
 800c38a:	e767      	b.n	800c25c <_vfiprintf_r+0x94>
 800c38c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c390:	460c      	mov	r4, r1
 800c392:	2001      	movs	r0, #1
 800c394:	e7a5      	b.n	800c2e2 <_vfiprintf_r+0x11a>
 800c396:	2300      	movs	r3, #0
 800c398:	3401      	adds	r4, #1
 800c39a:	9305      	str	r3, [sp, #20]
 800c39c:	4619      	mov	r1, r3
 800c39e:	f04f 0c0a 	mov.w	ip, #10
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a8:	3a30      	subs	r2, #48	; 0x30
 800c3aa:	2a09      	cmp	r2, #9
 800c3ac:	d903      	bls.n	800c3b6 <_vfiprintf_r+0x1ee>
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d0c5      	beq.n	800c33e <_vfiprintf_r+0x176>
 800c3b2:	9105      	str	r1, [sp, #20]
 800c3b4:	e7c3      	b.n	800c33e <_vfiprintf_r+0x176>
 800c3b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ba:	4604      	mov	r4, r0
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e7f0      	b.n	800c3a2 <_vfiprintf_r+0x1da>
 800c3c0:	ab03      	add	r3, sp, #12
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	462a      	mov	r2, r5
 800c3c6:	4b16      	ldr	r3, [pc, #88]	; (800c420 <_vfiprintf_r+0x258>)
 800c3c8:	a904      	add	r1, sp, #16
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7fd fe10 	bl	8009ff0 <_printf_float>
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	1c78      	adds	r0, r7, #1
 800c3d4:	d1d6      	bne.n	800c384 <_vfiprintf_r+0x1bc>
 800c3d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d8:	07d9      	lsls	r1, r3, #31
 800c3da:	d405      	bmi.n	800c3e8 <_vfiprintf_r+0x220>
 800c3dc:	89ab      	ldrh	r3, [r5, #12]
 800c3de:	059a      	lsls	r2, r3, #22
 800c3e0:	d402      	bmi.n	800c3e8 <_vfiprintf_r+0x220>
 800c3e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3e4:	f000 faaf 	bl	800c946 <__retarget_lock_release_recursive>
 800c3e8:	89ab      	ldrh	r3, [r5, #12]
 800c3ea:	065b      	lsls	r3, r3, #25
 800c3ec:	f53f af12 	bmi.w	800c214 <_vfiprintf_r+0x4c>
 800c3f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3f2:	e711      	b.n	800c218 <_vfiprintf_r+0x50>
 800c3f4:	ab03      	add	r3, sp, #12
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	4b09      	ldr	r3, [pc, #36]	; (800c420 <_vfiprintf_r+0x258>)
 800c3fc:	a904      	add	r1, sp, #16
 800c3fe:	4630      	mov	r0, r6
 800c400:	f7fe f89a 	bl	800a538 <_printf_i>
 800c404:	e7e4      	b.n	800c3d0 <_vfiprintf_r+0x208>
 800c406:	bf00      	nop
 800c408:	0800d75c 	.word	0x0800d75c
 800c40c:	0800d77c 	.word	0x0800d77c
 800c410:	0800d73c 	.word	0x0800d73c
 800c414:	0800d5e4 	.word	0x0800d5e4
 800c418:	0800d5ee 	.word	0x0800d5ee
 800c41c:	08009ff1 	.word	0x08009ff1
 800c420:	0800c1a3 	.word	0x0800c1a3
 800c424:	0800d5ea 	.word	0x0800d5ea

0800c428 <__swbuf_r>:
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42a:	460e      	mov	r6, r1
 800c42c:	4614      	mov	r4, r2
 800c42e:	4605      	mov	r5, r0
 800c430:	b118      	cbz	r0, 800c43a <__swbuf_r+0x12>
 800c432:	6983      	ldr	r3, [r0, #24]
 800c434:	b90b      	cbnz	r3, 800c43a <__swbuf_r+0x12>
 800c436:	f000 f9e7 	bl	800c808 <__sinit>
 800c43a:	4b21      	ldr	r3, [pc, #132]	; (800c4c0 <__swbuf_r+0x98>)
 800c43c:	429c      	cmp	r4, r3
 800c43e:	d12b      	bne.n	800c498 <__swbuf_r+0x70>
 800c440:	686c      	ldr	r4, [r5, #4]
 800c442:	69a3      	ldr	r3, [r4, #24]
 800c444:	60a3      	str	r3, [r4, #8]
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	071a      	lsls	r2, r3, #28
 800c44a:	d52f      	bpl.n	800c4ac <__swbuf_r+0x84>
 800c44c:	6923      	ldr	r3, [r4, #16]
 800c44e:	b36b      	cbz	r3, 800c4ac <__swbuf_r+0x84>
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	1ac0      	subs	r0, r0, r3
 800c456:	6963      	ldr	r3, [r4, #20]
 800c458:	b2f6      	uxtb	r6, r6
 800c45a:	4283      	cmp	r3, r0
 800c45c:	4637      	mov	r7, r6
 800c45e:	dc04      	bgt.n	800c46a <__swbuf_r+0x42>
 800c460:	4621      	mov	r1, r4
 800c462:	4628      	mov	r0, r5
 800c464:	f000 f93c 	bl	800c6e0 <_fflush_r>
 800c468:	bb30      	cbnz	r0, 800c4b8 <__swbuf_r+0x90>
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	60a3      	str	r3, [r4, #8]
 800c470:	6823      	ldr	r3, [r4, #0]
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	6022      	str	r2, [r4, #0]
 800c476:	701e      	strb	r6, [r3, #0]
 800c478:	6963      	ldr	r3, [r4, #20]
 800c47a:	3001      	adds	r0, #1
 800c47c:	4283      	cmp	r3, r0
 800c47e:	d004      	beq.n	800c48a <__swbuf_r+0x62>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	07db      	lsls	r3, r3, #31
 800c484:	d506      	bpl.n	800c494 <__swbuf_r+0x6c>
 800c486:	2e0a      	cmp	r6, #10
 800c488:	d104      	bne.n	800c494 <__swbuf_r+0x6c>
 800c48a:	4621      	mov	r1, r4
 800c48c:	4628      	mov	r0, r5
 800c48e:	f000 f927 	bl	800c6e0 <_fflush_r>
 800c492:	b988      	cbnz	r0, 800c4b8 <__swbuf_r+0x90>
 800c494:	4638      	mov	r0, r7
 800c496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c498:	4b0a      	ldr	r3, [pc, #40]	; (800c4c4 <__swbuf_r+0x9c>)
 800c49a:	429c      	cmp	r4, r3
 800c49c:	d101      	bne.n	800c4a2 <__swbuf_r+0x7a>
 800c49e:	68ac      	ldr	r4, [r5, #8]
 800c4a0:	e7cf      	b.n	800c442 <__swbuf_r+0x1a>
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <__swbuf_r+0xa0>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	bf08      	it	eq
 800c4a8:	68ec      	ldreq	r4, [r5, #12]
 800c4aa:	e7ca      	b.n	800c442 <__swbuf_r+0x1a>
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 f81a 	bl	800c4e8 <__swsetup_r>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d0cb      	beq.n	800c450 <__swbuf_r+0x28>
 800c4b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c4bc:	e7ea      	b.n	800c494 <__swbuf_r+0x6c>
 800c4be:	bf00      	nop
 800c4c0:	0800d75c 	.word	0x0800d75c
 800c4c4:	0800d77c 	.word	0x0800d77c
 800c4c8:	0800d73c 	.word	0x0800d73c

0800c4cc <__ascii_wctomb>:
 800c4cc:	b149      	cbz	r1, 800c4e2 <__ascii_wctomb+0x16>
 800c4ce:	2aff      	cmp	r2, #255	; 0xff
 800c4d0:	bf85      	ittet	hi
 800c4d2:	238a      	movhi	r3, #138	; 0x8a
 800c4d4:	6003      	strhi	r3, [r0, #0]
 800c4d6:	700a      	strbls	r2, [r1, #0]
 800c4d8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4dc:	bf98      	it	ls
 800c4de:	2001      	movls	r0, #1
 800c4e0:	4770      	bx	lr
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4770      	bx	lr
	...

0800c4e8 <__swsetup_r>:
 800c4e8:	4b32      	ldr	r3, [pc, #200]	; (800c5b4 <__swsetup_r+0xcc>)
 800c4ea:	b570      	push	{r4, r5, r6, lr}
 800c4ec:	681d      	ldr	r5, [r3, #0]
 800c4ee:	4606      	mov	r6, r0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	b125      	cbz	r5, 800c4fe <__swsetup_r+0x16>
 800c4f4:	69ab      	ldr	r3, [r5, #24]
 800c4f6:	b913      	cbnz	r3, 800c4fe <__swsetup_r+0x16>
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f000 f985 	bl	800c808 <__sinit>
 800c4fe:	4b2e      	ldr	r3, [pc, #184]	; (800c5b8 <__swsetup_r+0xd0>)
 800c500:	429c      	cmp	r4, r3
 800c502:	d10f      	bne.n	800c524 <__swsetup_r+0x3c>
 800c504:	686c      	ldr	r4, [r5, #4]
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c50c:	0719      	lsls	r1, r3, #28
 800c50e:	d42c      	bmi.n	800c56a <__swsetup_r+0x82>
 800c510:	06dd      	lsls	r5, r3, #27
 800c512:	d411      	bmi.n	800c538 <__swsetup_r+0x50>
 800c514:	2309      	movs	r3, #9
 800c516:	6033      	str	r3, [r6, #0]
 800c518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	f04f 30ff 	mov.w	r0, #4294967295
 800c522:	e03e      	b.n	800c5a2 <__swsetup_r+0xba>
 800c524:	4b25      	ldr	r3, [pc, #148]	; (800c5bc <__swsetup_r+0xd4>)
 800c526:	429c      	cmp	r4, r3
 800c528:	d101      	bne.n	800c52e <__swsetup_r+0x46>
 800c52a:	68ac      	ldr	r4, [r5, #8]
 800c52c:	e7eb      	b.n	800c506 <__swsetup_r+0x1e>
 800c52e:	4b24      	ldr	r3, [pc, #144]	; (800c5c0 <__swsetup_r+0xd8>)
 800c530:	429c      	cmp	r4, r3
 800c532:	bf08      	it	eq
 800c534:	68ec      	ldreq	r4, [r5, #12]
 800c536:	e7e6      	b.n	800c506 <__swsetup_r+0x1e>
 800c538:	0758      	lsls	r0, r3, #29
 800c53a:	d512      	bpl.n	800c562 <__swsetup_r+0x7a>
 800c53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c53e:	b141      	cbz	r1, 800c552 <__swsetup_r+0x6a>
 800c540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c544:	4299      	cmp	r1, r3
 800c546:	d002      	beq.n	800c54e <__swsetup_r+0x66>
 800c548:	4630      	mov	r0, r6
 800c54a:	f7ff fb6f 	bl	800bc2c <_free_r>
 800c54e:	2300      	movs	r3, #0
 800c550:	6363      	str	r3, [r4, #52]	; 0x34
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	2300      	movs	r3, #0
 800c55c:	6063      	str	r3, [r4, #4]
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	89a3      	ldrh	r3, [r4, #12]
 800c564:	f043 0308 	orr.w	r3, r3, #8
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	b94b      	cbnz	r3, 800c582 <__swsetup_r+0x9a>
 800c56e:	89a3      	ldrh	r3, [r4, #12]
 800c570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c578:	d003      	beq.n	800c582 <__swsetup_r+0x9a>
 800c57a:	4621      	mov	r1, r4
 800c57c:	4630      	mov	r0, r6
 800c57e:	f000 fa07 	bl	800c990 <__smakebuf_r>
 800c582:	89a0      	ldrh	r0, [r4, #12]
 800c584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c588:	f010 0301 	ands.w	r3, r0, #1
 800c58c:	d00a      	beq.n	800c5a4 <__swsetup_r+0xbc>
 800c58e:	2300      	movs	r3, #0
 800c590:	60a3      	str	r3, [r4, #8]
 800c592:	6963      	ldr	r3, [r4, #20]
 800c594:	425b      	negs	r3, r3
 800c596:	61a3      	str	r3, [r4, #24]
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	b943      	cbnz	r3, 800c5ae <__swsetup_r+0xc6>
 800c59c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c5a0:	d1ba      	bne.n	800c518 <__swsetup_r+0x30>
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
 800c5a4:	0781      	lsls	r1, r0, #30
 800c5a6:	bf58      	it	pl
 800c5a8:	6963      	ldrpl	r3, [r4, #20]
 800c5aa:	60a3      	str	r3, [r4, #8]
 800c5ac:	e7f4      	b.n	800c598 <__swsetup_r+0xb0>
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	e7f7      	b.n	800c5a2 <__swsetup_r+0xba>
 800c5b2:	bf00      	nop
 800c5b4:	20000024 	.word	0x20000024
 800c5b8:	0800d75c 	.word	0x0800d75c
 800c5bc:	0800d77c 	.word	0x0800d77c
 800c5c0:	0800d73c 	.word	0x0800d73c

0800c5c4 <abort>:
 800c5c4:	b508      	push	{r3, lr}
 800c5c6:	2006      	movs	r0, #6
 800c5c8:	f000 fa52 	bl	800ca70 <raise>
 800c5cc:	2001      	movs	r0, #1
 800c5ce:	f7f6 fba1 	bl	8002d14 <_exit>
	...

0800c5d4 <__sflush_r>:
 800c5d4:	898a      	ldrh	r2, [r1, #12]
 800c5d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5da:	4605      	mov	r5, r0
 800c5dc:	0710      	lsls	r0, r2, #28
 800c5de:	460c      	mov	r4, r1
 800c5e0:	d458      	bmi.n	800c694 <__sflush_r+0xc0>
 800c5e2:	684b      	ldr	r3, [r1, #4]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dc05      	bgt.n	800c5f4 <__sflush_r+0x20>
 800c5e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	dc02      	bgt.n	800c5f4 <__sflush_r+0x20>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5f6:	2e00      	cmp	r6, #0
 800c5f8:	d0f9      	beq.n	800c5ee <__sflush_r+0x1a>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c600:	682f      	ldr	r7, [r5, #0]
 800c602:	602b      	str	r3, [r5, #0]
 800c604:	d032      	beq.n	800c66c <__sflush_r+0x98>
 800c606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	075a      	lsls	r2, r3, #29
 800c60c:	d505      	bpl.n	800c61a <__sflush_r+0x46>
 800c60e:	6863      	ldr	r3, [r4, #4]
 800c610:	1ac0      	subs	r0, r0, r3
 800c612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c614:	b10b      	cbz	r3, 800c61a <__sflush_r+0x46>
 800c616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c618:	1ac0      	subs	r0, r0, r3
 800c61a:	2300      	movs	r3, #0
 800c61c:	4602      	mov	r2, r0
 800c61e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c620:	6a21      	ldr	r1, [r4, #32]
 800c622:	4628      	mov	r0, r5
 800c624:	47b0      	blx	r6
 800c626:	1c43      	adds	r3, r0, #1
 800c628:	89a3      	ldrh	r3, [r4, #12]
 800c62a:	d106      	bne.n	800c63a <__sflush_r+0x66>
 800c62c:	6829      	ldr	r1, [r5, #0]
 800c62e:	291d      	cmp	r1, #29
 800c630:	d82c      	bhi.n	800c68c <__sflush_r+0xb8>
 800c632:	4a2a      	ldr	r2, [pc, #168]	; (800c6dc <__sflush_r+0x108>)
 800c634:	40ca      	lsrs	r2, r1
 800c636:	07d6      	lsls	r6, r2, #31
 800c638:	d528      	bpl.n	800c68c <__sflush_r+0xb8>
 800c63a:	2200      	movs	r2, #0
 800c63c:	6062      	str	r2, [r4, #4]
 800c63e:	04d9      	lsls	r1, r3, #19
 800c640:	6922      	ldr	r2, [r4, #16]
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	d504      	bpl.n	800c650 <__sflush_r+0x7c>
 800c646:	1c42      	adds	r2, r0, #1
 800c648:	d101      	bne.n	800c64e <__sflush_r+0x7a>
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	b903      	cbnz	r3, 800c650 <__sflush_r+0x7c>
 800c64e:	6560      	str	r0, [r4, #84]	; 0x54
 800c650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c652:	602f      	str	r7, [r5, #0]
 800c654:	2900      	cmp	r1, #0
 800c656:	d0ca      	beq.n	800c5ee <__sflush_r+0x1a>
 800c658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c65c:	4299      	cmp	r1, r3
 800c65e:	d002      	beq.n	800c666 <__sflush_r+0x92>
 800c660:	4628      	mov	r0, r5
 800c662:	f7ff fae3 	bl	800bc2c <_free_r>
 800c666:	2000      	movs	r0, #0
 800c668:	6360      	str	r0, [r4, #52]	; 0x34
 800c66a:	e7c1      	b.n	800c5f0 <__sflush_r+0x1c>
 800c66c:	6a21      	ldr	r1, [r4, #32]
 800c66e:	2301      	movs	r3, #1
 800c670:	4628      	mov	r0, r5
 800c672:	47b0      	blx	r6
 800c674:	1c41      	adds	r1, r0, #1
 800c676:	d1c7      	bne.n	800c608 <__sflush_r+0x34>
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0c4      	beq.n	800c608 <__sflush_r+0x34>
 800c67e:	2b1d      	cmp	r3, #29
 800c680:	d001      	beq.n	800c686 <__sflush_r+0xb2>
 800c682:	2b16      	cmp	r3, #22
 800c684:	d101      	bne.n	800c68a <__sflush_r+0xb6>
 800c686:	602f      	str	r7, [r5, #0]
 800c688:	e7b1      	b.n	800c5ee <__sflush_r+0x1a>
 800c68a:	89a3      	ldrh	r3, [r4, #12]
 800c68c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c690:	81a3      	strh	r3, [r4, #12]
 800c692:	e7ad      	b.n	800c5f0 <__sflush_r+0x1c>
 800c694:	690f      	ldr	r7, [r1, #16]
 800c696:	2f00      	cmp	r7, #0
 800c698:	d0a9      	beq.n	800c5ee <__sflush_r+0x1a>
 800c69a:	0793      	lsls	r3, r2, #30
 800c69c:	680e      	ldr	r6, [r1, #0]
 800c69e:	bf08      	it	eq
 800c6a0:	694b      	ldreq	r3, [r1, #20]
 800c6a2:	600f      	str	r7, [r1, #0]
 800c6a4:	bf18      	it	ne
 800c6a6:	2300      	movne	r3, #0
 800c6a8:	eba6 0807 	sub.w	r8, r6, r7
 800c6ac:	608b      	str	r3, [r1, #8]
 800c6ae:	f1b8 0f00 	cmp.w	r8, #0
 800c6b2:	dd9c      	ble.n	800c5ee <__sflush_r+0x1a>
 800c6b4:	6a21      	ldr	r1, [r4, #32]
 800c6b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6b8:	4643      	mov	r3, r8
 800c6ba:	463a      	mov	r2, r7
 800c6bc:	4628      	mov	r0, r5
 800c6be:	47b0      	blx	r6
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	dc06      	bgt.n	800c6d2 <__sflush_r+0xfe>
 800c6c4:	89a3      	ldrh	r3, [r4, #12]
 800c6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ca:	81a3      	strh	r3, [r4, #12]
 800c6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d0:	e78e      	b.n	800c5f0 <__sflush_r+0x1c>
 800c6d2:	4407      	add	r7, r0
 800c6d4:	eba8 0800 	sub.w	r8, r8, r0
 800c6d8:	e7e9      	b.n	800c6ae <__sflush_r+0xda>
 800c6da:	bf00      	nop
 800c6dc:	20400001 	.word	0x20400001

0800c6e0 <_fflush_r>:
 800c6e0:	b538      	push	{r3, r4, r5, lr}
 800c6e2:	690b      	ldr	r3, [r1, #16]
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	b913      	cbnz	r3, 800c6f0 <_fflush_r+0x10>
 800c6ea:	2500      	movs	r5, #0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
 800c6f0:	b118      	cbz	r0, 800c6fa <_fflush_r+0x1a>
 800c6f2:	6983      	ldr	r3, [r0, #24]
 800c6f4:	b90b      	cbnz	r3, 800c6fa <_fflush_r+0x1a>
 800c6f6:	f000 f887 	bl	800c808 <__sinit>
 800c6fa:	4b14      	ldr	r3, [pc, #80]	; (800c74c <_fflush_r+0x6c>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	d11b      	bne.n	800c738 <_fflush_r+0x58>
 800c700:	686c      	ldr	r4, [r5, #4]
 800c702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0ef      	beq.n	800c6ea <_fflush_r+0xa>
 800c70a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c70c:	07d0      	lsls	r0, r2, #31
 800c70e:	d404      	bmi.n	800c71a <_fflush_r+0x3a>
 800c710:	0599      	lsls	r1, r3, #22
 800c712:	d402      	bmi.n	800c71a <_fflush_r+0x3a>
 800c714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c716:	f000 f915 	bl	800c944 <__retarget_lock_acquire_recursive>
 800c71a:	4628      	mov	r0, r5
 800c71c:	4621      	mov	r1, r4
 800c71e:	f7ff ff59 	bl	800c5d4 <__sflush_r>
 800c722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c724:	07da      	lsls	r2, r3, #31
 800c726:	4605      	mov	r5, r0
 800c728:	d4e0      	bmi.n	800c6ec <_fflush_r+0xc>
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	059b      	lsls	r3, r3, #22
 800c72e:	d4dd      	bmi.n	800c6ec <_fflush_r+0xc>
 800c730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c732:	f000 f908 	bl	800c946 <__retarget_lock_release_recursive>
 800c736:	e7d9      	b.n	800c6ec <_fflush_r+0xc>
 800c738:	4b05      	ldr	r3, [pc, #20]	; (800c750 <_fflush_r+0x70>)
 800c73a:	429c      	cmp	r4, r3
 800c73c:	d101      	bne.n	800c742 <_fflush_r+0x62>
 800c73e:	68ac      	ldr	r4, [r5, #8]
 800c740:	e7df      	b.n	800c702 <_fflush_r+0x22>
 800c742:	4b04      	ldr	r3, [pc, #16]	; (800c754 <_fflush_r+0x74>)
 800c744:	429c      	cmp	r4, r3
 800c746:	bf08      	it	eq
 800c748:	68ec      	ldreq	r4, [r5, #12]
 800c74a:	e7da      	b.n	800c702 <_fflush_r+0x22>
 800c74c:	0800d75c 	.word	0x0800d75c
 800c750:	0800d77c 	.word	0x0800d77c
 800c754:	0800d73c 	.word	0x0800d73c

0800c758 <std>:
 800c758:	2300      	movs	r3, #0
 800c75a:	b510      	push	{r4, lr}
 800c75c:	4604      	mov	r4, r0
 800c75e:	e9c0 3300 	strd	r3, r3, [r0]
 800c762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c766:	6083      	str	r3, [r0, #8]
 800c768:	8181      	strh	r1, [r0, #12]
 800c76a:	6643      	str	r3, [r0, #100]	; 0x64
 800c76c:	81c2      	strh	r2, [r0, #14]
 800c76e:	6183      	str	r3, [r0, #24]
 800c770:	4619      	mov	r1, r3
 800c772:	2208      	movs	r2, #8
 800c774:	305c      	adds	r0, #92	; 0x5c
 800c776:	f7fd fb93 	bl	8009ea0 <memset>
 800c77a:	4b05      	ldr	r3, [pc, #20]	; (800c790 <std+0x38>)
 800c77c:	6263      	str	r3, [r4, #36]	; 0x24
 800c77e:	4b05      	ldr	r3, [pc, #20]	; (800c794 <std+0x3c>)
 800c780:	62a3      	str	r3, [r4, #40]	; 0x28
 800c782:	4b05      	ldr	r3, [pc, #20]	; (800c798 <std+0x40>)
 800c784:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c786:	4b05      	ldr	r3, [pc, #20]	; (800c79c <std+0x44>)
 800c788:	6224      	str	r4, [r4, #32]
 800c78a:	6323      	str	r3, [r4, #48]	; 0x30
 800c78c:	bd10      	pop	{r4, pc}
 800c78e:	bf00      	nop
 800c790:	0800caa9 	.word	0x0800caa9
 800c794:	0800cacb 	.word	0x0800cacb
 800c798:	0800cb03 	.word	0x0800cb03
 800c79c:	0800cb27 	.word	0x0800cb27

0800c7a0 <_cleanup_r>:
 800c7a0:	4901      	ldr	r1, [pc, #4]	; (800c7a8 <_cleanup_r+0x8>)
 800c7a2:	f000 b8af 	b.w	800c904 <_fwalk_reent>
 800c7a6:	bf00      	nop
 800c7a8:	0800c6e1 	.word	0x0800c6e1

0800c7ac <__sfmoreglue>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	1e4a      	subs	r2, r1, #1
 800c7b0:	2568      	movs	r5, #104	; 0x68
 800c7b2:	4355      	muls	r5, r2
 800c7b4:	460e      	mov	r6, r1
 800c7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c7ba:	f7ff fa87 	bl	800bccc <_malloc_r>
 800c7be:	4604      	mov	r4, r0
 800c7c0:	b140      	cbz	r0, 800c7d4 <__sfmoreglue+0x28>
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c7c8:	300c      	adds	r0, #12
 800c7ca:	60a0      	str	r0, [r4, #8]
 800c7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c7d0:	f7fd fb66 	bl	8009ea0 <memset>
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}

0800c7d8 <__sfp_lock_acquire>:
 800c7d8:	4801      	ldr	r0, [pc, #4]	; (800c7e0 <__sfp_lock_acquire+0x8>)
 800c7da:	f000 b8b3 	b.w	800c944 <__retarget_lock_acquire_recursive>
 800c7de:	bf00      	nop
 800c7e0:	20001190 	.word	0x20001190

0800c7e4 <__sfp_lock_release>:
 800c7e4:	4801      	ldr	r0, [pc, #4]	; (800c7ec <__sfp_lock_release+0x8>)
 800c7e6:	f000 b8ae 	b.w	800c946 <__retarget_lock_release_recursive>
 800c7ea:	bf00      	nop
 800c7ec:	20001190 	.word	0x20001190

0800c7f0 <__sinit_lock_acquire>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	; (800c7f8 <__sinit_lock_acquire+0x8>)
 800c7f2:	f000 b8a7 	b.w	800c944 <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	2000118b 	.word	0x2000118b

0800c7fc <__sinit_lock_release>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	; (800c804 <__sinit_lock_release+0x8>)
 800c7fe:	f000 b8a2 	b.w	800c946 <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	2000118b 	.word	0x2000118b

0800c808 <__sinit>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	4604      	mov	r4, r0
 800c80c:	f7ff fff0 	bl	800c7f0 <__sinit_lock_acquire>
 800c810:	69a3      	ldr	r3, [r4, #24]
 800c812:	b11b      	cbz	r3, 800c81c <__sinit+0x14>
 800c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c818:	f7ff bff0 	b.w	800c7fc <__sinit_lock_release>
 800c81c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c820:	6523      	str	r3, [r4, #80]	; 0x50
 800c822:	4b13      	ldr	r3, [pc, #76]	; (800c870 <__sinit+0x68>)
 800c824:	4a13      	ldr	r2, [pc, #76]	; (800c874 <__sinit+0x6c>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	62a2      	str	r2, [r4, #40]	; 0x28
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	bf04      	itt	eq
 800c82e:	2301      	moveq	r3, #1
 800c830:	61a3      	streq	r3, [r4, #24]
 800c832:	4620      	mov	r0, r4
 800c834:	f000 f820 	bl	800c878 <__sfp>
 800c838:	6060      	str	r0, [r4, #4]
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 f81c 	bl	800c878 <__sfp>
 800c840:	60a0      	str	r0, [r4, #8]
 800c842:	4620      	mov	r0, r4
 800c844:	f000 f818 	bl	800c878 <__sfp>
 800c848:	2200      	movs	r2, #0
 800c84a:	60e0      	str	r0, [r4, #12]
 800c84c:	2104      	movs	r1, #4
 800c84e:	6860      	ldr	r0, [r4, #4]
 800c850:	f7ff ff82 	bl	800c758 <std>
 800c854:	68a0      	ldr	r0, [r4, #8]
 800c856:	2201      	movs	r2, #1
 800c858:	2109      	movs	r1, #9
 800c85a:	f7ff ff7d 	bl	800c758 <std>
 800c85e:	68e0      	ldr	r0, [r4, #12]
 800c860:	2202      	movs	r2, #2
 800c862:	2112      	movs	r1, #18
 800c864:	f7ff ff78 	bl	800c758 <std>
 800c868:	2301      	movs	r3, #1
 800c86a:	61a3      	str	r3, [r4, #24]
 800c86c:	e7d2      	b.n	800c814 <__sinit+0xc>
 800c86e:	bf00      	nop
 800c870:	0800d3b8 	.word	0x0800d3b8
 800c874:	0800c7a1 	.word	0x0800c7a1

0800c878 <__sfp>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	4607      	mov	r7, r0
 800c87c:	f7ff ffac 	bl	800c7d8 <__sfp_lock_acquire>
 800c880:	4b1e      	ldr	r3, [pc, #120]	; (800c8fc <__sfp+0x84>)
 800c882:	681e      	ldr	r6, [r3, #0]
 800c884:	69b3      	ldr	r3, [r6, #24]
 800c886:	b913      	cbnz	r3, 800c88e <__sfp+0x16>
 800c888:	4630      	mov	r0, r6
 800c88a:	f7ff ffbd 	bl	800c808 <__sinit>
 800c88e:	3648      	adds	r6, #72	; 0x48
 800c890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c894:	3b01      	subs	r3, #1
 800c896:	d503      	bpl.n	800c8a0 <__sfp+0x28>
 800c898:	6833      	ldr	r3, [r6, #0]
 800c89a:	b30b      	cbz	r3, 800c8e0 <__sfp+0x68>
 800c89c:	6836      	ldr	r6, [r6, #0]
 800c89e:	e7f7      	b.n	800c890 <__sfp+0x18>
 800c8a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c8a4:	b9d5      	cbnz	r5, 800c8dc <__sfp+0x64>
 800c8a6:	4b16      	ldr	r3, [pc, #88]	; (800c900 <__sfp+0x88>)
 800c8a8:	60e3      	str	r3, [r4, #12]
 800c8aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c8b0:	f000 f847 	bl	800c942 <__retarget_lock_init_recursive>
 800c8b4:	f7ff ff96 	bl	800c7e4 <__sfp_lock_release>
 800c8b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c8bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c8c0:	6025      	str	r5, [r4, #0]
 800c8c2:	61a5      	str	r5, [r4, #24]
 800c8c4:	2208      	movs	r2, #8
 800c8c6:	4629      	mov	r1, r5
 800c8c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c8cc:	f7fd fae8 	bl	8009ea0 <memset>
 800c8d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c8d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8dc:	3468      	adds	r4, #104	; 0x68
 800c8de:	e7d9      	b.n	800c894 <__sfp+0x1c>
 800c8e0:	2104      	movs	r1, #4
 800c8e2:	4638      	mov	r0, r7
 800c8e4:	f7ff ff62 	bl	800c7ac <__sfmoreglue>
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	6030      	str	r0, [r6, #0]
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d1d5      	bne.n	800c89c <__sfp+0x24>
 800c8f0:	f7ff ff78 	bl	800c7e4 <__sfp_lock_release>
 800c8f4:	230c      	movs	r3, #12
 800c8f6:	603b      	str	r3, [r7, #0]
 800c8f8:	e7ee      	b.n	800c8d8 <__sfp+0x60>
 800c8fa:	bf00      	nop
 800c8fc:	0800d3b8 	.word	0x0800d3b8
 800c900:	ffff0001 	.word	0xffff0001

0800c904 <_fwalk_reent>:
 800c904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c908:	4606      	mov	r6, r0
 800c90a:	4688      	mov	r8, r1
 800c90c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c910:	2700      	movs	r7, #0
 800c912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c916:	f1b9 0901 	subs.w	r9, r9, #1
 800c91a:	d505      	bpl.n	800c928 <_fwalk_reent+0x24>
 800c91c:	6824      	ldr	r4, [r4, #0]
 800c91e:	2c00      	cmp	r4, #0
 800c920:	d1f7      	bne.n	800c912 <_fwalk_reent+0xe>
 800c922:	4638      	mov	r0, r7
 800c924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c928:	89ab      	ldrh	r3, [r5, #12]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d907      	bls.n	800c93e <_fwalk_reent+0x3a>
 800c92e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c932:	3301      	adds	r3, #1
 800c934:	d003      	beq.n	800c93e <_fwalk_reent+0x3a>
 800c936:	4629      	mov	r1, r5
 800c938:	4630      	mov	r0, r6
 800c93a:	47c0      	blx	r8
 800c93c:	4307      	orrs	r7, r0
 800c93e:	3568      	adds	r5, #104	; 0x68
 800c940:	e7e9      	b.n	800c916 <_fwalk_reent+0x12>

0800c942 <__retarget_lock_init_recursive>:
 800c942:	4770      	bx	lr

0800c944 <__retarget_lock_acquire_recursive>:
 800c944:	4770      	bx	lr

0800c946 <__retarget_lock_release_recursive>:
 800c946:	4770      	bx	lr

0800c948 <__swhatbuf_r>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	460e      	mov	r6, r1
 800c94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c950:	2900      	cmp	r1, #0
 800c952:	b096      	sub	sp, #88	; 0x58
 800c954:	4614      	mov	r4, r2
 800c956:	461d      	mov	r5, r3
 800c958:	da07      	bge.n	800c96a <__swhatbuf_r+0x22>
 800c95a:	2300      	movs	r3, #0
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	89b3      	ldrh	r3, [r6, #12]
 800c960:	061a      	lsls	r2, r3, #24
 800c962:	d410      	bmi.n	800c986 <__swhatbuf_r+0x3e>
 800c964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c968:	e00e      	b.n	800c988 <__swhatbuf_r+0x40>
 800c96a:	466a      	mov	r2, sp
 800c96c:	f000 f902 	bl	800cb74 <_fstat_r>
 800c970:	2800      	cmp	r0, #0
 800c972:	dbf2      	blt.n	800c95a <__swhatbuf_r+0x12>
 800c974:	9a01      	ldr	r2, [sp, #4]
 800c976:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c97a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c97e:	425a      	negs	r2, r3
 800c980:	415a      	adcs	r2, r3
 800c982:	602a      	str	r2, [r5, #0]
 800c984:	e7ee      	b.n	800c964 <__swhatbuf_r+0x1c>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	2000      	movs	r0, #0
 800c98a:	6023      	str	r3, [r4, #0]
 800c98c:	b016      	add	sp, #88	; 0x58
 800c98e:	bd70      	pop	{r4, r5, r6, pc}

0800c990 <__smakebuf_r>:
 800c990:	898b      	ldrh	r3, [r1, #12]
 800c992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c994:	079d      	lsls	r5, r3, #30
 800c996:	4606      	mov	r6, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	d507      	bpl.n	800c9ac <__smakebuf_r+0x1c>
 800c99c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c9a0:	6023      	str	r3, [r4, #0]
 800c9a2:	6123      	str	r3, [r4, #16]
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	6163      	str	r3, [r4, #20]
 800c9a8:	b002      	add	sp, #8
 800c9aa:	bd70      	pop	{r4, r5, r6, pc}
 800c9ac:	ab01      	add	r3, sp, #4
 800c9ae:	466a      	mov	r2, sp
 800c9b0:	f7ff ffca 	bl	800c948 <__swhatbuf_r>
 800c9b4:	9900      	ldr	r1, [sp, #0]
 800c9b6:	4605      	mov	r5, r0
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	f7ff f987 	bl	800bccc <_malloc_r>
 800c9be:	b948      	cbnz	r0, 800c9d4 <__smakebuf_r+0x44>
 800c9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c4:	059a      	lsls	r2, r3, #22
 800c9c6:	d4ef      	bmi.n	800c9a8 <__smakebuf_r+0x18>
 800c9c8:	f023 0303 	bic.w	r3, r3, #3
 800c9cc:	f043 0302 	orr.w	r3, r3, #2
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	e7e3      	b.n	800c99c <__smakebuf_r+0xc>
 800c9d4:	4b0d      	ldr	r3, [pc, #52]	; (800ca0c <__smakebuf_r+0x7c>)
 800c9d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	6020      	str	r0, [r4, #0]
 800c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	6163      	str	r3, [r4, #20]
 800c9e6:	9b01      	ldr	r3, [sp, #4]
 800c9e8:	6120      	str	r0, [r4, #16]
 800c9ea:	b15b      	cbz	r3, 800ca04 <__smakebuf_r+0x74>
 800c9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 f8d1 	bl	800cb98 <_isatty_r>
 800c9f6:	b128      	cbz	r0, 800ca04 <__smakebuf_r+0x74>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f023 0303 	bic.w	r3, r3, #3
 800c9fe:	f043 0301 	orr.w	r3, r3, #1
 800ca02:	81a3      	strh	r3, [r4, #12]
 800ca04:	89a0      	ldrh	r0, [r4, #12]
 800ca06:	4305      	orrs	r5, r0
 800ca08:	81a5      	strh	r5, [r4, #12]
 800ca0a:	e7cd      	b.n	800c9a8 <__smakebuf_r+0x18>
 800ca0c:	0800c7a1 	.word	0x0800c7a1

0800ca10 <_malloc_usable_size_r>:
 800ca10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca14:	1f18      	subs	r0, r3, #4
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfbc      	itt	lt
 800ca1a:	580b      	ldrlt	r3, [r1, r0]
 800ca1c:	18c0      	addlt	r0, r0, r3
 800ca1e:	4770      	bx	lr

0800ca20 <_raise_r>:
 800ca20:	291f      	cmp	r1, #31
 800ca22:	b538      	push	{r3, r4, r5, lr}
 800ca24:	4604      	mov	r4, r0
 800ca26:	460d      	mov	r5, r1
 800ca28:	d904      	bls.n	800ca34 <_raise_r+0x14>
 800ca2a:	2316      	movs	r3, #22
 800ca2c:	6003      	str	r3, [r0, #0]
 800ca2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ca36:	b112      	cbz	r2, 800ca3e <_raise_r+0x1e>
 800ca38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca3c:	b94b      	cbnz	r3, 800ca52 <_raise_r+0x32>
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f000 f830 	bl	800caa4 <_getpid_r>
 800ca44:	462a      	mov	r2, r5
 800ca46:	4601      	mov	r1, r0
 800ca48:	4620      	mov	r0, r4
 800ca4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca4e:	f000 b817 	b.w	800ca80 <_kill_r>
 800ca52:	2b01      	cmp	r3, #1
 800ca54:	d00a      	beq.n	800ca6c <_raise_r+0x4c>
 800ca56:	1c59      	adds	r1, r3, #1
 800ca58:	d103      	bne.n	800ca62 <_raise_r+0x42>
 800ca5a:	2316      	movs	r3, #22
 800ca5c:	6003      	str	r3, [r0, #0]
 800ca5e:	2001      	movs	r0, #1
 800ca60:	e7e7      	b.n	800ca32 <_raise_r+0x12>
 800ca62:	2400      	movs	r4, #0
 800ca64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca68:	4628      	mov	r0, r5
 800ca6a:	4798      	blx	r3
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	e7e0      	b.n	800ca32 <_raise_r+0x12>

0800ca70 <raise>:
 800ca70:	4b02      	ldr	r3, [pc, #8]	; (800ca7c <raise+0xc>)
 800ca72:	4601      	mov	r1, r0
 800ca74:	6818      	ldr	r0, [r3, #0]
 800ca76:	f7ff bfd3 	b.w	800ca20 <_raise_r>
 800ca7a:	bf00      	nop
 800ca7c:	20000024 	.word	0x20000024

0800ca80 <_kill_r>:
 800ca80:	b538      	push	{r3, r4, r5, lr}
 800ca82:	4d07      	ldr	r5, [pc, #28]	; (800caa0 <_kill_r+0x20>)
 800ca84:	2300      	movs	r3, #0
 800ca86:	4604      	mov	r4, r0
 800ca88:	4608      	mov	r0, r1
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	602b      	str	r3, [r5, #0]
 800ca8e:	f7f6 f931 	bl	8002cf4 <_kill>
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	d102      	bne.n	800ca9c <_kill_r+0x1c>
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	b103      	cbz	r3, 800ca9c <_kill_r+0x1c>
 800ca9a:	6023      	str	r3, [r4, #0]
 800ca9c:	bd38      	pop	{r3, r4, r5, pc}
 800ca9e:	bf00      	nop
 800caa0:	20001184 	.word	0x20001184

0800caa4 <_getpid_r>:
 800caa4:	f7f6 b91e 	b.w	8002ce4 <_getpid>

0800caa8 <__sread>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	460c      	mov	r4, r1
 800caac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab0:	f000 f894 	bl	800cbdc <_read_r>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	bfab      	itete	ge
 800cab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caba:	89a3      	ldrhlt	r3, [r4, #12]
 800cabc:	181b      	addge	r3, r3, r0
 800cabe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cac2:	bfac      	ite	ge
 800cac4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cac6:	81a3      	strhlt	r3, [r4, #12]
 800cac8:	bd10      	pop	{r4, pc}

0800caca <__swrite>:
 800caca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cace:	461f      	mov	r7, r3
 800cad0:	898b      	ldrh	r3, [r1, #12]
 800cad2:	05db      	lsls	r3, r3, #23
 800cad4:	4605      	mov	r5, r0
 800cad6:	460c      	mov	r4, r1
 800cad8:	4616      	mov	r6, r2
 800cada:	d505      	bpl.n	800cae8 <__swrite+0x1e>
 800cadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae0:	2302      	movs	r3, #2
 800cae2:	2200      	movs	r2, #0
 800cae4:	f000 f868 	bl	800cbb8 <_lseek_r>
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caf2:	81a3      	strh	r3, [r4, #12]
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	4628      	mov	r0, r5
 800cafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cafe:	f000 b817 	b.w	800cb30 <_write_r>

0800cb02 <__sseek>:
 800cb02:	b510      	push	{r4, lr}
 800cb04:	460c      	mov	r4, r1
 800cb06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0a:	f000 f855 	bl	800cbb8 <_lseek_r>
 800cb0e:	1c43      	adds	r3, r0, #1
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	bf15      	itete	ne
 800cb14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb1e:	81a3      	strheq	r3, [r4, #12]
 800cb20:	bf18      	it	ne
 800cb22:	81a3      	strhne	r3, [r4, #12]
 800cb24:	bd10      	pop	{r4, pc}

0800cb26 <__sclose>:
 800cb26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb2a:	f000 b813 	b.w	800cb54 <_close_r>
	...

0800cb30 <_write_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4d07      	ldr	r5, [pc, #28]	; (800cb50 <_write_r+0x20>)
 800cb34:	4604      	mov	r4, r0
 800cb36:	4608      	mov	r0, r1
 800cb38:	4611      	mov	r1, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	602a      	str	r2, [r5, #0]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	f7f6 f90f 	bl	8002d62 <_write>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_write_r+0x1e>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_write_r+0x1e>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	20001184 	.word	0x20001184

0800cb54 <_close_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4d06      	ldr	r5, [pc, #24]	; (800cb70 <_close_r+0x1c>)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f6 f91b 	bl	8002d9a <_close>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_close_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_close_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20001184 	.word	0x20001184

0800cb74 <_fstat_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	4d07      	ldr	r5, [pc, #28]	; (800cb94 <_fstat_r+0x20>)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f7f6 f916 	bl	8002db2 <_fstat>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_fstat_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_fstat_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	20001184 	.word	0x20001184

0800cb98 <_isatty_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4d06      	ldr	r5, [pc, #24]	; (800cbb4 <_isatty_r+0x1c>)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	602b      	str	r3, [r5, #0]
 800cba4:	f7f6 f915 	bl	8002dd2 <_isatty>
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	d102      	bne.n	800cbb2 <_isatty_r+0x1a>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	b103      	cbz	r3, 800cbb2 <_isatty_r+0x1a>
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	bd38      	pop	{r3, r4, r5, pc}
 800cbb4:	20001184 	.word	0x20001184

0800cbb8 <_lseek_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d07      	ldr	r5, [pc, #28]	; (800cbd8 <_lseek_r+0x20>)
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	4608      	mov	r0, r1
 800cbc0:	4611      	mov	r1, r2
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	602a      	str	r2, [r5, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f7f6 f90e 	bl	8002de8 <_lseek>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_lseek_r+0x1e>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_lseek_r+0x1e>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	20001184 	.word	0x20001184

0800cbdc <_read_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	; (800cbfc <_read_r+0x20>)
 800cbe0:	4604      	mov	r4, r0
 800cbe2:	4608      	mov	r0, r1
 800cbe4:	4611      	mov	r1, r2
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	602a      	str	r2, [r5, #0]
 800cbea:	461a      	mov	r2, r3
 800cbec:	f7f6 f89c 	bl	8002d28 <_read>
 800cbf0:	1c43      	adds	r3, r0, #1
 800cbf2:	d102      	bne.n	800cbfa <_read_r+0x1e>
 800cbf4:	682b      	ldr	r3, [r5, #0]
 800cbf6:	b103      	cbz	r3, 800cbfa <_read_r+0x1e>
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	bd38      	pop	{r3, r4, r5, pc}
 800cbfc:	20001184 	.word	0x20001184

0800cc00 <_init>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	bf00      	nop
 800cc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc06:	bc08      	pop	{r3}
 800cc08:	469e      	mov	lr, r3
 800cc0a:	4770      	bx	lr

0800cc0c <_fini>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr
